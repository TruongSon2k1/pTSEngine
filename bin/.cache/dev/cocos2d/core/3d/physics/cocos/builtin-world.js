
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/3d/physics/cocos/builtin-world.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports.BuiltInWorld = void 0;

var _builtinSharedBody = require("./builtin-shared-body");

var _arrayCollisionMatrix = require("./utils/array-collision-matrix");

var _util = require("../framework/util");

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fastRemove = cc.js.array.fastRemove;
var intersect = cc.geomUtils.intersect;
var Vec3 = cc.Vec3;
var hitPoint = new Vec3();
var TriggerEventObject = {
  type: 'collision-enter',
  selfCollider: null,
  otherCollider: null
};
/**
 * Built-in collision system, intended for use as a
 * efficient discrete collision detector,
 * not a full physical simulator
 */

var BuiltInWorld = /*#__PURE__*/function () {
  function BuiltInWorld() {
    this.shapeArr = [];
    this.bodies = [];
    this._shapeArrOld = [];
    this._collisionMatrix = new _arrayCollisionMatrix.ArrayCollisionMatrix();
    this._collisionMatrixPrev = new _arrayCollisionMatrix.ArrayCollisionMatrix();
  }

  var _proto = BuiltInWorld.prototype;

  _proto.step = function step() {
    // store and reset collsion array
    this._shapeArrOld = this.shapeArr.slice();
    this.shapeArr.length = 0;
    (0, _util.clearNodeTransformRecord)(); // sync scene to collision

    for (var i = 0; i < this.bodies.length; i++) {
      this.bodies[i].syncSceneToPhysics();
    }

    (0, _util.clearNodeTransformDirtyFlag)();
    var collisionMatrix = cc.game.collisionMatrix; // collision detection

    for (var _i = 0; _i < this.bodies.length; _i++) {
      var bodyA = this.bodies[_i];
      var nodeA = bodyA.node;
      var nodeACollisionMatrix = collisionMatrix[nodeA.groupIndex];
      if (!nodeACollisionMatrix) continue;

      for (var j = _i + 1; j < this.bodies.length; j++) {
        var bodyB = this.bodies[j];
        var nodeB = bodyB.node;

        if (nodeA !== nodeB && nodeACollisionMatrix[nodeB.groupIndex]) {
          bodyA.intersects(bodyB);
        }
      }
    } // emit collider event


    this.emitColliderEvent();
  };

  _proto.raycastClosest = function raycastClosest(worldRay, options, out) {
    var tmp_d = Infinity;
    var max_d = options.maxDistance;
    var groupIndex = options.groupIndex;
    var collisionMatrix = cc.game.collisionMatrix;
    var rayCollisionMatrix = collisionMatrix[groupIndex];
    if (!rayCollisionMatrix) return false;

    for (var i = 0; i < this.bodies.length; i++) {
      var body = this.bodies[i];
      var bodyGroupIndex = body.node.groupIndex;
      var canCollider = rayCollisionMatrix[bodyGroupIndex];
      if (!canCollider) continue;

      for (var _i2 = 0; _i2 < body.shapes.length; _i2++) {
        var shape = body.shapes[_i2];
        var distance = intersect.resolve(worldRay, shape.worldShape);

        if (distance == 0 || distance > max_d) {
          continue;
        }

        if (tmp_d > distance) {
          tmp_d = distance;
          Vec3.normalize(hitPoint, worldRay.d);
          Vec3.scaleAndAdd(hitPoint, worldRay.o, hitPoint, distance);

          out._assign(hitPoint, distance, shape.collider);
        }
      }
    }

    return !(tmp_d == Infinity);
  };

  _proto.raycast = function raycast(worldRay, options, pool, results) {
    var max_d = options.maxDistance;
    var groupIndex = options.groupIndex;
    var collisionMatrix = cc.game.collisionMatrix;
    var rayCollisionMatrix = collisionMatrix[groupIndex];
    if (!rayCollisionMatrix) return false;

    for (var i = 0; i < this.bodies.length; i++) {
      var body = this.bodies[i];
      var bodyGroupIndex = body.node.groupIndex;
      var canCollider = rayCollisionMatrix[bodyGroupIndex];
      if (!canCollider) continue;

      for (var _i3 = 0; _i3 < body.shapes.length; _i3++) {
        var shape = body.shapes[_i3];
        var distance = intersect.resolve(worldRay, shape.worldShape);

        if (distance == 0 || distance > max_d) {
          continue;
        } else {
          var r = pool.add();
          worldRay.computeHit(hitPoint, distance);

          r._assign(hitPoint, distance, shape.collider);

          results.push(r);
        }
      }
    }

    return results.length > 0;
  };

  _proto.getSharedBody = function getSharedBody(node) {
    return _builtinSharedBody.BuiltinSharedBody.getSharedBody(node, this);
  };

  _proto.addSharedBody = function addSharedBody(body) {
    var index = this.bodies.indexOf(body);

    if (index < 0) {
      this.bodies.push(body);
    }
  };

  _proto.removeSharedBody = function removeSharedBody(body) {
    fastRemove(this.bodies, body);
  };

  _proto.emitColliderEvent = function emitColliderEvent() {
    var shapeA;
    var shapeB;

    for (var i = 0; i < this.shapeArr.length; i += 2) {
      shapeA = this.shapeArr[i];
      shapeB = this.shapeArr[i + 1];
      TriggerEventObject.selfCollider = shapeA.collider;
      TriggerEventObject.otherCollider = shapeB.collider;

      this._collisionMatrix.set(shapeA.id, shapeB.id, true);

      if (this._collisionMatrixPrev.get(shapeA.id, shapeB.id)) {
        // emit stay
        TriggerEventObject.type = 'trigger-stay';
      } else {
        // first collider, emit enter
        TriggerEventObject.type = 'trigger-enter';
      }

      if (shapeA.collider) {
        shapeA.collider.emit(TriggerEventObject.type, TriggerEventObject);
      }

      TriggerEventObject.selfCollider = shapeB.collider;
      TriggerEventObject.otherCollider = shapeA.collider;

      if (shapeB.collider) {
        shapeB.collider.emit(TriggerEventObject.type, TriggerEventObject);
      }
    }

    for (var _i4 = 0; _i4 < this._shapeArrOld.length; _i4 += 2) {
      shapeA = this._shapeArrOld[_i4];
      shapeB = this._shapeArrOld[_i4 + 1];

      if (this._collisionMatrixPrev.get(shapeA.id, shapeB.id)) {
        if (!this._collisionMatrix.get(shapeA.id, shapeB.id)) {
          // emit exit
          TriggerEventObject.type = 'trigger-exit';
          TriggerEventObject.selfCollider = shapeA.collider;
          TriggerEventObject.otherCollider = shapeB.collider;

          if (shapeA.collider) {
            shapeA.collider.emit(TriggerEventObject.type, TriggerEventObject);
          }

          TriggerEventObject.selfCollider = shapeB.collider;
          TriggerEventObject.otherCollider = shapeA.collider;

          if (shapeB.collider) {
            shapeB.collider.emit(TriggerEventObject.type, TriggerEventObject);
          }

          this._collisionMatrix.set(shapeA.id, shapeB.id, false);
        }
      }
    }

    this._collisionMatrixPrev.matrix = this._collisionMatrix.matrix.slice();

    this._collisionMatrix.reset();
  };

  _createClass(BuiltInWorld, [{
    key: "gravity",
    set: function set(v) {}
  }, {
    key: "allowSleep",
    set: function set(v) {}
  }, {
    key: "defaultMaterial",
    set: function set(v) {}
  }]);

  return BuiltInWorld;
}();

exports.BuiltInWorld = BuiltInWorld;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,