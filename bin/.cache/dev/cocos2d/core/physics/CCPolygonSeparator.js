
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/physics/CCPolygonSeparator.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
// http://answers.unity3d.com/questions/977416/2d-polygon-convex-decomposition-code.html
/// <summary>
/// This class is took from the "FarseerUnity" physics engine, which uses Mark Bayazit's decomposition algorithm.
/// I also have to make it work with self-intersecting polygons, so I'll use another different algorithm to decompose a self-intersecting polygon into several simple polygons,
/// and then I would decompose each of them into convex polygons.
/// </summary>
//From phed rev 36
/// <summary>
/// Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
/// For more information about this algorithm, see http://mnbayazit.com/406/bayazit
/// </summary>
function At(i, vertices) {
  var s = vertices.length;
  return vertices[i < 0 ? s - -i % s : i % s];
}

function Copy(i, j, vertices) {
  var p = [];

  while (j < i) {
    j += vertices.length;
  } //p.reserve(j - i + 1);


  for (; i <= j; ++i) {
    p.push(At(i, vertices));
  }

  return p;
} /// <summary>
/// Decompose the polygon into several smaller non-concave polygon.
/// If the polygon is already convex, it will return the original polygon, unless it is over Settings.MaxPolygonVertices.
/// Precondition: Counter Clockwise polygon
/// </summary>
/// <param name="vertices"></param>
/// <returns></returns>


function ConvexPartition(vertices) {
  //We force it to CCW as it is a precondition in this algorithm.
  ForceCounterClockWise(vertices);
  var list = [];
  var d, lowerDist, upperDist;
  var p;
  var lowerInt = cc.v2();
  var upperInt = cc.v2(); // intersection points

  var lowerIndex = 0,
      upperIndex = 0;
  var lowerPoly, upperPoly;

  for (var i = 0; i < vertices.length; ++i) {
    if (Reflex(i, vertices)) {
      lowerDist = upperDist = 10e7; // std::numeric_limits<qreal>::max();

      for (var j = 0; j < vertices.length; ++j) {
        // if line intersects with an edge
        if (Left(At(i - 1, vertices), At(i, vertices), At(j, vertices)) && RightOn(At(i - 1, vertices), At(i, vertices), At(j - 1, vertices))) {
          // find the povar of intersection
          p = LineIntersect(At(i - 1, vertices), At(i, vertices), At(j, vertices), At(j - 1, vertices));

          if (Right(At(i + 1, vertices), At(i, vertices), p)) {
            // make sure it's inside the poly
            d = SquareDist(At(i, vertices), p);

            if (d < lowerDist) {
              // keep only the closest intersection
              lowerDist = d;
              lowerInt = p;
              lowerIndex = j;
            }
          }
        }

        if (Left(At(i + 1, vertices), At(i, vertices), At(j + 1, vertices)) && RightOn(At(i + 1, vertices), At(i, vertices), At(j, vertices))) {
          p = LineIntersect(At(i + 1, vertices), At(i, vertices), At(j, vertices), At(j + 1, vertices));

          if (Left(At(i - 1, vertices), At(i, vertices), p)) {
            d = SquareDist(At(i, vertices), p);

            if (d < upperDist) {
              upperDist = d;
              upperIndex = j;
              upperInt = p;
            }
          }
        }
      } // if there are no vertices to connect to, choose a povar in the middle


      if (lowerIndex == (upperIndex + 1) % vertices.length) {
        var sp = lowerInt.add(upperInt).div(2);
        lowerPoly = Copy(i, upperIndex, vertices);
        lowerPoly.push(sp);
        upperPoly = Copy(lowerIndex, i, vertices);
        upperPoly.push(sp);
      } else {
        var highestScore = 0,
            bestIndex = lowerIndex;

        while (upperIndex < lowerIndex) {
          upperIndex += vertices.length;
        }

        for (var j = lowerIndex; j <= upperIndex; ++j) {
          if (CanSee(i, j, vertices)) {
            var score = 1 / (SquareDist(At(i, vertices), At(j, vertices)) + 1);

            if (Reflex(j, vertices)) {
              if (RightOn(At(j - 1, vertices), At(j, vertices), At(i, vertices)) && LeftOn(At(j + 1, vertices), At(j, vertices), At(i, vertices))) {
                score += 3;
              } else {
                score += 2;
              }
            } else {
              score += 1;
            }

            if (score > highestScore) {
              bestIndex = j;
              highestScore = score;
            }
          }
        }

        lowerPoly = Copy(i, bestIndex, vertices);
        upperPoly = Copy(bestIndex, i, vertices);
      }

      list = list.concat(ConvexPartition(lowerPoly));
      list = list.concat(ConvexPartition(upperPoly));
      return list;
    }
  } // polygon is already convex


  list.push(vertices); //Remove empty vertice collections

  for (var i = list.length - 1; i >= 0; i--) {
    if (list[i].length == 0) list.splice(i, 0);
  }

  return list;
}

function CanSee(i, j, vertices) {
  if (Reflex(i, vertices)) {
    if (LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices)) && RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices))) return false;
  } else {
    if (RightOn(At(i, vertices), At(i + 1, vertices), At(j, vertices)) || LeftOn(At(i, vertices), At(i - 1, vertices), At(j, vertices))) return false;
  }

  if (Reflex(j, vertices)) {
    if (LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices)) && RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices))) return false;
  } else {
    if (RightOn(At(j, vertices), At(j + 1, vertices), At(i, vertices)) || LeftOn(At(j, vertices), At(j - 1, vertices), At(i, vertices))) return false;
  }

  for (var k = 0; k < vertices.length; ++k) {
    if ((k + 1) % vertices.length == i || k == i || (k + 1) % vertices.length == j || k == j) {
      continue; // ignore incident edges
    }

    var intersectionPoint = cc.v2();

    if (LineIntersect2(At(i, vertices), At(j, vertices), At(k, vertices), At(k + 1, vertices), intersectionPoint)) {
      return false;
    }
  }

  return true;
} // precondition: ccw


function Reflex(i, vertices) {
  return Right(i, vertices);
}

function Right(a, b, c) {
  if (typeof c === 'undefined') {
    var i = a,
        vertices = b;
    a = At(i - 1, vertices);
    b = At(i, vertices);
    c = At(i + 1, vertices);
  }

  return Area(a, b, c) < 0;
}

function Left(a, b, c) {
  return Area(a, b, c) > 0;
}

function LeftOn(a, b, c) {
  return Area(a, b, c) >= 0;
}

function RightOn(a, b, c) {
  return Area(a, b, c) <= 0;
}

function SquareDist(a, b) {
  var dx = b.x - a.x;
  var dy = b.y - a.y;
  return dx * dx + dy * dy;
} //forces counter clock wise order.


function ForceCounterClockWise(vertices) {
  if (!IsCounterClockWise(vertices)) {
    vertices.reverse();
  }
}

function IsCounterClockWise(vertices) {
  //We just return true for lines
  if (vertices.length < 3) return true;
  return GetSignedArea(vertices) > 0;
} //gets the signed area.


function GetSignedArea(vertices) {
  var i;
  var area = 0;

  for (i = 0; i < vertices.length; i++) {
    var j = (i + 1) % vertices.length;
    area += vertices[i].x * vertices[j].y;
    area -= vertices[i].y * vertices[j].x;
  }

  area /= 2;
  return area;
} //From Mark Bayazit's convex decomposition algorithm


function LineIntersect(p1, p2, q1, q2) {
  var i = cc.v2();
  var a1 = p2.y - p1.y;
  var b1 = p1.x - p2.x;
  var c1 = a1 * p1.x + b1 * p1.y;
  var a2 = q2.y - q1.y;
  var b2 = q1.x - q2.x;
  var c2 = a2 * q1.x + b2 * q1.y;
  var det = a1 * b2 - a2 * b1;

  if (!FloatEquals(det, 0)) {
    // lines are not parallel
    i.x = (b2 * c1 - b1 * c2) / det;
    i.y = (a1 * c2 - a2 * c1) / det;
  }

  return i;
} //from Eric Jordan's convex decomposition library, it checks if the lines a0->a1 and b0->b1 cross.
//if they do, intersectionPovar will be filled with the povar of crossing. Grazing lines should not return true.


function LineIntersect2(a0, a1, b0, b1, intersectionPoint) {
  if (a0 == b0 || a0 == b1 || a1 == b0 || a1 == b1) return false;
  var x1 = a0.x;
  var y1 = a0.y;
  var x2 = a1.x;
  var y2 = a1.y;
  var x3 = b0.x;
  var y3 = b0.y;
  var x4 = b1.x;
  var y4 = b1.y; //AABB early exit

  if (Math.max(x1, x2) < Math.min(x3, x4) || Math.max(x3, x4) < Math.min(x1, x2)) return false;
  if (Math.max(y1, y2) < Math.min(y3, y4) || Math.max(y3, y4) < Math.min(y1, y2)) return false;
  var ua = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
  var ub = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);

  if (Math.abs(denom) < 10e-7) {
    //Lines are too close to parallel to call
    return false;
  }

  ua /= denom;
  ub /= denom;

  if (0 < ua && ua < 1 && 0 < ub && ub < 1) {
    intersectionPoint.x = x1 + ua * (x2 - x1);
    intersectionPoint.y = y1 + ua * (y2 - y1);
    return true;
  }

  return false;
}

function FloatEquals(value1, value2) {
  return Math.abs(value1 - value2) <= 10e-7;
} //returns a positive number if c is to the left of the line going from a to b. Positive number if povar is left, negative if povar is right, and 0 if points are collinear.</returns>


function Area(a, b, c) {
  return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y);
}

module.exports = {
  ConvexPartition: ConvexPartition,
  ForceCounterClockWise: ForceCounterClockWise,
  IsCounterClockWise: IsCounterClockWise
};
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXZcXGNvY29zMmRcXGNvcmVcXHBoeXNpY3NcXENDUG9seWdvblNlcGFyYXRvci5qcyJdLCJuYW1lcyI6WyJBdCIsImkiLCJ2ZXJ0aWNlcyIsInMiLCJsZW5ndGgiLCJDb3B5IiwiaiIsInAiLCJwdXNoIiwiQ29udmV4UGFydGl0aW9uIiwiRm9yY2VDb3VudGVyQ2xvY2tXaXNlIiwibGlzdCIsImQiLCJsb3dlckRpc3QiLCJ1cHBlckRpc3QiLCJsb3dlckludCIsImNjIiwidjIiLCJ1cHBlckludCIsImxvd2VySW5kZXgiLCJ1cHBlckluZGV4IiwibG93ZXJQb2x5IiwidXBwZXJQb2x5IiwiUmVmbGV4IiwiTGVmdCIsIlJpZ2h0T24iLCJMaW5lSW50ZXJzZWN0IiwiUmlnaHQiLCJTcXVhcmVEaXN0Iiwic3AiLCJhZGQiLCJkaXYiLCJoaWdoZXN0U2NvcmUiLCJiZXN0SW5kZXgiLCJDYW5TZWUiLCJzY29yZSIsIkxlZnRPbiIsImNvbmNhdCIsInNwbGljZSIsImsiLCJpbnRlcnNlY3Rpb25Qb2ludCIsIkxpbmVJbnRlcnNlY3QyIiwiYSIsImIiLCJjIiwiQXJlYSIsImR4IiwieCIsImR5IiwieSIsIklzQ291bnRlckNsb2NrV2lzZSIsInJldmVyc2UiLCJHZXRTaWduZWRBcmVhIiwiYXJlYSIsInAxIiwicDIiLCJxMSIsInEyIiwiYTEiLCJiMSIsImMxIiwiYTIiLCJiMiIsImMyIiwiZGV0IiwiRmxvYXRFcXVhbHMiLCJhMCIsImIwIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ4MyIsInkzIiwieDQiLCJ5NCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJ1YSIsInViIiwiZGVub20iLCJhYnMiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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SUFBSVIsRUFBRSxHQUFHRixFQUFULENBQTlCO0FBQ0EsV0FBTyxJQUFQO0FBQ0g7O0FBRUQsU0FBTyxLQUFQO0FBQ0g7O0FBRUQsU0FBU0osV0FBVCxDQUFxQmtCLE1BQXJCLEVBQTZCQyxNQUE3QixFQUFxQztBQUNqQyxTQUFPUixJQUFJLENBQUNNLEdBQUwsQ0FBU0MsTUFBTSxHQUFHQyxNQUFsQixLQUE2QixLQUFwQztBQUNILEVBR0Q7OztBQUNBLFNBQVN2QyxJQUFULENBQWNILENBQWQsRUFBaUJDLENBQWpCLEVBQW9CQyxDQUFwQixFQUF1QjtBQUNuQixTQUFPRixDQUFDLENBQUNLLENBQUYsSUFBT0osQ0FBQyxDQUFDTSxDQUFGLEdBQU1MLENBQUMsQ0FBQ0ssQ0FBZixJQUFvQk4sQ0FBQyxDQUFDSSxDQUFGLElBQU9ILENBQUMsQ0FBQ0ssQ0FBRixHQUFNUCxDQUFDLENBQUNPLENBQWYsQ0FBcEIsR0FBd0NMLENBQUMsQ0FBQ0csQ0FBRixJQUFPTCxDQUFDLENBQUNPLENBQUYsR0FBTU4sQ0FBQyxDQUFDTSxDQUFmLENBQS9DO0FBQ0g7O0FBRURvQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDYjdFLEVBQUFBLGVBQWUsRUFBRUEsZUFESjtBQUViQyxFQUFBQSxxQkFBcUIsRUFBRUEscUJBRlY7QUFHYndDLEVBQUFBLGtCQUFrQixFQUFFQTtBQUhQLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4vLyBodHRwOi8vYW5zd2Vycy51bml0eTNkLmNvbS9xdWVzdGlvbnMvOTc3NDE2LzJkLXBvbHlnb24tY29udmV4LWRlY29tcG9zaXRpb24tY29kZS5odG1sXHJcblxyXG4vLy8gPHN1bW1hcnk+XHJcbi8vLyBUaGlzIGNsYXNzIGlzIHRvb2sgZnJvbSB0aGUgXCJGYXJzZWVyVW5pdHlcIiBwaHlzaWNzIGVuZ2luZSwgd2hpY2ggdXNlcyBNYXJrIEJheWF6aXQncyBkZWNvbXBvc2l0aW9uIGFsZ29yaXRobS5cclxuLy8vIEkgYWxzbyBoYXZlIHRvIG1ha2UgaXQgd29yayB3aXRoIHNlbGYtaW50ZXJzZWN0aW5nIHBvbHlnb25zLCBzbyBJJ2xsIHVzZSBhbm90aGVyIGRpZmZlcmVudCBhbGdvcml0aG0gdG8gZGVjb21wb3NlIGEgc2VsZi1pbnRlcnNlY3RpbmcgcG9seWdvbiBpbnRvIHNldmVyYWwgc2ltcGxlIHBvbHlnb25zLFxyXG4vLy8gYW5kIHRoZW4gSSB3b3VsZCBkZWNvbXBvc2UgZWFjaCBvZiB0aGVtIGludG8gY29udmV4IHBvbHlnb25zLlxyXG4vLy8gPC9zdW1tYXJ5PlxyXG5cclxuLy9Gcm9tIHBoZWQgcmV2IDM2XHJcblxyXG4vLy8gPHN1bW1hcnk+XHJcbi8vLyBDb252ZXggZGVjb21wb3NpdGlvbiBhbGdvcml0aG0gY3JlYXRlZCBieSBNYXJrIEJheWF6aXQgKGh0dHA6Ly9tbmJheWF6aXQuY29tLylcclxuLy8vIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgYWxnb3JpdGhtLCBzZWUgaHR0cDovL21uYmF5YXppdC5jb20vNDA2L2JheWF6aXRcclxuLy8vIDwvc3VtbWFyeT5cclxuIFxyXG5mdW5jdGlvbiBBdChpLCB2ZXJ0aWNlcykge1xyXG4gICAgdmFyIHMgPSB2ZXJ0aWNlcy5sZW5ndGg7XHJcbiAgICByZXR1cm4gdmVydGljZXNbaSA8IDAgPyBzIC0gKC1pICUgcykgOiBpICUgc107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENvcHkoaSwgaiwgdmVydGljZXMpIHtcclxuICAgIHZhciBwID0gW107XHJcbiAgICB3aGlsZSAoaiA8IGkpIGogKz0gdmVydGljZXMubGVuZ3RoO1xyXG4gICAgLy9wLnJlc2VydmUoaiAtIGkgKyAxKTtcclxuICAgIGZvciAoOyBpIDw9IGo7ICsraSlcclxuICAgIHtcclxuICAgICAgICBwLnB1c2goQXQoaSwgdmVydGljZXMpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59XHJcblxyXG4vLy8gPHN1bW1hcnk+XHJcbi8vLyBEZWNvbXBvc2UgdGhlIHBvbHlnb24gaW50byBzZXZlcmFsIHNtYWxsZXIgbm9uLWNvbmNhdmUgcG9seWdvbi5cclxuLy8vIElmIHRoZSBwb2x5Z29uIGlzIGFscmVhZHkgY29udmV4LCBpdCB3aWxsIHJldHVybiB0aGUgb3JpZ2luYWwgcG9seWdvbiwgdW5sZXNzIGl0IGlzIG92ZXIgU2V0dGluZ3MuTWF4UG9seWdvblZlcnRpY2VzLlxyXG4vLy8gUHJlY29uZGl0aW9uOiBDb3VudGVyIENsb2Nrd2lzZSBwb2x5Z29uXHJcbi8vLyA8L3N1bW1hcnk+XHJcbi8vLyA8cGFyYW0gbmFtZT1cInZlcnRpY2VzXCI+PC9wYXJhbT5cclxuLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cclxuZnVuY3Rpb24gQ29udmV4UGFydGl0aW9uKHZlcnRpY2VzKSB7XHJcbiAgICAvL1dlIGZvcmNlIGl0IHRvIENDVyBhcyBpdCBpcyBhIHByZWNvbmRpdGlvbiBpbiB0aGlzIGFsZ29yaXRobS5cclxuICAgIEZvcmNlQ291bnRlckNsb2NrV2lzZSAodmVydGljZXMpO1xyXG4gICAgXHJcbiAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgdmFyIGQsIGxvd2VyRGlzdCwgdXBwZXJEaXN0O1xyXG4gICAgdmFyIHA7XHJcbiAgICB2YXIgbG93ZXJJbnQgPSBjYy52MigpO1xyXG4gICAgdmFyIHVwcGVySW50ID0gY2MudjIoKTsgLy8gaW50ZXJzZWN0aW9uIHBvaW50c1xyXG4gICAgdmFyIGxvd2VySW5kZXggPSAwLCB1cHBlckluZGV4ID0gMDtcclxuICAgIHZhciBsb3dlclBvbHksIHVwcGVyUG9seTtcclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGlmIChSZWZsZXgoaSwgdmVydGljZXMpKSB7XHJcbiAgICAgICAgICAgIGxvd2VyRGlzdCA9IHVwcGVyRGlzdCA9IDEwZTc7IC8vIHN0ZDo6bnVtZXJpY19saW1pdHM8cXJlYWw+OjptYXgoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2ZXJ0aWNlcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgbGluZSBpbnRlcnNlY3RzIHdpdGggYW4gZWRnZVxyXG4gICAgICAgICAgICAgICAgaWYgKExlZnQoQXQoaSAtIDEsIHZlcnRpY2VzKSwgQXQoaSwgdmVydGljZXMpLCBBdChqLCB2ZXJ0aWNlcykpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgUmlnaHRPbihBdChpIC0gMSwgdmVydGljZXMpLCBBdChpLCB2ZXJ0aWNlcyksIEF0KGogLSAxLCB2ZXJ0aWNlcykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgcG92YXIgb2YgaW50ZXJzZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgcCA9IExpbmVJbnRlcnNlY3QoQXQoaSAtIDEsIHZlcnRpY2VzKSwgQXQoaSwgdmVydGljZXMpLCBBdChqLCB2ZXJ0aWNlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF0KGogLSAxLCB2ZXJ0aWNlcykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChSaWdodChBdChpICsgMSwgdmVydGljZXMpLCBBdChpLCB2ZXJ0aWNlcyksIHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBpdCdzIGluc2lkZSB0aGUgcG9seVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gU3F1YXJlRGlzdChBdChpLCB2ZXJ0aWNlcyksIHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA8IGxvd2VyRGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2VlcCBvbmx5IHRoZSBjbG9zZXN0IGludGVyc2VjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXJEaXN0ID0gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VySW50ID0gcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoTGVmdChBdChpICsgMSwgdmVydGljZXMpLCBBdChpLCB2ZXJ0aWNlcyksIEF0KGogKyAxLCB2ZXJ0aWNlcykpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgUmlnaHRPbihBdChpICsgMSwgdmVydGljZXMpLCBBdChpLCB2ZXJ0aWNlcyksIEF0KGosIHZlcnRpY2VzKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwID0gTGluZUludGVyc2VjdChBdChpICsgMSwgdmVydGljZXMpLCBBdChpLCB2ZXJ0aWNlcyksIEF0KGosIHZlcnRpY2VzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXQoaiArIDEsIHZlcnRpY2VzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKExlZnQoQXQoaSAtIDEsIHZlcnRpY2VzKSwgQXQoaSwgdmVydGljZXMpLCBwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gU3F1YXJlRGlzdChBdChpLCB2ZXJ0aWNlcyksIHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA8IHVwcGVyRGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJEaXN0ID0gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBwZXJJbnQgPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBhcmUgbm8gdmVydGljZXMgdG8gY29ubmVjdCB0bywgY2hvb3NlIGEgcG92YXIgaW4gdGhlIG1pZGRsZVxyXG4gICAgICAgICAgICBpZiAobG93ZXJJbmRleCA9PSAodXBwZXJJbmRleCArIDEpICUgdmVydGljZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3AgPSBsb3dlckludC5hZGQodXBwZXJJbnQpLmRpdigyKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbG93ZXJQb2x5ID0gQ29weShpLCB1cHBlckluZGV4LCB2ZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICBsb3dlclBvbHkucHVzaChzcCk7XHJcbiAgICAgICAgICAgICAgICB1cHBlclBvbHkgPSBDb3B5KGxvd2VySW5kZXgsIGksIHZlcnRpY2VzKTtcclxuICAgICAgICAgICAgICAgIHVwcGVyUG9seS5wdXNoKHNwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBoaWdoZXN0U2NvcmUgPSAwLCBiZXN0SW5kZXggPSBsb3dlckluZGV4O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodXBwZXJJbmRleCA8IGxvd2VySW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB1cHBlckluZGV4ICs9IHZlcnRpY2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gbG93ZXJJbmRleDsgaiA8PSB1cHBlckluZGV4OyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ2FuU2VlKGksIGosIHZlcnRpY2VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NvcmUgPSAxIC8gKFNxdWFyZURpc3QoQXQoaSwgdmVydGljZXMpLCBBdChqLCB2ZXJ0aWNlcykpICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChSZWZsZXgoaiwgdmVydGljZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoUmlnaHRPbihBdChqIC0gMSwgdmVydGljZXMpLCBBdChqLCB2ZXJ0aWNlcyksIEF0KGksIHZlcnRpY2VzKSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWZ0T24oQXQoaiArIDEsIHZlcnRpY2VzKSwgQXQoaiwgdmVydGljZXMpLCBBdChpLCB2ZXJ0aWNlcykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcmUgKz0gMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlICs9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29yZSArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2NvcmUgPiBoaWdoZXN0U2NvcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RJbmRleCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdoZXN0U2NvcmUgPSBzY29yZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxvd2VyUG9seSA9IENvcHkoaSwgYmVzdEluZGV4LCB2ZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICB1cHBlclBvbHkgPSBDb3B5KGJlc3RJbmRleCwgaSwgdmVydGljZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxpc3QgPSBsaXN0LmNvbmNhdCggQ29udmV4UGFydGl0aW9uKGxvd2VyUG9seSkgKTtcclxuICAgICAgICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KCBDb252ZXhQYXJ0aXRpb24odXBwZXJQb2x5KSApO1xyXG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIHBvbHlnb24gaXMgYWxyZWFkeSBjb252ZXhcclxuICAgIGxpc3QucHVzaCh2ZXJ0aWNlcyk7XHJcbiAgICBcclxuICAgIC8vUmVtb3ZlIGVtcHR5IHZlcnRpY2UgY29sbGVjdGlvbnNcclxuICAgIGZvciAodmFyIGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChsaXN0W2ldLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICBsaXN0LnNwbGljZShpLCAwKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGxpc3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIENhblNlZShpLCBqLCB2ZXJ0aWNlcykge1xyXG4gICAgaWYgKFJlZmxleChpLCB2ZXJ0aWNlcykpIHtcclxuICAgICAgICBpZiAoTGVmdE9uKEF0KGksIHZlcnRpY2VzKSwgQXQoaSAtIDEsIHZlcnRpY2VzKSwgQXQoaiwgdmVydGljZXMpKSAmJlxyXG4gICAgICAgICAgICBSaWdodE9uKEF0KGksIHZlcnRpY2VzKSwgQXQoaSArIDEsIHZlcnRpY2VzKSwgQXQoaiwgdmVydGljZXMpKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKFJpZ2h0T24oQXQoaSwgdmVydGljZXMpLCBBdChpICsgMSwgdmVydGljZXMpLCBBdChqLCB2ZXJ0aWNlcykpIHx8XHJcbiAgICAgICAgICAgIExlZnRPbihBdChpLCB2ZXJ0aWNlcyksIEF0KGkgLSAxLCB2ZXJ0aWNlcyksIEF0KGosIHZlcnRpY2VzKSkpIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChSZWZsZXgoaiwgdmVydGljZXMpKSB7XHJcbiAgICAgICAgaWYgKExlZnRPbihBdChqLCB2ZXJ0aWNlcyksIEF0KGogLSAxLCB2ZXJ0aWNlcyksIEF0KGksIHZlcnRpY2VzKSkgJiZcclxuICAgICAgICAgICAgUmlnaHRPbihBdChqLCB2ZXJ0aWNlcyksIEF0KGogKyAxLCB2ZXJ0aWNlcyksIEF0KGksIHZlcnRpY2VzKSkpIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChSaWdodE9uKEF0KGosIHZlcnRpY2VzKSwgQXQoaiArIDEsIHZlcnRpY2VzKSwgQXQoaSwgdmVydGljZXMpKSB8fFxyXG4gICAgICAgICAgICBMZWZ0T24oQXQoaiwgdmVydGljZXMpLCBBdChqIC0gMSwgdmVydGljZXMpLCBBdChpLCB2ZXJ0aWNlcykpKSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdmVydGljZXMubGVuZ3RoOyArK2spIHtcclxuICAgICAgICBpZiAoKGsgKyAxKSAlIHZlcnRpY2VzLmxlbmd0aCA9PSBpIHx8IGsgPT0gaSB8fCAoayArIDEpICUgdmVydGljZXMubGVuZ3RoID09IGogfHwgayA9PSBqKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY29udGludWU7IC8vIGlnbm9yZSBpbmNpZGVudCBlZGdlc1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uUG9pbnQgPSBjYy52MigpO1xyXG4gICAgICAgIGlmIChMaW5lSW50ZXJzZWN0MihBdChpLCB2ZXJ0aWNlcyksIEF0KGosIHZlcnRpY2VzKSwgQXQoaywgdmVydGljZXMpLCBBdChrICsgMSwgdmVydGljZXMpLCBpbnRlcnNlY3Rpb25Qb2ludCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbi8vIHByZWNvbmRpdGlvbjogY2N3XHJcbmZ1bmN0aW9uIFJlZmxleChpLCB2ZXJ0aWNlcykge1xyXG4gICAgcmV0dXJuIFJpZ2h0KGksIHZlcnRpY2VzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gUmlnaHQoYSwgYiwgYykge1xyXG4gICAgaWYgKHR5cGVvZiBjID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHZhciBpID0gYSwgdmVydGljZXMgPSBiO1xyXG5cclxuICAgICAgICBhID0gQXQoaSAtIDEsIHZlcnRpY2VzKTtcclxuICAgICAgICBiID0gQXQoaSwgdmVydGljZXMpO1xyXG4gICAgICAgIGMgPSBBdChpICsgMSwgdmVydGljZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBBcmVhKGEsIGIsIGMpIDwgMDtcclxufVxyXG5cclxuZnVuY3Rpb24gTGVmdChhLCBiLCBjKSB7XHJcbiAgICByZXR1cm4gQXJlYShhLCBiLCBjKSA+IDA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIExlZnRPbihhLCBiLCBjKSB7XHJcbiAgICByZXR1cm4gQXJlYShhLCBiLCBjKSA+PSAwO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gUmlnaHRPbihhLCBiLCBjKSB7XHJcbiAgICByZXR1cm4gQXJlYShhLCBiLCBjKSA8PSAwO1xyXG59XHJcblxyXG5mdW5jdGlvbiBTcXVhcmVEaXN0KGEsIGIpIHtcclxuICAgIHZhciBkeCA9IGIueCAtIGEueDtcclxuICAgIHZhciBkeSA9IGIueSAtIGEueTtcclxuICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcclxufVxyXG5cclxuLy9mb3JjZXMgY291bnRlciBjbG9jayB3aXNlIG9yZGVyLlxyXG5mdW5jdGlvbiBGb3JjZUNvdW50ZXJDbG9ja1dpc2UodmVydGljZXMpIHtcclxuICAgIGlmICghSXNDb3VudGVyQ2xvY2tXaXNlKHZlcnRpY2VzKSkge1xyXG4gICAgICAgIHZlcnRpY2VzLnJldmVyc2UoKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gSXNDb3VudGVyQ2xvY2tXaXNlKHZlcnRpY2VzKSB7XHJcbiAgICAvL1dlIGp1c3QgcmV0dXJuIHRydWUgZm9yIGxpbmVzXHJcbiAgICBpZiAodmVydGljZXMubGVuZ3RoIDwgMylcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIFxyXG4gICAgcmV0dXJuIChHZXRTaWduZWRBcmVhKHZlcnRpY2VzKSA+IDApO1xyXG59XHJcblxyXG4vL2dldHMgdGhlIHNpZ25lZCBhcmVhLlxyXG5mdW5jdGlvbiBHZXRTaWduZWRBcmVhKHZlcnRpY2VzKSB7XHJcbiAgICB2YXIgaTtcclxuICAgIHZhciBhcmVhID0gMDtcclxuICAgIFxyXG4gICAgZm9yIChpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGogPSAoaSArIDEpICUgdmVydGljZXMubGVuZ3RoO1xyXG4gICAgICAgIGFyZWEgKz0gdmVydGljZXNbaV0ueCAqIHZlcnRpY2VzW2pdLnk7XHJcbiAgICAgICAgYXJlYSAtPSB2ZXJ0aWNlc1tpXS55ICogdmVydGljZXNbal0ueDtcclxuICAgIH1cclxuICAgIGFyZWEgLz0gMjtcclxuICAgIHJldHVybiBhcmVhO1xyXG59XHJcblxyXG4vL0Zyb20gTWFyayBCYXlheml0J3MgY29udmV4IGRlY29tcG9zaXRpb24gYWxnb3JpdGhtXHJcbmZ1bmN0aW9uIExpbmVJbnRlcnNlY3QocDEsIHAyLCBxMSwgcTIpIHtcclxuICAgIHZhciBpID0gY2MudjIoKTtcclxuICAgIHZhciBhMSA9IHAyLnkgLSBwMS55O1xyXG4gICAgdmFyIGIxID0gcDEueCAtIHAyLng7XHJcbiAgICB2YXIgYzEgPSBhMSAqIHAxLnggKyBiMSAqIHAxLnk7XHJcbiAgICB2YXIgYTIgPSBxMi55IC0gcTEueTtcclxuICAgIHZhciBiMiA9IHExLnggLSBxMi54O1xyXG4gICAgdmFyIGMyID0gYTIgKiBxMS54ICsgYjIgKiBxMS55O1xyXG4gICAgdmFyIGRldCA9IGExICogYjIgLSBhMiAqIGIxO1xyXG4gICAgXHJcbiAgICBpZiAoIUZsb2F0RXF1YWxzKGRldCwgMCkpIHtcclxuICAgICAgICAvLyBsaW5lcyBhcmUgbm90IHBhcmFsbGVsXHJcbiAgICAgICAgaS54ID0gKGIyICogYzEgLSBiMSAqIGMyKSAvIGRldDtcclxuICAgICAgICBpLnkgPSAoYTEgKiBjMiAtIGEyICogYzEpIC8gZGV0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGk7XHJcbn1cclxuXHJcbi8vZnJvbSBFcmljIEpvcmRhbidzIGNvbnZleCBkZWNvbXBvc2l0aW9uIGxpYnJhcnksIGl0IGNoZWNrcyBpZiB0aGUgbGluZXMgYTAtPmExIGFuZCBiMC0+YjEgY3Jvc3MuXHJcbi8vaWYgdGhleSBkbywgaW50ZXJzZWN0aW9uUG92YXIgd2lsbCBiZSBmaWxsZWQgd2l0aCB0aGUgcG92YXIgb2YgY3Jvc3NpbmcuIEdyYXppbmcgbGluZXMgc2hvdWxkIG5vdCByZXR1cm4gdHJ1ZS5cclxuZnVuY3Rpb24gTGluZUludGVyc2VjdDIoYTAsIGExLCBiMCwgYjEsIGludGVyc2VjdGlvblBvaW50KSB7XHJcbiAgICBpZiAoYTAgPT0gYjAgfHwgYTAgPT0gYjEgfHwgYTEgPT0gYjAgfHwgYTEgPT0gYjEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgXHJcbiAgICB2YXIgeDEgPSBhMC54O1xyXG4gICAgdmFyIHkxID0gYTAueTtcclxuICAgIHZhciB4MiA9IGExLng7XHJcbiAgICB2YXIgeTIgPSBhMS55O1xyXG4gICAgdmFyIHgzID0gYjAueDtcclxuICAgIHZhciB5MyA9IGIwLnk7XHJcbiAgICB2YXIgeDQgPSBiMS54O1xyXG4gICAgdmFyIHk0ID0gYjEueTtcclxuICAgIFxyXG4gICAgLy9BQUJCIGVhcmx5IGV4aXRcclxuICAgIGlmIChNYXRoLm1heCh4MSwgeDIpIDwgTWF0aC5taW4oeDMsIHg0KSB8fCBNYXRoLm1heCh4MywgeDQpIDwgTWF0aC5taW4oeDEsIHgyKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBcclxuICAgIGlmIChNYXRoLm1heCh5MSwgeTIpIDwgTWF0aC5taW4oeTMsIHk0KSB8fCBNYXRoLm1heCh5MywgeTQpIDwgTWF0aC5taW4oeTEsIHkyKSlcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBcclxuICAgIHZhciB1YSA9ICgoeDQgLSB4MykgKiAoeTEgLSB5MykgLSAoeTQgLSB5MykgKiAoeDEgLSB4MykpO1xyXG4gICAgdmFyIHViID0gKCh4MiAtIHgxKSAqICh5MSAtIHkzKSAtICh5MiAtIHkxKSAqICh4MSAtIHgzKSk7XHJcbiAgICB2YXIgZGVub20gPSAoeTQgLSB5MykgKiAoeDIgLSB4MSkgLSAoeDQgLSB4MykgKiAoeTIgLSB5MSk7XHJcbiAgICBpZiAoTWF0aC5hYnMoZGVub20pIDwgMTBlLTcpIHtcclxuICAgICAgICAvL0xpbmVzIGFyZSB0b28gY2xvc2UgdG8gcGFyYWxsZWwgdG8gY2FsbFxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHVhIC89IGRlbm9tO1xyXG4gICAgdWIgLz0gZGVub207XHJcbiAgICBcclxuICAgIGlmICgoMCA8IHVhKSAmJiAodWEgPCAxKSAmJiAoMCA8IHViKSAmJiAodWIgPCAxKSkge1xyXG4gICAgICAgIGludGVyc2VjdGlvblBvaW50LnggPSAoeDEgKyB1YSAqICh4MiAtIHgxKSk7XHJcbiAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQueSA9ICh5MSArIHVhICogKHkyIC0geTEpKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBGbG9hdEVxdWFscyh2YWx1ZTEsIHZhbHVlMikge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKHZhbHVlMSAtIHZhbHVlMikgPD0gMTBlLTc7XHJcbn1cclxuXHJcblxyXG4vL3JldHVybnMgYSBwb3NpdGl2ZSBudW1iZXIgaWYgYyBpcyB0byB0aGUgbGVmdCBvZiB0aGUgbGluZSBnb2luZyBmcm9tIGEgdG8gYi4gUG9zaXRpdmUgbnVtYmVyIGlmIHBvdmFyIGlzIGxlZnQsIG5lZ2F0aXZlIGlmIHBvdmFyIGlzIHJpZ2h0LCBhbmQgMCBpZiBwb2ludHMgYXJlIGNvbGxpbmVhci48L3JldHVybnM+XHJcbmZ1bmN0aW9uIEFyZWEoYSwgYiwgYykge1xyXG4gICAgcmV0dXJuIGEueCAqIChiLnkgLSBjLnkpICsgYi54ICogKGMueSAtIGEueSkgKyBjLnggKiAoYS55IC0gYi55KTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBDb252ZXhQYXJ0aXRpb246IENvbnZleFBhcnRpdGlvbixcclxuICAgIEZvcmNlQ291bnRlckNsb2NrV2lzZTogRm9yY2VDb3VudGVyQ2xvY2tXaXNlLFxyXG4gICAgSXNDb3VudGVyQ2xvY2tXaXNlOiBJc0NvdW50ZXJDbG9ja1dpc2VcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIvIn0=