
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/asset-manager/load.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2019 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
  worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
  not use Cocos Creator software for developing other software or tools that's
  used for developing games. You are not granted to publish, distribute,
  sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var packManager = require('./pack-manager');

var Pipeline = require('./pipeline');

var parser = require('./parser');

var _require = require('./utilities'),
    getDepends = _require.getDepends,
    cache = _require.cache,
    gatherAsset = _require.gatherAsset,
    setProperties = _require.setProperties,
    forEach = _require.forEach,
    clear = _require.clear,
    checkCircleReference = _require.checkCircleReference;

var _require2 = require('./shared'),
    assets = _require2.assets,
    files = _require2.files,
    parsed = _require2.parsed,
    pipeline = _require2.pipeline;

var Task = require('./task');

function load(task, done) {
  var firstTask = false;

  if (!task.progress) {
    task.progress = {
      finish: 0,
      total: task.input.length,
      canInvoke: true
    };
    firstTask = true;
  }

  var options = task.options,
      progress = task.progress;
  options.__exclude__ = options.__exclude__ || Object.create(null);
  task.output = [];
  forEach(task.input, function (item, cb) {
    var subTask = Task.create({
      input: item,
      onProgress: task.onProgress,
      options: options,
      progress: progress,
      onComplete: function onComplete(err, item) {
        if (err && !task.isFinish) {
          if (!cc.assetManager.force || firstTask) {
            if (!CC_EDITOR) {
              cc.error(err.message, err.stack);
            }

            progress.canInvoke = false;
            done(err);
          } else {
            progress.canInvoke && task.dispatch('progress', ++progress.finish, progress.total, item);
          }
        }

        task.output.push(item);
        subTask.recycle();
        cb();
      }
    });
    loadOneAssetPipeline.async(subTask);
  }, function () {
    options.__exclude__ = null;

    if (task.isFinish) {
      clear(task, true);
      return task.dispatch('error');
    }

    gatherAsset(task);
    clear(task, true);
    done();
  });
}

var loadOneAssetPipeline = new Pipeline('loadOneAsset', [function fetch(task, done) {
  var item = task.output = task.input;
  var options = item.options,
      isNative = item.isNative,
      uuid = item.uuid,
      file = item.file;
  var reload = options.reload;
  if (file || !reload && !isNative && assets.has(uuid)) return done();
  packManager.load(item, task.options, function (err, data) {
    item.file = data;
    done(err);
  });
}, function parse(task, done) {
  var item = task.output = task.input,
      progress = task.progress,
      exclude = task.options.__exclude__;
  var id = item.id,
      file = item.file,
      options = item.options;

  if (item.isNative) {
    parser.parse(id, file, item.ext, options, function (err, asset) {
      if (err) return done(err);
      item.content = asset;
      progress.canInvoke && task.dispatch('progress', ++progress.finish, progress.total, item);
      files.remove(id);
      parsed.remove(id);
      done();
    });
  } else {
    var uuid = item.uuid;

    if (uuid in exclude) {
      var _exclude$uuid = exclude[uuid],
          finish = _exclude$uuid.finish,
          content = _exclude$uuid.content,
          err = _exclude$uuid.err,
          callbacks = _exclude$uuid.callbacks;
      progress.canInvoke && task.dispatch('progress', ++progress.finish, progress.total, item);

      if (finish || checkCircleReference(uuid, uuid, exclude)) {
        content && content.addRef && content.addRef();
        item.content = content;
        done(err);
      } else {
        callbacks.push({
          done: done,
          item: item
        });
      }
    } else {
      if (!options.reload && assets.has(uuid)) {
        var asset = assets.get(uuid);

        if (options.__asyncLoadAssets__ || !asset.__asyncLoadAssets__) {
          item.content = asset.addRef();
          progress.canInvoke && task.dispatch('progress', ++progress.finish, progress.total, item);
          done();
        } else {
          loadDepends(task, asset, done, false);
        }
      } else {
        parser.parse(id, file, 'import', options, function (err, asset) {
          if (err) return done(err);
          asset._uuid = uuid;
          loadDepends(task, asset, done, true);
        });
      }
    }
  }
}]);

function loadDepends(task, asset, done, init) {
  var item = task.input,
      progress = task.progress;
  var uuid = item.uuid,
      id = item.id,
      options = item.options,
      config = item.config;
  var __asyncLoadAssets__ = options.__asyncLoadAssets__,
      cacheAsset = options.cacheAsset;
  var depends = []; // add reference avoid being released during loading dependencies

  asset.addRef && asset.addRef();
  getDepends(uuid, asset, Object.create(null), depends, false, __asyncLoadAssets__, config);
  progress.canInvoke && task.dispatch('progress', ++progress.finish, progress.total += depends.length, item);
  var repeatItem = task.options.__exclude__[uuid] = {
    content: asset,
    finish: false,
    callbacks: [{
      done: done,
      item: item
    }]
  };
  var subTask = Task.create({
    input: depends,
    options: task.options,
    onProgress: task.onProgress,
    onError: Task.prototype.recycle,
    progress: progress,
    onComplete: function onComplete(err) {
      asset.decRef && asset.decRef(false);
      asset.__asyncLoadAssets__ = __asyncLoadAssets__;
      repeatItem.finish = true;
      repeatItem.err = err;

      if (!err) {
        var assets = Array.isArray(subTask.output) ? subTask.output : [subTask.output];
        var map = Object.create(null);

        for (var _i = 0, _l = assets.length; _i < _l; _i++) {
          var dependAsset = assets[_i];
          dependAsset && (map[dependAsset instanceof cc.Asset ? dependAsset._uuid + '@import' : uuid + '@native'] = dependAsset);
        }

        if (!init) {
          if (asset.__nativeDepend__ && !asset._nativeAsset) {
            var missingAsset = setProperties(uuid, asset, map);

            if (!missingAsset && !asset.__onLoadInvoked__) {
              try {
                asset.onLoad && asset.onLoad();
                asset.__onLoadInvoked__ = true;
              } catch (e) {
                cc.error(e.message, e.stack);
              }
            }
          }
        } else {
          var missingAsset = setProperties(uuid, asset, map);

          if (!missingAsset && !asset.__onLoadInvoked__) {
            try {
              asset.onLoad && asset.onLoad();
              asset.__onLoadInvoked__ = true;
            } catch (e) {
              cc.error(e.message, e.stack);
            }
          }

          files.remove(id);
          parsed.remove(id);
          cache(uuid, asset, cacheAsset !== undefined ? cacheAsset : cc.assetManager.cacheAsset);
        }

        subTask.recycle();
      }

      var callbacks = repeatItem.callbacks;

      for (var i = 0, l = callbacks.length; i < l; i++) {
        var cb = callbacks[i];
        asset.addRef && asset.addRef();
        cb.item.content = asset;
        cb.done(err);
      }

      callbacks.length = 0;
    }
  });
  pipeline.async(subTask);
}

module.exports = load;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXZcXGNvY29zMmRcXGNvcmVcXGFzc2V0LW1hbmFnZXJcXGxvYWQuanMiXSwibmFtZXMiOlsicGFja01hbmFnZXIiLCJyZXF1aXJlIiwiUGlwZWxpbmUiLCJwYXJzZXIiLCJnZXREZXBlbmRzIiwiY2FjaGUiLCJnYXRoZXJBc3NldCIsInNldFByb3BlcnRpZXMiLCJmb3JFYWNoIiwiY2xlYXIiLCJjaGVja0NpcmNsZVJlZmVyZW5jZSIsImFzc2V0cyIsImZpbGVzIiwicGFyc2VkIiwicGlwZWxpbmUiLCJUYXNrIiwibG9hZCIsInRhc2siLCJkb25lIiwiZmlyc3RUYXNrIiwicHJvZ3Jlc3MiLCJmaW5pc2giLCJ0b3RhbCIsImlucHV0IiwibGVuZ3RoIiwiY2FuSW52b2tlIiwib3B0aW9ucyIsIl9fZXhjbHVkZV9fIiwiT2JqZWN0IiwiY3JlYXRlIiwib3V0cHV0IiwiaXRlbSIsImNiIiwic3ViVGFzayIsIm9uUHJvZ3Jlc3MiLCJvbkNvbXBsZXRlIiwiZXJyIiwiaXNGaW5pc2giLCJjYyIsImFzc2V0TWFuYWdlciIsImZvcmNlIiwiQ0NfRURJVE9SIiwiZXJyb3IiLCJtZXNzYWdlIiwic3RhY2siLCJkaXNwYXRjaCIsInB1c2giLCJyZWN5Y2xlIiwibG9hZE9uZUFzc2V0UGlwZWxpbmUiLCJhc3luYyIsImZldGNoIiwiaXNOYXRpdmUiLCJ1dWlkIiwiZmlsZSIsInJlbG9hZCIsImhhcyIsImRhdGEiLCJwYXJzZSIsImV4Y2x1ZGUiLCJpZCIsImV4dCIsImFzc2V0IiwiY29udGVudCIsInJlbW92ZSIsImNhbGxiYWNrcyIsImFkZFJlZiIsImdldCIsIl9fYXN5bmNMb2FkQXNzZXRzX18iLCJsb2FkRGVwZW5kcyIsIl91dWlkIiwiaW5pdCIsImNvbmZpZyIsImNhY2hlQXNzZXQiLCJkZXBlbmRzIiwicmVwZWF0SXRlbSIsIm9uRXJyb3IiLCJwcm90b3R5cGUiLCJkZWNSZWYiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJpIiwibCIsImRlcGVuZEFzc2V0IiwiQXNzZXQiLCJfX25hdGl2ZURlcGVuZF9fIiwiX25hdGl2ZUFzc2V0IiwibWlzc2luZ0Fzc2V0IiwiX19vbkxvYWRJbnZva2VkX18iLCJvbkxvYWQiLCJlIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQTNCOztBQUNBLElBQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsSUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7ZUFDZ0dBLE9BQU8sQ0FBQyxhQUFEO0lBQS9GRyxzQkFBQUE7SUFBWUMsaUJBQUFBO0lBQU9DLHVCQUFBQTtJQUFhQyx5QkFBQUE7SUFBZUMsbUJBQUFBO0lBQVNDLGlCQUFBQTtJQUFPQyxnQ0FBQUE7O2dCQUMzQlQsT0FBTyxDQUFDLFVBQUQ7SUFBM0NVLG1CQUFBQTtJQUFRQyxrQkFBQUE7SUFBT0MsbUJBQUFBO0lBQVFDLHFCQUFBQTs7QUFDL0IsSUFBTUMsSUFBSSxHQUFHZCxPQUFPLENBQUMsUUFBRCxDQUFwQjs7QUFFQSxTQUFTZSxJQUFULENBQWVDLElBQWYsRUFBcUJDLElBQXJCLEVBQTJCO0FBRXZCLE1BQUlDLFNBQVMsR0FBRyxLQUFoQjs7QUFDQSxNQUFJLENBQUNGLElBQUksQ0FBQ0csUUFBVixFQUFvQjtBQUNoQkgsSUFBQUEsSUFBSSxDQUFDRyxRQUFMLEdBQWdCO0FBQUVDLE1BQUFBLE1BQU0sRUFBRSxDQUFWO0FBQWFDLE1BQUFBLEtBQUssRUFBRUwsSUFBSSxDQUFDTSxLQUFMLENBQVdDLE1BQS9CO0FBQXVDQyxNQUFBQSxTQUFTLEVBQUU7QUFBbEQs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SCxDQUFRa0IsR0FBUjtBQUVIOztBQUVENEIsTUFBQUEsU0FBUyxDQUFDeEMsTUFBVixHQUFtQixDQUFuQjtBQUNIO0FBakVxQixHQUFaLENBQWQ7QUFvRUFWLEVBQUFBLFFBQVEsQ0FBQ21DLEtBQVQsQ0FBZWhCLE9BQWY7QUFDSDs7QUFFRDJELE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjdFLElBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxOSBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuY29uc3QgcGFja01hbmFnZXIgPSByZXF1aXJlKCcuL3BhY2stbWFuYWdlcicpO1xyXG5jb25zdCBQaXBlbGluZSA9IHJlcXVpcmUoJy4vcGlwZWxpbmUnKTtcclxuY29uc3QgcGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcclxuY29uc3QgeyBnZXREZXBlbmRzLCBjYWNoZSwgZ2F0aGVyQXNzZXQsIHNldFByb3BlcnRpZXMsIGZvckVhY2gsIGNsZWFyLCBjaGVja0NpcmNsZVJlZmVyZW5jZSB9ID0gcmVxdWlyZSgnLi91dGlsaXRpZXMnKTtcclxuY29uc3QgeyBhc3NldHMsIGZpbGVzLCBwYXJzZWQsIHBpcGVsaW5lIH0gPSByZXF1aXJlKCcuL3NoYXJlZCcpO1xyXG5jb25zdCBUYXNrID0gcmVxdWlyZSgnLi90YXNrJyk7XHJcblxyXG5mdW5jdGlvbiBsb2FkICh0YXNrLCBkb25lKSB7XHJcblxyXG4gICAgbGV0IGZpcnN0VGFzayA9IGZhbHNlO1xyXG4gICAgaWYgKCF0YXNrLnByb2dyZXNzKSB7XHJcbiAgICAgICAgdGFzay5wcm9ncmVzcyA9IHsgZmluaXNoOiAwLCB0b3RhbDogdGFzay5pbnB1dC5sZW5ndGgsIGNhbkludm9rZTogdHJ1ZSB9O1xyXG4gICAgICAgIGZpcnN0VGFzayA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHZhciBvcHRpb25zID0gdGFzay5vcHRpb25zLCBwcm9ncmVzcyA9IHRhc2sucHJvZ3Jlc3M7XHJcblxyXG4gICAgb3B0aW9ucy5fX2V4Y2x1ZGVfXyA9IG9wdGlvbnMuX19leGNsdWRlX18gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuXHJcbiAgICB0YXNrLm91dHB1dCA9IFtdO1xyXG4gICAgXHJcbiAgICBmb3JFYWNoKHRhc2suaW5wdXQsIGZ1bmN0aW9uIChpdGVtLCBjYikge1xyXG5cclxuICAgICAgICBsZXQgc3ViVGFzayA9IFRhc2suY3JlYXRlKHsgXHJcbiAgICAgICAgICAgIGlucHV0OiBpdGVtLCBcclxuICAgICAgICAgICAgb25Qcm9ncmVzczogdGFzay5vblByb2dyZXNzLCBcclxuICAgICAgICAgICAgb3B0aW9ucywgXHJcbiAgICAgICAgICAgIHByb2dyZXNzLCBcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24gKGVyciwgaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVyciAmJiAhdGFzay5pc0ZpbmlzaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2MuYXNzZXRNYW5hZ2VyLmZvcmNlIHx8IGZpcnN0VGFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUNDX0VESVRPUikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2MuZXJyb3IoZXJyLm1lc3NhZ2UsIGVyci5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MuY2FuSW52b2tlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzLmNhbkludm9rZSAmJiB0YXNrLmRpc3BhdGNoKCdwcm9ncmVzcycsICsrcHJvZ3Jlc3MuZmluaXNoLCBwcm9ncmVzcy50b3RhbCwgaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGFzay5vdXRwdXQucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHN1YlRhc2sucmVjeWNsZSgpO1xyXG4gICAgICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsb2FkT25lQXNzZXRQaXBlbGluZS5hc3luYyhzdWJUYXNrKTtcclxuXHJcbiAgICB9LCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIG9wdGlvbnMuX19leGNsdWRlX18gPSBudWxsO1xyXG5cclxuICAgICAgICBpZiAodGFzay5pc0ZpbmlzaCkge1xyXG4gICAgICAgICAgICBjbGVhcih0YXNrLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRhc2suZGlzcGF0Y2goJ2Vycm9yJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnYXRoZXJBc3NldCh0YXNrKTtcclxuICAgICAgICBjbGVhcih0YXNrLCB0cnVlKTtcclxuICAgICAgICBkb25lKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxudmFyIGxvYWRPbmVBc3NldFBpcGVsaW5lID0gbmV3IFBpcGVsaW5lKCdsb2FkT25lQXNzZXQnLCBbXHJcblxyXG4gICAgZnVuY3Rpb24gZmV0Y2ggKHRhc2ssIGRvbmUpIHtcclxuICAgICAgICB2YXIgaXRlbSA9IHRhc2sub3V0cHV0ID0gdGFzay5pbnB1dDtcclxuICAgICAgICB2YXIgeyBvcHRpb25zLCBpc05hdGl2ZSwgdXVpZCwgZmlsZSB9ID0gaXRlbTtcclxuICAgICAgICB2YXIgeyByZWxvYWQgfSA9IG9wdGlvbnM7XHJcblxyXG4gICAgICAgIGlmIChmaWxlIHx8ICghcmVsb2FkICYmICFpc05hdGl2ZSAmJiBhc3NldHMuaGFzKHV1aWQpKSkgcmV0dXJuIGRvbmUoKTtcclxuXHJcbiAgICAgICAgcGFja01hbmFnZXIubG9hZChpdGVtLCB0YXNrLm9wdGlvbnMsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcclxuICAgICAgICAgICAgaXRlbS5maWxlID0gZGF0YTtcclxuICAgICAgICAgICAgZG9uZShlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZSAodGFzaywgZG9uZSkge1xyXG5cclxuICAgICAgICB2YXIgaXRlbSA9IHRhc2sub3V0cHV0ID0gdGFzay5pbnB1dCwgcHJvZ3Jlc3MgPSB0YXNrLnByb2dyZXNzLCBleGNsdWRlID0gdGFzay5vcHRpb25zLl9fZXhjbHVkZV9fO1xyXG4gICAgICAgIHZhciB7IGlkLCBmaWxlLCBvcHRpb25zIH0gPSBpdGVtO1xyXG5cclxuICAgICAgICBpZiAoaXRlbS5pc05hdGl2ZSkge1xyXG4gICAgICAgICAgICBwYXJzZXIucGFyc2UoaWQsIGZpbGUsIGl0ZW0uZXh0LCBvcHRpb25zLCBmdW5jdGlvbiAoZXJyLCBhc3NldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIGRvbmUoZXJyKTtcclxuICAgICAgICAgICAgICAgIGl0ZW0uY29udGVudCA9IGFzc2V0O1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3MuY2FuSW52b2tlICYmIHRhc2suZGlzcGF0Y2goJ3Byb2dyZXNzJywgKytwcm9ncmVzcy5maW5pc2gsIHByb2dyZXNzLnRvdGFsLCBpdGVtKTtcclxuICAgICAgICAgICAgICAgIGZpbGVzLnJlbW92ZShpZCk7XHJcbiAgICAgICAgICAgICAgICBwYXJzZWQucmVtb3ZlKGlkKTtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgeyB1dWlkIH0gPSBpdGVtO1xyXG4gICAgICAgICAgICBpZiAodXVpZCBpbiBleGNsdWRlKSB7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIHZhciB7IGZpbmlzaCwgY29udGVudCwgZXJyLCBjYWxsYmFja3MgfSA9IGV4Y2x1ZGVbdXVpZF07XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzcy5jYW5JbnZva2UgJiYgdGFzay5kaXNwYXRjaCgncHJvZ3Jlc3MnLCArK3Byb2dyZXNzLmZpbmlzaCwgcHJvZ3Jlc3MudG90YWwsIGl0ZW0pO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoZmluaXNoIHx8IGNoZWNrQ2lyY2xlUmVmZXJlbmNlKHV1aWQsIHV1aWQsIGV4Y2x1ZGUpICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgJiYgY29udGVudC5hZGRSZWYgJiYgY29udGVudC5hZGRSZWYoKTtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoZXJyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKHsgZG9uZSwgaXRlbSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5yZWxvYWQgJiYgYXNzZXRzLmhhcyh1dWlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3NldCA9IGFzc2V0cy5nZXQodXVpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuX19hc3luY0xvYWRBc3NldHNfXyB8fCAhYXNzZXQuX19hc3luY0xvYWRBc3NldHNfXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmNvbnRlbnQgPSBhc3NldC5hZGRSZWYoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3MuY2FuSW52b2tlICYmIHRhc2suZGlzcGF0Y2goJ3Byb2dyZXNzJywgKytwcm9ncmVzcy5maW5pc2gsIHByb2dyZXNzLnRvdGFsLCBpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZERlcGVuZHModGFzaywgYXNzZXQsIGRvbmUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZXIucGFyc2UoaWQsIGZpbGUsICdpbXBvcnQnLCBvcHRpb25zLCBmdW5jdGlvbiAoZXJyLCBhc3NldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gZG9uZShlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NldC5fdXVpZCA9IHV1aWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWREZXBlbmRzKHRhc2ssIGFzc2V0LCBkb25lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXSk7XHJcblxyXG5mdW5jdGlvbiBsb2FkRGVwZW5kcyAodGFzaywgYXNzZXQsIGRvbmUsIGluaXQpIHtcclxuXHJcbiAgICB2YXIgaXRlbSA9IHRhc2suaW5wdXQsIHByb2dyZXNzID0gdGFzay5wcm9ncmVzcztcclxuICAgIHZhciB7IHV1aWQsIGlkLCBvcHRpb25zLCBjb25maWcgfSA9IGl0ZW07XHJcbiAgICB2YXIgeyBfX2FzeW5jTG9hZEFzc2V0c19fLCBjYWNoZUFzc2V0IH0gPSBvcHRpb25zO1xyXG5cclxuICAgIHZhciBkZXBlbmRzID0gW107XHJcbiAgICAvLyBhZGQgcmVmZXJlbmNlIGF2b2lkIGJlaW5nIHJlbGVhc2VkIGR1cmluZyBsb2FkaW5nIGRlcGVuZGVuY2llc1xyXG4gICAgYXNzZXQuYWRkUmVmICYmIGFzc2V0LmFkZFJlZigpO1xyXG4gICAgZ2V0RGVwZW5kcyh1dWlkLCBhc3NldCwgT2JqZWN0LmNyZWF0ZShudWxsKSwgZGVwZW5kcywgZmFsc2UsIF9fYXN5bmNMb2FkQXNzZXRzX18sIGNvbmZpZyk7XHJcbiAgICBwcm9ncmVzcy5jYW5JbnZva2UgJiYgdGFzay5kaXNwYXRjaCgncHJvZ3Jlc3MnLCArK3Byb2dyZXNzLmZpbmlzaCwgcHJvZ3Jlc3MudG90YWwgKz0gZGVwZW5kcy5sZW5ndGgsIGl0ZW0pO1xyXG5cclxuICAgIHZhciByZXBlYXRJdGVtID0gdGFzay5vcHRpb25zLl9fZXhjbHVkZV9fW3V1aWRdID0geyBjb250ZW50OiBhc3NldCwgZmluaXNoOiBmYWxzZSwgY2FsbGJhY2tzOiBbeyBkb25lLCBpdGVtIH1dIH07XHJcblxyXG4gICAgbGV0IHN1YlRhc2sgPSBUYXNrLmNyZWF0ZSh7IFxyXG4gICAgICAgIGlucHV0OiBkZXBlbmRzLCBcclxuICAgICAgICBvcHRpb25zOiB0YXNrLm9wdGlvbnMsIFxyXG4gICAgICAgIG9uUHJvZ3Jlc3M6IHRhc2sub25Qcm9ncmVzcywgXHJcbiAgICAgICAgb25FcnJvcjogVGFzay5wcm90b3R5cGUucmVjeWNsZSwgXHJcbiAgICAgICAgcHJvZ3Jlc3MsIFxyXG4gICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgYXNzZXQuZGVjUmVmICYmIGFzc2V0LmRlY1JlZihmYWxzZSk7XHJcbiAgICAgICAgICAgIGFzc2V0Ll9fYXN5bmNMb2FkQXNzZXRzX18gPSBfX2FzeW5jTG9hZEFzc2V0c19fO1xyXG4gICAgICAgICAgICByZXBlYXRJdGVtLmZpbmlzaCA9IHRydWU7XHJcbiAgICAgICAgICAgIHJlcGVhdEl0ZW0uZXJyID0gZXJyO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFlcnIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYXNzZXRzID0gQXJyYXkuaXNBcnJheShzdWJUYXNrLm91dHB1dCkgPyBzdWJUYXNrLm91dHB1dCA6IFtzdWJUYXNrLm91dHB1dF07XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXNzZXRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBlbmRBc3NldCA9IGFzc2V0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRBc3NldCAmJiAobWFwW2RlcGVuZEFzc2V0IGluc3RhbmNlb2YgY2MuQXNzZXQgPyBkZXBlbmRBc3NldC5fdXVpZCArICdAaW1wb3J0JyA6IHV1aWQgKyAnQG5hdGl2ZSddID0gZGVwZW5kQXNzZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghaW5pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhc3NldC5fX25hdGl2ZURlcGVuZF9fICYmICFhc3NldC5fbmF0aXZlQXNzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1pc3NpbmdBc3NldCA9IHNldFByb3BlcnRpZXModXVpZCwgYXNzZXQsIG1hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWlzc2luZ0Fzc2V0ICYmICFhc3NldC5fX29uTG9hZEludm9rZWRfXykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldC5vbkxvYWQgJiYgYXNzZXQub25Mb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXQuX19vbkxvYWRJbnZva2VkX18gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYy5lcnJvcihlLm1lc3NhZ2UsIGUuc3RhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pc3NpbmdBc3NldCA9IHNldFByb3BlcnRpZXModXVpZCwgYXNzZXQsIG1hcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtaXNzaW5nQXNzZXQgJiYgIWFzc2V0Ll9fb25Mb2FkSW52b2tlZF9fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldC5vbkxvYWQgJiYgYXNzZXQub25Mb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NldC5fX29uTG9hZEludm9rZWRfXyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNjLmVycm9yKGUubWVzc2FnZSwgZS5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMucmVtb3ZlKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJzZWQucmVtb3ZlKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWNoZSh1dWlkLCBhc3NldCwgY2FjaGVBc3NldCAhPT0gdW5kZWZpbmVkID8gY2FjaGVBc3NldCA6IGNjLmFzc2V0TWFuYWdlci5jYWNoZUFzc2V0KTsgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdWJUYXNrLnJlY3ljbGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHJlcGVhdEl0ZW0uY2FsbGJhY2tzO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgICAgICAgICAgICAgYXNzZXQuYWRkUmVmICYmIGFzc2V0LmFkZFJlZigpO1xyXG4gICAgICAgICAgICAgICAgY2IuaXRlbS5jb250ZW50ID0gYXNzZXQ7XHJcbiAgICAgICAgICAgICAgICBjYi5kb25lKGVycik7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYWxsYmFja3MubGVuZ3RoID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBwaXBlbGluZS5hc3luYyhzdWJUYXNrKTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBsb2FkOyJdLCJzb3VyY2VSb290IjoiLyJ9