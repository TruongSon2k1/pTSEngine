
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/mesh-buffer.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

var _gfx = _interopRequireDefault(require("../../../renderer/gfx"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var FIX_IOS14_BUFFER = (cc.sys.os === cc.sys.OS_IOS || cc.sys.os === cc.sys.OS_OSX) && cc.sys.isBrowser && /(OS 1[4-9])|(Version\/1[4-9])/.test(window.navigator.userAgent);
var MeshBuffer = cc.Class({
  name: 'cc.MeshBuffer',
  ctor: function ctor(batcher, vertexFormat) {
    this.init(batcher, vertexFormat);
  },
  init: function init(batcher, vertexFormat) {
    this.byteOffset = 0;
    this.indiceOffset = 0;
    this.vertexOffset = 0;
    this.indiceStart = 0;
    this._dirty = false;
    this._vertexFormat = vertexFormat;
    this._vertexBytes = this._vertexFormat._bytes;
    this._arrOffset = 0;
    this._vbArr = [];
    this._vb = new _gfx["default"].VertexBuffer(batcher._device, vertexFormat, _gfx["default"].USAGE_DYNAMIC, new ArrayBuffer(), 0);
    this._vbArr[0] = this._vb;
    this._ibArr = [];
    this._ib = new _gfx["default"].IndexBuffer(batcher._device, _gfx["default"].INDEX_FMT_UINT16, _gfx["default"].USAGE_STATIC, new ArrayBuffer(), 0);
    this._ibArr[0] = this._ib;
    this._vData = null;
    this._uintVData = null;
    this._iData = null;
    this._batcher = batcher;
    this._initVDataCount = 256 * vertexFormat._bytes; // actually 256 * 4 * (vertexFormat._bytes / 4)

    this._initIDataCount = 256 * 6;
    this._offsetInfo = {
      byteOffset: 0,
      vertexOffset: 0,
      indiceOffset: 0
    };

    this._reallocBuffer();
  },
  uploadData: function uploadData() {
    if (this.byteOffset === 0 || !this._dirty) {
      return;
    } // update vertext data


    var vertexsData = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
    var indicesData = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
    var vb = this._vb;
    vb.update(0, vertexsData);
    var ib = this._ib;
    ib.update(0, indicesData);
    this._dirty = false;
  },
  switchBuffer: function switchBuffer() {
    var offset = ++this._arrOffset;
    this.byteOffset = 0;
    this.vertexOffset = 0;
    this.indiceOffset = 0;
    this.indiceStart = 0;

    if (offset < this._vbArr.length) {
      this._vb = this._vbArr[offset];
      this._ib = this._ibArr[offset];
    } else {
      this._vb = new _gfx["default"].VertexBuffer(this._batcher._device, this._vertexFormat, _gfx["default"].USAGE_DYNAMIC, new ArrayBuffer(), 0);
      this._vbArr[offset] = this._vb;
      this._ib = new _gfx["default"].IndexBuffer(this._batcher._device, _gfx["default"].INDEX_FMT_UINT16, _gfx["default"].USAGE_STATIC, new ArrayBuffer(), 0);
      this._ibArr[offset] = this._ib;
    }
  },
  checkAndSwitchBuffer: function checkAndSwitchBuffer(vertexCount) {
    if (this.vertexOffset + vertexCount > 65535) {
      this.uploadData();

      this._batcher._flush();

      this.switchBuffer();
    }
  },
  requestStatic: function requestStatic(vertexCount, indiceCount) {
    this.checkAndSwitchBuffer(vertexCount);
    var byteOffset = this.byteOffset + vertexCount * this._vertexBytes;
    var indiceOffset = this.indiceOffset + indiceCount;
    var byteLength = this._vData.byteLength;
    var indiceLength = this._iData.length;

    if (byteOffset > byteLength || indiceOffset > indiceLength) {
      while (byteLength < byteOffset || indiceLength < indiceOffset) {
        this._initVDataCount *= 2;
        this._initIDataCount *= 2;
        byteLength = this._initVDataCount * 4;
        indiceLength = this._initIDataCount;
      }

      this._reallocBuffer();
    }

    this._updateOffset(vertexCount, indiceCount, byteOffset);
  },
  _updateOffset: function _updateOffset(vertexCount, indiceCount, byteOffset) {
    var offsetInfo = this._offsetInfo;
    offsetInfo.vertexOffset = this.vertexOffset;
    this.vertexOffset += vertexCount;
    offsetInfo.indiceOffset = this.indiceOffset;
    this.indiceOffset += indiceCount;
    offsetInfo.byteOffset = this.byteOffset;
    this.byteOffset = byteOffset;
    this._dirty = true;
  },
  request: function request(vertexCount, indiceCount) {
    if (this._batcher._buffer !== this) {
      this._batcher._flush();

      this._batcher._buffer = this;
    }

    this.requestStatic(vertexCount, indiceCount);
    return this._offsetInfo;
  },
  _reallocBuffer: function _reallocBuffer() {
    this._reallocVData(true);

    this._reallocIData(true);
  },
  _reallocVData: function _reallocVData(copyOldData) {
    var oldVData;

    if (this._vData) {
      oldVData = new Uint8Array(this._vData.buffer);
    }

    this._vData = new Float32Array(this._initVDataCount);
    this._uintVData = new Uint32Array(this._vData.buffer);
    var newData = new Uint8Array(this._uintVData.buffer);

    if (oldVData && copyOldData) {
      for (var i = 0, l = oldVData.length; i < l; i++) {
        newData[i] = oldVData[i];
      }
    }
  },
  _reallocIData: function _reallocIData(copyOldData) {
    var oldIData = this._iData;
    this._iData = new Uint16Array(this._initIDataCount);

    if (oldIData && copyOldData) {
      var iData = this._iData;

      for (var i = 0, l = oldIData.length; i < l; i++) {
        iData[i] = oldIData[i];
      }
    }
  },
  reset: function reset() {
    this._arrOffset = 0;
    this._vb = this._vbArr[0];
    this._ib = this._ibArr[0];
    this.byteOffset = 0;
    this.indiceOffset = 0;
    this.vertexOffset = 0;
    this.indiceStart = 0;
    this._dirty = false;
  },
  destroy: function destroy() {
    this.reset();

    for (var i = 0; i < this._vbArr.length; i++) {
      var vb = this._vbArr[i];
      vb.destroy();
    }

    this._vbArr = null;

    for (var _i = 0; _i < this._ibArr.length; _i++) {
      var ib = this._ibArr[_i];
      ib.destroy();
    }

    this._ibArr = null;
    this._ib = null;
    this._vb = null;
  },
  forwardIndiceStartToOffset: function forwardIndiceStartToOffset() {
    this.indiceStart = this.indiceOffset;
  }
}); // Should not share vb and id between multiple drawcalls on iOS14, it will cost a lot of time.
// TODO: maybe remove it after iOS14 fix it?

if (FIX_IOS14_BUFFER) {
  MeshBuffer.prototype.checkAndSwitchBuffer = function (vertexCount) {
    if (this.vertexOffset + vertexCount > 65535) {
      this.uploadData();

      this._batcher._flush();
    }
  };

  MeshBuffer.prototype.forwardIndiceStartToOffset = function () {
    this.uploadData();
    this.switchBuffer();
  };
}

cc.MeshBuffer = module.exports = MeshBuffer;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,