
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/bar-filled.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Sprite = require('../../../../../components/CCSprite');

var FillType = Sprite.FillType;

var BarFilledAssembler = /*#__PURE__*/function (_Assembler2D) {
  _inheritsLoose(BarFilledAssembler, _Assembler2D);

  function BarFilledAssembler() {
    return _Assembler2D.apply(this, arguments) || this;
  }

  var _proto = BarFilledAssembler.prototype;

  _proto.updateRenderData = function updateRenderData(sprite) {
    var frame = sprite._spriteFrame;
    this.packToDynamicAtlas(sprite, frame);

    if (!sprite._vertsDirty) {
      return;
    }

    var fillStart = sprite._fillStart;
    var fillRange = sprite._fillRange;

    if (fillRange < 0) {
      fillStart += fillRange;
      fillRange = -fillRange;
    }

    fillRange = fillStart + fillRange;
    fillStart = fillStart > 1.0 ? 1.0 : fillStart;
    fillStart = fillStart < 0.0 ? 0.0 : fillStart;
    fillRange = fillRange > 1.0 ? 1.0 : fillRange;
    fillRange = fillRange < 0.0 ? 0.0 : fillRange;
    fillRange = fillRange - fillStart;
    fillRange = fillRange < 0 ? 0 : fillRange;
    var fillEnd = fillStart + fillRange;
    fillEnd = fillEnd > 1 ? 1 : fillEnd;
    this.updateUVs(sprite, fillStart, fillEnd);
    this.updateVerts(sprite, fillStart, fillEnd);
    sprite._vertsDirty = false;
  };

  _proto.updateUVs = function updateUVs(sprite, fillStart, fillEnd) {
    var spriteFrame = sprite._spriteFrame; //build uvs

    var atlasWidth = spriteFrame._texture.width;
    var atlasHeight = spriteFrame._texture.height;
    var textureRect = spriteFrame._rect; //uv computation should take spritesheet into account.

    var ul, vb, ur, vt;
    var quadUV0, quadUV1, quadUV2, quadUV3, quadUV4, quadUV5, quadUV6, quadUV7;

    if (spriteFrame._rotated) {
      ul = textureRect.x / atlasWidth;
      vb = (textureRect.y + textureRect.width) / atlasHeight;
      ur = (textureRect.x + textureRect.height) / atlasWidth;
      vt = textureRect.y / atlasHeight;
      quadUV0 = quadUV2 = ul;
      quadUV4 = quadUV6 = ur;
      quadUV3 = quadUV7 = vb;
      quadUV1 = quadUV5 = vt;
    } else {
      ul = textureRect.x / atlasWidth;
      vb = (textureRect.y + textureRect.height) / atlasHeight;
      ur = (textureRect.x + textureRect.width) / atlasWidth;
      vt = textureRect.y / atlasHeight;
      quadUV0 = quadUV4 = ul;
      quadUV2 = quadUV6 = ur;
      quadUV1 = quadUV3 = vb;
      quadUV5 = quadUV7 = vt;
    }

    var verts = this._renderData.vDatas[0];
    var uvOffset = this.uvOffset;
    var floatsPerVert = this.floatsPerVert;

    switch (sprite._fillType) {
      case FillType.HORIZONTAL:
        verts[uvOffset] = quadUV0 + (quadUV2 - quadUV0) * fillStart;
        verts[uvOffset + 1] = quadUV1 + (quadUV3 - quadUV1) * fillStart;
        verts[uvOffset + floatsPerVert] = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
        verts[uvOffset + floatsPerVert + 1] = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
        verts[uvOffset + floatsPerVert * 2] = quadUV4 + (quadUV6 - quadUV4) * fillStart;
        verts[uvOffset + floatsPerVert * 2 + 1] = quadUV5 + (quadUV7 - quadUV5) * fillStart;
        verts[uvOffset + floatsPerVert * 3] = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
        verts[uvOffset + floatsPerVert * 3 + 1] = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
        break;

      case FillType.VERTICAL:
        verts[uvOffset] = quadUV0 + (quadUV4 - quadUV0) * fillStart;
        verts[uvOffset + 1] = quadUV1 + (quadUV5 - quadUV1) * fillStart;
        verts[uvOffset + floatsPerVert] = quadUV2 + (quadUV6 - quadUV2) * fillStart;
        verts[uvOffset + floatsPerVert + 1] = quadUV3 + (quadUV7 - quadUV3) * fillStart;
        verts[uvOffset + floatsPerVert * 2] = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
        verts[uvOffset + floatsPerVert * 2 + 1] = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
        verts[uvOffset + floatsPerVert * 3] = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
        verts[uvOffset + floatsPerVert * 3 + 1] = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
        break;

      default:
        cc.errorID(2626);
        break;
    }
  };

  _proto.updateVerts = function updateVerts(sprite, fillStart, fillEnd) {
    var node = sprite.node,
        width = node.width,
        height = node.height,
        appx = node.anchorX * width,
        appy = node.anchorY * height;
    var l = -appx,
        b = -appy,
        r = width - appx,
        t = height - appy;
    var progressStart, progressEnd;

    switch (sprite._fillType) {
      case FillType.HORIZONTAL:
        progressStart = l + (r - l) * fillStart;
        progressEnd = l + (r - l) * fillEnd;
        l = progressStart;
        r = progressEnd;
        break;

      case FillType.VERTICAL:
        progressStart = b + (t - b) * fillStart;
        progressEnd = b + (t - b) * fillEnd;
        b = progressStart;
        t = progressEnd;
        break;

      default:
        cc.errorID(2626);
        break;
    }

    var local = this._local;
    local[0] = l;
    local[1] = b;
    local[2] = r;
    local[3] = t;
    this.updateWorldVerts(sprite);
  };

  return BarFilledAssembler;
}(_assembler2d["default"]);

exports["default"] = BarFilledAssembler;
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,