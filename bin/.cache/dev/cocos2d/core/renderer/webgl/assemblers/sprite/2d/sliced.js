
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/sliced.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _assembler2d = _interopRequireDefault(require("../../../../assembler-2d"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SlicedAssembler = /*#__PURE__*/function (_Assembler2D) {
  _inheritsLoose(SlicedAssembler, _Assembler2D);

  function SlicedAssembler() {
    return _Assembler2D.apply(this, arguments) || this;
  }

  var _proto = SlicedAssembler.prototype;

  _proto.initData = function initData(sprite) {
    if (this._renderData.meshCount > 0) return;

    this._renderData.createData(0, this.verticesFloats, this.indicesCount);

    var indices = this._renderData.iDatas[0];
    var indexOffset = 0;

    for (var r = 0; r < 3; ++r) {
      for (var c = 0; c < 3; ++c) {
        var start = r * 4 + c;
        indices[indexOffset++] = start;
        indices[indexOffset++] = start + 1;
        indices[indexOffset++] = start + 4;
        indices[indexOffset++] = start + 1;
        indices[indexOffset++] = start + 5;
        indices[indexOffset++] = start + 4;
      }
    }
  };

  _proto.initLocal = function initLocal() {
    this._local = [];
    this._local.length = 8;
  };

  _proto.updateRenderData = function updateRenderData(sprite) {
    var frame = sprite._spriteFrame;
    this.packToDynamicAtlas(sprite, frame);

    if (sprite._vertsDirty) {
      this.updateUVs(sprite);
      this.updateVerts(sprite);
      sprite._vertsDirty = false;
    }
  };

  _proto.updateVerts = function updateVerts(sprite) {
    var node = sprite.node,
        width = node.width,
        height = node.height,
        appx = node.anchorX * width,
        appy = node.anchorY * height;
    var frame = sprite.spriteFrame;
    var leftWidth = frame.insetLeft;
    var rightWidth = frame.insetRight;
    var topHeight = frame.insetTop;
    var bottomHeight = frame.insetBottom;
    var sizableWidth = width - leftWidth - rightWidth;
    var sizableHeight = height - topHeight - bottomHeight;
    var xScale = width / (leftWidth + rightWidth);
    var yScale = height / (topHeight + bottomHeight);
    xScale = isNaN(xScale) || xScale > 1 ? 1 : xScale;
    yScale = isNaN(yScale) || yScale > 1 ? 1 : yScale;
    sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
    sizableHeight = sizableHeight < 0 ? 0 : sizableHeight; // update local

    var local = this._local;
    local[0] = -appx;
    local[1] = -appy;
    local[2] = leftWidth * xScale - appx;
    local[3] = bottomHeight * yScale - appy;
    local[4] = local[2] + sizableWidth;
    local[5] = local[3] + sizableHeight;
    local[6] = width - appx;
    local[7] = height - appy;
    this.updateWorldVerts(sprite);
  };

  _proto.updateUVs = function updateUVs(sprite) {
    var verts = this._renderData.vDatas[0];
    var uvSliced = sprite.spriteFrame.uvSliced;
    var uvOffset = this.uvOffset;
    var floatsPerVert = this.floatsPerVert;

    for (var row = 0; row < 4; ++row) {
      for (var col = 0; col < 4; ++col) {
        var vid = row * 4 + col;
        var uv = uvSliced[vid];
        var voffset = vid * floatsPerVert;
        verts[voffset + uvOffset] = uv.u;
        verts[voffset + uvOffset + 1] = uv.v;
      }
    }
  };

  _proto.updateWorldVerts = function updateWorldVerts(sprite) {
    var matrix = sprite.node._worldMatrix;
    var matrixm = matrix.m,
        a = matrixm[0],
        b = matrixm[1],
        c = matrixm[4],
        d = matrixm[5],
        tx = matrixm[12],
        ty = matrixm[13];
    var local = this._local;
    var world = this._renderData.vDatas[0];
    var floatsPerVert = this.floatsPerVert;

    for (var row = 0; row < 4; ++row) {
      var localRowY = local[row * 2 + 1];

      for (var col = 0; col < 4; ++col) {
        var localColX = local[col * 2];
        var worldIndex = (row * 4 + col) * floatsPerVert;
        world[worldIndex] = localColX * a + localRowY * c + tx;
        world[worldIndex + 1] = localColX * b + localRowY * d + ty;
      }
    }
  };

  return SlicedAssembler;
}(_assembler2d["default"]);

exports["default"] = SlicedAssembler;
Object.assign(SlicedAssembler.prototype, {
  verticesCount: 16,
  indicesCount: 54
});
module.exports = exports["default"];
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,