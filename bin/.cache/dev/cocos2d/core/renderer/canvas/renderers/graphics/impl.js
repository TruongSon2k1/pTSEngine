
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/graphics/impl.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2018 Xiamen Yaji Software Co., Ltd.

 https://www.cocos.com/

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var Helper = require('../../../../graphics/helper');

var Types = require('../../../../graphics/types');

var js = require('../../../../platform/js');

var LineJoin = Types.LineJoin;
var LineCap = Types.LineCap;

function Impl() {
  this.cmds = [];
  this.style = {
    strokeStyle: 'black',
    fillStyle: 'white',
    lineCap: 'butt',
    lineJoin: 'miter',
    miterLimit: 10
  };
}

var _proto = Impl.prototype;
js.mixin(_proto, {
  moveTo: function moveTo(x, y) {
    this.cmds.push(['moveTo', [x, y]]);
  },
  lineTo: function lineTo(x, y) {
    this.cmds.push(['lineTo', [x, y]]);
  },
  bezierCurveTo: function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
    this.cmds.push(['bezierCurveTo', [c1x, c1y, c2x, c2y, x, y]]);
  },
  quadraticCurveTo: function quadraticCurveTo(cx, cy, x, y) {
    this.cmds.push(['quadraticCurveTo', [cx, cy, x, y]]);
  },
  arc: function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
    Helper.arc(this, cx, cy, r, startAngle, endAngle, counterclockwise);
  },
  ellipse: function ellipse(cx, cy, rx, ry) {
    Helper.ellipse(this, cx, cy, rx, ry);
  },
  circle: function circle(cx, cy, r) {
    Helper.ellipse(this, cx, cy, r, r);
  },
  rect: function rect(x, y, w, h) {
    this.moveTo(x, y);
    this.lineTo(x, y + h);
    this.lineTo(x + w, y + h);
    this.lineTo(x + w, y);
    this.close();
  },
  roundRect: function roundRect(x, y, w, h, r) {
    Helper.roundRect(this, x, y, w, h, r);
  },
  clear: function clear(comp, clean) {
    this.cmds.length = 0;
  },
  close: function close() {
    this.cmds.push(['closePath', []]);
  },
  stroke: function stroke() {
    this.cmds.push(['stroke', []]);
  },
  fill: function fill() {
    this.cmds.push(['fill', []]);
  }
});
js.set(_proto, 'strokeColor', function (v) {
  var strokeStyle = 'rgba(' + (0 | v.r) + ',' + (0 | v.g) + ',' + (0 | v.b) + ',' + v.a / 255 + ')';
  this.cmds.push(['strokeStyle', strokeStyle]);
  this.style.strokeStyle = strokeStyle;
});
js.set(_proto, 'fillColor', function (v) {
  var fillStyle = 'rgba(' + (0 | v.r) + ',' + (0 | v.g) + ',' + (0 | v.b) + ',' + v.a / 255 + ')';
  this.cmds.push(['fillStyle', fillStyle]);
  this.style.fillStyle = fillStyle;
});
js.set(_proto, 'lineWidth', function (v) {
  this.cmds.push(['lineWidth', v]);
  this.style.lineWidth = v;
});
js.set(_proto, 'lineCap', function (v) {
  var lineCap = 'butt';

  if (v === LineCap.BUTT) {
    lineCap = 'butt';
  } else if (v === LineCap.ROUND) {
    lineCap = 'round';
  } else if (v === LineCap.SQUARE) {
    lineCap = 'square';
  }

  this.cmds.push(['lineCap', lineCap]);
  this.style.lineCap = lineCap;
});
js.set(_proto, 'lineJoin', function (v) {
  var lineJoin = 'bevel';

  if (v === LineJoin.BEVEL) {
    lineJoin = 'bevel';
  } else if (v === LineJoin.ROUND) {
    lineJoin = 'round';
  } else if (v === LineJoin.MITER) {
    lineJoin = 'miter';
  }

  this.cmds.push(['lineJoin', lineJoin]);
  this.style.lineJoin = lineJoin;
});
js.set(_proto, 'miterLimit', function (v) {
  this.cmds.push(['miterLimit', v]);
  this.style.miterLimit = v;
});
cc.Graphics._Impl = Impl;
module.exports = Impl;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXZcXGNvY29zMmRcXGNvcmVcXHJlbmRlcmVyXFxjYW52YXNcXHJlbmRlcmVyc1xcZ3JhcGhpY3NcXGltcGwuanMiXSwibmFtZXMiOlsiSGVscGVyIiwicmVxdWlyZSIsIlR5cGVzIiwianMiLCJMaW5lSm9pbiIsIkxpbmVDYXAiLCJJbXBsIiwiY21kcyIsInN0eWxlIiwic3Ryb2tlU3R5bGUiLCJmaWxsU3R5bGUiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJtaXRlckxpbWl0IiwiX3Byb3RvIiwicHJvdG90eXBlIiwibWl4aW4iLCJtb3ZlVG8iLCJ4IiwieSIsInB1c2giLCJsaW5lVG8iLCJiZXppZXJDdXJ2ZVRvIiwiYzF4IiwiYzF5IiwiYzJ4IiwiYzJ5IiwicXVhZHJhdGljQ3VydmVUbyIsImN4IiwiY3kiLCJhcmMiLCJyIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiY291bnRlcmNsb2Nrd2lzZSIsImVsbGlwc2UiLCJyeCIsInJ5IiwiY2lyY2xlIiwicmVjdCIsInciLCJoIiwiY2xvc2UiLCJyb3VuZFJlY3QiLCJjbGVhciIsImNvbXAiLCJjbGVhbiIsImxlbmd0aCIsInN0cm9rZSIsImZpbGwiLCJzZXQiLCJ2IiwiZyIsImIiLCJhIiwibGluZVdpZHRoIiwiQlVUVCIsIlJPVU5EIiwiU1FVQVJFIiwiQkVWRUwiLCJNSVRFUiIsImNjIiwiR3JhcGhpY3MiLCJfSW1wbCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyw2QkFBRCxDQUF0Qjs7QUFDQSxJQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyw0QkFBRCxDQUFyQjs7QUFDQSxJ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QUFPcEMsTUFBUCxFQUFlLFlBQWYsRUFBNkIsVUFBVXFDLENBQVYsRUFBYTtBQUN0QyxPQUFLNUMsSUFBTCxDQUFVYSxJQUFWLENBQWUsQ0FBQyxZQUFELEVBQWUrQixDQUFmLENBQWY7QUFDQSxPQUFLM0MsS0FBTCxDQUFXSyxVQUFYLEdBQXdCc0MsQ0FBeEI7QUFDSCxDQUhEO0FBS0FVLEVBQUUsQ0FBQ0MsUUFBSCxDQUFZQyxLQUFaLEdBQW9CekQsSUFBcEI7QUFDQTBELE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNELElBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiBDb3B5cmlnaHQgKGMpIDIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXG5cbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cblxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmNvbnN0IEhlbHBlciA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL2dyYXBoaWNzL2hlbHBlcicpO1xuY29uc3QgVHlwZXMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9ncmFwaGljcy90eXBlcycpO1xuY29uc3QganMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9wbGF0Zm9ybS9qcycpO1xuY29uc3QgTGluZUpvaW4gPSBUeXBlcy5MaW5lSm9pbjtcbmNvbnN0IExpbmVDYXAgPSBUeXBlcy5MaW5lQ2FwO1xuXG5mdW5jdGlvbiBJbXBsICgpIHtcbiAgICB0aGlzLmNtZHMgPSBbXTtcblxuICAgIHRoaXMuc3R5bGUgPSB7XG4gICAgICAgIHN0cm9rZVN0eWxlOiAnYmxhY2snLFxuICAgICAgICBmaWxsU3R5bGU6ICd3aGl0ZScsXG4gICAgICAgIGxpbmVDYXA6ICdidXR0JyxcbiAgICAgICAgbGluZUpvaW46ICdtaXRlcicsXG4gICAgICAgIG1pdGVyTGltaXQ6IDEwXG4gICAgfTtcbn1cblxubGV0IF9wcm90byA9IEltcGwucHJvdG90eXBlO1xuXG5qcy5taXhpbihfcHJvdG8sIHtcbiAgICBtb3ZlVG8gKHgsIHkpIHtcbiAgICAgICAgdGhpcy5jbWRzLnB1c2goWydtb3ZlVG8nLCBbeCwgeV1dKTtcbiAgICB9LFxuXG4gICAgbGluZVRvICh4LCB5KSB7XG4gICAgICAgIHRoaXMuY21kcy5wdXNoKFsnbGluZVRvJywgW3gsIHldXSk7XG4gICAgfSxcblxuICAgIGJlemllckN1cnZlVG8gKGMxeCwgYzF5LCBjMngsIGMyeSwgeCwgeSkge1xuICAgICAgICB0aGlzLmNtZHMucHVzaChbJ2JlemllckN1cnZlVG8nLCBbYzF4LCBjMXksIGMyeCwgYzJ5LCB4LCB5XV0pO1xuICAgIH0sXG5cbiAgICBxdWFkcmF0aWNDdXJ2ZVRvIChjeCwgY3ksIHgsIHkpIHtcbiAgICAgICAgdGhpcy5jbWRzLnB1c2goWydxdWFkcmF0aWNDdXJ2ZVRvJywgW2N4LCBjeSwgeCwgeV1dKTtcbiAgICB9LFxuXG4gICAgYXJjIChjeCwgY3ksIHIsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBjb3VudGVyY2xvY2t3aXNlKSB7XG4gICAgICAgIEhlbHBlci5hcmModGhpcywgY3gsIGN5LCByLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgY291bnRlcmNsb2Nrd2lzZSk7XG4gICAgfSxcblxuICAgIGVsbGlwc2UgKGN4LCBjeSwgcngsIHJ5KSB7XG4gICAgICAgIEhlbHBlci5lbGxpcHNlKHRoaXMsIGN4LCBjeSwgcngsIHJ5KTtcbiAgICB9LFxuXG4gICAgY2lyY2xlIChjeCwgY3ksIHIpIHtcbiAgICAgICAgSGVscGVyLmVsbGlwc2UodGhpcywgY3gsIGN5LCByLCByKTtcbiAgICB9LFxuXG4gICAgcmVjdCAoeCwgeSwgdywgaCkge1xuICAgICAgICB0aGlzLm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5saW5lVG8oeCwgeSArIGgpO1xuICAgICAgICB0aGlzLmxpbmVUbyh4ICsgdywgeSArIGgpO1xuICAgICAgICB0aGlzLmxpbmVUbyh4ICsgdywgeSk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9LFxuXG4gICAgcm91bmRSZWN0ICh4LCB5LCB3LCBoLCByKSB7XG4gICAgICAgIEhlbHBlci5yb3VuZFJlY3QodGhpcywgeCwgeSwgdywgaCwgcik7XG4gICAgfSxcblxuICAgIGNsZWFyIChjb21wLCBjbGVhbikge1xuICAgICAgICB0aGlzLmNtZHMubGVuZ3RoID0gMDtcbiAgICB9LFxuXG4gICAgY2xvc2UgKCkge1xuICAgICAgICB0aGlzLmNtZHMucHVzaChbJ2Nsb3NlUGF0aCcsIFtdXSk7XG4gICAgfSxcblxuICAgIHN0cm9rZSAoKSB7XG4gICAgICAgIHRoaXMuY21kcy5wdXNoKFsnc3Ryb2tlJywgW11dKTtcbiAgICB9LFxuXG4gICAgZmlsbCAoKSB7XG4gICAgICAgIHRoaXMuY21kcy5wdXNoKFsnZmlsbCcsIFtdXSk7XG4gICAgfVxufSk7XG5cbmpzLnNldChfcHJvdG8sICdzdHJva2VDb2xvcicsIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIHN0cm9rZVN0eWxlID0gJ3JnYmEoJyArICgwIHwgdi5yKSArICcsJyArICgwIHwgdi5nKSArICcsJyArICgwIHwgdi5iKSArICcsJyArIHYuYSAvIDI1NSArICcpJztcbiAgICB0aGlzLmNtZHMucHVzaChbJ3N0cm9rZVN0eWxlJywgc3Ryb2tlU3R5bGVdKTtcbiAgICB0aGlzLnN0eWxlLnN0cm9rZVN0eWxlID0gc3Ryb2tlU3R5bGU7XG59KTtcblxuanMuc2V0KF9wcm90bywgJ2ZpbGxDb2xvcicsIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGZpbGxTdHlsZSA9ICdyZ2JhKCcgKyAoMCB8IHYucikgKyAnLCcgKyAoMCB8IHYuZykgKyAnLCcgKyAoMCB8IHYuYikgKyAnLCcgKyB2LmEgLyAyNTUgKyAnKSc7XG4gICAgdGhpcy5jbWRzLnB1c2goWydmaWxsU3R5bGUnLCBmaWxsU3R5bGVdKTtcbiAgICB0aGlzLnN0eWxlLmZpbGxTdHlsZSA9IGZpbGxTdHlsZTtcbn0pO1xuXG5qcy5zZXQoX3Byb3RvLCAnbGluZVdpZHRoJywgZnVuY3Rpb24gKHYpIHtcbiAgICB0aGlzLmNtZHMucHVzaChbJ2xpbmVXaWR0aCcsIHZdKTtcbiAgICB0aGlzLnN0eWxlLmxpbmVXaWR0aCA9IHY7XG59KTtcblxuXG5qcy5zZXQoX3Byb3RvLCAnbGluZUNhcCcsIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGxpbmVDYXAgPSAnYnV0dCc7XG4gICAgaWYgKHYgPT09IExpbmVDYXAuQlVUVCkge1xuICAgICAgICBsaW5lQ2FwID0gJ2J1dHQnO1xuICAgIH1cbiAgICBlbHNlIGlmICh2ID09PSBMaW5lQ2FwLlJPVU5EKSB7XG4gICAgICAgIGxpbmVDYXAgPSAncm91bmQnO1xuICAgIH1cbiAgICBlbHNlIGlmICh2ID09PSBMaW5lQ2FwLlNRVUFSRSkge1xuICAgICAgICBsaW5lQ2FwID0gJ3NxdWFyZSc7XG4gICAgfVxuICAgIHRoaXMuY21kcy5wdXNoKFsnbGluZUNhcCcsIGxpbmVDYXBdKTtcbiAgICB0aGlzLnN0eWxlLmxpbmVDYXAgPSBsaW5lQ2FwO1xufSk7XG5cbmpzLnNldChfcHJvdG8sICdsaW5lSm9pbicsIGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIGxpbmVKb2luID0gJ2JldmVsJztcbiAgICBpZiAodiA9PT0gTGluZUpvaW4uQkVWRUwpIHtcbiAgICAgICAgbGluZUpvaW4gPSAnYmV2ZWwnO1xuICAgIH1cbiAgICBlbHNlIGlmICh2ID09PSBMaW5lSm9pbi5ST1VORCkge1xuICAgICAgICBsaW5lSm9pbiA9ICdyb3VuZCc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHYgPT09IExpbmVKb2luLk1JVEVSKSB7XG4gICAgICAgIGxpbmVKb2luID0gJ21pdGVyJztcbiAgICB9XG5cbiAgICB0aGlzLmNtZHMucHVzaChbJ2xpbmVKb2luJywgbGluZUpvaW5dKTtcbiAgICB0aGlzLnN0eWxlLmxpbmVKb2luID0gbGluZUpvaW47XG59KTtcblxuanMuc2V0KF9wcm90bywgJ21pdGVyTGltaXQnLCBmdW5jdGlvbiAodikge1xuICAgIHRoaXMuY21kcy5wdXNoKFsnbWl0ZXJMaW1pdCcsIHZdKTtcbiAgICB0aGlzLnN0eWxlLm1pdGVyTGltaXQgPSB2O1xufSk7XG5cbmNjLkdyYXBoaWNzLl9JbXBsID0gSW1wbDtcbm1vZHVsZS5leHBvcnRzID0gSW1wbDtcbiJdLCJzb3VyY2VSb290IjoiLyJ9