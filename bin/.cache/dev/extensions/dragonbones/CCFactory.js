
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/extensions/dragonbones/CCFactory.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

/****************************************************************************
 Copyright (c) 2016 Chukong Technologies Inc.
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

 http://www.cocos2d-x.org

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/
var BaseObject = dragonBones.BaseObject,
    BaseFactory = dragonBones.BaseFactory;
/**
 * @module dragonBones
*/

/**
 * DragonBones factory
 * @class CCFactory
 * @extends BaseFactory
*/

var CCFactory = dragonBones.CCFactory = cc.Class({
  name: 'dragonBones.CCFactory',
  "extends": BaseFactory,

  /**
   * @method getInstance
   * @return {CCFactory}
   * @static
   * @example
   * let factory = dragonBones.CCFactory.getInstance();
  */
  statics: {
    _factory: null,
    getInstance: function getInstance() {
      if (!CCFactory._factory) {
        CCFactory._factory = new CCFactory();
      }

      return CCFactory._factory;
    }
  },
  ctor: function ctor() {
    var eventManager = new dragonBones.CCArmatureDisplay();
    this._dragonBones = new dragonBones.DragonBones(eventManager);

    if (!CC_NATIVERENDERER && !CC_EDITOR && cc.director._scheduler) {
      cc.game.on(cc.game.EVENT_RESTART, this.initUpdate, this);
      this.initUpdate();
    }
  },
  initUpdate: function initUpdate(dt) {
    cc.director._scheduler.enableForTarget(this);

    cc.director._scheduler.scheduleUpdate(this, cc.Scheduler.PRIORITY_SYSTEM, false);
  },
  update: function update(dt) {
    this._dragonBones.advanceTime(dt);
  },
  getDragonBonesDataByRawData: function getDragonBonesDataByRawData(rawData) {
    var dataParser = rawData instanceof ArrayBuffer ? BaseFactory._binaryParser : this._dataParser;
    return dataParser.parseDragonBonesData(rawData, 1.0);
  },
  // Build new aramture with a new display.
  buildArmatureDisplay: function buildArmatureDisplay(armatureName, dragonBonesName, skinName, textureAtlasName) {
    var armature = this.buildArmature(armatureName, dragonBonesName, skinName, textureAtlasName);
    return armature && armature._display;
  },
  // Build sub armature from an exist armature component.
  // It will share dragonAsset and dragonAtlasAsset.
  // But node can not share,or will cause render error.
  createArmatureNode: function createArmatureNode(comp, armatureName, node) {
    node = node || new cc.Node();
    var display = node.getComponent(dragonBones.ArmatureDisplay);

    if (!display) {
      display = node.addComponent(dragonBones.ArmatureDisplay);
    }

    node.name = armatureName;
    display._armatureName = armatureName;
    display._N$dragonAsset = comp.dragonAsset;
    display._N$dragonAtlasAsset = comp.dragonAtlasAsset;

    display._init();

    return display;
  },
  _buildTextureAtlasData: function _buildTextureAtlasData(textureAtlasData, textureAtlas) {
    if (textureAtlasData) {
      textureAtlasData.renderTexture = textureAtlas;
    } else {
      textureAtlasData = BaseObject.borrowObject(dragonBones.CCTextureAtlasData);
    }

    return textureAtlasData;
  },
  _sortSlots: function _sortSlots() {
    var slots = this._slots;
    var sortedSlots = [];

    for (var i = 0, l = slots.length; i < l; i++) {
      var slot = slots[i];
      var zOrder = slot._zOrder;
      var inserted = false;

      for (var j = sortedSlots.length - 1; j >= 0; j--) {
        if (zOrder >= sortedSlots[j]._zOrder) {
          sortedSlots.splice(j + 1, 0, slot);
          inserted = true;
          break;
        }
      }

      if (!inserted) {
        sortedSlots.splice(0, 0, slot);
      }
    }

    this._slots = sortedSlots;
  },
  _buildArmature: function _buildArmature(dataPackage) {
    var armature = BaseObject.borrowObject(dragonBones.Armature);
    armature._skinData = dataPackage.skin;
    armature._animation = BaseObject.borrowObject(dragonBones.Animation);
    armature._animation._armature = armature;
    armature._animation.animations = dataPackage.armature.animations;
    armature._isChildArmature = false; // fixed dragonbones sort issue
    // armature._sortSlots = this._sortSlots;

    var display = new dragonBones.CCArmatureDisplay();
    armature.init(dataPackage.armature, display, display, this._dragonBones);
    return armature;
  },
  _buildSlot: function _buildSlot(dataPackage, slotData, displays) {
    var slot = BaseObject.borrowObject(dragonBones.CCSlot);
    var display = slot;
    slot.init(slotData, displays, display, display);
    return slot;
  },
  getDragonBonesDataByUUID: function getDragonBonesDataByUUID(uuid) {
    for (var name in this._dragonBonesDataMap) {
      if (name.indexOf(uuid) != -1) {
        return this._dragonBonesDataMap[name];
      }
    }

    return null;
  },
  removeDragonBonesDataByUUID: function removeDragonBonesDataByUUID(uuid, disposeData) {
    if (disposeData === void 0) {
      disposeData = true;
    }

    for (var name in this._dragonBonesDataMap) {
      if (name.indexOf(uuid) === -1) continue;

      if (disposeData) {
        this._dragonBones.bufferObject(this._dragonBonesDataMap[name]);
      }

      delete this._dragonBonesDataMap[name];
    }
  }
});
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXZcXGV4dGVuc2lvbnNcXGRyYWdvbmJvbmVzXFxDQ0ZhY3RvcnkuanMiXSwibmFtZXMiOlsiQmFzZU9iamVjdCIsImRyYWdvbkJvbmVzIiwiQmFzZUZhY3RvcnkiLCJDQ0ZhY3RvcnkiLCJjYyIsIkNsYXNzIiwibmFtZSIsInN0YXRpY3MiLCJfZmFjdG9yeSIsImdldEluc3RhbmNlIiwiY3RvciIsImV2ZW50TWFuYWdlciIsIkNDQXJtYXR1cmVEaXNwbGF5IiwiX2RyYWdvbkJvbmVzIiwiRHJhZ29uQm9uZXMiLCJDQ19OQVRJVkVSRU5ERVJFUiIsIkNDX0VESVRPUiIsImRpcmVjdG9yIiwiX3NjaGVkdWxlciIsImdhbWUiLCJvbiIsIkVWRU5UX1JFU1RBUlQiLCJpbml0VXBkYXRlIiwiZHQiLCJlbmFibGVGb3JUYXJnZXQiLCJzY2hlZHVsZVVwZGF0ZSIsIlNjaGVkdWxlciIsIlBSSU9SSVRZX1NZU1RFTSIsInVwZGF0ZSIsImFkdmFuY2VUaW1lIiwiZ2V0RHJhZ29uQm9uZXNEYXRhQnlSYXdEYXRhIiwicmF3RGF0YSIsImRhdGFQYXJzZXIiLCJBcnJheUJ1ZmZlciIsIl9iaW5hcnlQYXJzZXIiLCJfZGF0YVBhcnNlciIsInBhcnNlRHJhZ29uQm9uZXNEYXRhIiwiYnVpbGRBcm1hdHVyZURpc3BsYXkiLCJhcm1hdHVyZU5hbWUiLCJkcmFnb25Cb25lc05hbWUiLCJza2luTmFtZSIsInRleHR1cmVBdGxhc05hbWUiLCJhcm1hdHVyZSIsImJ1aWxkQXJtYXR1cmUiLCJfZGlzcGxheSIsImNyZWF0ZUFybWF0dXJlTm9kZSIsImNvbXAiLCJub2RlIiwiTm9kZSIsImRpc3BsYXkiLCJnZXRDb21wb25lbnQiLCJBcm1hdHVyZURpc3BsYXkiLCJhZGRDb21wb25lbnQiLCJfYXJtYXR1cmVOYW1lIiwiX04kZHJhZ29uQXNzZXQiLCJkcmFnb25Bc3NldCIsIl9OJGRyYWdvbkF0bGFzQXNzZXQiLCJkcmFnb25BdGxhc0Fzc2V0IiwiX2luaXQiLCJfYnVpbGRUZXh0dXJlQXRsYXNEYXRhIiwidGV4dHVyZUF0bGFzRGF0YSIsInRleHR1cmVBdGxhcyIsInJlbmRlclRleHR1cmUiLCJib3Jyb3dPYmplY3QiLCJDQ1RleHR1cmVBdGxhc0RhdGEiLCJfc29ydFNsb3RzIiwic2xvdHMiLCJfc2xvdHMiLCJzb3J0ZWRTbG90cyIsImkiLCJsIiwibGVuZ3RoIiwic2xvdCIsInpPcmRlciIsIl96T3JkZXIiLCJpbnNlcnRlZCIsImoiLCJzcGxpY2UiLCJfYnVpbGRBcm1hdHVyZSIsImRhdGFQYWNrYWdlIiwiQXJtYXR1cmUiLCJfc2tpbkRhdGEiLCJza2luIiwiX2FuaW1hdGlvbiIsIkFuaW1hdGlvbiIsIl9hcm1hdHVyZSIsImFuaW1hdGlvbnMiLCJfaXNDaGlsZEFybWF0dXJlIiwiaW5pdCIsIl9idWlsZFNsb3QiLCJzbG90RGF0YSIsImRpc3BsYXlzIiwiQ0NTbG90IiwiZ2V0RHJhZ29uQm9uZXNEYXRhQnlVVUlEIiwidXVpZCIsIl9kcmFnb25Cb25lc0RhdGFNYXAiLCJpbmRleE9mIiwicmVtb3ZlRHJhZ29uQm9uZXNEYXRhQnlVVUlEIiwiZGlzcG9zZURhdGEiLCJidWZmZXJPYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFJQSxVQUFVLEdBQUdDLFdBQVcsQ0FBQ0QsVUFBN0I7QUFBQSxJQUNJRSxXQUFXLEdBQUdELFdBQVcsQ0FBQ0MsV0FEOUI7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQyxTQUFTLEdBQUdGLFdBQVcsQ0FBQ0UsU0FBWixHQUF3QkMsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDN0NDLEVBQUFBLElBQUksRUFBRSx1QkFEdUM7QUFFN0MsYUFBU0osV0FG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QVQsQ0FBeEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIENvcHlyaWdodCAoYykgMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXG5cbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcblxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gVEhFIFNPRlRXQVJFLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmxldCBCYXNlT2JqZWN0ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdCxcbiAgICBCYXNlRmFjdG9yeSA9IGRyYWdvbkJvbmVzLkJhc2VGYWN0b3J5O1xuXG4vKipcbiAqIEBtb2R1bGUgZHJhZ29uQm9uZXNcbiovXG5cbi8qKlxuICogRHJhZ29uQm9uZXMgZmFjdG9yeVxuICogQGNsYXNzIENDRmFjdG9yeVxuICogQGV4dGVuZHMgQmFzZUZhY3RvcnlcbiovXG52YXIgQ0NGYWN0b3J5ID0gZHJhZ29uQm9uZXMuQ0NGYWN0b3J5ID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdkcmFnb25Cb25lcy5DQ0ZhY3RvcnknLFxuICAgIGV4dGVuZHM6IEJhc2VGYWN0b3J5LFxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgZ2V0SW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtDQ0ZhY3Rvcnl9XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBleGFtcGxlXG4gICAgICogbGV0IGZhY3RvcnkgPSBkcmFnb25Cb25lcy5DQ0ZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcbiAgICAqL1xuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgX2ZhY3Rvcnk6IG51bGwsXG4gICAgICAgIGdldEluc3RhbmNlICgpIHtcbiAgICAgICAgICAgIGlmICghQ0NGYWN0b3J5Ll9mYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgQ0NGYWN0b3J5Ll9mYWN0b3J5ID0gbmV3IENDRmFjdG9yeSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIENDRmFjdG9yeS5fZmFjdG9yeTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjdG9yICgpIHtcbiAgICAgICAgbGV0IGV2ZW50TWFuYWdlciA9IG5ldyBkcmFnb25Cb25lcy5DQ0FybWF0dXJlRGlzcGxheSgpO1xuICAgICAgICB0aGlzLl9kcmFnb25Cb25lcyA9IG5ldyBkcmFnb25Cb25lcy5EcmFnb25Cb25lcyhldmVudE1hbmFnZXIpO1xuXG4gICAgICAgIGlmICghQ0NfTkFUSVZFUkVOREVSRVIgJiYgIUNDX0VESVRPUiAmJiBjYy5kaXJlY3Rvci5fc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICBjYy5nYW1lLm9uKGNjLmdhbWUuRVZFTlRfUkVTVEFSVCwgdGhpcy5pbml0VXBkYXRlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuaW5pdFVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGluaXRVcGRhdGUgKGR0KSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLl9zY2hlZHVsZXIuZW5hYmxlRm9yVGFyZ2V0KHRoaXMpO1xuICAgICAgICBjYy5kaXJlY3Rvci5fc2NoZWR1bGVyLnNjaGVkdWxlVXBkYXRlKHRoaXMsIGNjLlNjaGVkdWxlci5QUklPUklUWV9TWVNURU0sIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgdXBkYXRlIChkdCkge1xuICAgICAgICB0aGlzLl9kcmFnb25Cb25lcy5hZHZhbmNlVGltZShkdCk7XG4gICAgfSxcblxuICAgIGdldERyYWdvbkJvbmVzRGF0YUJ5UmF3RGF0YSAocmF3RGF0YSkge1xuICAgICAgICB2YXIgZGF0YVBhcnNlciA9IHJhd0RhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IEJhc2VGYWN0b3J5Ll9iaW5hcnlQYXJzZXIgOiB0aGlzLl9kYXRhUGFyc2VyO1xuICAgICAgICByZXR1cm4gZGF0YVBhcnNlci5wYXJzZURyYWdvbkJvbmVzRGF0YShyYXdEYXRhLCAxLjApO1xuICAgIH0sXG5cbiAgICAvLyBCdWlsZCBuZXcgYXJhbXR1cmUgd2l0aCBhIG5ldyBkaXNwbGF5LlxuICAgIGJ1aWxkQXJtYXR1cmVEaXNwbGF5IChhcm1hdHVyZU5hbWUsIGRyYWdvbkJvbmVzTmFtZSwgc2tpbk5hbWUsIHRleHR1cmVBdGxhc05hbWUpIHtcbiAgICAgICAgbGV0IGFybWF0dXJlID0gdGhpcy5idWlsZEFybWF0dXJlKGFybWF0dXJlTmFtZSwgZHJhZ29uQm9uZXNOYW1lLCBza2luTmFtZSwgdGV4dHVyZUF0bGFzTmFtZSk7XG4gICAgICAgIHJldHVybiBhcm1hdHVyZSAmJiBhcm1hdHVyZS5fZGlzcGxheTtcbiAgICB9LFxuXG4gICAgLy8gQnVpbGQgc3ViIGFybWF0dXJlIGZyb20gYW4gZXhpc3QgYXJtYXR1cmUgY29tcG9uZW50LlxuICAgIC8vIEl0IHdpbGwgc2hhcmUgZHJhZ29uQXNzZXQgYW5kIGRyYWdvbkF0bGFzQXNzZXQuXG4gICAgLy8gQnV0IG5vZGUgY2FuIG5vdCBzaGFyZSxvciB3aWxsIGNhdXNlIHJlbmRlciBlcnJvci5cbiAgICBjcmVhdGVBcm1hdHVyZU5vZGUgKGNvbXAsIGFybWF0dXJlTmFtZSwgbm9kZSkge1xuICAgICAgICBub2RlID0gbm9kZSB8fCBuZXcgY2MuTm9kZSgpO1xuICAgICAgICBsZXQgZGlzcGxheSA9IG5vZGUuZ2V0Q29tcG9uZW50KGRyYWdvbkJvbmVzLkFybWF0dXJlRGlzcGxheSk7XG4gICAgICAgIGlmICghZGlzcGxheSkge1xuICAgICAgICAgICAgZGlzcGxheSA9IG5vZGUuYWRkQ29tcG9uZW50KGRyYWdvbkJvbmVzLkFybWF0dXJlRGlzcGxheSk7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlLm5hbWUgPSBhcm1hdHVyZU5hbWU7XG5cbiAgICAgICAgZGlzcGxheS5fYXJtYXR1cmVOYW1lID0gYXJtYXR1cmVOYW1lO1xuICAgICAgICBkaXNwbGF5Ll9OJGRyYWdvbkFzc2V0ID0gY29tcC5kcmFnb25Bc3NldDtcbiAgICAgICAgZGlzcGxheS5fTiRkcmFnb25BdGxhc0Fzc2V0ID0gY29tcC5kcmFnb25BdGxhc0Fzc2V0O1xuICAgICAgICBkaXNwbGF5Ll9pbml0KCk7XG5cbiAgICAgICAgcmV0dXJuIGRpc3BsYXk7XG4gICAgfSxcblxuICAgIF9idWlsZFRleHR1cmVBdGxhc0RhdGEgKHRleHR1cmVBdGxhc0RhdGEsIHRleHR1cmVBdGxhcykge1xuICAgICAgICBpZiAodGV4dHVyZUF0bGFzRGF0YSkge1xuICAgICAgICAgICAgdGV4dHVyZUF0bGFzRGF0YS5yZW5kZXJUZXh0dXJlID0gdGV4dHVyZUF0bGFzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGV4dHVyZUF0bGFzRGF0YSA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkNDVGV4dHVyZUF0bGFzRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHR1cmVBdGxhc0RhdGE7XG4gICAgfSxcblxuICAgIF9zb3J0U2xvdHMgKCkge1xuICAgICAgICBsZXQgc2xvdHMgPSB0aGlzLl9zbG90cztcbiAgICAgICAgbGV0IHNvcnRlZFNsb3RzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gc2xvdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgc2xvdCA9IHNsb3RzW2ldO1xuICAgICAgICAgICAgbGV0IHpPcmRlciA9IHNsb3QuX3pPcmRlcjtcbiAgICAgICAgICAgIGxldCBpbnNlcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IHNvcnRlZFNsb3RzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKHpPcmRlciA+PSBzb3J0ZWRTbG90c1tqXS5fek9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvcnRlZFNsb3RzLnNwbGljZShqKzEsIDAsIHNsb3QpO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW5zZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICBzb3J0ZWRTbG90cy5zcGxpY2UoMCwgMCwgc2xvdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2xvdHMgPSBzb3J0ZWRTbG90cztcbiAgICB9LFxuXG4gICAgX2J1aWxkQXJtYXR1cmUgKGRhdGFQYWNrYWdlKSB7XG4gICAgICAgIGxldCBhcm1hdHVyZSA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkFybWF0dXJlKTtcblxuICAgICAgICBhcm1hdHVyZS5fc2tpbkRhdGEgPSBkYXRhUGFja2FnZS5za2luO1xuICAgICAgICBhcm1hdHVyZS5fYW5pbWF0aW9uID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQW5pbWF0aW9uKTtcbiAgICAgICAgYXJtYXR1cmUuX2FuaW1hdGlvbi5fYXJtYXR1cmUgPSBhcm1hdHVyZTtcbiAgICAgICAgYXJtYXR1cmUuX2FuaW1hdGlvbi5hbmltYXRpb25zID0gZGF0YVBhY2thZ2UuYXJtYXR1cmUuYW5pbWF0aW9ucztcblxuICAgICAgICBhcm1hdHVyZS5faXNDaGlsZEFybWF0dXJlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gZml4ZWQgZHJhZ29uYm9uZXMgc29ydCBpc3N1ZVxuICAgICAgICAvLyBhcm1hdHVyZS5fc29ydFNsb3RzID0gdGhpcy5fc29ydFNsb3RzO1xuXG4gICAgICAgIHZhciBkaXNwbGF5ID0gbmV3IGRyYWdvbkJvbmVzLkNDQXJtYXR1cmVEaXNwbGF5KCk7XG5cbiAgICAgICAgYXJtYXR1cmUuaW5pdChkYXRhUGFja2FnZS5hcm1hdHVyZSxcbiAgICAgICAgICAgIGRpc3BsYXksIGRpc3BsYXksIHRoaXMuX2RyYWdvbkJvbmVzXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGFybWF0dXJlO1xuICAgIH0sXG5cbiAgICBfYnVpbGRTbG90IChkYXRhUGFja2FnZSwgc2xvdERhdGEsIGRpc3BsYXlzKSB7XG4gICAgICAgIGxldCBzbG90ID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQ0NTbG90KTtcbiAgICAgICAgbGV0IGRpc3BsYXkgPSBzbG90O1xuICAgICAgICBzbG90LmluaXQoc2xvdERhdGEsIGRpc3BsYXlzLCBkaXNwbGF5LCBkaXNwbGF5KTtcbiAgICAgICAgcmV0dXJuIHNsb3Q7XG4gICAgfSxcblxuICAgIGdldERyYWdvbkJvbmVzRGF0YUJ5VVVJRCAodXVpZCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcCkge1xuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZih1dWlkKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIHJlbW92ZURyYWdvbkJvbmVzRGF0YUJ5VVVJRCAodXVpZCwgZGlzcG9zZURhdGEpIHtcbiAgICAgICAgaWYgKGRpc3Bvc2VEYXRhID09PSB2b2lkIDApIHsgZGlzcG9zZURhdGEgPSB0cnVlOyB9XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwKSB7XG4gICAgICAgICAgICBpZiAobmFtZS5pbmRleE9mKHV1aWQpID09PSAtMSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoZGlzcG9zZURhdGEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmFnb25Cb25lcy5idWZmZXJPYmplY3QodGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW25hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLyJ9