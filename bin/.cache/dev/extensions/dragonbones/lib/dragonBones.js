
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'engine-dev/extensions/dragonbones/lib/dragonBones.js';
                    var __require = nodeEnv ? function (request) {
                        return require(request);
                    } : function (request) {
                        return __quick_compile_engine__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_engine__.registerModule(__filename, module);}"use strict";

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var dragonBones;

(function (dragonBones) {})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @private
   */
  var DragonBones =
  /** @class */
  function () {
    function DragonBones(eventManager) {
      this._clock = new dragonBones.WorldClock();
      this._events = [];
      this._objects = [];
      this._eventManager = null;
      this._eventManager = eventManager;
      console.info("DragonBones: " + DragonBones.VERSION + "\nWebsite: http://dragonbones.com/\nSource and Demo: https://github.com/DragonBones/");
    }

    DragonBones.prototype.advanceTime = function (passedTime) {
      if (this._objects.length > 0) {
        for (var _i = 0, _a = this._objects; _i < _a.length; _i++) {
          var object = _a[_i];
          object.returnToPool();
        }

        this._objects.length = 0;
      }

      this._clock.advanceTime(passedTime);

      if (this._events.length > 0) {
        for (var i = 0; i < this._events.length; ++i) {
          var eventObject = this._events[i];
          var armature = eventObject.armature;

          if (armature._armatureData !== null) {
            // May be armature disposed before advanceTime.
            armature.eventDispatcher.dispatchDBEvent(eventObject.type, eventObject);

            if (eventObject.type === dragonBones.EventObject.SOUND_EVENT) {
              this._eventManager.dispatchDBEvent(eventObject.type, eventObject);
            }
          }

          this.bufferObject(eventObject);
        }

        this._events.length = 0;
      }
    };

    DragonBones.prototype.bufferEvent = function (value) {
      if (this._events.indexOf(value) < 0) {
        this._events.push(value);
      }
    };

    DragonBones.prototype.bufferObject = function (object) {
      if (this._objects.indexOf(object) < 0) {
        this._objects.push(object);
      }
    };

    Object.defineProperty(DragonBones.prototype, "clock", {
      get: function get() {
        return this._clock;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(DragonBones.prototype, "eventManager", {
      get: function get() {
        return this._eventManager;
      },
      enumerable: true,
      configurable: true
    });
    DragonBones.VERSION = "5.6.300";
    DragonBones.yDown = false;
    DragonBones.debug = false;
    DragonBones.debugDraw = false;
    DragonBones.webAssembly = false;
    return DragonBones;
  }();

  dragonBones.DragonBones = DragonBones;
})(dragonBones || (dragonBones = {})); //


if (!console.warn) {
  console.warn = function () {};
}

if (!console.assert) {
  console.assert = function () {};
} //


if (!Date.now) {
  Date.now = function now() {
    return new Date().getTime();
  };
} // Weixin can not support typescript extends.


var __extends = function __extends(t, e) {
  function r() {
    this.constructor = t;
  }

  for (var i in e) {
    if (e.hasOwnProperty(i)) {
      t[i] = e[i];
    }
  }

  r.prototype = e.prototype, t.prototype = new r();
};
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The BaseObject is the base class for all objects in the DragonBones framework.
   * All BaseObject instances are cached to the object pool to reduce the performance consumption of frequent requests for memory or memory recovery.
   * @version DragonBones 4.5
   * @language en_US
   */

  /**
   * - 基础对象，通常 DragonBones 的对象都继承自该类。
   * 所有基础对象的实例都会缓存到对象池，以减少频繁申请内存或内存回收的性能消耗。
   * @version DragonBones 4.5
   * @language zh_CN
   */
  var BaseObject =
  /** @class */
  function () {
    function BaseObject() {
      /**
       * - A unique identification number assigned to the object.
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 分配给此实例的唯一标识号。
       * @version DragonBones 4.5
       * @language zh_CN
       */
      this.hashCode = BaseObject._hashCode++;
      this._isInPool = false;
    }

    BaseObject._returnObject = function (object) {
      var classType = String(object.constructor);
      var maxCount = classType in BaseObject._maxCountMap ? BaseObject._maxCountMap[classType] : BaseObject._defaultMaxCount;
      var pool = BaseObject._poolsMap[classType] = BaseObject._poolsMap[classType] || [];

      if (pool.length < maxCount) {
        if (!object._isInPool) {
          object._isInPool = true;
          pool.push(object);
        } else {
          console.warn("The object is already in the pool.");
        }
      } else {}
    };

    BaseObject.toString = function () {
      throw new Error();
    };
    /**
     * - Set the maximum cache count of the specify object pool.
     * @param objectConstructor - The specify class. (Set all object pools max cache count if not set)
     * @param maxCount - Max count.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 设置特定对象池的最大缓存数量。
     * @param objectConstructor - 特定的类。 (不设置则设置所有对象池的最大缓存数量)
     * @param maxCount - 最大缓存数量。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseObject.setMaxCount = function (objectConstructor, maxCount) {
      if (maxCount < 0 || maxCount !== maxCount) {
        // isNaN
        maxCount = 0;
      }

      if (objectConstructor !== null) {
        var classType = String(objectConstructor);
        var pool = classType in BaseObject._poolsMap ? BaseObject._poolsMap[classType] : null;

        if (pool !== null && pool.length > maxCount) {
          pool.length = maxCount;
        }

        BaseObject._maxCountMap[classType] = maxCount;
      } else {
        BaseObject._defaultMaxCount = maxCount;

        for (var classType in BaseObject._poolsMap) {
          var pool = BaseObject._poolsMap[classType];

          if (pool.length > maxCount) {
            pool.length = maxCount;
          }

          if (classType in BaseObject._maxCountMap) {
            BaseObject._maxCountMap[classType] = maxCount;
          }
        }
      }
    };
    /**
     * - Clear the cached instances of a specify object pool.
     * @param objectConstructor - Specify class. (Clear all cached instances if not set)
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 清除特定对象池的缓存实例。
     * @param objectConstructor - 特定的类。 (不设置则清除所有缓存的实例)
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseObject.clearPool = function (objectConstructor) {
      if (objectConstructor === void 0) {
        objectConstructor = null;
      }

      if (objectConstructor !== null) {
        var classType = String(objectConstructor);
        var pool = classType in BaseObject._poolsMap ? BaseObject._poolsMap[classType] : null;

        if (pool !== null && pool.length > 0) {
          pool.length = 0;
        }
      } else {
        for (var k in BaseObject._poolsMap) {
          var pool = BaseObject._poolsMap[k];
          pool.length = 0;
        }
      }
    };
    /**
     * - Get an instance of the specify class from object pool.
     * @param objectConstructor - The specify class.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 从对象池中获取特定类的实例。
     * @param objectConstructor - 特定的类。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseObject.borrowObject = function (objectConstructor) {
      var classType = String(objectConstructor);
      var pool = classType in BaseObject._poolsMap ? BaseObject._poolsMap[classType] : null;

      if (pool !== null && pool.length > 0) {
        var object_1 = pool.pop();
        object_1._isInPool = false;
        return object_1;
      }

      var object = new objectConstructor();

      object._onClear();

      return object;
    };
    /**
     * - Clear the object and return it back to object pool。
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 清除该实例的所有数据并将其返还对象池。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseObject.prototype.returnToPool = function () {
      this._onClear();

      BaseObject._returnObject(this);
    };

    BaseObject._hashCode = 0;
    BaseObject._defaultMaxCount = 3000;
    BaseObject._maxCountMap = {};
    BaseObject._poolsMap = {};
    return BaseObject;
  }();

  dragonBones.BaseObject = BaseObject;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - 2D Transform matrix.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 2D 转换矩阵。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Matrix =
  /** @class */
  function () {
    /**
     * @private
     */
    function Matrix(a, b, c, d, tx, ty) {
      if (a === void 0) {
        a = 1.0;
      }

      if (b === void 0) {
        b = 0.0;
      }

      if (c === void 0) {
        c = 0.0;
      }

      if (d === void 0) {
        d = 1.0;
      }

      if (tx === void 0) {
        tx = 0.0;
      }

      if (ty === void 0) {
        ty = 0.0;
      }

      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.tx = tx;
      this.ty = ty;
    }

    Matrix.prototype.toString = function () {
      return "[object dragonBones.Matrix] a:" + this.a + " b:" + this.b + " c:" + this.c + " d:" + this.d + " tx:" + this.tx + " ty:" + this.ty;
    };
    /**
     * @private
     */


    Matrix.prototype.copyFrom = function (value) {
      this.a = value.a;
      this.b = value.b;
      this.c = value.c;
      this.d = value.d;
      this.tx = value.tx;
      this.ty = value.ty;
      return this;
    };
    /**
     * @private
     */


    Matrix.prototype.copyFromArray = function (value, offset) {
      if (offset === void 0) {
        offset = 0;
      }

      this.a = value[offset];
      this.b = value[offset + 1];
      this.c = value[offset + 2];
      this.d = value[offset + 3];
      this.tx = value[offset + 4];
      this.ty = value[offset + 5];
      return this;
    };
    /**
     * - Convert to unit matrix.
     * The resulting matrix has the following properties: a=1, b=0, c=0, d=1, tx=0, ty=0.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 转换为单位矩阵。
     * 该矩阵具有以下属性：a=1、b=0、c=0、d=1、tx=0、ty=0。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Matrix.prototype.identity = function () {
      this.a = this.d = 1.0;
      this.b = this.c = 0.0;
      this.tx = this.ty = 0.0;
      return this;
    };
    /**
     * - Multiplies the current matrix with another matrix.
     * @param value - The matrix that needs to be multiplied.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 将当前矩阵与另一个矩阵相乘。
     * @param value - 需要相乘的矩阵。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Matrix.prototype.concat = function (value) {
      var aA = this.a * value.a;
      var bA = 0.0;
      var cA = 0.0;
      var dA = this.d * value.d;
      var txA = this.tx * value.a + value.tx;
      var tyA = this.ty * value.d + value.ty;

      if (this.b !== 0.0 || this.c !== 0.0) {
        aA += this.b * value.c;
        bA += this.b * value.d;
        cA += this.c * value.a;
        dA += this.c * value.b;
      }

      if (value.b !== 0.0 || value.c !== 0.0) {
        bA += this.a * value.b;
        cA += this.d * value.c;
        txA += this.ty * value.c;
        tyA += this.tx * value.b;
      }

      this.a = aA;
      this.b = bA;
      this.c = cA;
      this.d = dA;
      this.tx = txA;
      this.ty = tyA;
      return this;
    };
    /**
     * - Convert to inverse matrix.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 转换为逆矩阵。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Matrix.prototype.invert = function () {
      var aA = this.a;
      var bA = this.b;
      var cA = this.c;
      var dA = this.d;
      var txA = this.tx;
      var tyA = this.ty;

      if (bA === 0.0 && cA === 0.0) {
        this.b = this.c = 0.0;

        if (aA === 0.0 || dA === 0.0) {
          this.a = this.b = this.tx = this.ty = 0.0;
        } else {
          aA = this.a = 1.0 / aA;
          dA = this.d = 1.0 / dA;
          this.tx = -aA * txA;
          this.ty = -dA * tyA;
        }

        return this;
      }

      var determinant = aA * dA - bA * cA;

      if (determinant === 0.0) {
        this.a = this.d = 1.0;
        this.b = this.c = 0.0;
        this.tx = this.ty = 0.0;
        return this;
      }

      determinant = 1.0 / determinant;
      var k = this.a = dA * determinant;
      bA = this.b = -bA * determinant;
      cA = this.c = -cA * determinant;
      dA = this.d = aA * determinant;
      this.tx = -(k * txA + cA * tyA);
      this.ty = -(bA * txA + dA * tyA);
      return this;
    };
    /**
     * - Apply a matrix transformation to a specific point.
     * @param x - X coordinate.
     * @param y - Y coordinate.
     * @param result - The point after the transformation is applied.
     * @param delta - Whether to ignore tx, ty's conversion to point.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 将矩阵转换应用于特定点。
     * @param x - 横坐标。
     * @param y - 纵坐标。
     * @param result - 应用转换之后的点。
     * @param delta - 是否忽略 tx，ty 对点的转换。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Matrix.prototype.transformPoint = function (x, y, result, delta) {
      if (delta === void 0) {
        delta = false;
      }

      result.x = this.a * x + this.c * y;
      result.y = this.b * x + this.d * y;

      if (!delta) {
        result.x += this.tx;
        result.y += this.ty;
      }
    };
    /**
     * @private
     */


    Matrix.prototype.transformRectangle = function (rectangle, delta) {
      if (delta === void 0) {
        delta = false;
      }

      var a = this.a;
      var b = this.b;
      var c = this.c;
      var d = this.d;
      var tx = delta ? 0.0 : this.tx;
      var ty = delta ? 0.0 : this.ty;
      var x = rectangle.x;
      var y = rectangle.y;
      var xMax = x + rectangle.width;
      var yMax = y + rectangle.height;
      var x0 = a * x + c * y + tx;
      var y0 = b * x + d * y + ty;
      var x1 = a * xMax + c * y + tx;
      var y1 = b * xMax + d * y + ty;
      var x2 = a * xMax + c * yMax + tx;
      var y2 = b * xMax + d * yMax + ty;
      var x3 = a * x + c * yMax + tx;
      var y3 = b * x + d * yMax + ty;
      var tmp = 0.0;

      if (x0 > x1) {
        tmp = x0;
        x0 = x1;
        x1 = tmp;
      }

      if (x2 > x3) {
        tmp = x2;
        x2 = x3;
        x3 = tmp;
      }

      rectangle.x = Math.floor(x0 < x2 ? x0 : x2);
      rectangle.width = Math.ceil((x1 > x3 ? x1 : x3) - rectangle.x);

      if (y0 > y1) {
        tmp = y0;
        y0 = y1;
        y1 = tmp;
      }

      if (y2 > y3) {
        tmp = y2;
        y2 = y3;
        y3 = tmp;
      }

      rectangle.y = Math.floor(y0 < y2 ? y0 : y2);
      rectangle.height = Math.ceil((y1 > y3 ? y1 : y3) - rectangle.y);
    };

    return Matrix;
  }();

  dragonBones.Matrix = Matrix;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - 2D Transform.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 2D 变换。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Transform =
  /** @class */
  function () {
    /**
     * @private
     */
    function Transform(x, y, skew, rotation, scaleX, scaleY) {
      if (x === void 0) {
        x = 0.0;
      }

      if (y === void 0) {
        y = 0.0;
      }

      if (skew === void 0) {
        skew = 0.0;
      }

      if (rotation === void 0) {
        rotation = 0.0;
      }

      if (scaleX === void 0) {
        scaleX = 1.0;
      }

      if (scaleY === void 0) {
        scaleY = 1.0;
      }

      this.x = x;
      this.y = y;
      this.skew = skew;
      this.rotation = rotation;
      this.scaleX = scaleX;
      this.scaleY = scaleY;
    }
    /**
     * @private
     */


    Transform.normalizeRadian = function (value) {
      value = (value + Math.PI) % (Math.PI * 2.0);
      value += value > 0.0 ? -Math.PI : Math.PI;
      return value;
    };

    Transform.prototype.toString = function () {
      return "[object dragonBones.Transform] x:" + this.x + " y:" + this.y + " skewX:" + this.skew * 180.0 / Math.PI + " skewY:" + this.rotation * 180.0 / Math.PI + " scaleX:" + this.scaleX + " scaleY:" + this.scaleY;
    };
    /**
     * @private
     */


    Transform.prototype.copyFrom = function (value) {
      this.x = value.x;
      this.y = value.y;
      this.skew = value.skew;
      this.rotation = value.rotation;
      this.scaleX = value.scaleX;
      this.scaleY = value.scaleY;
      return this;
    };
    /**
     * @private
     */


    Transform.prototype.identity = function () {
      this.x = this.y = 0.0;
      this.skew = this.rotation = 0.0;
      this.scaleX = this.scaleY = 1.0;
      return this;
    };
    /**
     * @private
     */


    Transform.prototype.add = function (value) {
      this.x += value.x;
      this.y += value.y;
      this.skew += value.skew;
      this.rotation += value.rotation;
      this.scaleX *= value.scaleX;
      this.scaleY *= value.scaleY;
      return this;
    };
    /**
     * @private
     */


    Transform.prototype.minus = function (value) {
      this.x -= value.x;
      this.y -= value.y;
      this.skew -= value.skew;
      this.rotation -= value.rotation;
      this.scaleX /= value.scaleX;
      this.scaleY /= value.scaleY;
      return this;
    };
    /**
     * @private
     */


    Transform.prototype.fromMatrix = function (matrix) {
      var backupScaleX = this.scaleX,
          backupScaleY = this.scaleY;
      var PI_Q = Transform.PI_Q;
      this.x = matrix.tx;
      this.y = matrix.ty;
      this.rotation = Math.atan(matrix.b / matrix.a);
      var skewX = Math.atan(-matrix.c / matrix.d);
      this.scaleX = this.rotation > -PI_Q && this.rotation < PI_Q ? matrix.a / Math.cos(this.rotation) : matrix.b / Math.sin(this.rotation);
      this.scaleY = skewX > -PI_Q && skewX < PI_Q ? matrix.d / Math.cos(skewX) : -matrix.c / Math.sin(skewX);

      if (backupScaleX >= 0.0 && this.scaleX < 0.0) {
        this.scaleX = -this.scaleX;
        this.rotation = this.rotation - Math.PI;
      }

      if (backupScaleY >= 0.0 && this.scaleY < 0.0) {
        this.scaleY = -this.scaleY;
        skewX = skewX - Math.PI;
      }

      this.skew = skewX - this.rotation;
      return this;
    };
    /**
     * @private
     */


    Transform.prototype.toMatrix = function (matrix) {
      if (this.rotation === 0.0) {
        matrix.a = 1.0;
        matrix.b = 0.0;
      } else {
        matrix.a = Math.cos(this.rotation);
        matrix.b = Math.sin(this.rotation);
      }

      if (this.skew === 0.0) {
        matrix.c = -matrix.b;
        matrix.d = matrix.a;
      } else {
        matrix.c = -Math.sin(this.skew + this.rotation);
        matrix.d = Math.cos(this.skew + this.rotation);
      }

      if (this.scaleX !== 1.0) {
        matrix.a *= this.scaleX;
        matrix.b *= this.scaleX;
      }

      if (this.scaleY !== 1.0) {
        matrix.c *= this.scaleY;
        matrix.d *= this.scaleY;
      }

      matrix.tx = this.x;
      matrix.ty = this.y;
      return this;
    };
    /**
     * @private
     */


    Transform.PI = Math.PI;
    /**
     * @private
     */

    Transform.PI_D = Math.PI * 2.0;
    /**
     * @private
     */

    Transform.PI_H = Math.PI / 2.0;
    /**
     * @private
     */

    Transform.PI_Q = Math.PI / 4.0;
    /**
     * @private
     */

    Transform.RAD_DEG = 180.0 / Math.PI;
    /**
     * @private
     */

    Transform.DEG_RAD = Math.PI / 180.0;
    return Transform;
  }();

  dragonBones.Transform = Transform;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var ColorTransform =
  /** @class */
  function () {
    function ColorTransform(alphaMultiplier, redMultiplier, greenMultiplier, blueMultiplier, alphaOffset, redOffset, greenOffset, blueOffset) {
      if (alphaMultiplier === void 0) {
        alphaMultiplier = 1.0;
      }

      if (redMultiplier === void 0) {
        redMultiplier = 1.0;
      }

      if (greenMultiplier === void 0) {
        greenMultiplier = 1.0;
      }

      if (blueMultiplier === void 0) {
        blueMultiplier = 1.0;
      }

      if (alphaOffset === void 0) {
        alphaOffset = 0;
      }

      if (redOffset === void 0) {
        redOffset = 0;
      }

      if (greenOffset === void 0) {
        greenOffset = 0;
      }

      if (blueOffset === void 0) {
        blueOffset = 0;
      }

      this.alphaMultiplier = alphaMultiplier;
      this.redMultiplier = redMultiplier;
      this.greenMultiplier = greenMultiplier;
      this.blueMultiplier = blueMultiplier;
      this.alphaOffset = alphaOffset;
      this.redOffset = redOffset;
      this.greenOffset = greenOffset;
      this.blueOffset = blueOffset;
    }

    ColorTransform.prototype.copyFrom = function (value) {
      this.alphaMultiplier = value.alphaMultiplier;
      this.redMultiplier = value.redMultiplier;
      this.greenMultiplier = value.greenMultiplier;
      this.blueMultiplier = value.blueMultiplier;
      this.alphaOffset = value.alphaOffset;
      this.redOffset = value.redOffset;
      this.greenOffset = value.greenOffset;
      this.blueOffset = value.blueOffset;
    };

    ColorTransform.prototype.identity = function () {
      this.alphaMultiplier = this.redMultiplier = this.greenMultiplier = this.blueMultiplier = 1.0;
      this.alphaOffset = this.redOffset = this.greenOffset = this.blueOffset = 0;
    };

    return ColorTransform;
  }();

  dragonBones.ColorTransform = ColorTransform;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The Point object represents a location in a two-dimensional coordinate system.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - Point 对象表示二维坐标系统中的某个位置。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Point =
  /** @class */
  function () {
    /**
     * - Creates a new point. If you pass no parameters to this method, a point is created at (0,0).
     * @param x - The horizontal coordinate.
     * @param y - The vertical coordinate.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 创建一个 egret.Point 对象.若不传入任何参数，将会创建一个位于（0，0）位置的点。
     * @param x - 该对象的x属性值，默认为 0.0。
     * @param y - 该对象的y属性值，默认为 0.0。
     * @version DragonBones 3.0
     * @language zh_CN
     */
    function Point(x, y) {
      if (x === void 0) {
        x = 0.0;
      }

      if (y === void 0) {
        y = 0.0;
      }

      this.x = x;
      this.y = y;
    }
    /**
     * @private
     */


    Point.prototype.copyFrom = function (value) {
      this.x = value.x;
      this.y = value.y;
    };
    /**
     * @private
     */


    Point.prototype.clear = function () {
      this.x = this.y = 0.0;
    };

    return Point;
  }();

  dragonBones.Point = Point;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - A Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its
   * width and its height.<br/>
   * The x, y, width, and height properties of the Rectangle class are independent of each other; changing the value of
   * one property has no effect on the others. However, the right and bottom properties are integrally related to those
   * four properties. For example, if you change the value of the right property, the value of the width property changes;
   * if you change the bottom property, the value of the height property changes.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - Rectangle 对象是按其位置（由它左上角的点 (x, y) 确定）以及宽度和高度定义的区域。<br/>
   * Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。
   * 但是，right 和 bottom 属性与这四个属性是整体相关的。例如，如果更改 right 属性的值，则 width
   * 属性的值将发生变化；如果更改 bottom 属性，则 height 属性的值将发生变化。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Rectangle =
  /** @class */
  function () {
    /**
     * @private
     */
    function Rectangle(x, y, width, height) {
      if (x === void 0) {
        x = 0.0;
      }

      if (y === void 0) {
        y = 0.0;
      }

      if (width === void 0) {
        width = 0.0;
      }

      if (height === void 0) {
        height = 0.0;
      }

      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
    }
    /**
     * @private
     */


    Rectangle.prototype.copyFrom = function (value) {
      this.x = value.x;
      this.y = value.y;
      this.width = value.width;
      this.height = value.height;
    };
    /**
     * @private
     */


    Rectangle.prototype.clear = function () {
      this.x = this.y = 0.0;
      this.width = this.height = 0.0;
    };

    return Rectangle;
  }();

  dragonBones.Rectangle = Rectangle;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The user custom data.
   * @version DragonBones 5.0
   * @language en_US
   */

  /**
   * - 用户自定义数据。
   * @version DragonBones 5.0
   * @language zh_CN
   */
  var UserData =
  /** @class */
  function (_super) {
    __extends(UserData, _super);

    function UserData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * - The custom int numbers.
       * @version DragonBones 5.0
       * @language en_US
       */

      /**
       * - 自定义整数。
       * @version DragonBones 5.0
       * @language zh_CN
       */


      _this.ints = [];
      /**
       * - The custom float numbers.
       * @version DragonBones 5.0
       * @language en_US
       */

      /**
       * - 自定义浮点数。
       * @version DragonBones 5.0
       * @language zh_CN
       */

      _this.floats = [];
      /**
       * - The custom strings.
       * @version DragonBones 5.0
       * @language en_US
       */

      /**
       * - 自定义字符串。
       * @version DragonBones 5.0
       * @language zh_CN
       */

      _this.strings = [];
      return _this;
    }

    UserData.toString = function () {
      return "[class dragonBones.UserData]";
    };

    UserData.prototype._onClear = function () {
      this.ints.length = 0;
      this.floats.length = 0;
      this.strings.length = 0;
    };
    /**
     * @internal
     */


    UserData.prototype.addInt = function (value) {
      this.ints.push(value);
    };
    /**
     * @internal
     */


    UserData.prototype.addFloat = function (value) {
      this.floats.push(value);
    };
    /**
     * @internal
     */


    UserData.prototype.addString = function (value) {
      this.strings.push(value);
    };
    /**
     * - Get the custom int number.
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 获取自定义整数。
     * @version DragonBones 5.0
     * @language zh_CN
     */


    UserData.prototype.getInt = function (index) {
      if (index === void 0) {
        index = 0;
      }

      return index >= 0 && index < this.ints.length ? this.ints[index] : 0;
    };
    /**
     * - Get the custom float number.
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 获取自定义浮点数。
     * @version DragonBones 5.0
     * @language zh_CN
     */


    UserData.prototype.getFloat = function (index) {
      if (index === void 0) {
        index = 0;
      }

      return index >= 0 && index < this.floats.length ? this.floats[index] : 0.0;
    };
    /**
     * - Get the custom string.
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 获取自定义字符串。
     * @version DragonBones 5.0
     * @language zh_CN
     */


    UserData.prototype.getString = function (index) {
      if (index === void 0) {
        index = 0;
      }

      return index >= 0 && index < this.strings.length ? this.strings[index] : "";
    };

    return UserData;
  }(dragonBones.BaseObject);

  dragonBones.UserData = UserData;
  /**
   * @internal
   */

  var ActionData =
  /** @class */
  function (_super) {
    __extends(ActionData, _super);

    function ActionData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.data = null; //

      return _this;
    }

    ActionData.toString = function () {
      return "[class dragonBones.ActionData]";
    };

    ActionData.prototype._onClear = function () {
      if (this.data !== null) {
        this.data.returnToPool();
      }

      this.type = 0
      /* Play */
      ;
      this.name = "";
      this.bone = null;
      this.slot = null;
      this.data = null;
    };

    return ActionData;
  }(dragonBones.BaseObject);

  dragonBones.ActionData = ActionData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The DragonBones data.
   * A DragonBones data contains multiple armature data.
   * @see dragonBones.ArmatureData
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 龙骨数据。
   * 一个龙骨数据包含多个骨架数据。
   * @see dragonBones.ArmatureData
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var DragonBonesData =
  /** @class */
  function (_super) {
    __extends(DragonBonesData, _super);

    function DragonBonesData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @internal
       */


      _this.frameIndices = [];
      /**
       * @internal
       */

      _this.cachedFrames = [];
      /**
       * - All armature data names.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 所有的骨架数据名称。
       * @version DragonBones 3.0
       * @language zh_CN
       */

      _this.armatureNames = [];
      /**
       * @private
       */

      _this.armatures = {};
      /**
       * @private
       */

      _this.userData = null; // Initial value.

      return _this;
    }

    DragonBonesData.toString = function () {
      return "[class dragonBones.DragonBonesData]";
    };

    DragonBonesData.prototype._onClear = function () {
      for (var k in this.armatures) {
        this.armatures[k].returnToPool();
        delete this.armatures[k];
      }

      if (this.userData !== null) {
        this.userData.returnToPool();
      }

      this.autoSearch = false;
      this.frameRate = 0;
      this.version = "";
      this.name = "";
      this.stage = null;
      this.frameIndices.length = 0;
      this.cachedFrames.length = 0;
      this.armatureNames.length = 0; //this.armatures.clear();

      this.binary = null; //

      this.intArray = null; //

      this.floatArray = null; //

      this.frameIntArray = null; //

      this.frameFloatArray = null; //

      this.frameArray = null; //

      this.timelineArray = null; //

      this.userData = null;
    };
    /**
     * @internal
     */


    DragonBonesData.prototype.addArmature = function (value) {
      if (value.name in this.armatures) {
        console.warn("Same armature: " + value.name);
        return;
      }

      value.parent = this;
      this.armatures[value.name] = value;
      this.armatureNames.push(value.name);
    };
    /**
     * - Get a specific armature data.
     * @param armatureName - The armature data name.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的骨架数据。
     * @param armatureName - 骨架数据名称。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    DragonBonesData.prototype.getArmature = function (armatureName) {
      return armatureName in this.armatures ? this.armatures[armatureName] : null;
    };
    /**
     * - Deprecated, please refer to {@link #dragonBones.BaseFactory#removeDragonBonesData()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #dragonBones.BaseFactory#removeDragonBonesData()}。
     * @deprecated
     * @language zh_CN
     */


    DragonBonesData.prototype.dispose = function () {
      console.warn("已废弃");
      this.returnToPool();
    };

    return DragonBonesData;
  }(dragonBones.BaseObject);

  dragonBones.DragonBonesData = DragonBonesData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The armature data.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 骨架数据。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var ArmatureData =
  /** @class */
  function (_super) {
    __extends(ArmatureData, _super);

    function ArmatureData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @private
       */


      _this.aabb = new dragonBones.Rectangle();
      /**
       * - The names of all the animation data.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 所有的动画数据名称。
       * @version DragonBones 3.0
       * @language zh_CN
       */

      _this.animationNames = [];
      /**
       * @private
       */

      _this.sortedBones = [];
      /**
       * @private
       */

      _this.sortedSlots = [];
      /**
       * @private
       */

      _this.defaultActions = [];
      /**
       * @private
       */

      _this.actions = [];
      /**
       * @private
       */

      _this.bones = {};
      /**
       * @private
       */

      _this.slots = {};
      /**
       * @private
       */

      _this.constraints = {};
      /**
       * @private
       */

      _this.skins = {};
      /**
       * @private
       */

      _this.animations = {};
      /**
       * @private
       */

      _this.canvas = null; // Initial value.

      /**
       * @private
       */

      _this.userData = null; // Initial value.

      return _this;
    }

    ArmatureData.toString = function () {
      return "[class dragonBones.ArmatureData]";
    };

    ArmatureData.prototype._onClear = function () {
      for (var _i = 0, _a = this.defaultActions; _i < _a.length; _i++) {
        var action = _a[_i];
        action.returnToPool();
      }

      for (var _b = 0, _c = this.actions; _b < _c.length; _b++) {
        var action = _c[_b];
        action.returnToPool();
      }

      for (var k in this.bones) {
        this.bones[k].returnToPool();
        delete this.bones[k];
      }

      for (var k in this.slots) {
        this.slots[k].returnToPool();
        delete this.slots[k];
      }

      for (var k in this.constraints) {
        this.constraints[k].returnToPool();
        delete this.constraints[k];
      }

      for (var k in this.skins) {
        this.skins[k].returnToPool();
        delete this.skins[k];
      }

      for (var k in this.animations) {
        this.animations[k].returnToPool();
        delete this.animations[k];
      }

      if (this.canvas !== null) {
        this.canvas.returnToPool();
      }

      if (this.userData !== null) {
        this.userData.returnToPool();
      }

      this.type = 0
      /* Armature */
      ;
      this.frameRate = 0;
      this.cacheFrameRate = 0;
      this.scale = 1.0;
      this.name = "";
      this.aabb.clear();
      this.animationNames.length = 0;
      this.sortedBones.length = 0;
      this.sortedSlots.length = 0;
      this.defaultActions.length = 0;
      this.actions.length = 0; // this.bones.clear();
      // this.slots.clear();
      // this.constraints.clear();
      // this.skins.clear();
      // this.animations.clear();

      this.defaultSkin = null;
      this.defaultAnimation = null;
      this.canvas = null;
      this.userData = null;
      this.parent = null; //
    };
    /**
     * @internal
     */


    ArmatureData.prototype.sortBones = function () {
      var total = this.sortedBones.length;

      if (total <= 0) {
        return;
      }

      var sortHelper = this.sortedBones.concat();
      var index = 0;
      var count = 0;
      this.sortedBones.length = 0;

      while (count < total) {
        var bone = sortHelper[index++];

        if (index >= total) {
          index = 0;
        }

        if (this.sortedBones.indexOf(bone) >= 0) {
          continue;
        }

        var flag = false;

        for (var k in this.constraints) {
          // Wait constraint.
          var constraint = this.constraints[k];

          if (constraint.root === bone && this.sortedBones.indexOf(constraint.target) < 0) {
            flag = true;
            break;
          }
        }

        if (flag) {
          continue;
        }

        if (bone.parent !== null && this.sortedBones.indexOf(bone.parent) < 0) {
          // Wait parent.
          continue;
        }

        this.sortedBones.push(bone);
        count++;
      }
    };
    /**
     * @internal
     */


    ArmatureData.prototype.cacheFrames = function (frameRate) {
      if (this.cacheFrameRate > 0) {
        // TODO clear cache.
        return;
      }

      this.cacheFrameRate = frameRate;

      for (var k in this.animations) {
        this.animations[k].cacheFrames(this.cacheFrameRate);
      }
    };
    /**
     * @internal
     */


    ArmatureData.prototype.setCacheFrame = function (globalTransformMatrix, transform) {
      var dataArray = this.parent.cachedFrames;
      var arrayOffset = dataArray.length;
      dataArray.length += 10;
      dataArray[arrayOffset] = globalTransformMatrix.a;
      dataArray[arrayOffset + 1] = globalTransformMatrix.b;
      dataArray[arrayOffset + 2] = globalTransformMatrix.c;
      dataArray[arrayOffset + 3] = globalTransformMatrix.d;
      dataArray[arrayOffset + 4] = globalTransformMatrix.tx;
      dataArray[arrayOffset + 5] = globalTransformMatrix.ty;
      dataArray[arrayOffset + 6] = transform.rotation;
      dataArray[arrayOffset + 7] = transform.skew;
      dataArray[arrayOffset + 8] = transform.scaleX;
      dataArray[arrayOffset + 9] = transform.scaleY;
      return arrayOffset;
    };
    /**
     * @internal
     */


    ArmatureData.prototype.getCacheFrame = function (globalTransformMatrix, transform, arrayOffset) {
      var dataArray = this.parent.cachedFrames;
      globalTransformMatrix.a = dataArray[arrayOffset];
      globalTransformMatrix.b = dataArray[arrayOffset + 1];
      globalTransformMatrix.c = dataArray[arrayOffset + 2];
      globalTransformMatrix.d = dataArray[arrayOffset + 3];
      globalTransformMatrix.tx = dataArray[arrayOffset + 4];
      globalTransformMatrix.ty = dataArray[arrayOffset + 5];
      transform.rotation = dataArray[arrayOffset + 6];
      transform.skew = dataArray[arrayOffset + 7];
      transform.scaleX = dataArray[arrayOffset + 8];
      transform.scaleY = dataArray[arrayOffset + 9];
      transform.x = globalTransformMatrix.tx;
      transform.y = globalTransformMatrix.ty;
    };
    /**
     * @internal
     */


    ArmatureData.prototype.addBone = function (value) {
      if (value.name in this.bones) {
        console.warn("Same bone: " + value.name);
        return;
      }

      this.bones[value.name] = value;
      this.sortedBones.push(value);
    };
    /**
     * @internal
     */


    ArmatureData.prototype.addSlot = function (value) {
      if (value.name in this.slots) {
        console.warn("Same slot: " + value.name);
        return;
      }

      this.slots[value.name] = value;
      this.sortedSlots.push(value);
    };
    /**
     * @internal
     */


    ArmatureData.prototype.addConstraint = function (value) {
      if (value.name in this.constraints) {
        console.warn("Same constraint: " + value.name);
        return;
      }

      this.constraints[value.name] = value;
    };
    /**
     * @internal
     */


    ArmatureData.prototype.addSkin = function (value) {
      if (value.name in this.skins) {
        console.warn("Same skin: " + value.name);
        return;
      }

      value.parent = this;
      this.skins[value.name] = value;

      if (this.defaultSkin === null) {
        this.defaultSkin = value;
      }

      if (value.name === "default") {
        this.defaultSkin = value;
      }
    };
    /**
     * @internal
     */


    ArmatureData.prototype.addAnimation = function (value) {
      if (value.name in this.animations) {
        console.warn("Same animation: " + value.name);
        return;
      }

      value.parent = this;
      this.animations[value.name] = value;
      this.animationNames.push(value.name);

      if (this.defaultAnimation === null) {
        this.defaultAnimation = value;
      }
    };
    /**
     * @internal
     */


    ArmatureData.prototype.addAction = function (value, isDefault) {
      if (isDefault) {
        this.defaultActions.push(value);
      } else {
        this.actions.push(value);
      }
    };
    /**
     * - Get a specific done data.
     * @param boneName - The bone name.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的骨骼数据。
     * @param boneName - 骨骼名称。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    ArmatureData.prototype.getBone = function (boneName) {
      return boneName in this.bones ? this.bones[boneName] : null;
    };
    /**
     * - Get a specific slot data.
     * @param slotName - The slot name.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的插槽数据。
     * @param slotName - 插槽名称。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    ArmatureData.prototype.getSlot = function (slotName) {
      return slotName in this.slots ? this.slots[slotName] : null;
    };
    /**
     * @private
     */


    ArmatureData.prototype.getConstraint = function (constraintName) {
      return constraintName in this.constraints ? this.constraints[constraintName] : null;
    };
    /**
     * - Get a specific skin data.
     * @param skinName - The skin name.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定皮肤数据。
     * @param skinName - 皮肤名称。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    ArmatureData.prototype.getSkin = function (skinName) {
      return skinName in this.skins ? this.skins[skinName] : null;
    };
    /**
     * @private
     */


    ArmatureData.prototype.getMesh = function (skinName, slotName, meshName) {
      var skin = this.getSkin(skinName);

      if (skin === null) {
        return null;
      }

      return skin.getDisplay(slotName, meshName);
    };
    /**
     * - Get a specific animation data.
     * @param animationName - The animation animationName.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的动画数据。
     * @param animationName - 动画名称。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    ArmatureData.prototype.getAnimation = function (animationName) {
      return animationName in this.animations ? this.animations[animationName] : null;
    };

    return ArmatureData;
  }(dragonBones.BaseObject);

  dragonBones.ArmatureData = ArmatureData;
  /**
   * - The bone data.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 骨骼数据。
   * @version DragonBones 3.0
   * @language zh_CN
   */

  var BoneData =
  /** @class */
  function (_super) {
    __extends(BoneData, _super);

    function BoneData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @private
       */


      _this.transform = new dragonBones.Transform();
      /**
       * @private
       */

      _this.userData = null; // Initial value.

      return _this;
    }

    BoneData.toString = function () {
      return "[class dragonBones.BoneData]";
    };

    BoneData.prototype._onClear = function () {
      if (this.userData !== null) {
        this.userData.returnToPool();
      }

      this.inheritTranslation = false;
      this.inheritRotation = false;
      this.inheritScale = false;
      this.inheritReflection = false;
      this.type = 0
      /* Bone */
      ;
      this.length = 0.0;
      this.name = "";
      this.transform.identity();
      this.userData = null;
      this.parent = null;
    };

    return BoneData;
  }(dragonBones.BaseObject);

  dragonBones.BoneData = BoneData;
  /**
   * @internal
   */

  var SurfaceData =
  /** @class */
  function (_super) {
    __extends(SurfaceData, _super);

    function SurfaceData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.vertices = [];
      return _this;
    }

    SurfaceData.toString = function () {
      return "[class dragonBones.SurfaceData]";
    };

    SurfaceData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.type = 1
      /* Surface */
      ;
      this.segmentX = 0;
      this.segmentY = 0;
      this.vertices.length = 0;
    };

    return SurfaceData;
  }(BoneData);

  dragonBones.SurfaceData = SurfaceData;
  /**
   * - The slot data.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 插槽数据。
   * @version DragonBones 3.0
   * @language zh_CN
   */

  var SlotData =
  /** @class */
  function (_super) {
    __extends(SlotData, _super);

    function SlotData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @private
       */


      _this.color = null; // Initial value.

      /**
       * @private
       */

      _this.userData = null; // Initial value.

      return _this;
    }
    /**
     * @internal
     */


    SlotData.createColor = function () {
      return new dragonBones.ColorTransform();
    };

    SlotData.toString = function () {
      return "[class dragonBones.SlotData]";
    };

    SlotData.prototype._onClear = function () {
      if (this.userData !== null) {
        this.userData.returnToPool();
      }

      this.blendMode = 0
      /* Normal */
      ;
      this.displayIndex = 0;
      this.zOrder = 0;
      this.name = "";
      this.color = null; //

      this.userData = null;
      this.parent = null; //
    };
    /**
     * @internal
     */


    SlotData.DEFAULT_COLOR = new dragonBones.ColorTransform();
    return SlotData;
  }(dragonBones.BaseObject);

  dragonBones.SlotData = SlotData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var ConstraintData =
  /** @class */
  function (_super) {
    __extends(ConstraintData, _super);

    function ConstraintData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    ConstraintData.prototype._onClear = function () {
      this.order = 0;
      this.name = "";
      this.type = 0
      /* IK */
      ;
      this.target = null; //

      this.root = null; //

      this.bone = null;
    };

    return ConstraintData;
  }(dragonBones.BaseObject);

  dragonBones.ConstraintData = ConstraintData;
  /**
   * @internal
   */

  var IKConstraintData =
  /** @class */
  function (_super) {
    __extends(IKConstraintData, _super);

    function IKConstraintData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    IKConstraintData.toString = function () {
      return "[class dragonBones.IKConstraintData]";
    };

    IKConstraintData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.scaleEnabled = false;
      this.bendPositive = false;
      this.weight = 1.0;
    };

    return IKConstraintData;
  }(ConstraintData);

  dragonBones.IKConstraintData = IKConstraintData;
  /**
   * @internal
   */

  var PathConstraintData =
  /** @class */
  function (_super) {
    __extends(PathConstraintData, _super);

    function PathConstraintData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.bones = [];
      return _this;
    }

    PathConstraintData.toString = function () {
      return "[class dragonBones.PathConstraintData]";
    };

    PathConstraintData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.pathSlot = null;
      this.pathDisplayData = null;
      this.bones.length = 0;
      this.positionMode = 0
      /* Fixed */
      ;
      this.spacingMode = 1
      /* Fixed */
      ;
      this.rotateMode = 1
      /* Chain */
      ;
      this.position = 0.0;
      this.spacing = 0.0;
      this.rotateOffset = 0.0;
      this.rotateMix = 0.0;
      this.translateMix = 0.0;
    };

    PathConstraintData.prototype.AddBone = function (value) {
      this.bones.push(value);
    };

    return PathConstraintData;
  }(ConstraintData);

  dragonBones.PathConstraintData = PathConstraintData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var CanvasData =
  /** @class */
  function (_super) {
    __extends(CanvasData, _super);

    function CanvasData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    CanvasData.toString = function () {
      return "[class dragonBones.CanvasData]";
    };

    CanvasData.prototype._onClear = function () {
      this.hasBackground = false;
      this.color = 0x000000;
      this.x = 0;
      this.y = 0;
      this.width = 0;
      this.height = 0;
    };

    return CanvasData;
  }(dragonBones.BaseObject);

  dragonBones.CanvasData = CanvasData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The skin data, typically a armature data instance contains at least one skinData.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 皮肤数据，通常一个骨架数据至少包含一个皮肤数据。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var SkinData =
  /** @class */
  function (_super) {
    __extends(SkinData, _super);

    function SkinData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @private
       */


      _this.displays = {};
      return _this;
    }

    SkinData.toString = function () {
      return "[class dragonBones.SkinData]";
    };

    SkinData.prototype._onClear = function () {
      for (var k in this.displays) {
        var slotDisplays = this.displays[k];

        for (var _i = 0, slotDisplays_1 = slotDisplays; _i < slotDisplays_1.length; _i++) {
          var display = slotDisplays_1[_i];

          if (display !== null) {
            display.returnToPool();
          }
        }

        delete this.displays[k];
      }

      this.name = ""; // this.displays.clear();

      this.parent = null; //
    };
    /**
     * @internal
     */


    SkinData.prototype.addDisplay = function (slotName, value) {
      if (!(slotName in this.displays)) {
        this.displays[slotName] = [];
      }

      if (value !== null) {
        value.parent = this;
      }

      var slotDisplays = this.displays[slotName]; // TODO clear prev

      slotDisplays.push(value);
    };
    /**
     * @private
     */


    SkinData.prototype.getDisplay = function (slotName, displayName) {
      var slotDisplays = this.getDisplays(slotName);

      if (slotDisplays !== null) {
        for (var _i = 0, slotDisplays_2 = slotDisplays; _i < slotDisplays_2.length; _i++) {
          var display = slotDisplays_2[_i];

          if (display !== null && display.name === displayName) {
            return display;
          }
        }
      }

      return null;
    };
    /**
     * @private
     */


    SkinData.prototype.getDisplays = function (slotName) {
      if (!(slotName in this.displays)) {
        return null;
      }

      return this.displays[slotName];
    };

    return SkinData;
  }(dragonBones.BaseObject);

  dragonBones.SkinData = SkinData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var VerticesData =
  /** @class */
  function () {
    function VerticesData() {
      this.weight = null; // Initial value.
    }

    VerticesData.prototype.clear = function () {
      if (!this.isShared && this.weight !== null) {
        this.weight.returnToPool();
      }

      this.isShared = false;
      this.inheritDeform = false;
      this.offset = 0;
      this.data = null;
      this.weight = null;
    };

    VerticesData.prototype.shareFrom = function (value) {
      this.isShared = true;
      this.offset = value.offset;
      this.weight = value.weight;
    };

    return VerticesData;
  }();

  dragonBones.VerticesData = VerticesData;
  /**
   * @internal
   */

  var DisplayData =
  /** @class */
  function (_super) {
    __extends(DisplayData, _super);

    function DisplayData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.transform = new dragonBones.Transform();
      return _this;
    }

    DisplayData.prototype._onClear = function () {
      this.name = "";
      this.path = "";
      this.transform.identity();
      this.parent = null; //
    };

    return DisplayData;
  }(dragonBones.BaseObject);

  dragonBones.DisplayData = DisplayData;
  /**
   * @internal
   */

  var ImageDisplayData =
  /** @class */
  function (_super) {
    __extends(ImageDisplayData, _super);

    function ImageDisplayData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.pivot = new dragonBones.Point();
      return _this;
    }

    ImageDisplayData.toString = function () {
      return "[class dragonBones.ImageDisplayData]";
    };

    ImageDisplayData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.type = 0
      /* Image */
      ;
      this.pivot.clear();
      this.texture = null;
    };

    return ImageDisplayData;
  }(DisplayData);

  dragonBones.ImageDisplayData = ImageDisplayData;
  /**
   * @internal
   */

  var ArmatureDisplayData =
  /** @class */
  function (_super) {
    __extends(ArmatureDisplayData, _super);

    function ArmatureDisplayData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.actions = [];
      return _this;
    }

    ArmatureDisplayData.toString = function () {
      return "[class dragonBones.ArmatureDisplayData]";
    };

    ArmatureDisplayData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      for (var _i = 0, _a = this.actions; _i < _a.length; _i++) {
        var action = _a[_i];
        action.returnToPool();
      }

      this.type = 1
      /* Armature */
      ;
      this.inheritAnimation = false;
      this.actions.length = 0;
      this.armature = null;
    };
    /**
     * @private
     */


    ArmatureDisplayData.prototype.addAction = function (value) {
      this.actions.push(value);
    };

    return ArmatureDisplayData;
  }(DisplayData);

  dragonBones.ArmatureDisplayData = ArmatureDisplayData;
  /**
   * @internal
   */

  var MeshDisplayData =
  /** @class */
  function (_super) {
    __extends(MeshDisplayData, _super);

    function MeshDisplayData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.vertices = new VerticesData();
      return _this;
    }

    MeshDisplayData.toString = function () {
      return "[class dragonBones.MeshDisplayData]";
    };

    MeshDisplayData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.type = 2
      /* Mesh */
      ;
      this.vertices.clear();
      this.texture = null;
    };

    return MeshDisplayData;
  }(DisplayData);

  dragonBones.MeshDisplayData = MeshDisplayData;
  /**
   * @internal
   */

  var BoundingBoxDisplayData =
  /** @class */
  function (_super) {
    __extends(BoundingBoxDisplayData, _super);

    function BoundingBoxDisplayData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.boundingBox = null; // Initial value.

      return _this;
    }

    BoundingBoxDisplayData.toString = function () {
      return "[class dragonBones.BoundingBoxDisplayData]";
    };

    BoundingBoxDisplayData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      if (this.boundingBox !== null) {
        this.boundingBox.returnToPool();
      }

      this.type = 3
      /* BoundingBox */
      ;
      this.boundingBox = null;
    };

    return BoundingBoxDisplayData;
  }(DisplayData);

  dragonBones.BoundingBoxDisplayData = BoundingBoxDisplayData;
  /**
   * @internal
   */

  var PathDisplayData =
  /** @class */
  function (_super) {
    __extends(PathDisplayData, _super);

    function PathDisplayData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.vertices = new VerticesData();
      _this.curveLengths = [];
      return _this;
    }

    PathDisplayData.toString = function () {
      return "[class dragonBones.PathDisplayData]";
    };

    PathDisplayData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.type = 4
      /* Path */
      ;
      this.closed = false;
      this.constantSpeed = false;
      this.vertices.clear();
      this.curveLengths.length = 0;
    };

    return PathDisplayData;
  }(DisplayData);

  dragonBones.PathDisplayData = PathDisplayData;
  /**
   * @internal
   */

  var WeightData =
  /** @class */
  function (_super) {
    __extends(WeightData, _super);

    function WeightData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.bones = [];
      return _this;
    }

    WeightData.toString = function () {
      return "[class dragonBones.WeightData]";
    };

    WeightData.prototype._onClear = function () {
      this.count = 0;
      this.offset = 0;
      this.bones.length = 0;
    };

    WeightData.prototype.addBone = function (value) {
      this.bones.push(value);
    };

    return WeightData;
  }(dragonBones.BaseObject);

  dragonBones.WeightData = WeightData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The base class of bounding box data.
   * @see dragonBones.RectangleData
   * @see dragonBones.EllipseData
   * @see dragonBones.PolygonData
   * @version DragonBones 5.0
   * @language en_US
   */

  /**
   * - 边界框数据基类。
   * @see dragonBones.RectangleData
   * @see dragonBones.EllipseData
   * @see dragonBones.PolygonData
   * @version DragonBones 5.0
   * @language zh_CN
   */
  var BoundingBoxData =
  /** @class */
  function (_super) {
    __extends(BoundingBoxData, _super);

    function BoundingBoxData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    BoundingBoxData.prototype._onClear = function () {
      this.color = 0x000000;
      this.width = 0.0;
      this.height = 0.0;
    };

    return BoundingBoxData;
  }(dragonBones.BaseObject);

  dragonBones.BoundingBoxData = BoundingBoxData;
  /**
   * - The rectangle bounding box data.
   * @version DragonBones 5.1
   * @language en_US
   */

  /**
   * - 矩形边界框数据。
   * @version DragonBones 5.1
   * @language zh_CN
   */

  var RectangleBoundingBoxData =
  /** @class */
  function (_super) {
    __extends(RectangleBoundingBoxData, _super);

    function RectangleBoundingBoxData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    RectangleBoundingBoxData.toString = function () {
      return "[class dragonBones.RectangleBoundingBoxData]";
    };
    /**
     * - Compute the bit code for a point (x, y) using the clip rectangle
     */


    RectangleBoundingBoxData._computeOutCode = function (x, y, xMin, yMin, xMax, yMax) {
      var code = 0
      /* InSide */
      ; // initialised as being inside of [[clip window]]

      if (x < xMin) {
        // to the left of clip window
        code |= 1
        /* Left */
        ;
      } else if (x > xMax) {
        // to the right of clip window
        code |= 2
        /* Right */
        ;
      }

      if (y < yMin) {
        // below the clip window
        code |= 4
        /* Top */
        ;
      } else if (y > yMax) {
        // above the clip window
        code |= 8
        /* Bottom */
        ;
      }

      return code;
    };
    /**
     * @private
     */


    RectangleBoundingBoxData.rectangleIntersectsSegment = function (xA, yA, xB, yB, xMin, yMin, xMax, yMax, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      var inSideA = xA > xMin && xA < xMax && yA > yMin && yA < yMax;
      var inSideB = xB > xMin && xB < xMax && yB > yMin && yB < yMax;

      if (inSideA && inSideB) {
        return -1;
      }

      var intersectionCount = 0;

      var outcode0 = RectangleBoundingBoxData._computeOutCode(xA, yA, xMin, yMin, xMax, yMax);

      var outcode1 = RectangleBoundingBoxData._computeOutCode(xB, yB, xMin, yMin, xMax, yMax);

      while (true) {
        if ((outcode0 | outcode1) === 0) {
          // Bitwise OR is 0. Trivially accept and get out of loop
          intersectionCount = 2;
          break;
        } else if ((outcode0 & outcode1) !== 0) {
          // Bitwise AND is not 0. Trivially reject and get out of loop
          break;
        } // failed both tests, so calculate the line segment to clip
        // from an outside point to an intersection with clip edge


        var x = 0.0;
        var y = 0.0;
        var normalRadian = 0.0; // At least one endpoint is outside the clip rectangle; pick it.

        var outcodeOut = outcode0 !== 0 ? outcode0 : outcode1; // Now find the intersection point;

        if ((outcodeOut & 4
        /* Top */
        ) !== 0) {
          // point is above the clip rectangle
          x = xA + (xB - xA) * (yMin - yA) / (yB - yA);
          y = yMin;

          if (normalRadians !== null) {
            normalRadian = -Math.PI * 0.5;
          }
        } else if ((outcodeOut & 8
        /* Bottom */
        ) !== 0) {
          // point is below the clip rectangle
          x = xA + (xB - xA) * (yMax - yA) / (yB - yA);
          y = yMax;

          if (normalRadians !== null) {
            normalRadian = Math.PI * 0.5;
          }
        } else if ((outcodeOut & 2
        /* Right */
        ) !== 0) {
          // point is to the right of clip rectangle
          y = yA + (yB - yA) * (xMax - xA) / (xB - xA);
          x = xMax;

          if (normalRadians !== null) {
            normalRadian = 0;
          }
        } else if ((outcodeOut & 1
        /* Left */
        ) !== 0) {
          // point is to the left of clip rectangle
          y = yA + (yB - yA) * (xMin - xA) / (xB - xA);
          x = xMin;

          if (normalRadians !== null) {
            normalRadian = Math.PI;
          }
        } // Now we move outside point to intersection point to clip
        // and get ready for next pass.


        if (outcodeOut === outcode0) {
          xA = x;
          yA = y;
          outcode0 = RectangleBoundingBoxData._computeOutCode(xA, yA, xMin, yMin, xMax, yMax);

          if (normalRadians !== null) {
            normalRadians.x = normalRadian;
          }
        } else {
          xB = x;
          yB = y;
          outcode1 = RectangleBoundingBoxData._computeOutCode(xB, yB, xMin, yMin, xMax, yMax);

          if (normalRadians !== null) {
            normalRadians.y = normalRadian;
          }
        }
      }

      if (intersectionCount) {
        if (inSideA) {
          intersectionCount = 2; // 10

          if (intersectionPointA !== null) {
            intersectionPointA.x = xB;
            intersectionPointA.y = yB;
          }

          if (intersectionPointB !== null) {
            intersectionPointB.x = xB;
            intersectionPointB.y = xB;
          }

          if (normalRadians !== null) {
            normalRadians.x = normalRadians.y + Math.PI;
          }
        } else if (inSideB) {
          intersectionCount = 1; // 01

          if (intersectionPointA !== null) {
            intersectionPointA.x = xA;
            intersectionPointA.y = yA;
          }

          if (intersectionPointB !== null) {
            intersectionPointB.x = xA;
            intersectionPointB.y = yA;
          }

          if (normalRadians !== null) {
            normalRadians.y = normalRadians.x + Math.PI;
          }
        } else {
          intersectionCount = 3; // 11

          if (intersectionPointA !== null) {
            intersectionPointA.x = xA;
            intersectionPointA.y = yA;
          }

          if (intersectionPointB !== null) {
            intersectionPointB.x = xB;
            intersectionPointB.y = yB;
          }
        }
      }

      return intersectionCount;
    };

    RectangleBoundingBoxData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.type = 0
      /* Rectangle */
      ;
    };
    /**
     * @inheritDoc
     */


    RectangleBoundingBoxData.prototype.containsPoint = function (pX, pY) {
      var widthH = this.width * 0.5;

      if (pX >= -widthH && pX <= widthH) {
        var heightH = this.height * 0.5;

        if (pY >= -heightH && pY <= heightH) {
          return true;
        }
      }

      return false;
    };
    /**
     * @inheritDoc
     */


    RectangleBoundingBoxData.prototype.intersectsSegment = function (xA, yA, xB, yB, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      var widthH = this.width * 0.5;
      var heightH = this.height * 0.5;
      var intersectionCount = RectangleBoundingBoxData.rectangleIntersectsSegment(xA, yA, xB, yB, -widthH, -heightH, widthH, heightH, intersectionPointA, intersectionPointB, normalRadians);
      return intersectionCount;
    };

    return RectangleBoundingBoxData;
  }(BoundingBoxData);

  dragonBones.RectangleBoundingBoxData = RectangleBoundingBoxData;
  /**
   * - The ellipse bounding box data.
   * @version DragonBones 5.1
   * @language en_US
   */

  /**
   * - 椭圆边界框数据。
   * @version DragonBones 5.1
   * @language zh_CN
   */

  var EllipseBoundingBoxData =
  /** @class */
  function (_super) {
    __extends(EllipseBoundingBoxData, _super);

    function EllipseBoundingBoxData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    EllipseBoundingBoxData.toString = function () {
      return "[class dragonBones.EllipseData]";
    };
    /**
     * @private
     */


    EllipseBoundingBoxData.ellipseIntersectsSegment = function (xA, yA, xB, yB, xC, yC, widthH, heightH, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      var d = widthH / heightH;
      var dd = d * d;
      yA *= d;
      yB *= d;
      var dX = xB - xA;
      var dY = yB - yA;
      var lAB = Math.sqrt(dX * dX + dY * dY);
      var xD = dX / lAB;
      var yD = dY / lAB;
      var a = (xC - xA) * xD + (yC - yA) * yD;
      var aa = a * a;
      var ee = xA * xA + yA * yA;
      var rr = widthH * widthH;
      var dR = rr - ee + aa;
      var intersectionCount = 0;

      if (dR >= 0.0) {
        var dT = Math.sqrt(dR);
        var sA = a - dT;
        var sB = a + dT;
        var inSideA = sA < 0.0 ? -1 : sA <= lAB ? 0 : 1;
        var inSideB = sB < 0.0 ? -1 : sB <= lAB ? 0 : 1;
        var sideAB = inSideA * inSideB;

        if (sideAB < 0) {
          return -1;
        } else if (sideAB === 0) {
          if (inSideA === -1) {
            intersectionCount = 2; // 10

            xB = xA + sB * xD;
            yB = (yA + sB * yD) / d;

            if (intersectionPointA !== null) {
              intersectionPointA.x = xB;
              intersectionPointA.y = yB;
            }

            if (intersectionPointB !== null) {
              intersectionPointB.x = xB;
              intersectionPointB.y = yB;
            }

            if (normalRadians !== null) {
              normalRadians.x = Math.atan2(yB / rr * dd, xB / rr);
              normalRadians.y = normalRadians.x + Math.PI;
            }
          } else if (inSideB === 1) {
            intersectionCount = 1; // 01

            xA = xA + sA * xD;
            yA = (yA + sA * yD) / d;

            if (intersectionPointA !== null) {
              intersectionPointA.x = xA;
              intersectionPointA.y = yA;
            }

            if (intersectionPointB !== null) {
              intersectionPointB.x = xA;
              intersectionPointB.y = yA;
            }

            if (normalRadians !== null) {
              normalRadians.x = Math.atan2(yA / rr * dd, xA / rr);
              normalRadians.y = normalRadians.x + Math.PI;
            }
          } else {
            intersectionCount = 3; // 11

            if (intersectionPointA !== null) {
              intersectionPointA.x = xA + sA * xD;
              intersectionPointA.y = (yA + sA * yD) / d;

              if (normalRadians !== null) {
                normalRadians.x = Math.atan2(intersectionPointA.y / rr * dd, intersectionPointA.x / rr);
              }
            }

            if (intersectionPointB !== null) {
              intersectionPointB.x = xA + sB * xD;
              intersectionPointB.y = (yA + sB * yD) / d;

              if (normalRadians !== null) {
                normalRadians.y = Math.atan2(intersectionPointB.y / rr * dd, intersectionPointB.x / rr);
              }
            }
          }
        }
      }

      return intersectionCount;
    };

    EllipseBoundingBoxData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.type = 1
      /* Ellipse */
      ;
    };
    /**
     * @inheritDoc
     */


    EllipseBoundingBoxData.prototype.containsPoint = function (pX, pY) {
      var widthH = this.width * 0.5;

      if (pX >= -widthH && pX <= widthH) {
        var heightH = this.height * 0.5;

        if (pY >= -heightH && pY <= heightH) {
          pY *= widthH / heightH;
          return Math.sqrt(pX * pX + pY * pY) <= widthH;
        }
      }

      return false;
    };
    /**
     * @inheritDoc
     */


    EllipseBoundingBoxData.prototype.intersectsSegment = function (xA, yA, xB, yB, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      var intersectionCount = EllipseBoundingBoxData.ellipseIntersectsSegment(xA, yA, xB, yB, 0.0, 0.0, this.width * 0.5, this.height * 0.5, intersectionPointA, intersectionPointB, normalRadians);
      return intersectionCount;
    };

    return EllipseBoundingBoxData;
  }(BoundingBoxData);

  dragonBones.EllipseBoundingBoxData = EllipseBoundingBoxData;
  /**
   * - The polygon bounding box data.
   * @version DragonBones 5.1
   * @language en_US
   */

  /**
   * - 多边形边界框数据。
   * @version DragonBones 5.1
   * @language zh_CN
   */

  var PolygonBoundingBoxData =
  /** @class */
  function (_super) {
    __extends(PolygonBoundingBoxData, _super);

    function PolygonBoundingBoxData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * - The polygon vertices.
       * @version DragonBones 5.1
       * @language en_US
       */

      /**
       * - 多边形顶点。
       * @version DragonBones 5.1
       * @language zh_CN
       */


      _this.vertices = [];
      return _this;
    }

    PolygonBoundingBoxData.toString = function () {
      return "[class dragonBones.PolygonBoundingBoxData]";
    };
    /**
     * @private
     */


    PolygonBoundingBoxData.polygonIntersectsSegment = function (xA, yA, xB, yB, vertices, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      if (xA === xB) {
        xA = xB + 0.000001;
      }

      if (yA === yB) {
        yA = yB + 0.000001;
      }

      var count = vertices.length;
      var dXAB = xA - xB;
      var dYAB = yA - yB;
      var llAB = xA * yB - yA * xB;
      var intersectionCount = 0;
      var xC = vertices[count - 2];
      var yC = vertices[count - 1];
      var dMin = 0.0;
      var dMax = 0.0;
      var xMin = 0.0;
      var yMin = 0.0;
      var xMax = 0.0;
      var yMax = 0.0;

      for (var i = 0; i < count; i += 2) {
        var xD = vertices[i];
        var yD = vertices[i + 1];

        if (xC === xD) {
          xC = xD + 0.0001;
        }

        if (yC === yD) {
          yC = yD + 0.0001;
        }

        var dXCD = xC - xD;
        var dYCD = yC - yD;
        var llCD = xC * yD - yC * xD;
        var ll = dXAB * dYCD - dYAB * dXCD;
        var x = (llAB * dXCD - dXAB * llCD) / ll;

        if ((x >= xC && x <= xD || x >= xD && x <= xC) && (dXAB === 0.0 || x >= xA && x <= xB || x >= xB && x <= xA)) {
          var y = (llAB * dYCD - dYAB * llCD) / ll;

          if ((y >= yC && y <= yD || y >= yD && y <= yC) && (dYAB === 0.0 || y >= yA && y <= yB || y >= yB && y <= yA)) {
            if (intersectionPointB !== null) {
              var d = x - xA;

              if (d < 0.0) {
                d = -d;
              }

              if (intersectionCount === 0) {
                dMin = d;
                dMax = d;
                xMin = x;
                yMin = y;
                xMax = x;
                yMax = y;

                if (normalRadians !== null) {
                  normalRadians.x = Math.atan2(yD - yC, xD - xC) - Math.PI * 0.5;
                  normalRadians.y = normalRadians.x;
                }
              } else {
                if (d < dMin) {
                  dMin = d;
                  xMin = x;
                  yMin = y;

                  if (normalRadians !== null) {
                    normalRadians.x = Math.atan2(yD - yC, xD - xC) - Math.PI * 0.5;
                  }
                }

                if (d > dMax) {
                  dMax = d;
                  xMax = x;
                  yMax = y;

                  if (normalRadians !== null) {
                    normalRadians.y = Math.atan2(yD - yC, xD - xC) - Math.PI * 0.5;
                  }
                }
              }

              intersectionCount++;
            } else {
              xMin = x;
              yMin = y;
              xMax = x;
              yMax = y;
              intersectionCount++;

              if (normalRadians !== null) {
                normalRadians.x = Math.atan2(yD - yC, xD - xC) - Math.PI * 0.5;
                normalRadians.y = normalRadians.x;
              }

              break;
            }
          }
        }

        xC = xD;
        yC = yD;
      }

      if (intersectionCount === 1) {
        if (intersectionPointA !== null) {
          intersectionPointA.x = xMin;
          intersectionPointA.y = yMin;
        }

        if (intersectionPointB !== null) {
          intersectionPointB.x = xMin;
          intersectionPointB.y = yMin;
        }

        if (normalRadians !== null) {
          normalRadians.y = normalRadians.x + Math.PI;
        }
      } else if (intersectionCount > 1) {
        intersectionCount++;

        if (intersectionPointA !== null) {
          intersectionPointA.x = xMin;
          intersectionPointA.y = yMin;
        }

        if (intersectionPointB !== null) {
          intersectionPointB.x = xMax;
          intersectionPointB.y = yMax;
        }
      }

      return intersectionCount;
    };

    PolygonBoundingBoxData.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.type = 2
      /* Polygon */
      ;
      this.x = 0.0;
      this.y = 0.0;
      this.vertices.length = 0;
    };
    /**
     * @inheritDoc
     */


    PolygonBoundingBoxData.prototype.containsPoint = function (pX, pY) {
      var isInSide = false;

      if (pX >= this.x && pX <= this.width && pY >= this.y && pY <= this.height) {
        for (var i = 0, l = this.vertices.length, iP = l - 2; i < l; i += 2) {
          var yA = this.vertices[iP + 1];
          var yB = this.vertices[i + 1];

          if (yB < pY && yA >= pY || yA < pY && yB >= pY) {
            var xA = this.vertices[iP];
            var xB = this.vertices[i];

            if ((pY - yB) * (xA - xB) / (yA - yB) + xB < pX) {
              isInSide = !isInSide;
            }
          }

          iP = i;
        }
      }

      return isInSide;
    };
    /**
     * @inheritDoc
     */


    PolygonBoundingBoxData.prototype.intersectsSegment = function (xA, yA, xB, yB, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      var intersectionCount = 0;

      if (RectangleBoundingBoxData.rectangleIntersectsSegment(xA, yA, xB, yB, this.x, this.y, this.x + this.width, this.y + this.height, null, null, null) !== 0) {
        intersectionCount = PolygonBoundingBoxData.polygonIntersectsSegment(xA, yA, xB, yB, this.vertices, intersectionPointA, intersectionPointB, normalRadians);
      }

      return intersectionCount;
    };

    return PolygonBoundingBoxData;
  }(BoundingBoxData);

  dragonBones.PolygonBoundingBoxData = PolygonBoundingBoxData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The animation data.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 动画数据。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var AnimationData =
  /** @class */
  function (_super) {
    __extends(AnimationData, _super);

    function AnimationData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @private
       */


      _this.cachedFrames = [];
      /**
       * @private
       */

      _this.boneTimelines = {};
      /**
       * @private
       */

      _this.surfaceTimelines = {};
      /**
       * @private
       */

      _this.slotTimelines = {};
      /**
       * @private
       */

      _this.constraintTimelines = {};
      /**
       * @private
       */

      _this.animationTimelines = {};
      /**
       * @private
       */

      _this.boneCachedFrameIndices = {};
      /**
       * @private
       */

      _this.slotCachedFrameIndices = {};
      /**
       * @private
       */

      _this.actionTimeline = null; // Initial value.

      /**
       * @private
       */

      _this.zOrderTimeline = null; // Initial value.

      return _this;
    }

    AnimationData.toString = function () {
      return "[class dragonBones.AnimationData]";
    };

    AnimationData.prototype._onClear = function () {
      for (var k in this.boneTimelines) {
        for (var _i = 0, _a = this.boneTimelines[k]; _i < _a.length; _i++) {
          var timeline = _a[_i];
          timeline.returnToPool();
        }

        delete this.boneTimelines[k];
      }

      for (var k in this.surfaceTimelines) {
        for (var _b = 0, _c = this.surfaceTimelines[k]; _b < _c.length; _b++) {
          var timeline = _c[_b];
          timeline.returnToPool();
        }

        delete this.surfaceTimelines[k];
      }

      for (var k in this.slotTimelines) {
        for (var _d = 0, _e = this.slotTimelines[k]; _d < _e.length; _d++) {
          var timeline = _e[_d];
          timeline.returnToPool();
        }

        delete this.slotTimelines[k];
      }

      for (var k in this.constraintTimelines) {
        for (var _f = 0, _g = this.constraintTimelines[k]; _f < _g.length; _f++) {
          var timeline = _g[_f];
          timeline.returnToPool();
        }

        delete this.constraintTimelines[k];
      }

      for (var k in this.animationTimelines) {
        for (var _h = 0, _j = this.animationTimelines[k]; _h < _j.length; _h++) {
          var timeline = _j[_h];
          timeline.returnToPool();
        }

        delete this.animationTimelines[k];
      }

      for (var k in this.boneCachedFrameIndices) {
        delete this.boneCachedFrameIndices[k];
      }

      for (var k in this.slotCachedFrameIndices) {
        delete this.slotCachedFrameIndices[k];
      }

      if (this.actionTimeline !== null) {
        this.actionTimeline.returnToPool();
      }

      if (this.zOrderTimeline !== null) {
        this.zOrderTimeline.returnToPool();
      }

      this.frameIntOffset = 0;
      this.frameFloatOffset = 0;
      this.frameOffset = 0;
      this.frameCount = 0;
      this.playTimes = 0;
      this.duration = 0.0;
      this.scale = 1.0;
      this.fadeInTime = 0.0;
      this.cacheFrameRate = 0.0;
      this.name = "";
      this.cachedFrames.length = 0; // this.boneTimelines.clear();
      // this.surfaceTimelines.clear();
      // this.slotTimelines.clear();
      // this.constraintTimelines.clear();
      // this.animationTimelines.clear();
      // this.boneCachedFrameIndices.clear();
      // this.slotCachedFrameIndices.clear();

      this.actionTimeline = null;
      this.zOrderTimeline = null;
      this.parent = null; //
    };
    /**
     * @internal
     */


    AnimationData.prototype.cacheFrames = function (frameRate) {
      if (this.cacheFrameRate > 0.0) {
        // TODO clear cache.
        return;
      }

      this.cacheFrameRate = Math.max(Math.ceil(frameRate * this.scale), 1.0);
      var cacheFrameCount = Math.ceil(this.cacheFrameRate * this.duration) + 1; // Cache one more frame.

      this.cachedFrames.length = cacheFrameCount;

      for (var i = 0, l = this.cacheFrames.length; i < l; ++i) {
        this.cachedFrames[i] = false;
      }

      for (var _i = 0, _a = this.parent.sortedBones; _i < _a.length; _i++) {
        var bone = _a[_i];
        var indices = new Array(cacheFrameCount);

        for (var i = 0, l = indices.length; i < l; ++i) {
          indices[i] = -1;
        }

        this.boneCachedFrameIndices[bone.name] = indices;
      }

      for (var _b = 0, _c = this.parent.sortedSlots; _b < _c.length; _b++) {
        var slot = _c[_b];
        var indices = new Array(cacheFrameCount);

        for (var i = 0, l = indices.length; i < l; ++i) {
          indices[i] = -1;
        }

        this.slotCachedFrameIndices[slot.name] = indices;
      }
    };
    /**
     * @private
     */


    AnimationData.prototype.addBoneTimeline = function (bone, timeline) {
      var timelines = bone.name in this.boneTimelines ? this.boneTimelines[bone.name] : this.boneTimelines[bone.name] = [];

      if (timelines.indexOf(timeline) < 0) {
        timelines.push(timeline);
      }
    };
    /**
     * @private
     */


    AnimationData.prototype.addSurfaceTimeline = function (surface, timeline) {
      var timelines = surface.name in this.surfaceTimelines ? this.surfaceTimelines[surface.name] : this.surfaceTimelines[surface.name] = [];

      if (timelines.indexOf(timeline) < 0) {
        timelines.push(timeline);
      }
    };
    /**
     * @private
     */


    AnimationData.prototype.addSlotTimeline = function (slot, timeline) {
      var timelines = slot.name in this.slotTimelines ? this.slotTimelines[slot.name] : this.slotTimelines[slot.name] = [];

      if (timelines.indexOf(timeline) < 0) {
        timelines.push(timeline);
      }
    };
    /**
     * @private
     */


    AnimationData.prototype.addConstraintTimeline = function (constraint, timeline) {
      var timelines = constraint.name in this.constraintTimelines ? this.constraintTimelines[constraint.name] : this.constraintTimelines[constraint.name] = [];

      if (timelines.indexOf(timeline) < 0) {
        timelines.push(timeline);
      }
    };
    /**
     * @private
     */


    AnimationData.prototype.addAnimationTimeline = function (timelineName, timeline) {
      var timelines = timelineName in this.animationTimelines ? this.animationTimelines[timelineName] : this.animationTimelines[timelineName] = [];

      if (timelines.indexOf(timeline) < 0) {
        timelines.push(timeline);
      }
    };
    /**
     * @private
     */


    AnimationData.prototype.getBoneTimelines = function (timelineName) {
      return timelineName in this.boneTimelines ? this.boneTimelines[timelineName] : null;
    };
    /**
     * @private
     */


    AnimationData.prototype.getSurfaceTimelines = function (timelineName) {
      return timelineName in this.surfaceTimelines ? this.surfaceTimelines[timelineName] : null;
    };
    /**
     * @private
     */


    AnimationData.prototype.getSlotTimelines = function (timelineName) {
      return timelineName in this.slotTimelines ? this.slotTimelines[timelineName] : null;
    };
    /**
     * @private
     */


    AnimationData.prototype.getConstraintTimelines = function (timelineName) {
      return timelineName in this.constraintTimelines ? this.constraintTimelines[timelineName] : null;
    };
    /**
     * @private
     */


    AnimationData.prototype.getAnimationTimelines = function (timelineName) {
      return timelineName in this.animationTimelines ? this.animationTimelines[timelineName] : null;
    };
    /**
     * @private
     */


    AnimationData.prototype.getBoneCachedFrameIndices = function (boneName) {
      return boneName in this.boneCachedFrameIndices ? this.boneCachedFrameIndices[boneName] : null;
    };
    /**
     * @private
     */


    AnimationData.prototype.getSlotCachedFrameIndices = function (slotName) {
      return slotName in this.slotCachedFrameIndices ? this.slotCachedFrameIndices[slotName] : null;
    };

    return AnimationData;
  }(dragonBones.BaseObject);

  dragonBones.AnimationData = AnimationData;
  /**
   * @internal
   */

  var TimelineData =
  /** @class */
  function (_super) {
    __extends(TimelineData, _super);

    function TimelineData() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    TimelineData.toString = function () {
      return "[class dragonBones.TimelineData]";
    };

    TimelineData.prototype._onClear = function () {
      this.type = 10
      /* BoneAll */
      ;
      this.offset = 0;
      this.frameIndicesOffset = -1;
    };

    return TimelineData;
  }(dragonBones.BaseObject);

  dragonBones.TimelineData = TimelineData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The animation config is used to describe all the information needed to play an animation state.
   * The API is still in the experimental phase and may encounter bugs or stability or compatibility issues when used.
   * @see dragonBones.AnimationState
   * @beta
   * @version DragonBones 5.0
   * @language en_US
   */

  /**
   * - 动画配置用来描述播放一个动画状态所需要的全部信息。
   * 该 API 仍在实验阶段，使用时可能遭遇 bug 或稳定性或兼容性问题。
   * @see dragonBones.AnimationState
   * @beta
   * @version DragonBones 5.0
   * @language zh_CN
   */
  var AnimationConfig =
  /** @class */
  function (_super) {
    __extends(AnimationConfig, _super);

    function AnimationConfig() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @private
       */


      _this.boneMask = [];
      return _this;
    }

    AnimationConfig.toString = function () {
      return "[class dragonBones.AnimationConfig]";
    };

    AnimationConfig.prototype._onClear = function () {
      this.pauseFadeOut = true;
      this.fadeOutMode = 4
      /* All */
      ;
      this.fadeOutTweenType = 1
      /* Line */
      ;
      this.fadeOutTime = -1.0;
      this.actionEnabled = true;
      this.additiveBlending = false;
      this.displayControl = true;
      this.pauseFadeIn = true;
      this.resetToPose = true;
      this.fadeInTweenType = 1
      /* Line */
      ;
      this.playTimes = -1;
      this.layer = 0;
      this.position = 0.0;
      this.duration = -1.0;
      this.timeScale = -100.0;
      this.weight = 1.0;
      this.fadeInTime = -1.0;
      this.autoFadeOutTime = -1.0;
      this.name = "";
      this.animation = "";
      this.group = "";
      this.boneMask.length = 0;
    };
    /**
     * @private
     */


    AnimationConfig.prototype.clear = function () {
      this._onClear();
    };
    /**
     * @private
     */


    AnimationConfig.prototype.copyFrom = function (value) {
      this.pauseFadeOut = value.pauseFadeOut;
      this.fadeOutMode = value.fadeOutMode;
      this.autoFadeOutTime = value.autoFadeOutTime;
      this.fadeOutTweenType = value.fadeOutTweenType;
      this.actionEnabled = value.actionEnabled;
      this.additiveBlending = value.additiveBlending;
      this.displayControl = value.displayControl;
      this.pauseFadeIn = value.pauseFadeIn;
      this.resetToPose = value.resetToPose;
      this.playTimes = value.playTimes;
      this.layer = value.layer;
      this.position = value.position;
      this.duration = value.duration;
      this.timeScale = value.timeScale;
      this.fadeInTime = value.fadeInTime;
      this.fadeOutTime = value.fadeOutTime;
      this.fadeInTweenType = value.fadeInTweenType;
      this.weight = value.weight;
      this.name = value.name;
      this.animation = value.animation;
      this.group = value.group;
      this.boneMask.length = value.boneMask.length;

      for (var i = 0, l = this.boneMask.length; i < l; ++i) {
        this.boneMask[i] = value.boneMask[i];
      }
    };
    /**
     * @private
     */


    AnimationConfig.prototype.containsBoneMask = function (boneName) {
      return this.boneMask.length === 0 || this.boneMask.indexOf(boneName) >= 0;
    };
    /**
     * @private
     */


    AnimationConfig.prototype.addBoneMask = function (armature, boneName, recursive) {
      if (recursive === void 0) {
        recursive = true;
      }

      var currentBone = armature.getBone(boneName);

      if (currentBone === null) {
        return;
      }

      if (this.boneMask.indexOf(boneName) < 0) {
        // Add mixing
        this.boneMask.push(boneName);
      }

      if (recursive) {
        // Add recursive mixing.
        for (var _i = 0, _a = armature.getBones(); _i < _a.length; _i++) {
          var bone = _a[_i];

          if (this.boneMask.indexOf(bone.name) < 0 && currentBone.contains(bone)) {
            this.boneMask.push(bone.name);
          }
        }
      }
    };
    /**
     * @private
     */


    AnimationConfig.prototype.removeBoneMask = function (armature, boneName, recursive) {
      if (recursive === void 0) {
        recursive = true;
      }

      var index = this.boneMask.indexOf(boneName);

      if (index >= 0) {
        // Remove mixing.
        this.boneMask.splice(index, 1);
      }

      if (recursive) {
        var currentBone = armature.getBone(boneName);

        if (currentBone !== null) {
          if (this.boneMask.length > 0) {
            // Remove recursive mixing.
            for (var _i = 0, _a = armature.getBones(); _i < _a.length; _i++) {
              var bone = _a[_i];
              var index_1 = this.boneMask.indexOf(bone.name);

              if (index_1 >= 0 && currentBone.contains(bone)) {
                this.boneMask.splice(index_1, 1);
              }
            }
          } else {
            // Add unrecursive mixing.
            for (var _b = 0, _c = armature.getBones(); _b < _c.length; _b++) {
              var bone = _c[_b];

              if (bone === currentBone) {
                continue;
              }

              if (!currentBone.contains(bone)) {
                this.boneMask.push(bone.name);
              }
            }
          }
        }
      }
    };

    return AnimationConfig;
  }(dragonBones.BaseObject);

  dragonBones.AnimationConfig = AnimationConfig;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The texture atlas data.
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 贴图集数据。
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var TextureAtlasData =
  /** @class */
  function (_super) {
    __extends(TextureAtlasData, _super);

    function TextureAtlasData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @private
       */


      _this.textures = {};
      return _this;
    }

    TextureAtlasData.prototype._onClear = function () {
      for (var k in this.textures) {
        this.textures[k].returnToPool();
        delete this.textures[k];
      }

      this.autoSearch = false;
      this.width = 0;
      this.height = 0;
      this.scale = 1.0; // this.textures.clear();

      this.name = "";
      this.imagePath = "";
    };
    /**
     * @private
     */


    TextureAtlasData.prototype.copyFrom = function (value) {
      this.autoSearch = value.autoSearch;
      this.scale = value.scale;
      this.width = value.width;
      this.height = value.height;
      this.name = value.name;
      this.imagePath = value.imagePath;

      for (var k in this.textures) {
        this.textures[k].returnToPool();
        delete this.textures[k];
      } // this.textures.clear();


      for (var k in value.textures) {
        var texture = this.createTexture();
        texture.copyFrom(value.textures[k]);
        this.textures[k] = texture;
      }
    };
    /**
     * @internal
     */


    TextureAtlasData.prototype.addTexture = function (value) {
      if (value.name in this.textures) {
        console.warn("Same texture: " + value.name);
        return;
      }

      value.parent = this;
      this.textures[value.name] = value;
    };
    /**
     * @private
     */


    TextureAtlasData.prototype.getTexture = function (textureName) {
      return textureName in this.textures ? this.textures[textureName] : null;
    };

    return TextureAtlasData;
  }(dragonBones.BaseObject);

  dragonBones.TextureAtlasData = TextureAtlasData;
  /**
   * @internal
   */

  var TextureData =
  /** @class */
  function (_super) {
    __extends(TextureData, _super);

    function TextureData() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.region = new dragonBones.Rectangle();
      _this.frame = null; // Initial value.

      return _this;
    }

    TextureData.createRectangle = function () {
      return new dragonBones.Rectangle();
    };

    TextureData.prototype._onClear = function () {
      this.rotated = false;
      this.name = "";
      this.region.clear();
      this.parent = null; //

      this.frame = null;
    };

    TextureData.prototype.copyFrom = function (value) {
      this.rotated = value.rotated;
      this.name = value.name;
      this.region.copyFrom(value.region);
      this.parent = value.parent;

      if (this.frame === null && value.frame !== null) {
        this.frame = TextureData.createRectangle();
      } else if (this.frame !== null && value.frame === null) {
        this.frame = null;
      }

      if (this.frame !== null && value.frame !== null) {
        this.frame.copyFrom(value.frame);
      }
    };

    return TextureData;
  }(dragonBones.BaseObject);

  dragonBones.TextureData = TextureData;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var DeformVertices =
  /** @class */
  function (_super) {
    __extends(DeformVertices, _super);

    function DeformVertices() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.vertices = [];
      _this.bones = [];
      return _this;
    }

    DeformVertices.toString = function () {
      return "[class dragonBones.DeformVertices]";
    };

    DeformVertices.prototype._onClear = function () {
      this.verticesDirty = false;
      this.vertices.length = 0;
      this.bones.length = 0;
      this.verticesData = null;
    };

    DeformVertices.prototype.init = function (verticesDataValue, armature) {
      this.verticesData = verticesDataValue;

      if (this.verticesData !== null) {
        var vertexCount = 0;

        if (this.verticesData.weight !== null) {
          vertexCount = this.verticesData.weight.count * 2;
        } else {
          vertexCount = this.verticesData.data.intArray[this.verticesData.offset + 0
          /* MeshVertexCount */
          ] * 2;
        }

        this.verticesDirty = true;
        this.vertices.length = vertexCount;
        this.bones.length = 0; //

        for (var i = 0, l = this.vertices.length; i < l; ++i) {
          this.vertices[i] = 0.0;
        }

        if (this.verticesData.weight !== null) {
          for (var i = 0, l = this.verticesData.weight.bones.length; i < l; ++i) {
            var bone = armature.getBone(this.verticesData.weight.bones[i].name);
            this.bones.push(bone);
          }
        }
      } else {
        this.verticesDirty = false;
        this.vertices.length = 0;
        this.bones.length = 0;
        this.verticesData = null;
      }
    };

    DeformVertices.prototype.isBonesUpdate = function () {
      for (var _i = 0, _a = this.bones; _i < _a.length; _i++) {
        var bone = _a[_i];

        if (bone !== null && bone._childrenTransformDirty) {
          return true;
        }
      }

      return false;
    };

    return DeformVertices;
  }(dragonBones.BaseObject);

  dragonBones.DeformVertices = DeformVertices;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones_1) {
  /**
   * - Armature is the core of the skeleton animation system.
   * @see dragonBones.ArmatureData
   * @see dragonBones.Bone
   * @see dragonBones.Slot
   * @see dragonBones.Animation
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 骨架是骨骼动画系统的核心。
   * @see dragonBones.ArmatureData
   * @see dragonBones.Bone
   * @see dragonBones.Slot
   * @see dragonBones.Animation
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Armature =
  /** @class */
  function (_super) {
    __extends(Armature, _super);

    function Armature() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._bones = [];
      _this._slots = [];
      /**
       * @internal
       */

      _this._constraints = [];
      _this._actions = [];
      _this._animation = null; // Initial value.

      _this._proxy = null; // Initial value.

      /**
       * @internal
       */

      _this._replaceTextureAtlasData = null; // Initial value.

      _this._clock = null; // Initial value.

      return _this;
    }

    Armature.toString = function () {
      return "[class dragonBones.Armature]";
    };

    Armature._onSortSlots = function (a, b) {
      return a._zOrder > b._zOrder ? 1 : -1;
    };

    Armature.prototype._onClear = function () {
      if (this._clock !== null) {
        // Remove clock first.
        this._clock.remove(this);
      }

      for (var _i = 0, _a = this._bones; _i < _a.length; _i++) {
        var bone = _a[_i];
        bone.returnToPool();
      }

      for (var _b = 0, _c = this._slots; _b < _c.length; _b++) {
        var slot = _c[_b];
        slot.returnToPool();
      }

      for (var _d = 0, _e = this._constraints; _d < _e.length; _d++) {
        var constraint = _e[_d];
        constraint.returnToPool();
      }

      for (var _f = 0, _g = this._actions; _f < _g.length; _f++) {
        var action = _g[_f];
        action.returnToPool();
      }

      if (this._animation !== null) {
        this._animation.returnToPool();
      }

      if (this._proxy !== null) {
        this._proxy.dbClear();
      }

      if (this._replaceTextureAtlasData !== null) {
        this._replaceTextureAtlasData.returnToPool();
      }

      this.inheritAnimation = true;
      this.userData = null;
      this._lockUpdate = false;
      this._slotsDirty = true;
      this._zOrderDirty = false;
      this._flipX = false;
      this._flipY = false;
      this._cacheFrameIndex = -1;
      this._bones.length = 0;
      this._slots.length = 0;
      this._constraints.length = 0;
      this._actions.length = 0;
      this._armatureData = null; //

      this._animation = null; //

      this._proxy = null; //

      this._display = null;
      this._replaceTextureAtlasData = null;
      this._replacedTexture = null;
      this._dragonBones = null; //

      this._clock = null;
      this._parent = null;
    };
    /**
     * @internal
     */


    Armature.prototype._sortZOrder = function (slotIndices, offset) {
      var slotDatas = this._armatureData.sortedSlots;
      var isOriginal = slotIndices === null;

      if (this._zOrderDirty || !isOriginal) {
        for (var i = 0, l = slotDatas.length; i < l; ++i) {
          var slotIndex = isOriginal ? i : slotIndices[offset + i];

          if (slotIndex < 0 || slotIndex >= l) {
            continue;
          }

          var slotData = slotDatas[slotIndex];
          var slot = this.getSlot(slotData.name);

          if (slot !== null) {
            slot._setZorder(i);
          }
        }

        this._slotsDirty = true;
        this._zOrderDirty = !isOriginal;
      }
    };
    /**
     * @internal
     */


    Armature.prototype._addBone = function (value) {
      if (this._bones.indexOf(value) < 0) {
        this._bones.push(value);
      }
    };
    /**
     * @internal
     */


    Armature.prototype._addSlot = function (value) {
      if (this._slots.indexOf(value) < 0) {
        this._slots.push(value);
      }
    };
    /**
     * @internal
     */


    Armature.prototype._addConstraint = function (value) {
      if (this._constraints.indexOf(value) < 0) {
        this._constraints.push(value);
      }
    };
    /**
     * @internal
     */


    Armature.prototype._bufferAction = function (action, append) {
      if (this._actions.indexOf(action) < 0) {
        if (append) {
          this._actions.push(action);
        } else {
          this._actions.unshift(action);
        }
      }
    };
    /**
     * - Dispose the armature. (Return to the object pool)
     * @example
     * <pre>
     *     removeChild(armature.display);
     *     armature.dispose();
     * </pre>
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 释放骨架。 （回收到对象池）
     * @example
     * <pre>
     *     removeChild(armature.display);
     *     armature.dispose();
     * </pre>
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.dispose = function () {
      if (this._armatureData !== null) {
        this._lockUpdate = true;

        this._dragonBones.bufferObject(this);
      }
    };
    /**
     * @internal
     */


    Armature.prototype.init = function (armatureData, proxy, display, dragonBones) {
      if (this._armatureData !== null) {
        return;
      }

      this._armatureData = armatureData;
      this._animation = dragonBones_1.BaseObject.borrowObject(dragonBones_1.Animation);
      this._proxy = proxy;
      this._display = display;
      this._dragonBones = dragonBones;

      this._proxy.dbInit(this);

      this._animation.init(this);

      this._animation.animations = this._armatureData.animations;
    };
    /**
     * @inheritDoc
     */


    Armature.prototype.advanceTime = function (passedTime) {
      if (this._lockUpdate) {
        return;
      }

      if (this._armatureData === null) {
        console.warn("The armature has been disposed.");
        return;
      } else if (this._armatureData.parent === null) {
        console.warn("The armature data has been disposed.\nPlease make sure dispose armature before call factory.clear().");
        return;
      }

      var prevCacheFrameIndex = this._cacheFrameIndex; // Update animation.

      this._animation.advanceTime(passedTime); // Sort slots.


      if (this._slotsDirty) {
        this._slotsDirty = false;

        this._slots.sort(Armature._onSortSlots);
      } // Update bones and slots.


      if (this._cacheFrameIndex < 0 || this._cacheFrameIndex !== prevCacheFrameIndex) {
        var i = 0,
            l = 0;

        for (i = 0, l = this._bones.length; i < l; ++i) {
          this._bones[i].update(this._cacheFrameIndex);
        }

        for (i = 0, l = this._slots.length; i < l; ++i) {
          this._slots[i].update(this._cacheFrameIndex);
        }
      } // Do actions.


      if (this._actions.length > 0) {
        this._lockUpdate = true;

        for (var _i = 0, _a = this._actions; _i < _a.length; _i++) {
          var action = _a[_i];
          var actionData = action.actionData;

          if (actionData !== null) {
            if (actionData.type === 0
            /* Play */
            ) {
                if (action.slot !== null) {
                  var childArmature = action.slot.childArmature;

                  if (childArmature !== null) {
                    childArmature.animation.fadeIn(actionData.name);
                  }
                } else if (action.bone !== null) {
                  for (var _b = 0, _c = this.getSlots(); _b < _c.length; _b++) {
                    var slot = _c[_b];

                    if (slot.parent === action.bone) {
                      var childArmature = slot.childArmature;

                      if (childArmature !== null) {
                        childArmature.animation.fadeIn(actionData.name);
                      }
                    }
                  }
                } else {
                  this._animation.fadeIn(actionData.name);
                }
              }
          }

          action.returnToPool();
        }

        this._actions.length = 0;
        this._lockUpdate = false;
      }

      this._proxy.dbUpdate();
    };
    /**
     * - Forces a specific bone or its owning slot to update the transform or display property in the next frame.
     * @param boneName - The bone name. (If not set, all bones will be update)
     * @param updateSlot - Whether to update the bone's slots. (Default: false)
     * @see dragonBones.Bone#invalidUpdate()
     * @see dragonBones.Slot#invalidUpdate()
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 强制特定骨骼或其拥有的插槽在下一帧更新变换或显示属性。
     * @param boneName - 骨骼名称。 （如果未设置，将更新所有骨骼）
     * @param updateSlot - 是否更新骨骼的插槽。 （默认: false）
     * @see dragonBones.Bone#invalidUpdate()
     * @see dragonBones.Slot#invalidUpdate()
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.invalidUpdate = function (boneName, updateSlot) {
      if (boneName === void 0) {
        boneName = null;
      }

      if (updateSlot === void 0) {
        updateSlot = false;
      }

      if (boneName !== null && boneName.length > 0) {
        var bone = this.getBone(boneName);

        if (bone !== null) {
          bone.invalidUpdate();

          if (updateSlot) {
            for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
              var slot = _a[_i];

              if (slot.parent === bone) {
                slot.invalidUpdate();
              }
            }
          }
        }
      } else {
        for (var _b = 0, _c = this._bones; _b < _c.length; _b++) {
          var bone = _c[_b];
          bone.invalidUpdate();
        }

        if (updateSlot) {
          for (var _d = 0, _e = this._slots; _d < _e.length; _d++) {
            var slot = _e[_d];
            slot.invalidUpdate();
          }
        }
      }
    };
    /**
     * - Check whether a specific point is inside a custom bounding box in a slot.
     * The coordinate system of the point is the inner coordinate system of the armature.
     * Custom bounding boxes need to be customized in Dragonbones Pro.
     * @param x - The horizontal coordinate of the point.
     * @param y - The vertical coordinate of the point.
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 检查特定点是否在某个插槽的自定义边界框内。
     * 点的坐标系为骨架内坐标系。
     * 自定义边界框需要在 DragonBones Pro 中自定义。
     * @param x - 点的水平坐标。
     * @param y - 点的垂直坐标。
     * @version DragonBones 5.0
     * @language zh_CN
     */


    Armature.prototype.containsPoint = function (x, y) {
      for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
        var slot = _a[_i];

        if (slot.containsPoint(x, y)) {
          return slot;
        }
      }

      return null;
    };
    /**
     * - Check whether a specific segment intersects a custom bounding box for a slot in the armature.
     * The coordinate system of the segment and intersection is the inner coordinate system of the armature.
     * Custom bounding boxes need to be customized in Dragonbones Pro.
     * @param xA - The horizontal coordinate of the beginning of the segment.
     * @param yA - The vertical coordinate of the beginning of the segment.
     * @param xB - The horizontal coordinate of the end point of the segment.
     * @param yB - The vertical coordinate of the end point of the segment.
     * @param intersectionPointA - The first intersection at which a line segment intersects the bounding box from the beginning to the end. (If not set, the intersection point will not calculated)
     * @param intersectionPointB - The first intersection at which a line segment intersects the bounding box from the end to the beginning. (If not set, the intersection point will not calculated)
     * @param normalRadians - The normal radians of the tangent of the intersection boundary box. [x: Normal radian of the first intersection tangent, y: Normal radian of the second intersection tangent] (If not set, the normal will not calculated)
     * @returns The slot of the first custom bounding box where the segment intersects from the start point to the end point.
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 检查特定线段是否与骨架的某个插槽的自定义边界框相交。
     * 线段和交点的坐标系均为骨架内坐标系。
     * 自定义边界框需要在 DragonBones Pro 中自定义。
     * @param xA - 线段起点的水平坐标。
     * @param yA - 线段起点的垂直坐标。
     * @param xB - 线段终点的水平坐标。
     * @param yB - 线段终点的垂直坐标。
     * @param intersectionPointA - 线段从起点到终点与边界框相交的第一个交点。 （如果未设置，则不计算交点）
     * @param intersectionPointB - 线段从终点到起点与边界框相交的第一个交点。 （如果未设置，则不计算交点）
     * @param normalRadians - 交点边界框切线的法线弧度。 [x: 第一个交点切线的法线弧度, y: 第二个交点切线的法线弧度] （如果未设置，则不计算法线）
     * @returns 线段从起点到终点相交的第一个自定义边界框的插槽。
     * @version DragonBones 5.0
     * @language zh_CN
     */


    Armature.prototype.intersectsSegment = function (xA, yA, xB, yB, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      var isV = xA === xB;
      var dMin = 0.0;
      var dMax = 0.0;
      var intXA = 0.0;
      var intYA = 0.0;
      var intXB = 0.0;
      var intYB = 0.0;
      var intAN = 0.0;
      var intBN = 0.0;
      var intSlotA = null;
      var intSlotB = null;

      for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
        var slot = _a[_i];
        var intersectionCount = slot.intersectsSegment(xA, yA, xB, yB, intersectionPointA, intersectionPointB, normalRadians);

        if (intersectionCount > 0) {
          if (intersectionPointA !== null || intersectionPointB !== null) {
            if (intersectionPointA !== null) {
              var d = isV ? intersectionPointA.y - yA : intersectionPointA.x - xA;

              if (d < 0.0) {
                d = -d;
              }

              if (intSlotA === null || d < dMin) {
                dMin = d;
                intXA = intersectionPointA.x;
                intYA = intersectionPointA.y;
                intSlotA = slot;

                if (normalRadians) {
                  intAN = normalRadians.x;
                }
              }
            }

            if (intersectionPointB !== null) {
              var d = intersectionPointB.x - xA;

              if (d < 0.0) {
                d = -d;
              }

              if (intSlotB === null || d > dMax) {
                dMax = d;
                intXB = intersectionPointB.x;
                intYB = intersectionPointB.y;
                intSlotB = slot;

                if (normalRadians !== null) {
                  intBN = normalRadians.y;
                }
              }
            }
          } else {
            intSlotA = slot;
            break;
          }
        }
      }

      if (intSlotA !== null && intersectionPointA !== null) {
        intersectionPointA.x = intXA;
        intersectionPointA.y = intYA;

        if (normalRadians !== null) {
          normalRadians.x = intAN;
        }
      }

      if (intSlotB !== null && intersectionPointB !== null) {
        intersectionPointB.x = intXB;
        intersectionPointB.y = intYB;

        if (normalRadians !== null) {
          normalRadians.y = intBN;
        }
      }

      return intSlotA;
    };
    /**
     * - Get a specific bone.
     * @param name - The bone name.
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的骨骼。
     * @param name - 骨骼名称。
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.getBone = function (name) {
      for (var _i = 0, _a = this._bones; _i < _a.length; _i++) {
        var bone = _a[_i];

        if (bone.name === name) {
          return bone;
        }
      }

      return null;
    };
    /**
     * - Get a specific bone by the display.
     * @param display - The display object.
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 通过显示对象获取特定的骨骼。
     * @param display - 显示对象。
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.getBoneByDisplay = function (display) {
      var slot = this.getSlotByDisplay(display);
      return slot !== null ? slot.parent : null;
    };
    /**
     * - Get a specific slot.
     * @param name - The slot name.
     * @see dragonBones.Slot
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的插槽。
     * @param name - 插槽名称。
     * @see dragonBones.Slot
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.getSlot = function (name) {
      for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
        var slot = _a[_i];

        if (slot.name === name) {
          return slot;
        }
      }

      return null;
    };
    /**
     * - Get a specific slot by the display.
     * @param display - The display object.
     * @see dragonBones.Slot
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 通过显示对象获取特定的插槽。
     * @param display - 显示对象。
     * @see dragonBones.Slot
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.getSlotByDisplay = function (display) {
      if (display !== null) {
        for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
          var slot = _a[_i];

          if (slot.display === display) {
            return slot;
          }
        }
      }

      return null;
    };
    /**
     * - Get all bones.
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取所有的骨骼。
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.getBones = function () {
      return this._bones;
    };
    /**
     * - Get all slots.
     * @see dragonBones.Slot
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取所有的插槽。
     * @see dragonBones.Slot
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Armature.prototype.getSlots = function () {
      return this._slots;
    };

    Object.defineProperty(Armature.prototype, "flipX", {
      /**
       * - Whether to flip the armature horizontally.
       * @version DragonBones 5.5
       * @language en_US
       */

      /**
       * - 是否将骨架水平翻转。
       * @version DragonBones 5.5
       * @language zh_CN
       */
      get: function get() {
        return this._flipX;
      },
      set: function set(value) {
        if (this._flipX === value) {
          return;
        }

        this._flipX = value;
        this.invalidUpdate();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "flipY", {
      /**
       * - Whether to flip the armature vertically.
       * @version DragonBones 5.5
       * @language en_US
       */

      /**
       * - 是否将骨架垂直翻转。
       * @version DragonBones 5.5
       * @language zh_CN
       */
      get: function get() {
        return this._flipY;
      },
      set: function set(value) {
        if (this._flipY === value) {
          return;
        }

        this._flipY = value;
        this.invalidUpdate();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "cacheFrameRate", {
      /**
       * - The animation cache frame rate, which turns on the animation cache when the set value is greater than 0.
       * There is a certain amount of memory overhead to improve performance by caching animation data in memory.
       * The frame rate should not be set too high, usually with the frame rate of the animation is similar and lower than the program running frame rate.
       * When the animation cache is turned on, some features will fail, such as the offset property of bone.
       * @example
       * <pre>
       *     armature.cacheFrameRate = 24;
       * </pre>
       * @see dragonBones.DragonBonesData#frameRate
       * @see dragonBones.ArmatureData#frameRate
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 动画缓存帧率，当设置的值大于 0 的时，将会开启动画缓存。
       * 通过将动画数据缓存在内存中来提高运行性能，会有一定的内存开销。
       * 帧率不宜设置的过高，通常跟动画的帧率相当且低于程序运行的帧率。
       * 开启动画缓存后，某些功能将会失效，比如骨骼的 offset 属性等。
       * @example
       * <pre>
       *     armature.cacheFrameRate = 24;
       * </pre>
       * @see dragonBones.DragonBonesData#frameRate
       * @see dragonBones.ArmatureData#frameRate
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._armatureData.cacheFrameRate;
      },
      set: function set(value) {
        if (this._armatureData.cacheFrameRate !== value) {
          this._armatureData.cacheFrames(value); // Set child armature frameRate.


          for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
            var slot = _a[_i];
            var childArmature = slot.childArmature;

            if (childArmature !== null) {
              childArmature.cacheFrameRate = value;
            }
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "name", {
      /**
       * - The armature name.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 骨架名称。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._armatureData.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "armatureData", {
      /**
       * - The armature data.
       * @see dragonBones.ArmatureData
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 骨架数据。
       * @see dragonBones.ArmatureData
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._armatureData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "animation", {
      /**
       * - The animation player.
       * @see dragonBones.Animation
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 动画播放器。
       * @see dragonBones.Animation
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._animation;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "proxy", {
      /**
       * @pivate
       */
      get: function get() {
        return this._proxy;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "eventDispatcher", {
      /**
       * - The EventDispatcher instance of the armature.
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 该骨架的 EventDispatcher 实例。
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._proxy;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "display", {
      /**
       * - The display container.
       * The display of the slot is displayed as the parent.
       * Depending on the rendering engine, the type will be different, usually the DisplayObjectContainer type.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 显示容器实例。
       * 插槽的显示对象都会以此显示容器为父级。
       * 根据渲染引擎的不同，类型会不同，通常是 DisplayObjectContainer 类型。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._display;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "replacedTexture", {
      /**
       * @private
       */
      get: function get() {
        return this._replacedTexture;
      },
      set: function set(value) {
        if (this._replacedTexture === value) {
          return;
        }

        if (this._replaceTextureAtlasData !== null) {
          this._replaceTextureAtlasData.returnToPool();

          this._replaceTextureAtlasData = null;
        }

        this._replacedTexture = value;

        for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
          var slot = _a[_i];
          slot.invalidUpdate();
          slot.update(-1);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "clock", {
      /**
       * @inheritDoc
       */
      get: function get() {
        return this._clock;
      },
      set: function set(value) {
        if (this._clock === value) {
          return;
        }

        if (this._clock !== null) {
          this._clock.remove(this);
        }

        this._clock = value;

        if (this._clock) {
          this._clock.add(this);
        } // Update childArmature clock.


        for (var _i = 0, _a = this._slots; _i < _a.length; _i++) {
          var slot = _a[_i];
          var childArmature = slot.childArmature;

          if (childArmature !== null) {
            childArmature.clock = this._clock;
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Armature.prototype, "parent", {
      /**
       * - Get the parent slot which the armature belongs to.
       * @see dragonBones.Slot
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 该骨架所属的父插槽。
       * @see dragonBones.Slot
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    /**
     * @deprecated
     * @private
     */

    Armature.prototype.replaceTexture = function (texture) {
      this.replacedTexture = texture;
    };
    /**
     * - Deprecated, please refer to {@link #eventDispatcher}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #eventDispatcher}。
     * @deprecated
     * @language zh_CN
     */


    Armature.prototype.hasEventListener = function (type) {
      return this._proxy.hasDBEventListener(type);
    };
    /**
     * - Deprecated, please refer to {@link #eventDispatcher}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #eventDispatcher}。
     * @deprecated
     * @language zh_CN
     */


    Armature.prototype.addEventListener = function (type, listener, target) {
      this._proxy.addDBEventListener(type, listener, target);
    };
    /**
     * - Deprecated, please refer to {@link #eventDispatcher}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #eventDispatcher}。
     * @deprecated
     * @language zh_CN
     */


    Armature.prototype.removeEventListener = function (type, listener, target) {
      this._proxy.removeDBEventListener(type, listener, target);
    };
    /**
     * - Deprecated, please refer to {@link #cacheFrameRate}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #cacheFrameRate}。
     * @deprecated
     * @language zh_CN
     */


    Armature.prototype.enableAnimationCache = function (frameRate) {
      console.warn("Deprecated.");
      this.cacheFrameRate = frameRate;
    };
    /**
     * - Deprecated, please refer to {@link #display}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #display}。
     * @deprecated
     * @language zh_CN
     */


    Armature.prototype.getDisplay = function () {
      return this._display;
    };

    return Armature;
  }(dragonBones_1.BaseObject);

  dragonBones_1.Armature = Armature;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The base class of the transform object.
   * @see dragonBones.Transform
   * @version DragonBones 4.5
   * @language en_US
   */

  /**
   * - 变换对象的基类。
   * @see dragonBones.Transform
   * @version DragonBones 4.5
   * @language zh_CN
   */
  var TransformObject =
  /** @class */
  function (_super) {
    __extends(TransformObject, _super);

    function TransformObject() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * - A matrix relative to the armature coordinate system.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 相对于骨架坐标系的矩阵。
       * @version DragonBones 3.0
       * @language zh_CN
       */


      _this.globalTransformMatrix = new dragonBones.Matrix();
      /**
       * - A transform relative to the armature coordinate system.
       * @see #updateGlobalTransform()
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 相对于骨架坐标系的变换。
       * @see #updateGlobalTransform()
       * @version DragonBones 3.0
       * @language zh_CN
       */

      _this.global = new dragonBones.Transform();
      /**
       * - The offset transform relative to the armature or the parent bone coordinate system.
       * @see #dragonBones.Bone#invalidUpdate()
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 相对于骨架或父骨骼坐标系的偏移变换。
       * @see #dragonBones.Bone#invalidUpdate()
       * @version DragonBones 3.0
       * @language zh_CN
       */

      _this.offset = new dragonBones.Transform();
      return _this;
    }
    /**
     */


    TransformObject.prototype._onClear = function () {
      this.globalTransformMatrix.identity();
      this.global.identity();
      this.offset.identity();
      this.origin = null;
      this.userData = null;
      this._globalDirty = false;
      this._armature = null; //
    };
    /**
     * - For performance considerations, rotation or scale in the {@link #global} attribute of the bone or slot is not always properly accessible,
     * some engines do not rely on these attributes to update rendering, such as Egret.
     * The use of this method ensures that the access to the {@link #global} property is correctly rotation or scale.
     * @example
     * <pre>
     *     bone.updateGlobalTransform();
     *     let rotation = bone.global.rotation;
     * </pre>
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 出于性能的考虑，骨骼或插槽的 {@link #global} 属性中的旋转或缩放并不总是正确可访问的，有些引擎并不依赖这些属性更新渲染，比如 Egret。
     * 使用此方法可以保证访问到 {@link #global} 属性中正确的旋转或缩放。
     * @example
     * <pre>
     *     bone.updateGlobalTransform();
     *     let rotation = bone.global.rotation;
     * </pre>
     * @version DragonBones 3.0
     * @language zh_CN
     */


    TransformObject.prototype.updateGlobalTransform = function () {
      if (this._globalDirty) {
        this._globalDirty = false;
        this.global.fromMatrix(this.globalTransformMatrix);
      }
    };

    Object.defineProperty(TransformObject.prototype, "armature", {
      /**
       * - The armature to which it belongs.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 所属的骨架。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._armature;
      },
      enumerable: true,
      configurable: true
    });
    TransformObject._helpMatrix = new dragonBones.Matrix();
    TransformObject._helpTransform = new dragonBones.Transform();
    TransformObject._helpPoint = new dragonBones.Point();
    return TransformObject;
  }(dragonBones.BaseObject);

  dragonBones.TransformObject = TransformObject;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - Bone is one of the most important logical units in the armature animation system,
   * and is responsible for the realization of translate, rotation, scaling in the animations.
   * A armature can contain multiple bones.
   * @see dragonBones.BoneData
   * @see dragonBones.Armature
   * @see dragonBones.Slot
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 骨骼在骨骼动画体系中是最重要的逻辑单元之一，负责动画中的平移、旋转、缩放的实现。
   * 一个骨架中可以包含多个骨骼。
   * @see dragonBones.BoneData
   * @see dragonBones.Armature
   * @see dragonBones.Slot
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Bone =
  /** @class */
  function (_super) {
    __extends(Bone, _super);

    function Bone() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @internal
       */


      _this.animationPose = new dragonBones.Transform();
      /**
       * @internal
       */

      _this._blendState = new dragonBones.BlendState();
      return _this;
    }

    Bone.toString = function () {
      return "[class dragonBones.Bone]";
    };

    Bone.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.offsetMode = 1
      /* Additive */
      ;
      this.animationPose.identity();
      this._transformDirty = false;
      this._childrenTransformDirty = false;
      this._localDirty = true;
      this._hasConstraint = false;
      this._visible = true;
      this._cachedFrameIndex = -1;

      this._blendState.clear();

      this._boneData = null; //

      this._parent = null; //

      this._cachedFrameIndices = null;
    };

    Bone.prototype._updateGlobalTransformMatrix = function (isCache) {
      // For typescript.
      var boneData = this._boneData;
      var global = this.global;
      var globalTransformMatrix = this.globalTransformMatrix;
      var origin = this.origin;
      var offset = this.offset;
      var animationPose = this.animationPose;
      var parent = this._parent; //

      var flipX = this._armature.flipX;
      var flipY = this._armature.flipY === dragonBones.DragonBones.yDown;
      var inherit = parent !== null;
      var rotation = 0.0;

      if (this.offsetMode === 1
      /* Additive */
      ) {
          if (origin !== null) {
            // global.copyFrom(this.origin).add(this.offset).add(this.animationPose);
            global.x = origin.x + offset.x + animationPose.x;
            global.scaleX = origin.scaleX * offset.scaleX * animationPose.scaleX;
            global.scaleY = origin.scaleY * offset.scaleY * animationPose.scaleY;

            if (dragonBones.DragonBones.yDown) {
              global.y = origin.y + offset.y + animationPose.y;
              global.skew = origin.skew + offset.skew + animationPose.skew;
              global.rotation = origin.rotation + offset.rotation + animationPose.rotation;
            } else {
              global.y = origin.y - offset.y + animationPose.y;
              global.skew = origin.skew - offset.skew + animationPose.skew;
              global.rotation = origin.rotation - offset.rotation + animationPose.rotation;
            }
          } else {
            global.copyFrom(offset);

            if (!dragonBones.DragonBones.yDown) {
              global.y = -global.y;
              global.skew = -global.skew;
              global.rotation = -global.rotation;
            }

            global.add(animationPose);
          }
        } else if (this.offsetMode === 0
      /* None */
      ) {
          if (origin !== null) {
            global.copyFrom(origin).add(animationPose);
          } else {
            global.copyFrom(animationPose);
          }
        } else {
        inherit = false;
        global.copyFrom(offset);

        if (!dragonBones.DragonBones.yDown) {
          global.y = -global.y;
          global.skew = -global.skew;
          global.rotation = -global.rotation;
        }
      }

      if (inherit) {
        var parentMatrix = parent._boneData.type === 0
        /* Bone */
        ? parent.globalTransformMatrix : parent._getGlobalTransformMatrix(global.x, global.y);

        if (boneData.inheritScale) {
          if (!boneData.inheritRotation) {
            parent.updateGlobalTransform();

            if (flipX && flipY) {
              rotation = global.rotation - (parent.global.rotation + Math.PI);
            } else if (flipX) {
              rotation = global.rotation + parent.global.rotation + Math.PI;
            } else if (flipY) {
              rotation = global.rotation + parent.global.rotation;
            } else {
              rotation = global.rotation - parent.global.rotation;
            }

            global.rotation = rotation;
          }

          global.toMatrix(globalTransformMatrix);
          globalTransformMatrix.concat(parentMatrix);

          if (boneData.inheritTranslation) {
            global.x = globalTransformMatrix.tx;
            global.y = globalTransformMatrix.ty;
          } else {
            globalTransformMatrix.tx = global.x;
            globalTransformMatrix.ty = global.y;
          }

          if (isCache) {
            global.fromMatrix(globalTransformMatrix);
          } else {
            this._globalDirty = true;
          }
        } else {
          if (boneData.inheritTranslation) {
            var x = global.x;
            var y = global.y;
            global.x = parentMatrix.a * x + parentMatrix.c * y + parentMatrix.tx;
            global.y = parentMatrix.b * x + parentMatrix.d * y + parentMatrix.ty;
          } else {
            if (flipX) {
              global.x = -global.x;
            }

            if (flipY) {
              global.y = -global.y;
            }
          }

          if (boneData.inheritRotation) {
            parent.updateGlobalTransform();

            if (parent.global.scaleX < 0.0) {
              rotation = global.rotation + parent.global.rotation + Math.PI;
            } else {
              rotation = global.rotation + parent.global.rotation;
            }

            if (parentMatrix.a * parentMatrix.d - parentMatrix.b * parentMatrix.c < 0.0) {
              rotation -= global.rotation * 2.0;

              if (flipX !== flipY || boneData.inheritReflection) {
                global.skew += Math.PI;
              }

              if (!dragonBones.DragonBones.yDown) {
                global.skew = -global.skew;
              }
            }

            global.rotation = rotation;
          } else if (flipX || flipY) {
            if (flipX && flipY) {
              rotation = global.rotation + Math.PI;
            } else {
              if (flipX) {
                rotation = Math.PI - global.rotation;
              } else {
                rotation = -global.rotation;
              }

              global.skew += Math.PI;
            }

            global.rotation = rotation;
          }

          global.toMatrix(globalTransformMatrix);
        }
      } else {
        if (flipX || flipY) {
          if (flipX) {
            global.x = -global.x;
          }

          if (flipY) {
            global.y = -global.y;
          }

          if (flipX && flipY) {
            rotation = global.rotation + Math.PI;
          } else {
            if (flipX) {
              rotation = Math.PI - global.rotation;
            } else {
              rotation = -global.rotation;
            }

            global.skew += Math.PI;
          }

          global.rotation = rotation;
        }

        global.toMatrix(globalTransformMatrix);
      }
    };
    /**
     * @internal
     */


    Bone.prototype.init = function (boneData, armatureValue) {
      if (this._boneData !== null) {
        return;
      }

      this._boneData = boneData;
      this._armature = armatureValue;

      if (this._boneData.parent !== null) {
        this._parent = this._armature.getBone(this._boneData.parent.name);
      }

      this._armature._addBone(this); //


      this.origin = this._boneData.transform;
    };
    /**
     * @internal
     */


    Bone.prototype.update = function (cacheFrameIndex) {
      this._blendState.dirty = false;

      if (cacheFrameIndex >= 0 && this._cachedFrameIndices !== null) {
        var cachedFrameIndex = this._cachedFrameIndices[cacheFrameIndex];

        if (cachedFrameIndex >= 0 && this._cachedFrameIndex === cachedFrameIndex) {
          // Same cache.
          this._transformDirty = false;
        } else if (cachedFrameIndex >= 0) {
          // Has been Cached.
          this._transformDirty = true;
          this._cachedFrameIndex = cachedFrameIndex;
        } else {
          if (this._hasConstraint) {
            // Update constraints.
            for (var _i = 0, _a = this._armature._constraints; _i < _a.length; _i++) {
              var constraint = _a[_i];

              if (constraint._root === this) {
                constraint.update();
              }
            }
          }

          if (this._transformDirty || this._parent !== null && this._parent._childrenTransformDirty) {
            // Dirty.
            this._transformDirty = true;
            this._cachedFrameIndex = -1;
          } else if (this._cachedFrameIndex >= 0) {
            // Same cache, but not set index yet.
            this._transformDirty = false;
            this._cachedFrameIndices[cacheFrameIndex] = this._cachedFrameIndex;
          } else {
            // Dirty.
            this._transformDirty = true;
            this._cachedFrameIndex = -1;
          }
        }
      } else {
        if (this._hasConstraint) {
          // Update constraints.
          for (var _b = 0, _c = this._armature._constraints; _b < _c.length; _b++) {
            var constraint = _c[_b];

            if (constraint._root === this) {
              constraint.update();
            }
          }
        }

        if (this._transformDirty || this._parent !== null && this._parent._childrenTransformDirty) {
          // Dirty.
          cacheFrameIndex = -1;
          this._transformDirty = true;
          this._cachedFrameIndex = -1;
        }
      }

      if (this._transformDirty) {
        this._transformDirty = false;
        this._childrenTransformDirty = true; //

        if (this._cachedFrameIndex < 0) {
          var isCache = cacheFrameIndex >= 0;

          if (this._localDirty) {
            this._updateGlobalTransformMatrix(isCache);
          }

          if (isCache && this._cachedFrameIndices !== null) {
            this._cachedFrameIndex = this._cachedFrameIndices[cacheFrameIndex] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global);
          }
        } else {
          this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
        } //

      } else if (this._childrenTransformDirty) {
        this._childrenTransformDirty = false;
      }

      this._localDirty = true;
    };
    /**
     * @internal
     */


    Bone.prototype.updateByConstraint = function () {
      if (this._localDirty) {
        this._localDirty = false;

        if (this._transformDirty || this._parent !== null && this._parent._childrenTransformDirty) {
          this._updateGlobalTransformMatrix(true);
        }

        this._transformDirty = true;
      }
    };
    /**
     * - Forces the bone to update the transform in the next frame.
     * When the bone is not animated or its animation state is finished, the bone will not continue to update,
     * and when the skeleton must be updated for some reason, the method needs to be called explicitly.
     * @example
     * <pre>
     *     let bone = armature.getBone("arm");
     *     bone.offset.scaleX = 2.0;
     *     bone.invalidUpdate();
     * </pre>
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 强制骨骼在下一帧更新变换。
     * 当该骨骼没有动画状态或其动画状态播放完成时，骨骼将不在继续更新，而此时由于某些原因必须更新骨骼时，则需要显式调用该方法。
     * @example
     * <pre>
     *     let bone = armature.getBone("arm");
     *     bone.offset.scaleX = 2.0;
     *     bone.invalidUpdate();
     * </pre>
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Bone.prototype.invalidUpdate = function () {
      this._transformDirty = true;
    };
    /**
     * - Check whether the bone contains a specific bone.
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 检查该骨骼是否包含特定的骨骼。
     * @see dragonBones.Bone
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Bone.prototype.contains = function (value) {
      if (value === this) {
        return false;
      }

      var ancestor = value;

      while (ancestor !== this && ancestor !== null) {
        ancestor = ancestor.parent;
      }

      return ancestor === this;
    };

    Object.defineProperty(Bone.prototype, "boneData", {
      /**
       * - The bone data.
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 骨骼数据。
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._boneData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Bone.prototype, "visible", {
      /**
       * - The visible of all slots in the bone.
       * @default true
       * @see dragonBones.Slot#visible
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 此骨骼所有插槽的可见。
       * @default true
       * @see dragonBones.Slot#visible
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._visible;
      },
      set: function set(value) {
        if (this._visible === value) {
          return;
        }

        this._visible = value;

        for (var _i = 0, _a = this._armature.getSlots(); _i < _a.length; _i++) {
          var slot = _a[_i];

          if (slot.parent === this) {
            slot._updateVisible();
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Bone.prototype, "name", {
      /**
       * - The bone name.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 骨骼名称。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._boneData.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Bone.prototype, "parent", {
      /**
       * - The parent bone to which it belongs.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 所属的父骨骼。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    /**
     * - Deprecated, please refer to {@link dragonBones.Armature#getBones()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link dragonBones.Armature#getBones()}。
     * @deprecated
     * @language zh_CN
     */

    Bone.prototype.getBones = function () {
      console.warn("Deprecated.");
      var bones = new Array();

      for (var _i = 0, _a = this._armature.getBones(); _i < _a.length; _i++) {
        var bone = _a[_i];

        if (bone.parent === this) {
          bones.push(bone);
        }
      }

      return bones;
    };
    /**
     * - Deprecated, please refer to {@link dragonBones.Armature#getSlots()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link dragonBones.Armature#getSlots()}。
     * @deprecated
     * @language zh_CN
     */


    Bone.prototype.getSlots = function () {
      console.warn("Deprecated.");
      var slots = new Array();

      for (var _i = 0, _a = this._armature.getSlots(); _i < _a.length; _i++) {
        var slot = _a[_i];

        if (slot.parent === this) {
          slots.push(slot);
        }
      }

      return slots;
    };

    Object.defineProperty(Bone.prototype, "slot", {
      /**
       * - Deprecated, please refer to {@link dragonBones.Armature#getSlot()}.
       * @deprecated
       * @language en_US
       */

      /**
       * - 已废弃，请参考 {@link dragonBones.Armature#getSlot()}。
       * @deprecated
       * @language zh_CN
       */
      get: function get() {
        console.warn("Deprecated.");

        for (var _i = 0, _a = this._armature.getSlots(); _i < _a.length; _i++) {
          var slot = _a[_i];

          if (slot.parent === this) {
            return slot;
          }
        }

        return null;
      },
      enumerable: true,
      configurable: true
    });
    return Bone;
  }(dragonBones.TransformObject);

  dragonBones.Bone = Bone;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var Surface =
  /** @class */
  function (_super) {
    __extends(Surface, _super);

    function Surface() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._vertices = [];
      _this._deformVertices = [];
      /**
       * - x1, y1, x2, y2, x3, y3, x4, y4, d1X, d1Y, d2X, d2Y
       */

      _this._hullCache = [];
      /**
       * - Inside [flag, a, b, c, d, tx, ty], Outside [flag, a, b, c, d, tx, ty]
       */

      _this._matrixCahce = [];
      return _this;
    }

    Surface.toString = function () {
      return "[class dragonBones.Surface]";
    };

    Surface.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this._dX = 0.0;
      this._dY = 0.0;
      this._k = 0.0;
      this._kX = 0.0;
      this._kY = 0.0;
      this._vertices.length = 0;
      this._deformVertices.length = 0;
      this._matrixCahce.length = 0;
      this._hullCache.length = 0;
    };

    Surface.prototype._getAffineTransform = function (x, y, lX, lY, aX, aY, bX, bY, cX, cY, transform, matrix, isDown) {
      var dabX = bX - aX;
      var dabY = bY - aY;
      var dacX = cX - aX;
      var dacY = cY - aY;
      transform.rotation = Math.atan2(dabY, dabX);
      transform.skew = Math.atan2(dacY, dacX) - Math.PI * 0.5 - transform.rotation;

      if (isDown) {
        transform.rotation += Math.PI;
      }

      transform.scaleX = Math.sqrt(dabX * dabX + dabY * dabY) / lX;
      transform.scaleY = Math.sqrt(dacX * dacX + dacY * dacY) / lY;
      transform.toMatrix(matrix);
      transform.x = matrix.tx = aX - (matrix.a * x + matrix.c * y);
      transform.y = matrix.ty = aY - (matrix.b * x + matrix.d * y);
    };

    Surface.prototype._updateVertices = function () {
      var originalVertices = this._boneData.vertices;
      var vertices = this._vertices;
      var animationVertices = this._deformVertices;

      if (this._parent !== null) {
        if (this._parent._boneData.type === 1
        /* Surface */
        ) {
            for (var i = 0, l = originalVertices.length; i < l; i += 2) {
              var x = originalVertices[i] + animationVertices[i];
              var y = originalVertices[i + 1] + animationVertices[i];

              var matrix = this._parent._getGlobalTransformMatrix(x, y); //


              vertices[i] = matrix.a * x + matrix.c * y + matrix.tx;
              vertices[i + 1] = matrix.b * x + matrix.d * y + matrix.ty;
            }
          } else {
          var parentMatrix = this._parent.globalTransformMatrix;

          for (var i = 0, l = originalVertices.length; i < l; i += 2) {
            var x = originalVertices[i] + animationVertices[i];
            var y = originalVertices[i + 1] + animationVertices[i + 1]; //

            vertices[i] = parentMatrix.a * x + parentMatrix.c * y + parentMatrix.tx;
            vertices[i + 1] = parentMatrix.b * x + parentMatrix.d * y + parentMatrix.ty;
          }
        }
      } else {
        for (var i = 0, l = originalVertices.length; i < l; i += 2) {
          vertices[i] = originalVertices[i] + animationVertices[i];
          vertices[i + 1] = originalVertices[i + 1] + animationVertices[i + 1];
        }
      }
    };

    Surface.prototype._updateGlobalTransformMatrix = function (isCache) {
      // tslint:disable-next-line:no-unused-expression
      isCache;
      var segmentXD = this._boneData.segmentX * 2;
      var lastIndex = this._vertices.length - 2;
      var lA = 200.0; //

      var raX = this._vertices[0];
      var raY = this._vertices[1];
      var rbX = this._vertices[segmentXD];
      var rbY = this._vertices[segmentXD + 1];
      var rcX = this._vertices[lastIndex];
      var rcY = this._vertices[lastIndex + 1];
      var rdX = this._vertices[lastIndex - segmentXD];
      var rdY = this._vertices[lastIndex - segmentXD + 1]; //

      var dacX = raX + (rcX - raX) * 0.5;
      var dacY = raY + (rcY - raY) * 0.5;
      var dbdX = rbX + (rdX - rbX) * 0.5;
      var dbdY = rbY + (rdY - rbY) * 0.5;
      var aX = dacX + (dbdX - dacX) * 0.5;
      var aY = dacY + (dbdY - dacY) * 0.5;
      var bX = rbX + (rcX - rbX) * 0.5;
      var bY = rbY + (rcY - rbY) * 0.5;
      var cX = rdX + (rcX - rdX) * 0.5;
      var cY = rdY + (rcY - rdY) * 0.5; //

      this._globalDirty = false;

      this._getAffineTransform(0.0, 0.0, lA, lA, aX, aY, bX, bY, cX, cY, this.global, this.globalTransformMatrix, false);
    };

    Surface.prototype._getGlobalTransformMatrix = function (x, y) {
      var lB = 1000.0;

      if (x < -lB || lB < x || y < -lB || lB < y) {
        return this.globalTransformMatrix;
      }

      var isDown = false;
      var lA = 200.0;
      var surfaceData = this._boneData;
      var segmentX = surfaceData.segmentX;
      var segmentY = surfaceData.segmentY;
      var segmentXD = surfaceData.segmentX * 2;
      var dX = this._dX;
      var dY = this._dY;
      var indexX = Math.floor((x + lA) / dX); // -1 ~ segmentX - 1

      var indexY = Math.floor((y + lA) / dY); // -1 ~ segmentY - 1

      var matrixIndex = 0;
      var pX = indexX * dX - lA;
      var pY = indexY * dY - lA;
      var matrices = this._matrixCahce;
      var helpMatrix = Surface._helpMatrix;

      if (x < -lA) {
        if (y < -lA || y >= lA) {
          // Out.
          return this.globalTransformMatrix;
        } // Left.


        isDown = y > this._kX * (x + lA) + pY;
        matrixIndex = ((segmentX * (segmentY + 1) + segmentX * 2 + segmentY + indexY) * 2 + (isDown ? 1 : 0)) * 7;

        if (this._matrixCahce[matrixIndex] > 0.0) {
          helpMatrix.copyFromArray(matrices, matrixIndex + 1);
        } else {
          var vertexIndex = indexY * (segmentXD + 2);
          var ddX = this._hullCache[4];
          var ddY = this._hullCache[5];
          var sX = this._hullCache[2] - (segmentY - indexY) * ddX;
          var sY = this._hullCache[3] - (segmentY - indexY) * ddY;
          var vertices = this._vertices;

          if (isDown) {
            this._getAffineTransform(-lA, pY + dY, lB - lA, dY, vertices[vertexIndex + segmentXD + 2], vertices[vertexIndex + segmentXD + 3], sX + ddX, sY + ddY, vertices[vertexIndex], vertices[vertexIndex + 1], Surface._helpTransform, helpMatrix, true);
          } else {
            this._getAffineTransform(-lB, pY, lB - lA, dY, sX, sY, vertices[vertexIndex], vertices[vertexIndex + 1], sX + ddX, sY + ddY, Surface._helpTransform, helpMatrix, false);
          }

          matrices[matrixIndex] = 1.0;
          matrices[matrixIndex + 1] = helpMatrix.a;
          matrices[matrixIndex + 2] = helpMatrix.b;
          matrices[matrixIndex + 3] = helpMatrix.c;
          matrices[matrixIndex + 4] = helpMatrix.d;
          matrices[matrixIndex + 5] = helpMatrix.tx;
          matrices[matrixIndex + 6] = helpMatrix.ty;
        }
      } else if (x >= lA) {
        if (y < -lA || y >= lA) {
          // Out.
          return this.globalTransformMatrix;
        } // Right.


        isDown = y > this._kX * (x - lB) + pY;
        matrixIndex = ((segmentX * (segmentY + 1) + segmentX + indexY) * 2 + (isDown ? 1 : 0)) * 7;

        if (this._matrixCahce[matrixIndex] > 0.0) {
          helpMatrix.copyFromArray(matrices, matrixIndex + 1);
        } else {
          var vertexIndex = (indexY + 1) * (segmentXD + 2) - 2;
          var ddX = this._hullCache[4];
          var ddY = this._hullCache[5];
          var sX = this._hullCache[0] + indexY * ddX;
          var sY = this._hullCache[1] + indexY * ddY;
          var vertices = this._vertices;

          if (isDown) {
            this._getAffineTransform(lB, pY + dY, lB - lA, dY, sX + ddX, sY + ddY, vertices[vertexIndex + segmentXD + 2], vertices[vertexIndex + segmentXD + 3], sX, sY, Surface._helpTransform, helpMatrix, true);
          } else {
            this._getAffineTransform(lA, pY, lB - lA, dY, vertices[vertexIndex], vertices[vertexIndex + 1], sX, sY, vertices[vertexIndex + segmentXD + 2], vertices[vertexIndex + segmentXD + 3], Surface._helpTransform, helpMatrix, false);
          }

          matrices[matrixIndex] = 1.0;
          matrices[matrixIndex + 1] = helpMatrix.a;
          matrices[matrixIndex + 2] = helpMatrix.b;
          matrices[matrixIndex + 3] = helpMatrix.c;
          matrices[matrixIndex + 4] = helpMatrix.d;
          matrices[matrixIndex + 5] = helpMatrix.tx;
          matrices[matrixIndex + 6] = helpMatrix.ty;
        }
      } else if (y < -lA) {
        if (x < -lA || x >= lA) {
          // Out.
          return this.globalTransformMatrix;
        } // Up.


        isDown = y > this._kY * (x - pX - dX) - lB;
        matrixIndex = (segmentX * (segmentY + 1) + indexX * 2 + (isDown ? 1 : 0)) * 7;

        if (this._matrixCahce[matrixIndex] > 0.0) {
          helpMatrix.copyFromArray(matrices, matrixIndex + 1);
        } else {
          var vertexIndex = indexX * 2;
          var ddX = this._hullCache[10];
          var ddY = this._hullCache[11];
          var sX = this._hullCache[8] + indexX * ddX;
          var sY = this._hullCache[9] + indexX * ddY;
          var vertices = this._vertices;

          if (isDown) {
            this._getAffineTransform(pX + dX, -lA, dX, lB - lA, vertices[vertexIndex + 2], vertices[vertexIndex + 3], vertices[vertexIndex], vertices[vertexIndex + 1], sX + ddX, sY + ddY, Surface._helpTransform, helpMatrix, true);
          } else {
            this._getAffineTransform(pX, -lB, dX, lB - lA, sX, sY, sX + ddX, sY + ddY, vertices[vertexIndex], vertices[vertexIndex + 1], Surface._helpTransform, helpMatrix, false);
          }

          matrices[matrixIndex] = 1.0;
          matrices[matrixIndex + 1] = helpMatrix.a;
          matrices[matrixIndex + 2] = helpMatrix.b;
          matrices[matrixIndex + 3] = helpMatrix.c;
          matrices[matrixIndex + 4] = helpMatrix.d;
          matrices[matrixIndex + 5] = helpMatrix.tx;
          matrices[matrixIndex + 6] = helpMatrix.ty;
        }
      } else if (y >= lA) {
        if (x < -lA || x >= lA) {
          //  Out.
          return this.globalTransformMatrix;
        } // Down


        isDown = y > this._kY * (x - pX - dX) + lA;
        matrixIndex = ((segmentX * (segmentY + 1) + segmentX + segmentY + indexY) * 2 + (isDown ? 1 : 0)) * 7;

        if (this._matrixCahce[matrixIndex] > 0.0) {
          helpMatrix.copyFromArray(matrices, matrixIndex + 1);
        } else {
          var vertexIndex = segmentY * (segmentXD + 2) + indexX * 2;
          var ddX = this._hullCache[10];
          var ddY = this._hullCache[11];
          var sX = this._hullCache[6] - (segmentX - indexX) * ddX;
          var sY = this._hullCache[7] - (segmentX - indexX) * ddY;
          var vertices = this._vertices;

          if (isDown) {
            this._getAffineTransform(pX + dX, lB, dX, lB - lA, sX + ddX, sY + ddY, sX, sY, vertices[vertexIndex + 2], vertices[vertexIndex + 3], Surface._helpTransform, helpMatrix, true);
          } else {
            this._getAffineTransform(pX, lA, dX, lB - lA, vertices[vertexIndex], vertices[vertexIndex + 1], vertices[vertexIndex + 2], vertices[vertexIndex + 3], sX, sY, Surface._helpTransform, helpMatrix, false);
          }

          matrices[matrixIndex] = 1.0;
          matrices[matrixIndex + 1] = helpMatrix.a;
          matrices[matrixIndex + 2] = helpMatrix.b;
          matrices[matrixIndex + 3] = helpMatrix.c;
          matrices[matrixIndex + 4] = helpMatrix.d;
          matrices[matrixIndex + 5] = helpMatrix.tx;
          matrices[matrixIndex + 6] = helpMatrix.ty;
        }
      } else {
        // Center.
        isDown = y > this._k * (x - pX - dX) + pY;
        matrixIndex = ((segmentX * indexY + indexX) * 2 + (isDown ? 1 : 0)) * 7;

        if (this._matrixCahce[matrixIndex] > 0.0) {
          helpMatrix.copyFromArray(matrices, matrixIndex + 1);
        } else {
          var vertexIndex = indexX * 2 + indexY * (segmentXD + 2);
          var vertices = this._vertices;

          if (isDown) {
            this._getAffineTransform(pX + dX, pY + dY, dX, dY, vertices[vertexIndex + segmentXD + 4], vertices[vertexIndex + segmentXD + 5], vertices[vertexIndex + segmentXD + 2], vertices[vertexIndex + segmentXD + 3], vertices[vertexIndex + 2], vertices[vertexIndex + 3], Surface._helpTransform, helpMatrix, true);
          } else {
            this._getAffineTransform(pX, pY, dX, dY, vertices[vertexIndex], vertices[vertexIndex + 1], vertices[vertexIndex + 2], vertices[vertexIndex + 3], vertices[vertexIndex + segmentXD + 2], vertices[vertexIndex + segmentXD + 3], Surface._helpTransform, helpMatrix, false);
          }

          matrices[matrixIndex] = 1.0;
          matrices[matrixIndex + 1] = helpMatrix.a;
          matrices[matrixIndex + 2] = helpMatrix.b;
          matrices[matrixIndex + 3] = helpMatrix.c;
          matrices[matrixIndex + 4] = helpMatrix.d;
          matrices[matrixIndex + 5] = helpMatrix.tx;
          matrices[matrixIndex + 6] = helpMatrix.ty;
        }
      }

      return helpMatrix;
    };
    /**
     * @internal
     * @private
     */


    Surface.prototype.init = function (surfaceData, armatureValue) {
      if (this._boneData !== null) {
        return;
      }

      _super.prototype.init.call(this, surfaceData, armatureValue);

      var segmentX = surfaceData.segmentX;
      var segmentY = surfaceData.segmentY;
      var vertexCount = surfaceData.vertices.length;
      var lB = 1000.0;
      var lA = 200.0; //

      this._dX = lA * 2.0 / segmentX;
      this._dY = lA * 2.0 / segmentY;
      this._k = -this._dY / this._dX;
      this._kX = -this._dY / (lB - lA);
      this._kY = -(lB - lA) / this._dX;
      this._vertices.length = vertexCount;
      this._deformVertices.length = vertexCount;
      this._matrixCahce.length = (segmentX * segmentY + segmentX * 2 + segmentY * 2) * 2 * 7;
      this._hullCache.length = 10;

      for (var i = 0; i < vertexCount; ++i) {
        this._deformVertices[i] = 0.0;
      }
    };
    /**
     * @internal
     */


    Surface.prototype.update = function (cacheFrameIndex) {
      this._blendState.dirty = false;

      if (cacheFrameIndex >= 0 && this._cachedFrameIndices !== null) {
        var cachedFrameIndex = this._cachedFrameIndices[cacheFrameIndex];

        if (cachedFrameIndex >= 0 && this._cachedFrameIndex === cachedFrameIndex) {
          // Same cache.
          this._transformDirty = false;
        } else if (cachedFrameIndex >= 0) {
          // Has been Cached.
          this._transformDirty = true;
          this._cachedFrameIndex = cachedFrameIndex;
        } else {
          if (this._hasConstraint) {
            // Update constraints.
            for (var _i = 0, _a = this._armature._constraints; _i < _a.length; _i++) {
              var constraint = _a[_i];

              if (constraint._root === this) {
                constraint.update();
              }
            }
          }

          if (this._transformDirty || this._parent !== null && this._parent._childrenTransformDirty) {
            // Dirty.
            this._transformDirty = true;
            this._cachedFrameIndex = -1;
          } else if (this._cachedFrameIndex >= 0) {
            // Same cache, but not set index yet.
            this._transformDirty = false;
            this._cachedFrameIndices[cacheFrameIndex] = this._cachedFrameIndex;
          } else {
            // Dirty.
            this._transformDirty = true;
            this._cachedFrameIndex = -1;
          }
        }
      } else {
        if (this._hasConstraint) {
          // Update constraints.
          for (var _b = 0, _c = this._armature._constraints; _b < _c.length; _b++) {
            var constraint = _c[_b];

            if (constraint._root === this) {
              constraint.update();
            }
          }
        }

        if (this._transformDirty || this._parent !== null && this._parent._childrenTransformDirty) {
          // Dirty.
          cacheFrameIndex = -1;
          this._transformDirty = true;
          this._cachedFrameIndex = -1;
        }
      }

      if (this._transformDirty) {
        this._transformDirty = false;
        this._childrenTransformDirty = true; //

        for (var i = 0, l = this._matrixCahce.length; i < l; i += 7) {
          this._matrixCahce[i] = -1.0;
        } //


        this._updateVertices(); //


        if (this._cachedFrameIndex < 0) {
          var isCache = cacheFrameIndex >= 0;

          if (this._localDirty) {
            this._updateGlobalTransformMatrix(isCache);
          }

          if (isCache && this._cachedFrameIndices !== null) {
            this._cachedFrameIndex = this._cachedFrameIndices[cacheFrameIndex] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global);
          }
        } else {
          this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
        } // Update hull vertices.


        var lB = 1000.0;
        var lA = 200.0;
        var ddX = 2 * this.global.x;
        var ddY = 2 * this.global.y; //

        var helpPoint = Surface._helpPoint;
        this.globalTransformMatrix.transformPoint(lB, -lA, helpPoint);
        this._hullCache[0] = helpPoint.x;
        this._hullCache[1] = helpPoint.y;
        this._hullCache[2] = ddX - helpPoint.x;
        this._hullCache[3] = ddY - helpPoint.y;
        this.globalTransformMatrix.transformPoint(0.0, this._dY, helpPoint, true);
        this._hullCache[4] = helpPoint.x;
        this._hullCache[5] = helpPoint.y; //

        this.globalTransformMatrix.transformPoint(lA, lB, helpPoint);
        this._hullCache[6] = helpPoint.x;
        this._hullCache[7] = helpPoint.y;
        this._hullCache[8] = ddX - helpPoint.x;
        this._hullCache[9] = ddY - helpPoint.y;
        this.globalTransformMatrix.transformPoint(this._dX, 0.0, helpPoint, true);
        this._hullCache[10] = helpPoint.x;
        this._hullCache[11] = helpPoint.y;
      } else if (this._childrenTransformDirty) {
        this._childrenTransformDirty = false;
      }

      this._localDirty = true;
    };

    return Surface;
  }(dragonBones.Bone);

  dragonBones.Surface = Surface;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The slot attached to the armature, controls the display status and properties of the display object.
   * A bone can contain multiple slots.
   * A slot can contain multiple display objects, displaying only one of the display objects at a time,
   * but you can toggle the display object into frame animation while the animation is playing.
   * The display object can be a normal texture, or it can be a display of a child armature, a grid display object,
   * and a custom other display object.
   * @see dragonBones.Armature
   * @see dragonBones.Bone
   * @see dragonBones.SlotData
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 插槽附着在骨骼上，控制显示对象的显示状态和属性。
   * 一个骨骼上可以包含多个插槽。
   * 一个插槽中可以包含多个显示对象，同一时间只能显示其中的一个显示对象，但可以在动画播放的过程中切换显示对象实现帧动画。
   * 显示对象可以是普通的图片纹理，也可以是子骨架的显示容器，网格显示对象，还可以是自定义的其他显示对象。
   * @see dragonBones.Armature
   * @see dragonBones.Bone
   * @see dragonBones.SlotData
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Slot =
  /** @class */
  function (_super) {
    __extends(Slot, _super);

    function Slot() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._localMatrix = new dragonBones.Matrix();
      /**
       * @internal
       */

      _this._colorTransform = new dragonBones.ColorTransform();
      _this._displayDatas = [];
      _this._displayList = [];
      /**
       * @internal
       */

      _this._deformVertices = null;
      _this._rawDisplay = null; // Initial value.

      _this._meshDisplay = null; // Initial value.

      return _this;
    }

    Slot.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      var disposeDisplayList = [];

      for (var _i = 0, _a = this._displayList; _i < _a.length; _i++) {
        var eachDisplay = _a[_i];

        if (eachDisplay !== null && eachDisplay !== this._rawDisplay && eachDisplay !== this._meshDisplay && disposeDisplayList.indexOf(eachDisplay) < 0) {
          disposeDisplayList.push(eachDisplay);
        }
      }

      for (var _b = 0, disposeDisplayList_1 = disposeDisplayList; _b < disposeDisplayList_1.length; _b++) {
        var eachDisplay = disposeDisplayList_1[_b];

        if (eachDisplay instanceof dragonBones.Armature) {
          eachDisplay.dispose();
        } else {
          this._disposeDisplay(eachDisplay, true);
        }
      }

      if (this._deformVertices !== null) {
        this._deformVertices.returnToPool();
      }

      if (this._meshDisplay !== null && this._meshDisplay !== this._rawDisplay) {
        // May be _meshDisplay and _rawDisplay is the same one.
        this._disposeDisplay(this._meshDisplay, false);
      }

      if (this._rawDisplay !== null) {
        this._disposeDisplay(this._rawDisplay, false);
      }

      this.displayController = null;
      this._displayDirty = false;
      this._zOrderDirty = false;
      this._blendModeDirty = false;
      this._colorDirty = false;
      this._transformDirty = false;
      this._visible = true;
      this._blendMode = 0
      /* Normal */
      ;
      this._displayIndex = -1;
      this._animationDisplayIndex = -1;
      this._zOrder = 0;
      this._cachedFrameIndex = -1;
      this._pivotX = 0.0;
      this._pivotY = 0.0;

      this._localMatrix.identity();

      this._colorTransform.identity();

      this._displayList.length = 0;
      this._displayDatas.length = 0;
      this._slotData = null; //

      this._rawDisplayDatas = null;
      this._displayData = null;
      this._boundingBoxData = null;
      this._textureData = null;
      this._deformVertices = null;
      this._rawDisplay = null;
      this._meshDisplay = null;
      this._display = null;
      this._childArmature = null;
      this._parent = null; //

      this._cachedFrameIndices = null;
    };
    /**
     * - Support default skin data.
     */


    Slot.prototype._getDefaultRawDisplayData = function (displayIndex) {
      var defaultSkin = this._armature._armatureData.defaultSkin;

      if (defaultSkin !== null) {
        var defaultRawDisplayDatas = defaultSkin.getDisplays(this._slotData.name);

        if (defaultRawDisplayDatas !== null) {
          return displayIndex < defaultRawDisplayDatas.length ? defaultRawDisplayDatas[displayIndex] : null;
        }
      }

      return null;
    };

    Slot.prototype._updateDisplayData = function () {
      var prevDisplayData = this._displayData;
      var prevVerticesData = this._deformVertices !== null ? this._deformVertices.verticesData : null;
      var prevTextureData = this._textureData;
      var rawDisplayData = null;
      var currentVerticesData = null;
      this._displayData = null;
      this._boundingBoxData = null;
      this._textureData = null;

      if (this._displayIndex >= 0) {
        if (this._rawDisplayDatas !== null) {
          rawDisplayData = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null;
        }

        if (rawDisplayData === null) {
          rawDisplayData = this._getDefaultRawDisplayData(this._displayIndex);
        }

        if (this._displayIndex < this._displayDatas.length) {
          this._displayData = this._displayDatas[this._displayIndex];
        }
      }

      if (this._displayData !== null) {
        if (this._displayData.type === 2
        /* Mesh */
        ) {
            currentVerticesData = this._displayData.vertices;
          } else if (this._displayData.type === 4
        /* Path */
        ) {
            currentVerticesData = this._displayData.vertices;
          } else if (rawDisplayData !== null) {
          if (rawDisplayData.type === 2
          /* Mesh */
          ) {
              currentVerticesData = rawDisplayData.vertices;
            } else if (rawDisplayData.type === 4
          /* Path */
          ) {
              currentVerticesData = rawDisplayData.vertices;
            }
        }

        if (this._displayData.type === 3
        /* BoundingBox */
        ) {
            this._boundingBoxData = this._displayData.boundingBox;
          } else if (rawDisplayData !== null) {
          if (rawDisplayData.type === 3
          /* BoundingBox */
          ) {
              this._boundingBoxData = rawDisplayData.boundingBox;
            }
        }

        if (this._displayData.type === 0
        /* Image */
        ) {
            this._textureData = this._displayData.texture;
          } else if (this._displayData.type === 2
        /* Mesh */
        ) {
            this._textureData = this._displayData.texture;
          }
      }

      if (this._displayData !== prevDisplayData || currentVerticesData !== prevVerticesData || this._textureData !== prevTextureData) {
        // Update pivot offset.
        if (currentVerticesData === null && this._textureData !== null) {
          // TODO
          var imageDisplayData = this._displayData;
          var scale = this._textureData.parent.scale * this._armature._armatureData.scale;
          var frame = this._textureData.frame;
          this._pivotX = imageDisplayData.pivot.x;
          this._pivotY = imageDisplayData.pivot.y;
          var rect = frame !== null ? frame : this._textureData.region;
          var width = rect.width;
          var height = rect.height;

          if (this._textureData.rotated && frame === null) {
            width = rect.height;
            height = rect.width;
          }

          this._pivotX *= width * scale;
          this._pivotY *= height * scale;

          if (frame !== null) {
            this._pivotX += frame.x * scale;
            this._pivotY += frame.y * scale;
          } // Update replace pivot. TODO


          if (this._displayData !== null && rawDisplayData !== null && this._displayData !== rawDisplayData) {
            rawDisplayData.transform.toMatrix(Slot._helpMatrix);

            Slot._helpMatrix.invert();

            Slot._helpMatrix.transformPoint(0.0, 0.0, Slot._helpPoint);

            this._pivotX -= Slot._helpPoint.x;
            this._pivotY -= Slot._helpPoint.y;

            this._displayData.transform.toMatrix(Slot._helpMatrix);

            Slot._helpMatrix.invert();

            Slot._helpMatrix.transformPoint(0.0, 0.0, Slot._helpPoint);

            this._pivotX += Slot._helpPoint.x;
            this._pivotY += Slot._helpPoint.y;
          }

          if (!dragonBones.DragonBones.yDown) {
            this._pivotY = (this._textureData.rotated ? this._textureData.region.width : this._textureData.region.height) * scale - this._pivotY;
          }
        } else {
          this._pivotX = 0.0;
          this._pivotY = 0.0;
        } // Update original transform.


        if (rawDisplayData !== null) {
          // Compatible.
          this.origin = rawDisplayData.transform;
        } else if (this._displayData !== null) {
          // Compatible.
          this.origin = this._displayData.transform;
        } else {
          this.origin = null;
        } // Update vertices.


        if (currentVerticesData !== prevVerticesData) {
          if (this._deformVertices === null) {
            this._deformVertices = dragonBones.BaseObject.borrowObject(dragonBones.DeformVertices);
          }

          this._deformVertices.init(currentVerticesData, this._armature);
        } else if (this._deformVertices !== null && this._textureData !== prevTextureData) {
          // Update mesh after update frame.
          this._deformVertices.verticesDirty = true;
        }

        this._displayDirty = true;
        this._transformDirty = true;
      }
    };

    Slot.prototype._updateDisplay = function () {
      var prevDisplay = this._display !== null ? this._display : this._rawDisplay;
      var prevChildArmature = this._childArmature; // Update display and child armature.

      if (this._displayIndex >= 0 && this._displayIndex < this._displayList.length) {
        this._display = this._displayList[this._displayIndex];

        if (this._display !== null && this._display instanceof dragonBones.Armature) {
          this._childArmature = this._display;
          this._display = this._childArmature.display;
        } else {
          this._childArmature = null;
        }
      } else {
        this._display = null;
        this._childArmature = null;
      } // Update display.


      var currentDisplay = this._display !== null ? this._display : this._rawDisplay;

      if (currentDisplay !== prevDisplay) {
        this._onUpdateDisplay();

        this._replaceDisplay(prevDisplay);

        this._transformDirty = true;
        this._visibleDirty = true;
        this._blendModeDirty = true;
        this._colorDirty = true;
      } // Update frame.


      if (currentDisplay === this._rawDisplay || currentDisplay === this._meshDisplay) {
        this._updateFrame();
      } // Update child armature.


      if (this._childArmature !== prevChildArmature) {
        if (prevChildArmature !== null) {
          prevChildArmature._parent = null; // Update child armature parent.

          prevChildArmature.clock = null;

          if (prevChildArmature.inheritAnimation) {
            prevChildArmature.animation.reset();
          }
        }

        if (this._childArmature !== null) {
          this._childArmature._parent = this; // Update child armature parent.

          this._childArmature.clock = this._armature.clock;

          if (this._childArmature.inheritAnimation) {
            // Set child armature cache frameRate.
            if (this._childArmature.cacheFrameRate === 0) {
              var cacheFrameRate = this._armature.cacheFrameRate;

              if (cacheFrameRate !== 0) {
                this._childArmature.cacheFrameRate = cacheFrameRate;
              }
            } // Child armature action.


            var actions = null;

            if (this._displayData !== null && this._displayData.type === 1
            /* Armature */
            ) {
                actions = this._displayData.actions;
              } else if (this._displayIndex >= 0 && this._rawDisplayDatas !== null) {
              var rawDisplayData = this._displayIndex < this._rawDisplayDatas.length ? this._rawDisplayDatas[this._displayIndex] : null;

              if (rawDisplayData === null) {
                rawDisplayData = this._getDefaultRawDisplayData(this._displayIndex);
              }

              if (rawDisplayData !== null && rawDisplayData.type === 1
              /* Armature */
              ) {
                  actions = rawDisplayData.actions;
                }
            }

            if (actions !== null && actions.length > 0) {
              for (var _i = 0, actions_1 = actions; _i < actions_1.length; _i++) {
                var action = actions_1[_i];
                var eventObject = dragonBones.BaseObject.borrowObject(dragonBones.EventObject);
                dragonBones.EventObject.actionDataToInstance(action, eventObject, this._armature);
                eventObject.slot = this;

                this._armature._bufferAction(eventObject, false);
              }
            } else {
              this._childArmature.animation.play();
            }
          }
        }
      }
    };

    Slot.prototype._updateGlobalTransformMatrix = function (isCache) {
      var parentMatrix = this._parent._boneData.type === 0
      /* Bone */
      ? this._parent.globalTransformMatrix : this._parent._getGlobalTransformMatrix(this.global.x, this.global.y);
      this.globalTransformMatrix.copyFrom(this._localMatrix);
      this.globalTransformMatrix.concat(parentMatrix);

      if (isCache) {
        this.global.fromMatrix(this.globalTransformMatrix);
      } else {
        this._globalDirty = true;
      }
    };
    /**
     * @internal
     */


    Slot.prototype._setDisplayIndex = function (value, isAnimation) {
      if (isAnimation === void 0) {
        isAnimation = false;
      }

      if (isAnimation) {
        if (this._animationDisplayIndex === value) {
          return false;
        }

        this._animationDisplayIndex = value;
      }

      if (this._displayIndex === value) {
        return false;
      }

      this._displayIndex = value;
      this._displayDirty = true;

      this._updateDisplayData();

      return this._displayDirty;
    };
    /**
     * @internal
     */


    Slot.prototype._setZorder = function (value) {
      if (this._zOrder === value) {//return false;
      }

      this._zOrder = value;
      this._zOrderDirty = true;
      return this._zOrderDirty;
    };
    /**
     * @internal
     */


    Slot.prototype._setColor = function (value) {
      this._colorTransform.copyFrom(value);

      this._colorDirty = true;
      return this._colorDirty;
    };
    /**
     * @internal
     */


    Slot.prototype._setDisplayList = function (value) {
      if (value !== null && value.length > 0) {
        if (this._displayList.length !== value.length) {
          this._displayList.length = value.length;
        }

        for (var i = 0, l = value.length; i < l; ++i) {
          // Retain input render displays.
          var eachDisplay = value[i];

          if (eachDisplay !== null && eachDisplay !== this._rawDisplay && eachDisplay !== this._meshDisplay && !(eachDisplay instanceof dragonBones.Armature) && this._displayList.indexOf(eachDisplay) < 0) {
            this._initDisplay(eachDisplay, true);
          }

          this._displayList[i] = eachDisplay;
        }
      } else if (this._displayList.length > 0) {
        this._displayList.length = 0;
      }

      if (this._displayIndex >= 0 && this._displayIndex < this._displayList.length) {
        this._displayDirty = this._display !== this._displayList[this._displayIndex];
      } else {
        this._displayDirty = this._display !== null;
      }

      this._updateDisplayData();

      return this._displayDirty;
    };
    /**
     * @internal
     */


    Slot.prototype.init = function (slotData, armatureValue, rawDisplay, meshDisplay) {
      if (this._slotData !== null) {
        return;
      }

      this._slotData = slotData; //

      this._isFromCache = false;
      this._visibleDirty = true;
      this._blendModeDirty = true;
      this._colorDirty = true;
      this._blendMode = this._slotData.blendMode;
      this._zOrder = this._slotData.zOrder;

      this._colorTransform.copyFrom(this._slotData.color);

      this._rawDisplay = rawDisplay;
      this._meshDisplay = meshDisplay; //

      this._armature = armatureValue; //

      var slotParent = this._armature.getBone(this._slotData.parent.name);

      if (slotParent !== null) {
        this._parent = slotParent;
      } else {// Never;
      }

      this._armature._addSlot(this); //


      this._initDisplay(this._rawDisplay, false);

      if (this._rawDisplay !== this._meshDisplay) {
        this._initDisplay(this._meshDisplay, false);
      }

      this._onUpdateDisplay();

      this._addDisplay();
    };
    /**
     * @internal
     */


    Slot.prototype.update = function (cacheFrameIndex) {
      this._isFromCache = false;

      if (this._displayDirty) {
        this._displayDirty = false;

        this._updateDisplay(); // TODO remove slot offset.


        if (this._transformDirty) {
          // Update local matrix. (Only updated when both display and transform are dirty.)
          if (this.origin !== null) {
            this.global.copyFrom(this.origin).add(this.offset).toMatrix(this._localMatrix);
          } else {
            this.global.copyFrom(this.offset).toMatrix(this._localMatrix);
          }
        }
      }

      if (this._zOrderDirty) {
        this._zOrderDirty = false;

        this._updateZOrder();
      }

      if (cacheFrameIndex >= 0 && this._cachedFrameIndices !== null) {
        var cachedFrameIndex = this._cachedFrameIndices[cacheFrameIndex];

        if (cachedFrameIndex >= 0 && this._cachedFrameIndex === cachedFrameIndex) {
          // Same cache.
          this._transformDirty = false;
        } else if (cachedFrameIndex >= 0) {
          // Has been Cached.
          this._transformDirty = true;
          this._cachedFrameIndex = cachedFrameIndex;
        } else if (this._transformDirty || this._parent._childrenTransformDirty) {
          // Dirty.
          this._transformDirty = true;
          this._cachedFrameIndex = -1;
        } else if (this._cachedFrameIndex >= 0) {
          // Same cache, but not set index yet.
          this._transformDirty = false;
          this._cachedFrameIndices[cacheFrameIndex] = this._cachedFrameIndex;
        } else {
          // Dirty.
          this._transformDirty = true;
          this._cachedFrameIndex = -1;
        }
      } else if (this._transformDirty || this._parent._childrenTransformDirty) {
        // Dirty.
        cacheFrameIndex = -1;
        this._transformDirty = true;
        this._cachedFrameIndex = -1;
      }

      if (this._display === null) {
        return;
      }

      if (this._visibleDirty) {
        this._visibleDirty = false;

        this._updateVisible();
      }

      if (this._blendModeDirty) {
        this._blendModeDirty = false;

        this._updateBlendMode();
      }

      if (this._colorDirty) {
        this._colorDirty = false;

        this._updateColor();
      }

      if (this._deformVertices !== null && this._deformVertices.verticesData !== null && this._display === this._meshDisplay) {
        var isSkinned = this._deformVertices.verticesData.weight !== null;
        var isSurface = this._parent._boneData.type !== 0
        /* Bone */
        ;

        if (this._deformVertices.verticesDirty || isSkinned && this._deformVertices.isBonesUpdate() || isSurface && this._parent._childrenTransformDirty) {
          this._deformVertices.verticesDirty = false;

          this._updateMesh();
        }

        if (isSkinned || isSurface) {
          // Compatible.
          return;
        }
      }

      if (this._transformDirty) {
        this._transformDirty = false;

        if (this._cachedFrameIndex < 0) {
          var isCache = cacheFrameIndex >= 0;

          this._updateGlobalTransformMatrix(isCache);

          if (isCache && this._cachedFrameIndices !== null) {
            this._cachedFrameIndex = this._cachedFrameIndices[cacheFrameIndex] = this._armature._armatureData.setCacheFrame(this.globalTransformMatrix, this.global);
          }
        } else {
          this._isFromCache = true;

          this._armature._armatureData.getCacheFrame(this.globalTransformMatrix, this.global, this._cachedFrameIndex);
        }

        this._updateTransform();
      }
    };
    /**
     * @private
     */


    Slot.prototype.updateTransformAndMatrix = function () {
      if (this._transformDirty) {
        this._transformDirty = false;

        this._updateGlobalTransformMatrix(false);
      }
    };
    /**
     * @private
     */


    Slot.prototype.replaceDisplayData = function (value, displayIndex) {
      if (displayIndex === void 0) {
        displayIndex = -1;
      }

      if (displayIndex < 0) {
        if (this._displayIndex < 0) {
          displayIndex = 0;
        } else {
          displayIndex = this._displayIndex;
        }
      }

      if (this._displayDatas.length <= displayIndex) {
        this._displayDatas.length = displayIndex + 1;

        for (var i = 0, l = this._displayDatas.length; i < l; ++i) {
          // Clean undefined.
          if (!this._displayDatas[i]) {
            this._displayDatas[i] = null;
          }
        }
      }

      this._displayDatas[displayIndex] = value;
    };
    /**
     * - Check whether a specific point is inside a custom bounding box in the slot.
     * The coordinate system of the point is the inner coordinate system of the armature.
     * Custom bounding boxes need to be customized in Dragonbones Pro.
     * @param x - The horizontal coordinate of the point.
     * @param y - The vertical coordinate of the point.
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 检查特定点是否在插槽的自定义边界框内。
     * 点的坐标系为骨架内坐标系。
     * 自定义边界框需要在 DragonBones Pro 中自定义。
     * @param x - 点的水平坐标。
     * @param y - 点的垂直坐标。
     * @version DragonBones 5.0
     * @language zh_CN
     */


    Slot.prototype.containsPoint = function (x, y) {
      if (this._boundingBoxData === null) {
        return false;
      }

      this.updateTransformAndMatrix();

      Slot._helpMatrix.copyFrom(this.globalTransformMatrix);

      Slot._helpMatrix.invert();

      Slot._helpMatrix.transformPoint(x, y, Slot._helpPoint);

      return this._boundingBoxData.containsPoint(Slot._helpPoint.x, Slot._helpPoint.y);
    };
    /**
     * - Check whether a specific segment intersects a custom bounding box for the slot.
     * The coordinate system of the segment and intersection is the inner coordinate system of the armature.
     * Custom bounding boxes need to be customized in Dragonbones Pro.
     * @param xA - The horizontal coordinate of the beginning of the segment.
     * @param yA - The vertical coordinate of the beginning of the segment.
     * @param xB - The horizontal coordinate of the end point of the segment.
     * @param yB - The vertical coordinate of the end point of the segment.
     * @param intersectionPointA - The first intersection at which a line segment intersects the bounding box from the beginning to the end. (If not set, the intersection point will not calculated)
     * @param intersectionPointB - The first intersection at which a line segment intersects the bounding box from the end to the beginning. (If not set, the intersection point will not calculated)
     * @param normalRadians - The normal radians of the tangent of the intersection boundary box. [x: Normal radian of the first intersection tangent, y: Normal radian of the second intersection tangent] (If not set, the normal will not calculated)
     * @returns Intersection situation. [1: Disjoint and segments within the bounding box, 0: Disjoint, 1: Intersecting and having a nodal point and ending in the bounding box, 2: Intersecting and having a nodal point and starting at the bounding box, 3: Intersecting and having two intersections, N: Intersecting and having N intersections]
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 检查特定线段是否与插槽的自定义边界框相交。
     * 线段和交点的坐标系均为骨架内坐标系。
     * 自定义边界框需要在 DragonBones Pro 中自定义。
     * @param xA - 线段起点的水平坐标。
     * @param yA - 线段起点的垂直坐标。
     * @param xB - 线段终点的水平坐标。
     * @param yB - 线段终点的垂直坐标。
     * @param intersectionPointA - 线段从起点到终点与边界框相交的第一个交点。 （如果未设置，则不计算交点）
     * @param intersectionPointB - 线段从终点到起点与边界框相交的第一个交点。 （如果未设置，则不计算交点）
     * @param normalRadians - 交点边界框切线的法线弧度。 [x: 第一个交点切线的法线弧度, y: 第二个交点切线的法线弧度] （如果未设置，则不计算法线）
     * @returns 相交的情况。 [-1: 不相交且线段在包围盒内, 0: 不相交, 1: 相交且有一个交点且终点在包围盒内, 2: 相交且有一个交点且起点在包围盒内, 3: 相交且有两个交点, N: 相交且有 N 个交点]
     * @version DragonBones 5.0
     * @language zh_CN
     */


    Slot.prototype.intersectsSegment = function (xA, yA, xB, yB, intersectionPointA, intersectionPointB, normalRadians) {
      if (intersectionPointA === void 0) {
        intersectionPointA = null;
      }

      if (intersectionPointB === void 0) {
        intersectionPointB = null;
      }

      if (normalRadians === void 0) {
        normalRadians = null;
      }

      if (this._boundingBoxData === null) {
        return 0;
      }

      this.updateTransformAndMatrix();

      Slot._helpMatrix.copyFrom(this.globalTransformMatrix);

      Slot._helpMatrix.invert();

      Slot._helpMatrix.transformPoint(xA, yA, Slot._helpPoint);

      xA = Slot._helpPoint.x;
      yA = Slot._helpPoint.y;

      Slot._helpMatrix.transformPoint(xB, yB, Slot._helpPoint);

      xB = Slot._helpPoint.x;
      yB = Slot._helpPoint.y;

      var intersectionCount = this._boundingBoxData.intersectsSegment(xA, yA, xB, yB, intersectionPointA, intersectionPointB, normalRadians);

      if (intersectionCount > 0) {
        if (intersectionCount === 1 || intersectionCount === 2) {
          if (intersectionPointA !== null) {
            this.globalTransformMatrix.transformPoint(intersectionPointA.x, intersectionPointA.y, intersectionPointA);

            if (intersectionPointB !== null) {
              intersectionPointB.x = intersectionPointA.x;
              intersectionPointB.y = intersectionPointA.y;
            }
          } else if (intersectionPointB !== null) {
            this.globalTransformMatrix.transformPoint(intersectionPointB.x, intersectionPointB.y, intersectionPointB);
          }
        } else {
          if (intersectionPointA !== null) {
            this.globalTransformMatrix.transformPoint(intersectionPointA.x, intersectionPointA.y, intersectionPointA);
          }

          if (intersectionPointB !== null) {
            this.globalTransformMatrix.transformPoint(intersectionPointB.x, intersectionPointB.y, intersectionPointB);
          }
        }

        if (normalRadians !== null) {
          this.globalTransformMatrix.transformPoint(Math.cos(normalRadians.x), Math.sin(normalRadians.x), Slot._helpPoint, true);
          normalRadians.x = Math.atan2(Slot._helpPoint.y, Slot._helpPoint.x);
          this.globalTransformMatrix.transformPoint(Math.cos(normalRadians.y), Math.sin(normalRadians.y), Slot._helpPoint, true);
          normalRadians.y = Math.atan2(Slot._helpPoint.y, Slot._helpPoint.x);
        }
      }

      return intersectionCount;
    };
    /**
     * - Forces the slot to update the state of the display object in the next frame.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 强制插槽在下一帧更新显示对象的状态。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Slot.prototype.invalidUpdate = function () {
      this._displayDirty = true;
      this._transformDirty = true;
    };

    Object.defineProperty(Slot.prototype, "visible", {
      /**
       * - The visible of slot's display object.
       * @default true
       * @version DragonBones 5.6
       * @language en_US
       */

      /**
       * - 插槽的显示对象的可见。
       * @default true
       * @version DragonBones 5.6
       * @language zh_CN
       */
      get: function get() {
        return this._visible;
      },
      set: function set(value) {
        if (this._visible === value) {
          return;
        }

        this._visible = value;

        this._updateVisible();
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "displayIndex", {
      /**
       * - The index of the display object displayed in the display list.
       * @example
       * <pre>
       *     let slot = armature.getSlot("weapon");
       *     slot.displayIndex = 3;
       *     slot.displayController = "none";
       * </pre>
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 此时显示的显示对象在显示列表中的索引。
       * @example
       * <pre>
       *     let slot = armature.getSlot("weapon");
       *     slot.displayIndex = 3;
       *     slot.displayController = "none";
       * </pre>
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._displayIndex;
      },
      set: function set(value) {
        if (this._setDisplayIndex(value)) {
          this.update(-1);
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "name", {
      /**
       * - The slot name.
       * @see dragonBones.SlotData#name
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 插槽名称。
       * @see dragonBones.SlotData#name
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._slotData.name;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "displayList", {
      /**
       * - Contains a display list of display objects or child armatures.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 包含显示对象或子骨架的显示列表。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._displayList.concat();
      },
      set: function set(value) {
        var backupDisplayList = this._displayList.concat(); // Copy.


        var disposeDisplayList = new Array();

        if (this._setDisplayList(value)) {
          this.update(-1);
        } // Release replaced displays.


        for (var _i = 0, backupDisplayList_1 = backupDisplayList; _i < backupDisplayList_1.length; _i++) {
          var eachDisplay = backupDisplayList_1[_i];

          if (eachDisplay !== null && eachDisplay !== this._rawDisplay && eachDisplay !== this._meshDisplay && this._displayList.indexOf(eachDisplay) < 0 && disposeDisplayList.indexOf(eachDisplay) < 0) {
            disposeDisplayList.push(eachDisplay);
          }
        }

        for (var _a = 0, disposeDisplayList_2 = disposeDisplayList; _a < disposeDisplayList_2.length; _a++) {
          var eachDisplay = disposeDisplayList_2[_a];

          if (eachDisplay instanceof dragonBones.Armature) {// (eachDisplay as Armature).dispose();
          } else {
            this._disposeDisplay(eachDisplay, true);
          }
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "slotData", {
      /**
       * - The slot data.
       * @see dragonBones.SlotData
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 插槽数据。
       * @see dragonBones.SlotData
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._slotData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "rawDisplayDatas", {
      /**
       * @private
       */
      get: function get() {
        return this._rawDisplayDatas;
      },
      set: function set(value) {
        if (this._rawDisplayDatas === value) {
          return;
        }

        this._displayDirty = true;
        this._rawDisplayDatas = value;

        if (this._rawDisplayDatas !== null) {
          this._displayDatas.length = this._rawDisplayDatas.length;

          for (var i = 0, l = this._displayDatas.length; i < l; ++i) {
            var rawDisplayData = this._rawDisplayDatas[i];

            if (rawDisplayData === null) {
              rawDisplayData = this._getDefaultRawDisplayData(i);
            }

            this._displayDatas[i] = rawDisplayData;
          }
        } else {
          this._displayDatas.length = 0;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "displayData", {
      /**
       * @private
       */
      get: function get() {
        return this._displayData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "boundingBoxData", {
      /**
       * - The custom bounding box data for the slot at current time.
       * @version DragonBones 5.0
       * @language en_US
       */

      /**
       * - 插槽此时的自定义包围盒数据。
       * @version DragonBones 5.0
       * @language zh_CN
       */
      get: function get() {
        return this._boundingBoxData;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "rawDisplay", {
      /**
       * @private
       */
      get: function get() {
        return this._rawDisplay;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "meshDisplay", {
      /**
       * @private
       */
      get: function get() {
        return this._meshDisplay;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "display", {
      /**
       * - The display object that the slot displays at this time.
       * @example
       * <pre>
       *     let slot = armature.getSlot("text");
       *     slot.display = new yourEngine.TextField();
       * </pre>
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 插槽此时显示的显示对象。
       * @example
       * <pre>
       *     let slot = armature.getSlot("text");
       *     slot.display = new yourEngine.TextField();
       * </pre>
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._display;
      },
      set: function set(value) {
        if (this._display === value) {
          return;
        }

        var displayListLength = this._displayList.length;

        if (this._displayIndex < 0 && displayListLength === 0) {
          // Emprty.
          this._displayIndex = 0;
        }

        if (this._displayIndex < 0) {
          return;
        } else {
          var replaceDisplayList = this.displayList; // Copy.

          if (displayListLength <= this._displayIndex) {
            replaceDisplayList.length = this._displayIndex + 1;
          }

          replaceDisplayList[this._displayIndex] = value;
          this.displayList = replaceDisplayList;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "childArmature", {
      /**
       * - The child armature that the slot displayed at current time.
       * @example
       * <pre>
       *     let slot = armature.getSlot("weapon");
       * let prevChildArmature = slot.childArmature;
       * if (prevChildArmature) {
       * prevChildArmature.dispose();
       *     }
       *     slot.childArmature = factory.buildArmature("weapon_blabla", "weapon_blabla_project");
       * </pre>
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 插槽此时显示的子骨架。
       * 注意，被替换的对象或子骨架并不会被回收，根据语言和引擎的不同，需要额外处理。
       * @example
       * <pre>
       *     let slot = armature.getSlot("weapon");
       * let prevChildArmature = slot.childArmature;
       * if (prevChildArmature) {
       * prevChildArmature.dispose();
       *     }
       *     slot.childArmature = factory.buildArmature("weapon_blabla", "weapon_blabla_project");
       * </pre>
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._childArmature;
      },
      set: function set(value) {
        if (this._childArmature === value) {
          return;
        }

        this.display = value;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Slot.prototype, "parent", {
      /**
       * - The parent bone to which it belongs.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 所属的父骨骼。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._parent;
      },
      enumerable: true,
      configurable: true
    });
    /**
     * - Deprecated, please refer to {@link #display}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #display}。
     * @deprecated
     * @language zh_CN
     */

    Slot.prototype.getDisplay = function () {
      return this._display;
    };
    /**
     * - Deprecated, please refer to {@link #display}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #display}。
     * @deprecated
     * @language zh_CN
     */


    Slot.prototype.setDisplay = function (value) {
      this.display = value;
    };

    return Slot;
  }(dragonBones.TransformObject);

  dragonBones.Slot = Slot;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var Constraint =
  /** @class */
  function (_super) {
    __extends(Constraint, _super);

    function Constraint() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    Constraint.prototype._onClear = function () {
      this._armature = null; //

      this._target = null; //

      this._root = null; //

      this._bone = null;
    };

    Object.defineProperty(Constraint.prototype, "name", {
      get: function get() {
        return this._constraintData.name;
      },
      enumerable: true,
      configurable: true
    });
    Constraint._helpMatrix = new dragonBones.Matrix();
    Constraint._helpTransform = new dragonBones.Transform();
    Constraint._helpPoint = new dragonBones.Point();
    return Constraint;
  }(dragonBones.BaseObject);

  dragonBones.Constraint = Constraint;
  /**
   * @internal
   */

  var IKConstraint =
  /** @class */
  function (_super) {
    __extends(IKConstraint, _super);

    function IKConstraint() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    IKConstraint.toString = function () {
      return "[class dragonBones.IKConstraint]";
    };

    IKConstraint.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this._scaleEnabled = false;
      this._bendPositive = false;
      this._weight = 1.0;
      this._constraintData = null;
    };

    IKConstraint.prototype._computeA = function () {
      var ikGlobal = this._target.global;
      var global = this._root.global;
      var globalTransformMatrix = this._root.globalTransformMatrix;
      var radian = Math.atan2(ikGlobal.y - global.y, ikGlobal.x - global.x);

      if (global.scaleX < 0.0) {
        radian += Math.PI;
      }

      global.rotation += dragonBones.Transform.normalizeRadian(radian - global.rotation) * this._weight;
      global.toMatrix(globalTransformMatrix);
    };

    IKConstraint.prototype._computeB = function () {
      var boneLength = this._bone._boneData.length;
      var parent = this._root;
      var ikGlobal = this._target.global;
      var parentGlobal = parent.global;
      var global = this._bone.global;
      var globalTransformMatrix = this._bone.globalTransformMatrix;
      var x = globalTransformMatrix.a * boneLength;
      var y = globalTransformMatrix.b * boneLength;
      var lLL = x * x + y * y;
      var lL = Math.sqrt(lLL);
      var dX = global.x - parentGlobal.x;
      var dY = global.y - parentGlobal.y;
      var lPP = dX * dX + dY * dY;
      var lP = Math.sqrt(lPP);
      var rawRadian = global.rotation;
      var rawParentRadian = parentGlobal.rotation;
      var rawRadianA = Math.atan2(dY, dX);
      dX = ikGlobal.x - parentGlobal.x;
      dY = ikGlobal.y - parentGlobal.y;
      var lTT = dX * dX + dY * dY;
      var lT = Math.sqrt(lTT);
      var radianA = 0.0;

      if (lL + lP <= lT || lT + lL <= lP || lT + lP <= lL) {
        radianA = Math.atan2(ikGlobal.y - parentGlobal.y, ikGlobal.x - parentGlobal.x);

        if (lL + lP <= lT) {} else if (lP < lL) {
          radianA += Math.PI;
        }
      } else {
        var h = (lPP - lLL + lTT) / (2.0 * lTT);
        var r = Math.sqrt(lPP - h * h * lTT) / lT;
        var hX = parentGlobal.x + dX * h;
        var hY = parentGlobal.y + dY * h;
        var rX = -dY * r;
        var rY = dX * r;
        var isPPR = false;
        var parentParent = parent.parent;

        if (parentParent !== null) {
          var parentParentMatrix = parentParent.globalTransformMatrix;
          isPPR = parentParentMatrix.a * parentParentMatrix.d - parentParentMatrix.b * parentParentMatrix.c < 0.0;
        }

        if (isPPR !== this._bendPositive) {
          global.x = hX - rX;
          global.y = hY - rY;
        } else {
          global.x = hX + rX;
          global.y = hY + rY;
        }

        radianA = Math.atan2(global.y - parentGlobal.y, global.x - parentGlobal.x);
      }

      var dR = dragonBones.Transform.normalizeRadian(radianA - rawRadianA);
      parentGlobal.rotation = rawParentRadian + dR * this._weight;
      parentGlobal.toMatrix(parent.globalTransformMatrix); //

      var currentRadianA = rawRadianA + dR * this._weight;
      global.x = parentGlobal.x + Math.cos(currentRadianA) * lP;
      global.y = parentGlobal.y + Math.sin(currentRadianA) * lP; //

      var radianB = Math.atan2(ikGlobal.y - global.y, ikGlobal.x - global.x);

      if (global.scaleX < 0.0) {
        radianB += Math.PI;
      }

      global.rotation = parentGlobal.rotation + rawRadian - rawParentRadian + dragonBones.Transform.normalizeRadian(radianB - dR - rawRadian) * this._weight;
      global.toMatrix(globalTransformMatrix);
    };

    IKConstraint.prototype.init = function (constraintData, armature) {
      if (this._constraintData !== null) {
        return;
      }

      this._constraintData = constraintData;
      this._armature = armature;
      this._target = this._armature.getBone(this._constraintData.target.name);
      this._root = this._armature.getBone(this._constraintData.root.name);
      this._bone = this._constraintData.bone !== null ? this._armature.getBone(this._constraintData.bone.name) : null;
      {
        var ikConstraintData = this._constraintData;
        this._scaleEnabled = ikConstraintData.scaleEnabled;
        this._bendPositive = ikConstraintData.bendPositive;
        this._weight = ikConstraintData.weight;
      }
      this._root._hasConstraint = true;
    };

    IKConstraint.prototype.update = function () {
      this._root.updateByConstraint();

      if (this._bone !== null) {
        this._bone.updateByConstraint();

        this._computeB();
      } else {
        this._computeA();
      }
    };

    IKConstraint.prototype.invalidUpdate = function () {
      this._root.invalidUpdate();

      if (this._bone !== null) {
        this._bone.invalidUpdate();
      }
    };

    return IKConstraint;
  }(Constraint);

  dragonBones.IKConstraint = IKConstraint;
  /**
   * @internal
   */

  var PathConstraint =
  /** @class */
  function (_super) {
    __extends(PathConstraint, _super);

    function PathConstraint() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._bones = [];
      _this._spaces = [];
      _this._positions = [];
      _this._curves = [];
      _this._boneLengths = [];
      _this._pathGlobalVertices = [];
      _this._segments = [10];
      return _this;
    }

    PathConstraint.toString = function () {
      return "[class dragonBones.PathConstraint]";
    };

    PathConstraint.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.dirty = false;
      this.pathOffset = 0;
      this.position = 0.0;
      this.spacing = 0.0;
      this.rotateOffset = 0.0;
      this.rotateMix = 1.0;
      this.translateMix = 1.0;
      this._pathSlot = null;
      this._bones.length = 0;
      this._spaces.length = 0;
      this._positions.length = 0;
      this._curves.length = 0;
      this._boneLengths.length = 0;
      this._pathGlobalVertices.length = 0;
    };

    PathConstraint.prototype._updatePathVertices = function (verticesData) {
      //计算曲线的节点数据
      var armature = this._armature;
      var dragonBonesData = armature.armatureData.parent;
      var scale = armature.armatureData.scale;
      var intArray = dragonBonesData.intArray;
      var floatArray = dragonBonesData.floatArray;
      var pathOffset = verticesData.offset;
      var pathVertexCount = intArray[pathOffset + 0
      /* PathVertexCount */
      ];
      var pathVertexOffset = intArray[pathOffset + 2
      /* PathFloatOffset */
      ];
      this._pathGlobalVertices.length = pathVertexCount * 2;
      var weightData = verticesData.weight; //没有骨骼约束我,那节点只受自己的Bone控制

      if (weightData === null) {
        var parentBone = this._pathSlot.parent;
        parentBone.updateByConstraint();
        var matrix = parentBone.globalTransformMatrix;

        for (var i = 0, iV_1 = pathVertexOffset; i < pathVertexCount; i += 2) {
          var vx = floatArray[iV_1++] * scale;
          var vy = floatArray[iV_1++] * scale;
          var x = matrix.a * vx + matrix.c * vy + matrix.tx;
          var y = matrix.b * vx + matrix.d * vy + matrix.ty; //

          this._pathGlobalVertices[i] = x;
          this._pathGlobalVertices[i + 1] = y;
        }

        return;
      } //有骨骼约束我,那我的节点受骨骼权重控制


      var bones = this._pathSlot._deformVertices.bones;
      var weightBoneCount = weightData.bones.length;
      var weightOffset = weightData.offset;
      var floatOffset = intArray[weightOffset + 1
      /* WeigthFloatOffset */
      ];
      var iV = floatOffset;
      var iB = weightOffset + 2
      /* WeigthBoneIndices */
      + weightBoneCount;

      for (var i = 0, iW = 0; i < pathVertexCount; i++) {
        var vertexBoneCount = intArray[iB++]; //

        var xG = 0.0,
            yG = 0.0;

        for (var ii = 0, ll = vertexBoneCount; ii < ll; ii++) {
          var boneIndex = intArray[iB++];
          var bone = bones[boneIndex];

          if (bone === null) {
            continue;
          }

          bone.updateByConstraint();
          var matrix = bone.globalTransformMatrix;
          var weight = floatArray[iV++];
          var vx = floatArray[iV++] * scale;
          var vy = floatArray[iV++] * scale;
          xG += (matrix.a * vx + matrix.c * vy + matrix.tx) * weight;
          yG += (matrix.b * vx + matrix.d * vy + matrix.ty) * weight;
        }

        this._pathGlobalVertices[iW++] = xG;
        this._pathGlobalVertices[iW++] = yG;
      }
    };

    PathConstraint.prototype._computeVertices = function (start, count, offset, out) {
      //TODO优化
      for (var i = offset, iW = start; i < count; i += 2) {
        out[i] = this._pathGlobalVertices[iW++];
        out[i + 1] = this._pathGlobalVertices[iW++];
      }
    };

    PathConstraint.prototype._computeBezierCurve = function (pathDisplayDta, spaceCount, tangents, percentPosition, percentSpacing) {
      //计算当前的骨骼在曲线上的位置
      var armature = this._armature;
      var intArray = armature.armatureData.parent.intArray;
      var vertexCount = intArray[pathDisplayDta.vertices.offset + 0
      /* PathVertexCount */
      ];
      var positions = this._positions;
      var spaces = this._spaces;
      var isClosed = pathDisplayDta.closed;
      var curveVertices = Array();
      var verticesLength = vertexCount * 2;
      var curveCount = verticesLength / 6;
      var preCurve = -1;
      var position = this.position;
      positions.length = spaceCount * 3 + 2;
      var pathLength = 0.0; //不需要匀速运动，效率高些

      if (!pathDisplayDta.constantSpeed) {
        var lenghts = pathDisplayDta.curveLengths;
        curveCount -= isClosed ? 1 : 2;
        pathLength = lenghts[curveCount];

        if (percentPosition) {
          position *= pathLength;
        }

        if (percentSpacing) {
          for (var i = 0; i < spaceCount; i++) {
            spaces[i] *= pathLength;
          }
        }

        curveVertices.length = 8;

        for (var i = 0, o = 0, curve = 0; i < spaceCount; i++, o += 3) {
          var space = spaces[i];
          position += space;

          if (isClosed) {
            position %= pathLength;

            if (position < 0) {
              position += pathLength;
            }

            curve = 0;
          } else if (position < 0) {
            //TODO
            continue;
          } else if (position > pathLength) {
            //TODO
            continue;
          }

          var percent = 0.0;

          for (;; curve++) {
            var len = lenghts[curve];

            if (position > len) {
              continue;
            }

            if (curve === 0) {
              percent = position / len;
            } else {
              var preLen = lenghts[curve - 1];
              percent = (position - preLen) / (len - preLen);
            }

            break;
          }

          if (curve !== preCurve) {
            preCurve = curve;

            if (isClosed && curve === curveCount) {
              //计算曲线
              this._computeVertices(verticesLength - 4, 4, 0, curveVertices);

              this._computeVertices(0, 4, 4, curveVertices);
            } else {
              this._computeVertices(curve * 6 + 2, 8, 0, curveVertices);
            }
          } //


          this.addCurvePosition(percent, curveVertices[0], curveVertices[1], curveVertices[2], curveVertices[3], curveVertices[4], curveVertices[5], curveVertices[6], curveVertices[7], positions, o, tangents);
        }

        return;
      } //匀速的


      if (isClosed) {
        verticesLength += 2;
        curveVertices.length = vertexCount;

        this._computeVertices(2, verticesLength - 4, 0, curveVertices);

        this._computeVertices(0, 2, verticesLength - 4, curveVertices);

        curveVertices[verticesLength - 2] = curveVertices[0];
        curveVertices[verticesLength - 1] = curveVertices[1];
      } else {
        curveCount--;
        verticesLength -= 4;
        curveVertices.length = verticesLength;

        this._computeVertices(2, verticesLength, 0, curveVertices);
      } //


      var curves = new Array(curveCount);
      pathLength = 0;
      var x1 = curveVertices[0],
          y1 = curveVertices[1],
          cx1 = 0,
          cy1 = 0,
          cx2 = 0,
          cy2 = 0,
          x2 = 0,
          y2 = 0;
      var tmpx, tmpy, dddfx, dddfy, ddfx, ddfy, dfx, dfy;

      for (var i = 0, w = 2; i < curveCount; i++, w += 6) {
        cx1 = curveVertices[w];
        cy1 = curveVertices[w + 1];
        cx2 = curveVertices[w + 2];
        cy2 = curveVertices[w + 3];
        x2 = curveVertices[w + 4];
        y2 = curveVertices[w + 5];
        tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
        tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
        dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
        dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
        ddfx = tmpx * 2 + dddfx;
        ddfy = tmpy * 2 + dddfy;
        dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
        dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        dfx += ddfx;
        dfy += ddfy;
        ddfx += dddfx;
        ddfy += dddfy;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        dfx += ddfx;
        dfy += ddfy;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        dfx += ddfx + dddfx;
        dfy += ddfy + dddfy;
        pathLength += Math.sqrt(dfx * dfx + dfy * dfy);
        curves[i] = pathLength;
        x1 = x2;
        y1 = y2;
      }

      if (percentPosition) {
        position *= pathLength;
      }

      if (percentSpacing) {
        for (var i = 0; i < spaceCount; i++) {
          spaces[i] *= pathLength;
        }
      }

      var segments = this._segments;
      var curveLength = 0;

      for (var i = 0, o = 0, curve = 0, segment = 0; i < spaceCount; i++, o += 3) {
        var space = spaces[i];
        position += space;
        var p = position;

        if (isClosed) {
          p %= pathLength;
          if (p < 0) p += pathLength;
          curve = 0;
        } else if (p < 0) {
          continue;
        } else if (p > pathLength) {
          continue;
        } // Determine curve containing position.


        for (;; curve++) {
          var length_1 = curves[curve];
          if (p > length_1) continue;
          if (curve === 0) p /= length_1;else {
            var prev = curves[curve - 1];
            p = (p - prev) / (length_1 - prev);
          }
          break;
        }

        if (curve !== preCurve) {
          preCurve = curve;
          var ii = curve * 6;
          x1 = curveVertices[ii];
          y1 = curveVertices[ii + 1];
          cx1 = curveVertices[ii + 2];
          cy1 = curveVertices[ii + 3];
          cx2 = curveVertices[ii + 4];
          cy2 = curveVertices[ii + 5];
          x2 = curveVertices[ii + 6];
          y2 = curveVertices[ii + 7];
          tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
          tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
          dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
          dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
          ddfx = tmpx * 2 + dddfx;
          ddfy = tmpy * 2 + dddfy;
          dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
          dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
          curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
          segments[0] = curveLength;

          for (ii = 1; ii < 8; ii++) {
            dfx += ddfx;
            dfy += ddfy;
            ddfx += dddfx;
            ddfy += dddfy;
            curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
            segments[ii] = curveLength;
          }

          dfx += ddfx;
          dfy += ddfy;
          curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
          segments[8] = curveLength;
          dfx += ddfx + dddfx;
          dfy += ddfy + dddfy;
          curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
          segments[9] = curveLength;
          segment = 0;
        } // Weight by segment length.


        p *= curveLength;

        for (;; segment++) {
          var length_2 = segments[segment];
          if (p > length_2) continue;
          if (segment === 0) p /= length_2;else {
            var prev = segments[segment - 1];
            p = segment + (p - prev) / (length_2 - prev);
          }
          break;
        }

        this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, positions, o, tangents);
      }
    }; //Calculates a point on the curve, for a given t value between 0 and 1.


    PathConstraint.prototype.addCurvePosition = function (t, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, offset, tangents) {
      if (t === 0) {
        out[offset] = x1;
        out[offset + 1] = y1;
        out[offset + 2] = 0;
        return;
      }

      if (t === 1) {
        out[offset] = x2;
        out[offset + 1] = y2;
        out[offset + 2] = 0;
        return;
      }

      var mt = 1 - t;
      var mt2 = mt * mt;
      var t2 = t * t;
      var a = mt2 * mt;
      var b = mt2 * t * 3;
      var c = mt * t2 * 3;
      var d = t * t2;
      var x = a * x1 + b * cx1 + c * cx2 + d * x2;
      var y = a * y1 + b * cy1 + c * cy2 + d * y2;
      out[offset] = x;
      out[offset + 1] = y;

      if (tangents) {
        //Calculates the curve tangent at the specified t value
        out[offset + 2] = Math.atan2(y - (a * y1 + b * cy1 + c * cy2), x - (a * x1 + b * cx1 + c * cx2));
      } else {
        out[offset + 2] = 0;
      }
    };

    PathConstraint.prototype.init = function (constraintData, armature) {
      this._constraintData = constraintData;
      this._armature = armature;
      var data = constraintData;
      this.pathOffset = data.pathDisplayData.vertices.offset; //

      this.position = data.position;
      this.spacing = data.spacing;
      this.rotateOffset = data.rotateOffset;
      this.rotateMix = data.rotateMix;
      this.translateMix = data.translateMix; //

      this._root = this._armature.getBone(data.root.name);
      this._target = this._armature.getBone(data.target.name);
      this._pathSlot = this._armature.getSlot(data.pathSlot.name);

      for (var i = 0, l = data.bones.length; i < l; i++) {
        var bone = this._armature.getBone(data.bones[i].name);

        if (bone !== null) {
          this._bones.push(bone);
        }
      }

      if (data.rotateMode === 2
      /* ChainScale */
      ) {
          this._boneLengths.length = this._bones.length;
        }

      this._root._hasConstraint = true;
    };

    PathConstraint.prototype.update = function () {
      var pathSlot = this._pathSlot;

      if (pathSlot._deformVertices === null || pathSlot._deformVertices.verticesData === null || pathSlot._deformVertices.verticesData.offset !== this.pathOffset) {
        return;
      }

      var constraintData = this._constraintData;
      var pathDisplayData = pathSlot._displayData; // TODO
      //
      //曲线节点数据改变:父亲bone改变，权重bones改变，变形顶点改变

      var isPathVerticeDirty = false;
      var deformVertices = pathSlot._deformVertices;

      if (this._root._childrenTransformDirty) {
        this._updatePathVertices(pathDisplayData.vertices);

        isPathVerticeDirty = true;
      } else if (deformVertices !== null && (deformVertices.verticesDirty || deformVertices.isBonesUpdate())) {
        this._updatePathVertices(pathDisplayData.vertices);

        deformVertices.verticesDirty = false;
        isPathVerticeDirty = true;
      }

      if (!isPathVerticeDirty && !this.dirty) {
        return;
      } //


      var positionMode = constraintData.positionMode;
      var spacingMode = constraintData.spacingMode;
      var rotateMode = constraintData.rotateMode;
      var bones = this._bones;
      var isLengthMode = spacingMode === 0
      /* Length */
      ;
      var isChainScaleMode = rotateMode === 2
      /* ChainScale */
      ;
      var isTangentMode = rotateMode === 0
      /* Tangent */
      ;
      var boneCount = bones.length;
      var spacesCount = isTangentMode ? boneCount : boneCount + 1;
      var spacing = this.spacing;
      var spaces = this._spaces;
      spaces.length = spacesCount; //计曲线间隔和长度

      if (isChainScaleMode || isLengthMode) {
        //Bone改变和spacing改变触发
        spaces[0] = 0;

        for (var i = 0, l = spacesCount - 1; i < l; i++) {
          var bone = bones[i];
          bone.updateByConstraint();
          var boneLength = bone._boneData.length;
          var matrix = bone.globalTransformMatrix;
          var x = boneLength * matrix.a;
          var y = boneLength * matrix.b;
          var len = Math.sqrt(x * x + y * y);

          if (isChainScaleMode) {
            this._boneLengths[i] = len;
          }

          spaces[i + 1] = (boneLength + spacing) * len / boneLength;
        }
      } else {
        for (var i = 0; i < spacesCount; i++) {
          spaces[i] = spacing;
        }
      } //


      this._computeBezierCurve(pathDisplayData, spacesCount, isTangentMode, positionMode === 1
      /* Percent */
      , spacingMode === 2
      /* Percent */
      ); //根据新的节点数据重新采样


      var positions = this._positions;
      var rotateOffset = this.rotateOffset;
      var boneX = positions[0],
          boneY = positions[1];
      var tip;

      if (rotateOffset === 0) {
        tip = rotateMode === 1
        /* Chain */
        ;
      } else {
        tip = false;
        var bone = pathSlot.parent;

        if (bone !== null) {
          var matrix = bone.globalTransformMatrix;
          rotateOffset *= matrix.a * matrix.d - matrix.b * matrix.c > 0 ? dragonBones.Transform.DEG_RAD : -dragonBones.Transform.DEG_RAD;
        }
      } //


      var rotateMix = this.rotateMix;
      var translateMix = this.translateMix;

      for (var i = 0, p = 3; i < boneCount; i++, p += 3) {
        var bone = bones[i];
        bone.updateByConstraint();
        var matrix = bone.globalTransformMatrix;
        matrix.tx += (boneX - matrix.tx) * translateMix;
        matrix.ty += (boneY - matrix.ty) * translateMix;
        var x = positions[p],
            y = positions[p + 1];
        var dx = x - boneX,
            dy = y - boneY;

        if (isChainScaleMode) {
          var lenght = this._boneLengths[i];
          var s = (Math.sqrt(dx * dx + dy * dy) / lenght - 1) * rotateMix + 1;
          matrix.a *= s;
          matrix.b *= s;
        }

        boneX = x;
        boneY = y;

        if (rotateMix > 0) {
          var a = matrix.a,
              b = matrix.b,
              c = matrix.c,
              d = matrix.d,
              r = void 0,
              cos = void 0,
              sin = void 0;

          if (isTangentMode) {
            r = positions[p - 1];
          } else {
            r = Math.atan2(dy, dx);
          }

          r -= Math.atan2(b, a);

          if (tip) {
            cos = Math.cos(r);
            sin = Math.sin(r);
            var length_3 = bone._boneData.length;
            boneX += (length_3 * (cos * a - sin * b) - dx) * rotateMix;
            boneY += (length_3 * (sin * a + cos * b) - dy) * rotateMix;
          } else {
            r += rotateOffset;
          }

          if (r > dragonBones.Transform.PI) {
            r -= dragonBones.Transform.PI_D;
          } else if (r < -dragonBones.Transform.PI) {
            r += dragonBones.Transform.PI_D;
          }

          r *= rotateMix;
          cos = Math.cos(r);
          sin = Math.sin(r);
          matrix.a = cos * a - sin * b;
          matrix.b = sin * a + cos * b;
          matrix.c = cos * c - sin * d;
          matrix.d = sin * c + cos * d;
        }

        bone.global.fromMatrix(matrix);
      }

      this.dirty = false;
    };

    PathConstraint.prototype.invalidUpdate = function () {};

    return PathConstraint;
  }(Constraint);

  dragonBones.PathConstraint = PathConstraint;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - Worldclock provides clock support for animations, advance time for each IAnimatable object added to the instance.
   * @see dragonBones.IAnimateble
   * @see dragonBones.Armature
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - WorldClock 对动画提供时钟支持，为每个加入到该实例的 IAnimatable 对象更新时间。
   * @see dragonBones.IAnimateble
   * @see dragonBones.Armature
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var WorldClock =
  /** @class */
  function () {
    /**
     * - Creating a Worldclock instance. Typically, you do not need to create Worldclock instance.
     * When multiple Worldclock instances are running at different speeds, can achieving some specific animation effects, such as bullet time.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 创建一个 WorldClock 实例。通常并不需要创建 WorldClock 实例。
     * 当多个 WorldClock 实例使用不同的速度运行时，可以实现一些特殊的动画效果，比如子弹时间等。
     * @version DragonBones 3.0
     * @language zh_CN
     */
    function WorldClock(time) {
      if (time === void 0) {
        time = 0.0;
      }
      /**
       * - Current time. (In seconds)
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 当前的时间。 (以秒为单位)
       * @version DragonBones 3.0
       * @language zh_CN
       */


      this.time = 0.0;
      /**
       * - The play speed, used to control animation speed-shift play.
       * [0: Stop play, (0~1): Slow play, 1: Normal play, (1~N): Fast play]
       * @default 1.0
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 播放速度，用于控制动画变速播放。
       * [0: 停止播放, (0~1): 慢速播放, 1: 正常播放, (1~N): 快速播放]
       * @default 1.0
       * @version DragonBones 3.0
       * @language zh_CN
       */

      this.timeScale = 1.0;
      this._systemTime = 0.0;
      this._animatebles = [];
      this._clock = null;
      this.time = time;
      this._systemTime = new Date().getTime() * 0.001;
    }
    /**
     * - Advance time for all IAnimatable instances.
     * @param passedTime - Passed time. [-1: Automatically calculates the time difference between the current frame and the previous frame, [0~N): Passed time] (In seconds)
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 为所有的 IAnimatable 实例更新时间。
     * @param passedTime - 前进的时间。 [-1: 自动计算当前帧与上一帧的时间差, [0~N): 前进的时间] (以秒为单位)
     * @version DragonBones 3.0
     * @language zh_CN
     */


    WorldClock.prototype.advanceTime = function (passedTime) {
      if (passedTime !== passedTime) {
        passedTime = 0.0;
      }

      var currentTime = Date.now() * 0.001;

      if (passedTime < 0.0) {
        passedTime = currentTime - this._systemTime;
      }

      this._systemTime = currentTime;

      if (this.timeScale !== 1.0) {
        passedTime *= this.timeScale;
      }

      if (passedTime === 0.0) {
        return;
      }

      if (passedTime < 0.0) {
        this.time -= passedTime;
      } else {
        this.time += passedTime;
      }

      var i = 0,
          r = 0,
          l = this._animatebles.length;

      for (; i < l; ++i) {
        var animatable = this._animatebles[i];

        if (animatable !== null) {
          if (r > 0) {
            this._animatebles[i - r] = animatable;
            this._animatebles[i] = null;
          }

          animatable.advanceTime(passedTime);
        } else {
          r++;
        }
      }

      if (r > 0) {
        l = this._animatebles.length;

        for (; i < l; ++i) {
          var animateble = this._animatebles[i];

          if (animateble !== null) {
            this._animatebles[i - r] = animateble;
          } else {
            r++;
          }
        }

        this._animatebles.length -= r;
      }
    };
    /**
     * - Check whether contains a specific instance of IAnimatable.
     * @param value - The IAnimatable instance.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 检查是否包含特定的 IAnimatable 实例。
     * @param value - IAnimatable 实例。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    WorldClock.prototype.contains = function (value) {
      if (value === this) {
        return false;
      }

      var ancestor = value;

      while (ancestor !== this && ancestor !== null) {
        ancestor = ancestor.clock;
      }

      return ancestor === this;
    };
    /**
     * - Add IAnimatable instance.
     * @param value - The IAnimatable instance.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 添加 IAnimatable 实例。
     * @param value - IAnimatable 实例。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    WorldClock.prototype.add = function (value) {
      if (this._animatebles.indexOf(value) < 0) {
        this._animatebles.push(value);

        value.clock = this;
      }
    };
    /**
     * - Removes a specified IAnimatable instance.
     * @param value - The IAnimatable instance.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 移除特定的 IAnimatable 实例。
     * @param value - IAnimatable 实例。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    WorldClock.prototype.remove = function (value) {
      var index = this._animatebles.indexOf(value);

      if (index >= 0) {
        this._animatebles[index] = null;
        value.clock = null;
      }
    };
    /**
     * - Clear all IAnimatable instances.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 清除所有的 IAnimatable 实例。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    WorldClock.prototype.clear = function () {
      for (var _i = 0, _a = this._animatebles; _i < _a.length; _i++) {
        var animatable = _a[_i];

        if (animatable !== null) {
          animatable.clock = null;
        }
      }
    };

    Object.defineProperty(WorldClock.prototype, "clock", {
      /**
       * @inheritDoc
       */
      get: function get() {
        return this._clock;
      },
      set: function set(value) {
        if (this._clock === value) {
          return;
        }

        if (this._clock !== null) {
          this._clock.remove(this);
        }

        this._clock = value;

        if (this._clock !== null) {
          this._clock.add(this);
        }
      },
      enumerable: true,
      configurable: true
    });
    /**
     * - Deprecated, please refer to {@link dragonBones.BaseFactory#clock}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link dragonBones.BaseFactory#clock}。
     * @deprecated
     * @language zh_CN
     */

    WorldClock.clock = new WorldClock();
    return WorldClock;
  }();

  dragonBones.WorldClock = WorldClock;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The animation player is used to play the animation data and manage the animation states.
   * @see dragonBones.AnimationData
   * @see dragonBones.AnimationState
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 动画播放器用来播放动画数据和管理动画状态。
   * @see dragonBones.AnimationData
   * @see dragonBones.AnimationState
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var Animation =
  /** @class */
  function (_super) {
    __extends(Animation, _super);

    function Animation() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._animationNames = [];
      _this._animationStates = [];
      _this._animations = {};
      _this._animationConfig = null; // Initial value.

      return _this;
    }

    Animation.toString = function () {
      return "[class dragonBones.Animation]";
    };

    Animation.prototype._onClear = function () {
      for (var _i = 0, _a = this._animationStates; _i < _a.length; _i++) {
        var animationState = _a[_i];
        animationState.returnToPool();
      }

      for (var k in this._animations) {
        delete this._animations[k];
      }

      if (this._animationConfig !== null) {
        this._animationConfig.returnToPool();
      }

      this.timeScale = 1.0;
      this._lockUpdate = false;
      this._animationDirty = false;
      this._inheritTimeScale = 1.0;
      this._animationNames.length = 0;
      this._animationStates.length = 0; //this._animations.clear();

      this._armature = null; //

      this._animationConfig = null; //

      this._lastAnimationState = null;
    };

    Animation.prototype._fadeOut = function (animationConfig) {
      switch (animationConfig.fadeOutMode) {
        case 1
        /* SameLayer */
        :
          for (var _i = 0, _a = this._animationStates; _i < _a.length; _i++) {
            var animationState = _a[_i];

            if (animationState._parent !== null) {
              continue;
            }

            if (animationState.layer === animationConfig.layer) {
              animationState.fadeOut(animationConfig.fadeOutTime, animationConfig.pauseFadeOut);
            }
          }

          break;

        case 2
        /* SameGroup */
        :
          for (var _b = 0, _c = this._animationStates; _b < _c.length; _b++) {
            var animationState = _c[_b];

            if (animationState._parent !== null) {
              continue;
            }

            if (animationState.group === animationConfig.group) {
              animationState.fadeOut(animationConfig.fadeOutTime, animationConfig.pauseFadeOut);
            }
          }

          break;

        case 3
        /* SameLayerAndGroup */
        :
          for (var _d = 0, _e = this._animationStates; _d < _e.length; _d++) {
            var animationState = _e[_d];

            if (animationState._parent !== null) {
              continue;
            }

            if (animationState.layer === animationConfig.layer && animationState.group === animationConfig.group) {
              animationState.fadeOut(animationConfig.fadeOutTime, animationConfig.pauseFadeOut);
            }
          }

          break;

        case 4
        /* All */
        :
          for (var _f = 0, _g = this._animationStates; _f < _g.length; _f++) {
            var animationState = _g[_f];

            if (animationState._parent !== null) {
              continue;
            }

            animationState.fadeOut(animationConfig.fadeOutTime, animationConfig.pauseFadeOut);
          }

          break;

        case 0
        /* None */
        :
        case 5
        /* Single */
        :
        default:
          break;
      }
    };
    /**
     * @internal
     */


    Animation.prototype.init = function (armature) {
      if (this._armature !== null) {
        return;
      }

      this._armature = armature;
      this._animationConfig = dragonBones.BaseObject.borrowObject(dragonBones.AnimationConfig);
    };
    /**
     * @internal
     */


    Animation.prototype.advanceTime = function (passedTime) {
      if (passedTime < 0.0) {
        // Only animationState can reverse play.
        passedTime = -passedTime;
      }

      if (this._armature.inheritAnimation && this._armature._parent !== null) {
        // Inherit parent animation timeScale.
        this._inheritTimeScale = this._armature._parent._armature.animation._inheritTimeScale * this.timeScale;
      } else {
        this._inheritTimeScale = this.timeScale;
      }

      if (this._inheritTimeScale !== 1.0) {
        passedTime *= this._inheritTimeScale;
      }

      var animationStateCount = this._animationStates.length;

      if (animationStateCount === 1) {
        var animationState = this._animationStates[0];

        if (animationState._fadeState > 0 && animationState._subFadeState > 0) {
          this._armature._dragonBones.bufferObject(animationState);

          this._animationStates.length = 0;
          this._lastAnimationState = null;
        } else {
          var animationData = animationState._animationData;
          var cacheFrameRate = animationData.cacheFrameRate;

          if (this._animationDirty && cacheFrameRate > 0.0) {
            // Update cachedFrameIndices.
            this._animationDirty = false;

            for (var _i = 0, _a = this._armature.getBones(); _i < _a.length; _i++) {
              var bone = _a[_i];
              bone._cachedFrameIndices = animationData.getBoneCachedFrameIndices(bone.name);
            }

            for (var _b = 0, _c = this._armature.getSlots(); _b < _c.length; _b++) {
              var slot = _c[_b];
              var rawDisplayDatas = slot.rawDisplayDatas;

              if (rawDisplayDatas !== null && rawDisplayDatas.length > 0) {
                var rawDsplayData = rawDisplayDatas[0];

                if (rawDsplayData !== null) {
                  if (rawDsplayData.parent === this._armature.armatureData.defaultSkin) {
                    slot._cachedFrameIndices = animationData.getSlotCachedFrameIndices(slot.name);
                    continue;
                  }
                }
              }

              slot._cachedFrameIndices = null;
            }
          }

          animationState.advanceTime(passedTime, cacheFrameRate);
        }
      } else if (animationStateCount > 1) {
        for (var i = 0, r = 0; i < animationStateCount; ++i) {
          var animationState = this._animationStates[i];

          if (animationState._fadeState > 0 && animationState._subFadeState > 0) {
            r++;

            this._armature._dragonBones.bufferObject(animationState);

            this._animationDirty = true;

            if (this._lastAnimationState === animationState) {
              // Update last animation state.
              this._lastAnimationState = null;
            }
          } else {
            if (r > 0) {
              this._animationStates[i - r] = animationState;
            }

            animationState.advanceTime(passedTime, 0.0);
          }

          if (i === animationStateCount - 1 && r > 0) {
            // Modify animation states size.
            this._animationStates.length -= r;

            if (this._lastAnimationState === null && this._animationStates.length > 0) {
              this._lastAnimationState = this._animationStates[this._animationStates.length - 1];
            }
          }
        }

        this._armature._cacheFrameIndex = -1;
      } else {
        this._armature._cacheFrameIndex = -1;
      }
    };
    /**
     * - Clear all animations states.
     * @see dragonBones.AnimationState
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 清除所有的动画状态。
     * @see dragonBones.AnimationState
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.reset = function () {
      for (var _i = 0, _a = this._animationStates; _i < _a.length; _i++) {
        var animationState = _a[_i];
        animationState.returnToPool();
      }

      this._animationDirty = false;

      this._animationConfig.clear();

      this._animationStates.length = 0;
      this._lastAnimationState = null;
    };
    /**
     * - Pause a specific animation state.
     * @param animationName - The name of animation state. (If not set, it will pause all animations)
     * @see dragonBones.AnimationState
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 暂停指定动画状态的播放。
     * @param animationName - 动画状态名称。 （如果未设置，则暂停所有动画）
     * @see dragonBones.AnimationState
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Animation.prototype.stop = function (animationName) {
      if (animationName === void 0) {
        animationName = null;
      }

      if (animationName !== null) {
        var animationState = this.getState(animationName);

        if (animationState !== null) {
          animationState.stop();
        }
      } else {
        for (var _i = 0, _a = this._animationStates; _i < _a.length; _i++) {
          var animationState = _a[_i];
          animationState.stop();
        }
      }
    };
    /**
     * - Play animation with a specific animation config.
     * The API is still in the experimental phase and may encounter bugs or stability or compatibility issues when used.
     * @param animationConfig - The animation config.
     * @returns The playing animation state.
     * @see dragonBones.AnimationConfig
     * @beta
     * @version DragonBones 5.0
     * @language en_US
     */

    /**
     * - 通过指定的动画配置来播放动画。
     * 该 API 仍在实验阶段，使用时可能遭遇 bug 或稳定性或兼容性问题。
     * @param animationConfig - 动画配置。
     * @returns 播放的动画状态。
     * @see dragonBones.AnimationConfig
     * @beta
     * @version DragonBones 5.0
     * @language zh_CN
     */


    Animation.prototype.playConfig = function (animationConfig) {
      var animationName = animationConfig.animation;

      if (!(animationName in this._animations)) {
        console.warn("Non-existent animation.\n", "DragonBones name: " + this._armature.armatureData.parent.name, "Armature name: " + this._armature.name, "Animation name: " + animationName);
        return null;
      }

      var animationData = this._animations[animationName];

      if (animationConfig.fadeOutMode === 5
      /* Single */
      ) {
          for (var _i = 0, _a = this._animationStates; _i < _a.length; _i++) {
            var animationState_1 = _a[_i];

            if (animationState_1._animationData === animationData) {
              return animationState_1;
            }
          }
        }

      if (this._animationStates.length === 0) {
        animationConfig.fadeInTime = 0.0;
      } else if (animationConfig.fadeInTime < 0.0) {
        animationConfig.fadeInTime = animationData.fadeInTime;
      }

      if (animationConfig.fadeOutTime < 0.0) {
        animationConfig.fadeOutTime = animationConfig.fadeInTime;
      }

      if (animationConfig.timeScale <= -100.0) {
        animationConfig.timeScale = 1.0 / animationData.scale;
      }

      if (animationData.frameCount > 1) {
        if (animationConfig.position < 0.0) {
          animationConfig.position %= animationData.duration;
          animationConfig.position = animationData.duration - animationConfig.position;
        } else if (animationConfig.position === animationData.duration) {
          animationConfig.position -= 0.000001; // Play a little time before end.
        } else if (animationConfig.position > animationData.duration) {
          animationConfig.position %= animationData.duration;
        }

        if (animationConfig.duration > 0.0 && animationConfig.position + animationConfig.duration > animationData.duration) {
          animationConfig.duration = animationData.duration - animationConfig.position;
        }

        if (animationConfig.playTimes < 0) {
          animationConfig.playTimes = animationData.playTimes;
        }
      } else {
        animationConfig.playTimes = 1;
        animationConfig.position = 0.0;

        if (animationConfig.duration > 0.0) {
          animationConfig.duration = 0.0;
        }
      }

      if (animationConfig.duration === 0.0) {
        animationConfig.duration = -1.0;
      }

      this._fadeOut(animationConfig);

      var animationState = dragonBones.BaseObject.borrowObject(dragonBones.AnimationState);
      animationState.init(this._armature, animationData, animationConfig);
      this._animationDirty = true;
      this._armature._cacheFrameIndex = -1;

      if (this._animationStates.length > 0) {
        var added = false;

        for (var i = 0, l = this._animationStates.length; i < l; ++i) {
          if (animationState.layer > this._animationStates[i].layer) {
            added = true;

            this._animationStates.splice(i, 0, animationState);

            break;
          } else if (i !== l - 1 && animationState.layer > this._animationStates[i + 1].layer) {
            added = true;

            this._animationStates.splice(i + 1, 0, animationState);

            break;
          }
        }

        if (!added) {
          this._animationStates.push(animationState);
        }
      } else {
        this._animationStates.push(animationState);
      } // Child armature play same name animation.


      for (var _b = 0, _c = this._armature.getSlots(); _b < _c.length; _b++) {
        var slot = _c[_b];
        var childArmature = slot.childArmature;

        if (childArmature !== null && childArmature.inheritAnimation && childArmature.animation.hasAnimation(animationName) && childArmature.animation.getState(animationName) === null) {
          childArmature.animation.fadeIn(animationName); //
        }
      }

      var isLocked = false;

      for (var k in animationData.animationTimelines) {
        if (!this._lockUpdate) {
          isLocked = true;
          this._lockUpdate = true;
        }

        var childAnimatiionState = this.fadeIn(k, animationConfig.fadeInTime, 1, animationState.layer, null, 0
        /* None */
        );

        if (childAnimatiionState !== null) {
          childAnimatiionState.resetToPose = false;
          childAnimatiionState._parent = animationState;
          childAnimatiionState.stop();
        }
      }

      if (isLocked) {
        this._lockUpdate = false;
      }

      if (!this._lockUpdate) {
        if (animationConfig.fadeInTime <= 0.0) {
          // Blend animation state, update armature.
          this._armature.advanceTime(0.0);
        }

        this._lastAnimationState = animationState;
      }

      return animationState;
    };
    /**
     * - Play a specific animation.
     * @param animationName - The name of animation data. (If not set, The default animation will be played, or resume the animation playing from pause status, or replay the last playing animation)
     * @param playTimes - Playing repeat times. [-1: Use default value of the animation data, 0: No end loop playing, [1~N]: Repeat N times] (default: -1)
     * @returns The playing animation state.
     * @example
     * <pre>
     *     armature.animation.play("walk");
     * </pre>
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 播放指定动画。
     * @param animationName - 动画数据名称。 （如果未设置，则播放默认动画，或将暂停状态切换为播放状态，或重新播放之前播放的动画）
     * @param playTimes - 循环播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）
     * @returns 播放的动画状态。
     * @example
     * <pre>
     *     armature.animation.play("walk");
     * </pre>
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Animation.prototype.play = function (animationName, playTimes) {
      if (animationName === void 0) {
        animationName = null;
      }

      if (playTimes === void 0) {
        playTimes = -1;
      }

      this._animationConfig.clear();

      this._animationConfig.resetToPose = true;
      this._animationConfig.playTimes = playTimes;
      this._animationConfig.fadeInTime = 0.0;
      this._animationConfig.animation = animationName !== null ? animationName : "";

      if (animationName !== null && animationName.length > 0) {
        this.playConfig(this._animationConfig);
      } else if (this._lastAnimationState === null) {
        var defaultAnimation = this._armature.armatureData.defaultAnimation;

        if (defaultAnimation !== null) {
          this._animationConfig.animation = defaultAnimation.name;
          this.playConfig(this._animationConfig);
        }
      } else if (!this._lastAnimationState.isPlaying && !this._lastAnimationState.isCompleted) {
        this._lastAnimationState.play();
      } else {
        this._animationConfig.animation = this._lastAnimationState.name;
        this.playConfig(this._animationConfig);
      }

      return this._lastAnimationState;
    };
    /**
     * - Fade in a specific animation.
     * @param animationName - The name of animation data.
     * @param fadeInTime - The fade in time. [-1: Use the default value of animation data, [0~N]: The fade in time (In seconds)] (Default: -1)
     * @param playTimes - playing repeat times. [-1: Use the default value of animation data, 0: No end loop playing, [1~N]: Repeat N times] (Default: -1)
     * @param layer - The blending layer, the animation states in high level layer will get the blending weights with high priority, when the total blending weights are more than 1.0, there will be no more weights can be allocated to the other animation states. (Default: 0)
     * @param group - The blending group name, it is typically used to specify the substitution of multiple animation states blending. (Default: null)
     * @param fadeOutMode - The fade out mode, which is typically used to specify alternate mode of multiple animation states blending. (Default: AnimationFadeOutMode.SameLayerAndGroup)
     * @returns The playing animation state.
     * @example
     * <pre>
     *     armature.animation.fadeIn("walk", 0.3, 0, 0, "normalGroup").resetToPose = false;
     *     armature.animation.fadeIn("attack", 0.3, 1, 0, "attackGroup").resetToPose = false;
     * </pre>
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 淡入播放指定的动画。
     * @param animationName - 动画数据名称。
     * @param fadeInTime - 淡入时间。 [-1: 使用动画数据默认值, [0~N]: 淡入时间 (以秒为单位)] （默认: -1）
     * @param playTimes - 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）
     * @param layer - 混合图层，图层高的动画状态会优先获取混合权重，当混合权重分配总和超过 1.0 时，剩余的动画状态将不能再获得权重分配。 （默认: 0）
     * @param group - 混合组名称，该属性通常用来指定多个动画状态混合时的相互替换关系。 （默认: null）
     * @param fadeOutMode - 淡出模式，该属性通常用来指定多个动画状态混合时的相互替换模式。 （默认: AnimationFadeOutMode.SameLayerAndGroup）
     * @returns 播放的动画状态。
     * @example
     * <pre>
     *     armature.animation.fadeIn("walk", 0.3, 0, 0, "normalGroup").resetToPose = false;
     *     armature.animation.fadeIn("attack", 0.3, 1, 0, "attackGroup").resetToPose = false;
     * </pre>
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.fadeIn = function (animationName, fadeInTime, playTimes, layer, group, fadeOutMode) {
      if (fadeInTime === void 0) {
        fadeInTime = -1.0;
      }

      if (playTimes === void 0) {
        playTimes = -1;
      }

      if (layer === void 0) {
        layer = 0;
      }

      if (group === void 0) {
        group = null;
      }

      if (fadeOutMode === void 0) {
        fadeOutMode = 3
        /* SameLayerAndGroup */
        ;
      }

      this._animationConfig.clear();

      this._animationConfig.fadeOutMode = fadeOutMode;
      this._animationConfig.playTimes = playTimes;
      this._animationConfig.layer = layer;
      this._animationConfig.fadeInTime = fadeInTime;
      this._animationConfig.animation = animationName;
      this._animationConfig.group = group !== null ? group : "";
      return this.playConfig(this._animationConfig);
    };
    /**
     * - Play a specific animation from the specific time.
     * @param animationName - The name of animation data.
     * @param time - The start time point of playing. (In seconds)
     * @param playTimes - Playing repeat times. [-1: Use the default value of animation data, 0: No end loop playing, [1~N]: Repeat N times] (Default: -1)
     * @returns The played animation state.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 从指定时间开始播放指定的动画。
     * @param animationName - 动画数据名称。
     * @param time - 播放开始的时间。 (以秒为单位)
     * @param playTimes - 循环播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）
     * @returns 播放的动画状态。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.gotoAndPlayByTime = function (animationName, time, playTimes) {
      if (time === void 0) {
        time = 0.0;
      }

      if (playTimes === void 0) {
        playTimes = -1;
      }

      this._animationConfig.clear();

      this._animationConfig.resetToPose = true;
      this._animationConfig.playTimes = playTimes;
      this._animationConfig.position = time;
      this._animationConfig.fadeInTime = 0.0;
      this._animationConfig.animation = animationName;
      return this.playConfig(this._animationConfig);
    };
    /**
     * - Play a specific animation from the specific frame.
     * @param animationName - The name of animation data.
     * @param frame - The start frame of playing.
     * @param playTimes - Playing repeat times. [-1: Use the default value of animation data, 0: No end loop playing, [1~N]: Repeat N times] (Default: -1)
     * @returns The played animation state.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 从指定帧开始播放指定的动画。
     * @param animationName - 动画数据名称。
     * @param frame - 播放开始的帧数。
     * @param playTimes - 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）
     * @returns 播放的动画状态。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.gotoAndPlayByFrame = function (animationName, frame, playTimes) {
      if (frame === void 0) {
        frame = 0;
      }

      if (playTimes === void 0) {
        playTimes = -1;
      }

      this._animationConfig.clear();

      this._animationConfig.resetToPose = true;
      this._animationConfig.playTimes = playTimes;
      this._animationConfig.fadeInTime = 0.0;
      this._animationConfig.animation = animationName;
      var animationData = animationName in this._animations ? this._animations[animationName] : null;

      if (animationData !== null) {
        this._animationConfig.position = animationData.duration * frame / animationData.frameCount;
      }

      return this.playConfig(this._animationConfig);
    };
    /**
     * - Play a specific animation from the specific progress.
     * @param animationName - The name of animation data.
     * @param progress - The start progress value of playing.
     * @param playTimes - Playing repeat times. [-1: Use the default value of animation data, 0: No end loop playing, [1~N]: Repeat N times] (Default: -1)
     * @returns The played animation state.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 从指定进度开始播放指定的动画。
     * @param animationName - 动画数据名称。
     * @param progress - 开始播放的进度。
     * @param playTimes - 播放次数。 [-1: 使用动画数据默认值, 0: 无限循环播放, [1~N]: 循环播放 N 次] （默认: -1）
     * @returns 播放的动画状态。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.gotoAndPlayByProgress = function (animationName, progress, playTimes) {
      if (progress === void 0) {
        progress = 0.0;
      }

      if (playTimes === void 0) {
        playTimes = -1;
      }

      this._animationConfig.clear();

      this._animationConfig.resetToPose = true;
      this._animationConfig.playTimes = playTimes;
      this._animationConfig.fadeInTime = 0.0;
      this._animationConfig.animation = animationName;
      var animationData = animationName in this._animations ? this._animations[animationName] : null;

      if (animationData !== null) {
        this._animationConfig.position = animationData.duration * (progress > 0.0 ? progress : 0.0);
      }

      return this.playConfig(this._animationConfig);
    };
    /**
     * - Stop a specific animation at the specific time.
     * @param animationName - The name of animation data.
     * @param time - The stop time. (In seconds)
     * @returns The played animation state.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 在指定时间停止指定动画播放
     * @param animationName - 动画数据名称。
     * @param time - 停止的时间。 (以秒为单位)
     * @returns 播放的动画状态。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.gotoAndStopByTime = function (animationName, time) {
      if (time === void 0) {
        time = 0.0;
      }

      var animationState = this.gotoAndPlayByTime(animationName, time, 1);

      if (animationState !== null) {
        animationState.stop();
      }

      return animationState;
    };
    /**
     * - Stop a specific animation at the specific frame.
     * @param animationName - The name of animation data.
     * @param frame - The stop frame.
     * @returns The played animation state.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 在指定帧停止指定动画的播放
     * @param animationName - 动画数据名称。
     * @param frame - 停止的帧数。
     * @returns 播放的动画状态。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.gotoAndStopByFrame = function (animationName, frame) {
      if (frame === void 0) {
        frame = 0;
      }

      var animationState = this.gotoAndPlayByFrame(animationName, frame, 1);

      if (animationState !== null) {
        animationState.stop();
      }

      return animationState;
    };
    /**
     * - Stop a specific animation at the specific progress.
     * @param animationName - The name of animation data.
     * @param progress - The stop progress value.
     * @returns The played animation state.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 在指定的进度停止指定的动画播放。
     * @param animationName - 动画数据名称。
     * @param progress - 停止进度。
     * @returns 播放的动画状态。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    Animation.prototype.gotoAndStopByProgress = function (animationName, progress) {
      if (progress === void 0) {
        progress = 0.0;
      }

      var animationState = this.gotoAndPlayByProgress(animationName, progress, 1);

      if (animationState !== null) {
        animationState.stop();
      }

      return animationState;
    };
    /**
     * - Get a specific animation state.
     * @param animationName - The name of animation state.
     * @example
     * <pre>
     *     armature.animation.play("walk");
     *     let walkState = armature.animation.getState("walk");
     *     walkState.timeScale = 0.5;
     * </pre>
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取指定的动画状态
     * @param animationName - 动画状态名称。
     * @example
     * <pre>
     *     armature.animation.play("walk");
     *     let walkState = armature.animation.getState("walk");
     *     walkState.timeScale = 0.5;
     * </pre>
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Animation.prototype.getState = function (animationName) {
      var i = this._animationStates.length;

      while (i--) {
        var animationState = this._animationStates[i];

        if (animationState.name === animationName) {
          return animationState;
        }
      }

      return null;
    };
    /**
     * - Check whether a specific animation data is included.
     * @param animationName - The name of animation data.
     * @see dragonBones.AnimationData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 检查是否包含指定的动画数据
     * @param animationName - 动画数据名称。
     * @see dragonBones.AnimationData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    Animation.prototype.hasAnimation = function (animationName) {
      return animationName in this._animations;
    };
    /**
     * - Get all the animation states.
     * @version DragonBones 5.1
     * @language en_US
     */

    /**
     * - 获取所有的动画状态
     * @version DragonBones 5.1
     * @language zh_CN
     */


    Animation.prototype.getStates = function () {
      return this._animationStates;
    };

    Object.defineProperty(Animation.prototype, "isPlaying", {
      /**
       * - Check whether there is an animation state is playing
       * @see dragonBones.AnimationState
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 检查是否有动画状态正在播放
       * @see dragonBones.AnimationState
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        for (var _i = 0, _a = this._animationStates; _i < _a.length; _i++) {
          var animationState = _a[_i];

          if (animationState.isPlaying) {
            return true;
          }
        }

        return false;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Animation.prototype, "isCompleted", {
      /**
       * - Check whether all the animation states' playing were finished.
       * @see dragonBones.AnimationState
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 检查是否所有的动画状态均已播放完毕。
       * @see dragonBones.AnimationState
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        for (var _i = 0, _a = this._animationStates; _i < _a.length; _i++) {
          var animationState = _a[_i];

          if (!animationState.isCompleted) {
            return false;
          }
        }

        return this._animationStates.length > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Animation.prototype, "lastAnimationName", {
      /**
       * - The name of the last playing animation state.
       * @see #lastAnimationState
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 上一个播放的动画状态名称
       * @see #lastAnimationState
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._lastAnimationState !== null ? this._lastAnimationState.name : "";
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Animation.prototype, "animationNames", {
      /**
       * - The name of all animation data
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 所有动画数据的名称
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._animationNames;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Animation.prototype, "animations", {
      /**
       * - All animation data.
       * @version DragonBones 4.5
       * @language en_US
       */

      /**
       * - 所有的动画数据。
       * @version DragonBones 4.5
       * @language zh_CN
       */
      get: function get() {
        return this._animations;
      },
      set: function set(value) {
        if (this._animations === value) {
          return;
        }

        this._animationNames.length = 0;

        for (var k in this._animations) {
          delete this._animations[k];
        }

        for (var k in value) {
          this._animationNames.push(k);

          this._animations[k] = value[k];
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Animation.prototype, "animationConfig", {
      /**
       * - An AnimationConfig instance that can be used quickly.
       * @see dragonBones.AnimationConfig
       * @version DragonBones 5.0
       * @language en_US
       */

      /**
       * - 一个可以快速使用的动画配置实例。
       * @see dragonBones.AnimationConfig
       * @version DragonBones 5.0
       * @language zh_CN
       */
      get: function get() {
        this._animationConfig.clear();

        return this._animationConfig;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Animation.prototype, "lastAnimationState", {
      /**
       * - The last playing animation state
       * @see dragonBones.AnimationState
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 上一个播放的动画状态
       * @see dragonBones.AnimationState
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._lastAnimationState;
      },
      enumerable: true,
      configurable: true
    });
    /**
     * - Deprecated, please refer to {@link #play()} {@link #fadeIn()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #play()} {@link #fadeIn()}。
     * @deprecated
     * @language zh_CN
     */

    Animation.prototype.gotoAndPlay = function (animationName, fadeInTime, duration, playTimes, layer, group, fadeOutMode, pauseFadeOut, pauseFadeIn) {
      if (fadeInTime === void 0) {
        fadeInTime = -1;
      }

      if (duration === void 0) {
        duration = -1;
      }

      if (playTimes === void 0) {
        playTimes = -1;
      }

      if (layer === void 0) {
        layer = 0;
      }

      if (group === void 0) {
        group = null;
      }

      if (fadeOutMode === void 0) {
        fadeOutMode = 3
        /* SameLayerAndGroup */
        ;
      }

      if (pauseFadeOut === void 0) {
        pauseFadeOut = true;
      }

      if (pauseFadeIn === void 0) {
        pauseFadeIn = true;
      }

      console.warn("Deprecated."); // tslint:disable-next-line:no-unused-expression

      pauseFadeOut; // tslint:disable-next-line:no-unused-expression

      pauseFadeIn;

      this._animationConfig.clear();

      this._animationConfig.resetToPose = true;
      this._animationConfig.fadeOutMode = fadeOutMode;
      this._animationConfig.playTimes = playTimes;
      this._animationConfig.layer = layer;
      this._animationConfig.fadeInTime = fadeInTime;
      this._animationConfig.animation = animationName;
      this._animationConfig.group = group !== null ? group : "";
      var animationData = this._animations[animationName];

      if (animationData && duration > 0.0) {
        this._animationConfig.timeScale = animationData.duration / duration;
      }

      return this.playConfig(this._animationConfig);
    };
    /**
     * - Deprecated, please refer to {@link #gotoAndStopByTime()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #gotoAndStopByTime()}。
     * @deprecated
     * @language zh_CN
     */


    Animation.prototype.gotoAndStop = function (animationName, time) {
      if (time === void 0) {
        time = 0;
      }

      console.warn("Deprecated.");
      return this.gotoAndStopByTime(animationName, time);
    };

    Object.defineProperty(Animation.prototype, "animationList", {
      /**
       * - Deprecated, please refer to {@link #animationNames}.
       * @deprecated
       * @language en_US
       */

      /**
       * - 已废弃，请参考 {@link #animationNames}。
       * @deprecated
       * @language zh_CN
       */
      get: function get() {
        console.warn("Deprecated.");
        return this._animationNames;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Animation.prototype, "animationDataList", {
      /**
       * - Deprecated, please refer to {@link #animationNames}.
       * @deprecated
       * @language en_US
       */

      /**
       * - 已废弃，请参考 {@link #animationNames}。
       * @deprecated
       * @language zh_CN
       */
      get: function get() {
        console.warn("Deprecated.");
        var list = [];

        for (var i = 0, l = this._animationNames.length; i < l; ++i) {
          list.push(this._animations[this._animationNames[i]]);
        }

        return list;
      },
      enumerable: true,
      configurable: true
    });
    return Animation;
  }(dragonBones.BaseObject);

  dragonBones.Animation = Animation;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The animation state is generated when the animation data is played.
   * @see dragonBones.Animation
   * @see dragonBones.AnimationData
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 动画状态由播放动画数据时产生。
   * @see dragonBones.Animation
   * @see dragonBones.AnimationData
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var AnimationState =
  /** @class */
  function (_super) {
    __extends(AnimationState, _super);

    function AnimationState() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      /**
       * @internal
       */


      _this._blendState = new BlendState();
      _this._boneMask = [];
      _this._boneTimelines = [];
      _this._surfaceTimelines = [];
      _this._slotTimelines = [];
      _this._constraintTimelines = [];
      _this._animationTimelines = [];
      _this._poseTimelines = [];
      _this._bonePoses = {};
      /**
       * @internal
       */

      _this._actionTimeline = null; // Initial value.

      _this._zOrderTimeline = null; // Initial value.

      /**
       * @internal
       */

      _this._parent = null; // Initial value.

      return _this;
    }

    AnimationState.toString = function () {
      return "[class dragonBones.AnimationState]";
    };

    AnimationState.prototype._onClear = function () {
      for (var _i = 0, _a = this._boneTimelines; _i < _a.length; _i++) {
        var timeline = _a[_i];
        timeline.returnToPool();
      }

      for (var _b = 0, _c = this._surfaceTimelines; _b < _c.length; _b++) {
        var timeline = _c[_b];
        timeline.returnToPool();
      }

      for (var _d = 0, _e = this._slotTimelines; _d < _e.length; _d++) {
        var timeline = _e[_d];
        timeline.returnToPool();
      }

      for (var _f = 0, _g = this._constraintTimelines; _f < _g.length; _f++) {
        var timeline = _g[_f];
        timeline.returnToPool();
      }

      for (var _h = 0, _j = this._animationTimelines; _h < _j.length; _h++) {
        var timeline = _j[_h];
        timeline.returnToPool();
      }

      for (var k in this._bonePoses) {
        this._bonePoses[k].returnToPool();

        delete this._bonePoses[k];
      }

      if (this._actionTimeline !== null) {
        this._actionTimeline.returnToPool();
      }

      if (this._zOrderTimeline !== null) {
        this._zOrderTimeline.returnToPool();
      }

      this.actionEnabled = false;
      this.additiveBlending = false;
      this.displayControl = false;
      this.resetToPose = false;
      this.playTimes = 1;
      this.layer = 0;
      this.timeScale = 1.0;
      this.weight = 1.0;
      this.autoFadeOutTime = 0.0;
      this.fadeTotalTime = 0.0;
      this.name = "";
      this.group = "";
      this._timelineDirty = 2;
      this._playheadState = 0;
      this._fadeState = -1;
      this._subFadeState = -1;
      this._position = 0.0;
      this._duration = 0.0;
      this._fadeTime = 0.0;
      this._time = 0.0;
      this._fadeProgress = 0.0;
      this._weightResult = 0.0;

      this._blendState.clear();

      this._boneMask.length = 0;
      this._boneTimelines.length = 0;
      this._surfaceTimelines.length = 0;
      this._slotTimelines.length = 0;
      this._constraintTimelines.length = 0;
      this._animationTimelines.length = 0;
      this._poseTimelines.length = 0; // this._bonePoses.clear();

      this._animationData = null; //

      this._armature = null; //

      this._actionTimeline = null; //

      this._zOrderTimeline = null;
      this._parent = null; //
    };

    AnimationState.prototype._updateTimelines = function () {
      {
        // Update constraint timelines.
        for (var _i = 0, _a = this._armature._constraints; _i < _a.length; _i++) {
          var constraint = _a[_i];

          var timelineDatas = this._animationData.getConstraintTimelines(constraint.name);

          if (timelineDatas !== null) {
            for (var _b = 0, timelineDatas_1 = timelineDatas; _b < timelineDatas_1.length; _b++) {
              var timelineData = timelineDatas_1[_b];

              switch (timelineData.type) {
                case 30
                /* IKConstraint */
                :
                  {
                    var timeline = dragonBones.BaseObject.borrowObject(dragonBones.IKConstraintTimelineState);
                    timeline.constraint = constraint;
                    timeline.init(this._armature, this, timelineData);

                    this._constraintTimelines.push(timeline);

                    break;
                  }

                default:
                  break;
              }
            }
          } else if (this.resetToPose) {
            // Pose timeline.
            var timeline = dragonBones.BaseObject.borrowObject(dragonBones.IKConstraintTimelineState);
            timeline.constraint = constraint;
            timeline.init(this._armature, this, null);

            this._constraintTimelines.push(timeline);

            this._poseTimelines.push(timeline);
          }
        }
      }
      {
        // Update animation timelines.
        for (var _c = 0, _d = this._armature.animation.getStates(); _c < _d.length; _c++) {
          var animationState = _d[_c];

          if (animationState._parent !== this) {
            continue;
          }

          var timelineDatas = this._animationData.getAnimationTimelines(animationState.name);

          if (timelineDatas === null) {
            continue;
          }

          for (var _e = 0, timelineDatas_2 = timelineDatas; _e < timelineDatas_2.length; _e++) {
            var timelineData = timelineDatas_2[_e];

            switch (timelineData.type) {
              case 40
              /* AnimationTime */
              :
                {
                  var timeline = dragonBones.BaseObject.borrowObject(dragonBones.AnimationTimelineState);
                  timeline.animationState = animationState;
                  timeline.init(this._armature, this, timelineData);

                  this._animationTimelines.push(timeline);

                  break;
                }

              default:
                break;
            }
          }
        }
      }
    };

    AnimationState.prototype._updateBoneAndSlotTimelines = function () {
      {
        // Update bone and surface timelines.
        var boneTimelines = {};

        for (var _i = 0, _a = this._boneTimelines; _i < _a.length; _i++) {
          // Create bone timelines map.
          var timeline = _a[_i];
          var timelineName = timeline.bone.name;

          if (!(timelineName in boneTimelines)) {
            boneTimelines[timelineName] = [];
          }

          boneTimelines[timelineName].push(timeline);
        }

        for (var _b = 0, _c = this._armature.getBones(); _b < _c.length; _b++) {
          var bone = _c[_b];
          var timelineName = bone.name;

          if (!this.containsBoneMask(timelineName)) {
            continue;
          }

          if (timelineName in boneTimelines) {
            // Remove bone timeline from map.
            delete boneTimelines[timelineName];
          } else if (bone._boneData.type === 0
          /* Bone */
          ) {
              // Create new bone timeline.
              var timelineDatas = this._animationData.getBoneTimelines(timelineName);

              var bonePose = timelineName in this._bonePoses ? this._bonePoses[timelineName] : this._bonePoses[timelineName] = dragonBones.BaseObject.borrowObject(BonePose);

              if (timelineDatas !== null) {
                for (var _d = 0, timelineDatas_3 = timelineDatas; _d < timelineDatas_3.length; _d++) {
                  var timelineData = timelineDatas_3[_d];

                  switch (timelineData.type) {
                    case 10
                    /* BoneAll */
                    :
                      {
                        var timeline = dragonBones.BaseObject.borrowObject(dragonBones.BoneAllTimelineState);
                        timeline.bone = bone;
                        timeline.bonePose = bonePose;
                        timeline.init(this._armature, this, timelineData);

                        this._boneTimelines.push(timeline);

                        break;
                      }

                    case 11
                    /* BoneTranslate */
                    :
                      {
                        var timeline = dragonBones.BaseObject.borrowObject(dragonBones.BoneTranslateTimelineState);
                        timeline.bone = bone;
                        timeline.bonePose = bonePose;
                        timeline.init(this._armature, this, timelineData);

                        this._boneTimelines.push(timeline);

                        break;
                      }

                    case 12
                    /* BoneRotate */
                    :
                      {
                        var timeline = dragonBones.BaseObject.borrowObject(dragonBones.BoneRotateTimelineState);
                        timeline.bone = bone;
                        timeline.bonePose = bonePose;
                        timeline.init(this._armature, this, timelineData);

                        this._boneTimelines.push(timeline);

                        break;
                      }

                    case 13
                    /* BoneScale */
                    :
                      {
                        var timeline = dragonBones.BaseObject.borrowObject(dragonBones.BoneScaleTimelineState);
                        timeline.bone = bone;
                        timeline.bonePose = bonePose;
                        timeline.init(this._armature, this, timelineData);

                        this._boneTimelines.push(timeline);

                        break;
                      }

                    default:
                      break;
                  }
                }
              } else if (this.resetToPose) {
                // Pose timeline.
                var timeline = dragonBones.BaseObject.borrowObject(dragonBones.BoneAllTimelineState);
                timeline.bone = bone;
                timeline.bonePose = bonePose;
                timeline.init(this._armature, this, null);

                this._boneTimelines.push(timeline);

                this._poseTimelines.push(timeline);
              }
            } else if (bone._boneData.type === 1
          /* Surface */
          ) {
              var timelineDatas = this._animationData.getSurfaceTimelines(timelineName);

              if (timelineDatas !== null) {
                for (var _e = 0, timelineDatas_4 = timelineDatas; _e < timelineDatas_4.length; _e++) {
                  var timelineData = timelineDatas_4[_e];

                  switch (timelineData.type) {
                    case 50
                    /* Surface */
                    :
                      {
                        var timeline = dragonBones.BaseObject.borrowObject(dragonBones.SurfaceTimelineState);
                        timeline.surface = bone;
                        timeline.init(this._armature, this, timelineData);

                        this._surfaceTimelines.push(timeline);

                        break;
                      }

                    default:
                      break;
                  }
                }
              } else if (this.resetToPose) {
                // Pose timeline.
                var timeline = dragonBones.BaseObject.borrowObject(dragonBones.SurfaceTimelineState);
                timeline.surface = bone;
                timeline.init(this._armature, this, null);

                this._surfaceTimelines.push(timeline);

                this._poseTimelines.push(timeline);
              }
            }
        }

        for (var k in boneTimelines) {
          // Remove bone timelines.
          for (var _f = 0, _g = boneTimelines[k]; _f < _g.length; _f++) {
            var timeline = _g[_f];

            this._boneTimelines.splice(this._boneTimelines.indexOf(timeline), 1);

            timeline.returnToPool();
          }
        }
      }
      {
        // Update slot timelines.
        var slotTimelines = {};
        var ffdFlags = [];

        for (var _h = 0, _j = this._slotTimelines; _h < _j.length; _h++) {
          // Create slot timelines map.
          var timeline = _j[_h];
          var timelineName = timeline.slot.name;

          if (!(timelineName in slotTimelines)) {
            slotTimelines[timelineName] = [];
          }

          slotTimelines[timelineName].push(timeline);
        }

        for (var _k = 0, _l = this._armature.getSlots(); _k < _l.length; _k++) {
          var slot = _l[_k];
          var boneName = slot.parent.name;

          if (!this.containsBoneMask(boneName)) {
            continue;
          }

          var timelineName = slot.name;

          var timelineDatas = this._animationData.getSlotTimelines(timelineName);

          if (timelineName in slotTimelines) {
            // Remove slot timeline from map.
            delete slotTimelines[timelineName];
          } else {
            // Create new slot timeline.
            var displayIndexFlag = false;
            var colorFlag = false;
            ffdFlags.length = 0;

            if (timelineDatas !== null) {
              for (var _m = 0, timelineDatas_5 = timelineDatas; _m < timelineDatas_5.length; _m++) {
                var timelineData = timelineDatas_5[_m];

                switch (timelineData.type) {
                  case 20
                  /* SlotDisplay */
                  :
                    {
                      var timeline = dragonBones.BaseObject.borrowObject(dragonBones.SlotDislayTimelineState);
                      timeline.slot = slot;
                      timeline.init(this._armature, this, timelineData);

                      this._slotTimelines.push(timeline);

                      displayIndexFlag = true;
                      break;
                    }

                  case 21
                  /* SlotColor */
                  :
                    {
                      var timeline = dragonBones.BaseObject.borrowObject(dragonBones.SlotColorTimelineState);
                      timeline.slot = slot;
                      timeline.init(this._armature, this, timelineData);

                      this._slotTimelines.push(timeline);

                      colorFlag = true;
                      break;
                    }

                  case 22
                  /* SlotDeform */
                  :
                    {
                      var timeline = dragonBones.BaseObject.borrowObject(dragonBones.DeformTimelineState);
                      timeline.slot = slot;
                      timeline.init(this._armature, this, timelineData);

                      this._slotTimelines.push(timeline);

                      ffdFlags.push(timeline.vertexOffset);
                      break;
                    }

                  default:
                    break;
                }
              }
            }

            if (this.resetToPose) {
              // Pose timeline.
              if (!displayIndexFlag) {
                var timeline = dragonBones.BaseObject.borrowObject(dragonBones.SlotDislayTimelineState);
                timeline.slot = slot;
                timeline.init(this._armature, this, null);

                this._slotTimelines.push(timeline);

                this._poseTimelines.push(timeline);
              }

              if (!colorFlag) {
                var timeline = dragonBones.BaseObject.borrowObject(dragonBones.SlotColorTimelineState);
                timeline.slot = slot;
                timeline.init(this._armature, this, null);

                this._slotTimelines.push(timeline);

                this._poseTimelines.push(timeline);
              }

              if (slot.rawDisplayDatas !== null) {
                for (var _o = 0, _p = slot.rawDisplayDatas; _o < _p.length; _o++) {
                  var displayData = _p[_o];

                  if (displayData !== null && displayData.type === 2
                  /* Mesh */
                  ) {
                      var meshOffset = displayData.vertices.offset;

                      if (ffdFlags.indexOf(meshOffset) < 0) {
                        var timeline = dragonBones.BaseObject.borrowObject(dragonBones.DeformTimelineState);
                        timeline.vertexOffset = meshOffset; //

                        timeline.slot = slot;
                        timeline.init(this._armature, this, null);

                        this._slotTimelines.push(timeline);

                        this._poseTimelines.push(timeline);
                      }
                    }
                }
              }
            }
          }
        }

        for (var k in slotTimelines) {
          // Remove slot timelines.
          for (var _q = 0, _r = slotTimelines[k]; _q < _r.length; _q++) {
            var timeline = _r[_q];

            this._slotTimelines.splice(this._slotTimelines.indexOf(timeline), 1);

            timeline.returnToPool();
          }
        }
      }
    };

    AnimationState.prototype._advanceFadeTime = function (passedTime) {
      var isFadeOut = this._fadeState > 0;

      if (this._subFadeState < 0) {
        // Fade start event.
        this._subFadeState = 0;
        var eventType = isFadeOut ? dragonBones.EventObject.FADE_OUT : dragonBones.EventObject.FADE_IN;

        if (this._armature.eventDispatcher.hasDBEventListener(eventType)) {
          var eventObject = dragonBones.BaseObject.borrowObject(dragonBones.EventObject);
          eventObject.type = eventType;
          eventObject.armature = this._armature;
          eventObject.animationState = this;

          this._armature._dragonBones.bufferEvent(eventObject);
        }
      }

      if (passedTime < 0.0) {
        passedTime = -passedTime;
      }

      this._fadeTime += passedTime;

      if (this._fadeTime >= this.fadeTotalTime) {
        // Fade complete.
        this._subFadeState = 1;
        this._fadeProgress = isFadeOut ? 0.0 : 1.0;
      } else if (this._fadeTime > 0.0) {
        // Fading.
        this._fadeProgress = isFadeOut ? 1.0 - this._fadeTime / this.fadeTotalTime : this._fadeTime / this.fadeTotalTime;
      } else {
        // Before fade.
        this._fadeProgress = isFadeOut ? 1.0 : 0.0;
      }

      if (this._subFadeState > 0) {
        // Fade complete event.
        if (!isFadeOut) {
          this._playheadState |= 1; // x1

          this._fadeState = 0;
        }

        var eventType = isFadeOut ? dragonBones.EventObject.FADE_OUT_COMPLETE : dragonBones.EventObject.FADE_IN_COMPLETE;

        if (this._armature.eventDispatcher.hasDBEventListener(eventType)) {
          var eventObject = dragonBones.BaseObject.borrowObject(dragonBones.EventObject);
          eventObject.type = eventType;
          eventObject.armature = this._armature;
          eventObject.animationState = this;

          this._armature._dragonBones.bufferEvent(eventObject);
        }
      }
    };
    /**
     * @internal
     */


    AnimationState.prototype.init = function (armature, animationData, animationConfig) {
      if (this._armature !== null) {
        return;
      }

      this._armature = armature;
      this._animationData = animationData; //

      this.resetToPose = animationConfig.resetToPose;
      this.additiveBlending = animationConfig.additiveBlending;
      this.displayControl = animationConfig.displayControl;
      this.actionEnabled = animationConfig.actionEnabled;
      this.layer = animationConfig.layer;
      this.playTimes = animationConfig.playTimes;
      this.timeScale = animationConfig.timeScale;
      this.fadeTotalTime = animationConfig.fadeInTime;
      this.autoFadeOutTime = animationConfig.autoFadeOutTime;
      this.weight = animationConfig.weight;
      this.name = animationConfig.name.length > 0 ? animationConfig.name : animationConfig.animation;
      this.group = animationConfig.group;

      if (animationConfig.pauseFadeIn) {
        this._playheadState = 2; // 10
      } else {
        this._playheadState = 3; // 11
      }

      if (animationConfig.duration < 0.0) {
        this._position = 0.0;
        this._duration = this._animationData.duration;

        if (animationConfig.position !== 0.0) {
          if (this.timeScale >= 0.0) {
            this._time = animationConfig.position;
          } else {
            this._time = animationConfig.position - this._duration;
          }
        } else {
          this._time = 0.0;
        }
      } else {
        this._position = animationConfig.position;
        this._duration = animationConfig.duration;
        this._time = 0.0;
      }

      if (this.timeScale < 0.0 && this._time === 0.0) {
        this._time = -0.000001; // Turn to end.
      }

      if (this.fadeTotalTime <= 0.0) {
        this._fadeProgress = 0.999999; // Make different.
      }

      if (animationConfig.boneMask.length > 0) {
        this._boneMask.length = animationConfig.boneMask.length;

        for (var i = 0, l = this._boneMask.length; i < l; ++i) {
          this._boneMask[i] = animationConfig.boneMask[i];
        }
      }

      this._actionTimeline = dragonBones.BaseObject.borrowObject(dragonBones.ActionTimelineState);

      this._actionTimeline.init(this._armature, this, this._animationData.actionTimeline);

      this._actionTimeline.currentTime = this._time;

      if (this._actionTimeline.currentTime < 0.0) {
        this._actionTimeline.currentTime = this._duration - this._actionTimeline.currentTime;
      }

      if (this._animationData.zOrderTimeline !== null) {
        this._zOrderTimeline = dragonBones.BaseObject.borrowObject(dragonBones.ZOrderTimelineState);

        this._zOrderTimeline.init(this._armature, this, this._animationData.zOrderTimeline);
      }
    };
    /**
     * @internal
     */


    AnimationState.prototype.advanceTime = function (passedTime, cacheFrameRate) {
      this._blendState.dirty = false; // Update fade time.

      if (this._fadeState !== 0 || this._subFadeState !== 0) {
        this._advanceFadeTime(passedTime);
      } // Update time.


      if (this._playheadState === 3) {
        // 11
        if (this.timeScale !== 1.0) {
          passedTime *= this.timeScale;
        }

        this._time += passedTime;
      } // Update timeline.


      if (this._timelineDirty !== 0) {
        if (this._timelineDirty === 2) {
          this._updateTimelines();
        }

        this._timelineDirty = 0;

        this._updateBoneAndSlotTimelines();
      }

      if (this.weight === 0.0) {
        return;
      }

      var isCacheEnabled = this._fadeState === 0 && cacheFrameRate > 0.0;
      var isUpdateTimeline = true;
      var isUpdateBoneTimeline = true;
      var time = this._time;
      this._weightResult = this.weight * this._fadeProgress;

      if (this._parent !== null) {
        this._weightResult *= this._parent._weightResult / this._parent._fadeProgress;
      }

      if (this._actionTimeline.playState <= 0) {
        this._actionTimeline.update(time); // Update main timeline.

      }

      if (isCacheEnabled) {
        // Cache time internval.
        var internval = cacheFrameRate * 2.0;
        this._actionTimeline.currentTime = Math.floor(this._actionTimeline.currentTime * internval) / internval;
      }

      if (this._zOrderTimeline !== null && this._zOrderTimeline.playState <= 0) {
        // Update zOrder timeline.
        this._zOrderTimeline.update(time);
      }

      if (isCacheEnabled) {
        // Update cache.
        var cacheFrameIndex = Math.floor(this._actionTimeline.currentTime * cacheFrameRate); // uint

        if (this._armature._cacheFrameIndex === cacheFrameIndex) {
          // Same cache.
          isUpdateTimeline = false;
          isUpdateBoneTimeline = false;
        } else {
          this._armature._cacheFrameIndex = cacheFrameIndex;

          if (this._animationData.cachedFrames[cacheFrameIndex]) {
            // Cached.
            isUpdateBoneTimeline = false;
          } else {
            // Cache.
            this._animationData.cachedFrames[cacheFrameIndex] = true;
          }
        }
      }

      if (isUpdateTimeline) {
        if (isUpdateBoneTimeline) {
          // Update bone timelines.
          for (var i = 0, l = this._boneTimelines.length; i < l; ++i) {
            var timeline = this._boneTimelines[i];

            if (timeline.playState <= 0) {
              timeline.update(time);
            }

            if (i === l - 1 || timeline.bone !== this._boneTimelines[i + 1].bone) {
              var state = timeline.bone._blendState.update(this._weightResult, this.layer);

              if (state !== 0) {
                timeline.blend(state);
              }
            }
          }
        }

        for (var i = 0, l = this._surfaceTimelines.length; i < l; ++i) {
          var timeline = this._surfaceTimelines[i];

          var state = timeline.surface._blendState.update(this._weightResult, this.layer);

          if (timeline.playState <= 0) {
            timeline.update(time);
          }

          if (state !== 0) {
            timeline.blend(state);
          }
        }

        if (this.displayControl) {
          for (var i = 0, l = this._slotTimelines.length; i < l; ++i) {
            var timeline = this._slotTimelines[i];
            var displayController = timeline.slot.displayController;

            if (displayController === null || displayController === this.name || displayController === this.group) {
              if (timeline.playState <= 0) {
                timeline.update(time);
              }
            }
          }
        }

        for (var i = 0, l = this._constraintTimelines.length; i < l; ++i) {
          var timeline = this._constraintTimelines[i];

          if (timeline.playState <= 0) {
            timeline.update(time);
          }
        }

        for (var i = 0, l = this._animationTimelines.length; i < l; ++i) {
          var timeline = this._animationTimelines[i];

          var state = timeline.animationState._blendState.update(this._weightResult, this.layer);

          if (timeline.playState <= 0) {
            timeline.update(time);
          }

          if (state !== 0) {
            timeline.blend(state);
          }
        }
      }

      if (this._fadeState === 0) {
        if (this._subFadeState > 0) {
          this._subFadeState = 0;

          if (this._poseTimelines.length > 0) {
            // Remove pose timelines.
            for (var _i = 0, _a = this._poseTimelines; _i < _a.length; _i++) {
              var timeline = _a[_i];

              if (timeline instanceof dragonBones.BoneTimelineState) {
                this._boneTimelines.splice(this._boneTimelines.indexOf(timeline), 1);
              } else if (timeline instanceof dragonBones.SurfaceTimelineState) {
                this._surfaceTimelines.splice(this._surfaceTimelines.indexOf(timeline), 1);
              } else if (timeline instanceof dragonBones.SlotTimelineState) {
                this._slotTimelines.splice(this._slotTimelines.indexOf(timeline), 1);
              } else if (timeline instanceof dragonBones.ConstraintTimelineState) {
                this._constraintTimelines.splice(this._constraintTimelines.indexOf(timeline), 1);
              }

              timeline.returnToPool();
            }

            this._poseTimelines.length = 0;
          }
        }

        if (this._actionTimeline.playState > 0) {
          if (this.autoFadeOutTime >= 0.0) {
            // Auto fade out.
            this.fadeOut(this.autoFadeOutTime);
          }
        }
      }
    };
    /**
     * - Continue play.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 继续播放。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    AnimationState.prototype.play = function () {
      this._playheadState = 3; // 11
    };
    /**
     * - Stop play.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 暂停播放。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    AnimationState.prototype.stop = function () {
      this._playheadState &= 1; // 0x
    };
    /**
     * - Fade out the animation state.
     * @param fadeOutTime - The fade out time. (In seconds)
     * @param pausePlayhead - Whether to pause the animation playing when fade out.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 淡出动画状态。
     * @param fadeOutTime - 淡出时间。 （以秒为单位）
     * @param pausePlayhead - 淡出时是否暂停播放。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    AnimationState.prototype.fadeOut = function (fadeOutTime, pausePlayhead) {
      if (pausePlayhead === void 0) {
        pausePlayhead = true;
      }

      if (fadeOutTime < 0.0) {
        fadeOutTime = 0.0;
      }

      if (pausePlayhead) {
        this._playheadState &= 2; // x0
      }

      if (this._fadeState > 0) {
        if (fadeOutTime > this.fadeTotalTime - this._fadeTime) {
          // If the animation is already in fade out, the new fade out will be ignored.
          return;
        }
      } else {
        this._fadeState = 1;
        this._subFadeState = -1;

        if (fadeOutTime <= 0.0 || this._fadeProgress <= 0.0) {
          this._fadeProgress = 0.000001; // Modify fade progress to different value.
        }

        for (var _i = 0, _a = this._boneTimelines; _i < _a.length; _i++) {
          var timeline = _a[_i];
          timeline.fadeOut();
        }

        for (var _b = 0, _c = this._surfaceTimelines; _b < _c.length; _b++) {
          var timeline = _c[_b];
          timeline.fadeOut();
        }

        for (var _d = 0, _e = this._slotTimelines; _d < _e.length; _d++) {
          var timeline = _e[_d];
          timeline.fadeOut();
        }

        for (var _f = 0, _g = this._constraintTimelines; _f < _g.length; _f++) {
          var timeline = _g[_f];
          timeline.fadeOut();
        }

        for (var _h = 0, _j = this._animationTimelines; _h < _j.length; _h++) {
          var timeline = _j[_h];
          timeline.animationState.fadeOut(fadeOutTime, pausePlayhead);
          timeline.fadeOut();
        }
      }

      this.displayControl = false; //

      this.fadeTotalTime = this._fadeProgress > 0.000001 ? fadeOutTime / this._fadeProgress : 0.0;
      this._fadeTime = this.fadeTotalTime * (1.0 - this._fadeProgress);
    };
    /**
     * - Check if a specific bone mask is included.
     * @param boneName - The bone name.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 检查是否包含特定骨骼遮罩。
     * @param boneName - 骨骼名称。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    AnimationState.prototype.containsBoneMask = function (boneName) {
      return this._boneMask.length === 0 || this._boneMask.indexOf(boneName) >= 0;
    };
    /**
     * - Add a specific bone mask.
     * @param boneName - The bone name.
     * @param recursive - Whether or not to add a mask to the bone's sub-bone.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 添加特定的骨骼遮罩。
     * @param boneName - 骨骼名称。
     * @param recursive - 是否为该骨骼的子骨骼添加遮罩。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    AnimationState.prototype.addBoneMask = function (boneName, recursive) {
      if (recursive === void 0) {
        recursive = true;
      }

      var currentBone = this._armature.getBone(boneName);

      if (currentBone === null) {
        return;
      }

      if (this._boneMask.indexOf(boneName) < 0) {
        // Add mixing
        this._boneMask.push(boneName);
      }

      if (recursive) {
        // Add recursive mixing.
        for (var _i = 0, _a = this._armature.getBones(); _i < _a.length; _i++) {
          var bone = _a[_i];

          if (this._boneMask.indexOf(bone.name) < 0 && currentBone.contains(bone)) {
            this._boneMask.push(bone.name);
          }
        }
      }

      this._timelineDirty = 1;
    };
    /**
     * - Remove the mask of a specific bone.
     * @param boneName - The bone name.
     * @param recursive - Whether to remove the bone's sub-bone mask.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 删除特定骨骼的遮罩。
     * @param boneName - 骨骼名称。
     * @param recursive - 是否删除该骨骼的子骨骼遮罩。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    AnimationState.prototype.removeBoneMask = function (boneName, recursive) {
      if (recursive === void 0) {
        recursive = true;
      }

      var index = this._boneMask.indexOf(boneName);

      if (index >= 0) {
        // Remove mixing.
        this._boneMask.splice(index, 1);
      }

      if (recursive) {
        var currentBone = this._armature.getBone(boneName);

        if (currentBone !== null) {
          var bones = this._armature.getBones();

          if (this._boneMask.length > 0) {
            // Remove recursive mixing.
            for (var _i = 0, bones_1 = bones; _i < bones_1.length; _i++) {
              var bone = bones_1[_i];

              var index_2 = this._boneMask.indexOf(bone.name);

              if (index_2 >= 0 && currentBone.contains(bone)) {
                this._boneMask.splice(index_2, 1);
              }
            }
          } else {
            // Add unrecursive mixing.
            for (var _a = 0, bones_2 = bones; _a < bones_2.length; _a++) {
              var bone = bones_2[_a];

              if (bone === currentBone) {
                continue;
              }

              if (!currentBone.contains(bone)) {
                this._boneMask.push(bone.name);
              }
            }
          }
        }
      }

      this._timelineDirty = 1;
    };
    /**
     * - Remove all bone masks.
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 删除所有骨骼遮罩。
     * @version DragonBones 3.0
     * @language zh_CN
     */


    AnimationState.prototype.removeAllBoneMask = function () {
      this._boneMask.length = 0;
      this._timelineDirty = 1;
    };

    Object.defineProperty(AnimationState.prototype, "isFadeIn", {
      /**
       * - Whether the animation state is fading in.
       * @version DragonBones 5.1
       * @language en_US
       */

      /**
       * - 是否正在淡入。
       * @version DragonBones 5.1
       * @language zh_CN
       */
      get: function get() {
        return this._fadeState < 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "isFadeOut", {
      /**
       * - Whether the animation state is fading out.
       * @version DragonBones 5.1
       * @language en_US
       */

      /**
       * - 是否正在淡出。
       * @version DragonBones 5.1
       * @language zh_CN
       */
      get: function get() {
        return this._fadeState > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "isFadeComplete", {
      /**
       * - Whether the animation state is fade completed.
       * @version DragonBones 5.1
       * @language en_US
       */

      /**
       * - 是否淡入或淡出完毕。
       * @version DragonBones 5.1
       * @language zh_CN
       */
      get: function get() {
        return this._fadeState === 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "isPlaying", {
      /**
       * - Whether the animation state is playing.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 是否正在播放。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return (this._playheadState & 2) !== 0 && this._actionTimeline.playState <= 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "isCompleted", {
      /**
       * - Whether the animation state is play completed.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 是否播放完毕。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._actionTimeline.playState > 0;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "currentPlayTimes", {
      /**
       * - The times has been played.
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 已经循环播放的次数。
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._actionTimeline.currentPlayTimes;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "totalTime", {
      /**
       * - The total time. (In seconds)
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 总播放时间。 （以秒为单位）
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._duration;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "currentTime", {
      /**
       * - The time is currently playing. (In seconds)
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 当前播放的时间。 （以秒为单位）
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._actionTimeline.currentTime;
      },
      set: function set(value) {
        var currentPlayTimes = this._actionTimeline.currentPlayTimes - (this._actionTimeline.playState > 0 ? 1 : 0);

        if (value < 0 || this._duration < value) {
          value = value % this._duration + currentPlayTimes * this._duration;

          if (value < 0) {
            value += this._duration;
          }
        }

        if (this.playTimes > 0 && currentPlayTimes === this.playTimes - 1 && value === this._duration) {
          value = this._duration - 0.000001;
        }

        if (this._time === value) {
          return;
        }

        this._time = value;

        this._actionTimeline.setCurrentTime(this._time);

        if (this._zOrderTimeline !== null) {
          this._zOrderTimeline.playState = -1;
        }

        for (var _i = 0, _a = this._boneTimelines; _i < _a.length; _i++) {
          var timeline = _a[_i];
          timeline.playState = -1;
        }

        for (var _b = 0, _c = this._slotTimelines; _b < _c.length; _b++) {
          var timeline = _c[_b];
          timeline.playState = -1;
        }
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(AnimationState.prototype, "animationData", {
      /**
       * - The animation data.
       * @see dragonBones.AnimationData
       * @version DragonBones 3.0
       * @language en_US
       */

      /**
       * - 动画数据。
       * @see dragonBones.AnimationData
       * @version DragonBones 3.0
       * @language zh_CN
       */
      get: function get() {
        return this._animationData;
      },
      enumerable: true,
      configurable: true
    });
    return AnimationState;
  }(dragonBones.BaseObject);

  dragonBones.AnimationState = AnimationState;
  /**
   * @internal
   */

  var BonePose =
  /** @class */
  function (_super) {
    __extends(BonePose, _super);

    function BonePose() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this.current = new dragonBones.Transform();
      _this.delta = new dragonBones.Transform();
      _this.result = new dragonBones.Transform();
      return _this;
    }

    BonePose.toString = function () {
      return "[class dragonBones.BonePose]";
    };

    BonePose.prototype._onClear = function () {
      this.current.identity();
      this.delta.identity();
      this.result.identity();
    };

    return BonePose;
  }(dragonBones.BaseObject);

  dragonBones.BonePose = BonePose;
  /**
   * @internal
   */

  var BlendState =
  /** @class */
  function () {
    function BlendState() {}
    /**
     * -1: First blending, 0: No blending, 1: Blending.
     */


    BlendState.prototype.update = function (weight, p_layer) {
      if (this.dirty) {
        if (this.leftWeight > 0.0) {
          if (this.layer !== p_layer) {
            if (this.layerWeight >= this.leftWeight) {
              this.leftWeight = 0.0;
              return 0;
            } else {
              this.layer = p_layer;
              this.leftWeight -= this.layerWeight;
              this.layerWeight = 0.0;
            }
          }
        } else {
          return 0;
        }

        weight *= this.leftWeight;
        this.layerWeight += weight;
        this.blendWeight = weight;
        return 2;
      }

      this.dirty = true;
      this.layer = p_layer;
      this.layerWeight = weight;
      this.leftWeight = 1.0;
      this.blendWeight = weight;
      return 1;
    };

    BlendState.prototype.clear = function () {
      this.dirty = false;
      this.layer = 0;
      this.leftWeight = 0.0;
      this.layerWeight = 0.0;
      this.blendWeight = 0.0;
    };

    return BlendState;
  }();

  dragonBones.BlendState = BlendState;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var TimelineState =
  /** @class */
  function (_super) {
    __extends(TimelineState, _super);

    function TimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    TimelineState.prototype._onClear = function () {
      this.playState = -1;
      this.currentPlayTimes = -1;
      this.currentTime = -1.0;
      this._tweenState = 0
      /* None */
      ;
      this._frameRate = 0;
      this._frameValueOffset = 0;
      this._frameCount = 0;
      this._frameOffset = 0;
      this._frameIndex = -1;
      this._frameRateR = 0.0;
      this._position = 0.0;
      this._duration = 0.0;
      this._timeScale = 1.0;
      this._timeOffset = 0.0;
      this._dragonBonesData = null; //

      this._animationData = null; //

      this._timelineData = null; //

      this._armature = null; //

      this._animationState = null; //

      this._actionTimeline = null; //

      this._frameArray = null; //

      this._frameIntArray = null; //

      this._frameFloatArray = null; //

      this._timelineArray = null; //

      this._frameIndices = null; //
    };

    TimelineState.prototype._setCurrentTime = function (passedTime) {
      var prevState = this.playState;
      var prevPlayTimes = this.currentPlayTimes;
      var prevTime = this.currentTime;

      if (this._actionTimeline !== null && this._frameCount <= 1) {
        // No frame or only one frame.
        this.playState = this._actionTimeline.playState >= 0 ? 1 : -1;
        this.currentPlayTimes = 1;
        this.currentTime = this._actionTimeline.currentTime;
      } else if (this._actionTimeline === null || this._timeScale !== 1.0 || this._timeOffset !== 0.0) {
        // Action timeline or has scale and offset.
        var playTimes = this._animationState.playTimes;
        var totalTime = playTimes * this._duration;
        passedTime *= this._timeScale;

        if (this._timeOffset !== 0.0) {
          passedTime += this._timeOffset * this._animationData.duration;
        }

        if (playTimes > 0 && (passedTime >= totalTime || passedTime <= -totalTime)) {
          if (this.playState <= 0 && this._animationState._playheadState === 3) {
            this.playState = 1;
          }

          this.currentPlayTimes = playTimes;

          if (passedTime < 0.0) {
            this.currentTime = 0.0;
          } else {
            this.currentTime = this._duration + 0.000001; // Precision problem
          }
        } else {
          if (this.playState !== 0 && this._animationState._playheadState === 3) {
            this.playState = 0;
          }

          if (passedTime < 0.0) {
            passedTime = -passedTime;
            this.currentPlayTimes = Math.floor(passedTime / this._duration);
            this.currentTime = this._duration - passedTime % this._duration;
          } else {
            this.currentPlayTimes = Math.floor(passedTime / this._duration);
            this.currentTime = passedTime % this._duration;
          }
        }

        this.currentTime += this._position;
      } else {
        // Multi frames.
        this.playState = this._actionTimeline.playState;
        this.currentPlayTimes = this._actionTimeline.currentPlayTimes;
        this.currentTime = this._actionTimeline.currentTime;
      }

      if (this.currentPlayTimes === prevPlayTimes && this.currentTime === prevTime) {
        return false;
      } // Clear frame flag when timeline start or loopComplete.


      if (prevState < 0 && this.playState !== prevState || this.playState <= 0 && this.currentPlayTimes !== prevPlayTimes) {
        this._frameIndex = -1;
      }

      return true;
    };

    TimelineState.prototype.init = function (armature, animationState, timelineData) {
      this._armature = armature;
      this._animationState = animationState;
      this._timelineData = timelineData;
      this._actionTimeline = this._animationState._actionTimeline;

      if (this === this._actionTimeline) {
        this._actionTimeline = null; //
      }

      this._animationData = this._animationState._animationData;
      this._frameRate = this._animationData.parent.frameRate;
      this._frameRateR = 1.0 / this._frameRate;
      this._position = this._animationState._position;
      this._duration = this._animationState._duration;
      this._dragonBonesData = this._animationData.parent.parent; // May by the animation data is not belone to this armature data.

      if (this._timelineData !== null) {
        this._frameIntArray = this._dragonBonesData.frameIntArray;
        this._frameFloatArray = this._dragonBonesData.frameFloatArray;
        this._frameArray = this._dragonBonesData.frameArray;
        this._timelineArray = this._dragonBonesData.timelineArray;
        this._frameIndices = this._dragonBonesData.frameIndices;
        this._frameCount = this._timelineArray[this._timelineData.offset + 2
        /* TimelineKeyFrameCount */
        ];
        this._frameValueOffset = this._timelineArray[this._timelineData.offset + 4
        /* TimelineFrameValueOffset */
        ];
        this._timeScale = 100.0 / this._timelineArray[this._timelineData.offset + 0
        /* TimelineScale */
        ];
        this._timeOffset = this._timelineArray[this._timelineData.offset + 1
        /* TimelineOffset */
        ] * 0.01;
      }
    };

    TimelineState.prototype.fadeOut = function () {};

    TimelineState.prototype.update = function (passedTime) {
      if (this._setCurrentTime(passedTime)) {
        if (this._frameCount > 1) {
          var timelineFrameIndex = Math.floor(this.currentTime * this._frameRate); // uint

          var frameIndex = this._frameIndices[this._timelineData.frameIndicesOffset + timelineFrameIndex];

          if (this._frameIndex !== frameIndex) {
            this._frameIndex = frameIndex;
            this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5
            /* TimelineFrameOffset */
            + this._frameIndex];

            this._onArriveAtFrame();
          }
        } else if (this._frameIndex < 0) {
          this._frameIndex = 0;

          if (this._timelineData !== null) {
            // May be pose timeline.
            this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5
            /* TimelineFrameOffset */
            ];
          }

          this._onArriveAtFrame();
        }

        if (this._tweenState !== 0
        /* None */
        ) {
            this._onUpdateFrame();
          }
      }
    };

    return TimelineState;
  }(dragonBones.BaseObject);

  dragonBones.TimelineState = TimelineState;
  /**
   * @internal
   */

  var TweenTimelineState =
  /** @class */
  function (_super) {
    __extends(TweenTimelineState, _super);

    function TweenTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    TweenTimelineState._getEasingValue = function (tweenType, progress, easing) {
      var value = progress;

      switch (tweenType) {
        case 3
        /* QuadIn */
        :
          value = Math.pow(progress, 2.0);
          break;

        case 4
        /* QuadOut */
        :
          value = 1.0 - Math.pow(1.0 - progress, 2.0);
          break;

        case 5
        /* QuadInOut */
        :
          value = 0.5 * (1.0 - Math.cos(progress * Math.PI));
          break;
      }

      return (value - progress) * easing + progress;
    };

    TweenTimelineState._getEasingCurveValue = function (progress, samples, count, offset) {
      if (progress <= 0.0) {
        return 0.0;
      } else if (progress >= 1.0) {
        return 1.0;
      }

      var segmentCount = count + 1; // + 2 - 1

      var valueIndex = Math.floor(progress * segmentCount);
      var fromValue = valueIndex === 0 ? 0.0 : samples[offset + valueIndex - 1];
      var toValue = valueIndex === segmentCount - 1 ? 10000.0 : samples[offset + valueIndex];
      return (fromValue + (toValue - fromValue) * (progress * segmentCount - valueIndex)) * 0.0001;
    };

    TweenTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this._tweenType = 0
      /* None */
      ;
      this._curveCount = 0;
      this._framePosition = 0.0;
      this._frameDurationR = 0.0;
      this._tweenProgress = 0.0;
      this._tweenEasing = 0.0;
    };

    TweenTimelineState.prototype._onArriveAtFrame = function () {
      if (this._frameCount > 1 && (this._frameIndex !== this._frameCount - 1 || this._animationState.playTimes === 0 || this._animationState.currentPlayTimes < this._animationState.playTimes - 1)) {
        this._tweenType = this._frameArray[this._frameOffset + 1
        /* FrameTweenType */
        ]; // TODO recode ture tween type.

        this._tweenState = this._tweenType === 0
        /* None */
        ? 1
        /* Once */
        : 2
        /* Always */
        ;

        if (this._tweenType === 2
        /* Curve */
        ) {
            this._curveCount = this._frameArray[this._frameOffset + 2
            /* FrameTweenEasingOrCurveSampleCount */
            ];
          } else if (this._tweenType !== 0
        /* None */
        && this._tweenType !== 1
        /* Line */
        ) {
            this._tweenEasing = this._frameArray[this._frameOffset + 2
            /* FrameTweenEasingOrCurveSampleCount */
            ] * 0.01;
          }

        this._framePosition = this._frameArray[this._frameOffset] * this._frameRateR;

        if (this._frameIndex === this._frameCount - 1) {
          this._frameDurationR = 1.0 / (this._animationData.duration - this._framePosition);
        } else {
          var nextFrameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5
          /* TimelineFrameOffset */
          + this._frameIndex + 1];
          var frameDuration = this._frameArray[nextFrameOffset] * this._frameRateR - this._framePosition;

          if (frameDuration > 0) {
            this._frameDurationR = 1.0 / frameDuration;
          } else {
            this._frameDurationR = 0.0;
          }
        }
      } else {
        this._tweenState = 1
        /* Once */
        ;
      }
    };

    TweenTimelineState.prototype._onUpdateFrame = function () {
      if (this._tweenState === 2
      /* Always */
      ) {
          this._tweenProgress = (this.currentTime - this._framePosition) * this._frameDurationR;

          if (this._tweenType === 2
          /* Curve */
          ) {
              this._tweenProgress = TweenTimelineState._getEasingCurveValue(this._tweenProgress, this._frameArray, this._curveCount, this._frameOffset + 3
              /* FrameCurveSamples */
              );
            } else if (this._tweenType !== 1
          /* Line */
          ) {
              this._tweenProgress = TweenTimelineState._getEasingValue(this._tweenType, this._tweenProgress, this._tweenEasing);
            }
        } else {
        this._tweenProgress = 0.0;
      }
    };

    return TweenTimelineState;
  }(TimelineState);

  dragonBones.TweenTimelineState = TweenTimelineState;
  /**
   * @internal
   */

  var BoneTimelineState =
  /** @class */
  function (_super) {
    __extends(BoneTimelineState, _super);

    function BoneTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    BoneTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.bone = null; //

      this.bonePose = null; //
    };

    BoneTimelineState.prototype.blend = function (state) {
      var blendWeight = this.bone._blendState.blendWeight;
      var animationPose = this.bone.animationPose;
      var result = this.bonePose.result;

      if (state === 2) {
        animationPose.x += result.x * blendWeight;
        animationPose.y += result.y * blendWeight;
        animationPose.rotation += result.rotation * blendWeight;
        animationPose.skew += result.skew * blendWeight;
        animationPose.scaleX += (result.scaleX - 1.0) * blendWeight;
        animationPose.scaleY += (result.scaleY - 1.0) * blendWeight;
      } else if (blendWeight !== 1.0) {
        animationPose.x = result.x * blendWeight;
        animationPose.y = result.y * blendWeight;
        animationPose.rotation = result.rotation * blendWeight;
        animationPose.skew = result.skew * blendWeight;
        animationPose.scaleX = (result.scaleX - 1.0) * blendWeight + 1.0;
        animationPose.scaleY = (result.scaleY - 1.0) * blendWeight + 1.0;
      } else {
        animationPose.x = result.x;
        animationPose.y = result.y;
        animationPose.rotation = result.rotation;
        animationPose.skew = result.skew;
        animationPose.scaleX = result.scaleX;
        animationPose.scaleY = result.scaleY;
      }

      if (this._animationState._fadeState !== 0 || this._animationState._subFadeState !== 0) {
        this.bone._transformDirty = true;
      }
    };

    return BoneTimelineState;
  }(TweenTimelineState);

  dragonBones.BoneTimelineState = BoneTimelineState;
  /**
   * @internal
   */

  var SlotTimelineState =
  /** @class */
  function (_super) {
    __extends(SlotTimelineState, _super);

    function SlotTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    SlotTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.slot = null; //
    };

    return SlotTimelineState;
  }(TweenTimelineState);

  dragonBones.SlotTimelineState = SlotTimelineState;
  /**
   * @internal
   */

  var ConstraintTimelineState =
  /** @class */
  function (_super) {
    __extends(ConstraintTimelineState, _super);

    function ConstraintTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    ConstraintTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.constraint = null; //
    };

    return ConstraintTimelineState;
  }(TweenTimelineState);

  dragonBones.ConstraintTimelineState = ConstraintTimelineState;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var ActionTimelineState =
  /** @class */
  function (_super) {
    __extends(ActionTimelineState, _super);

    function ActionTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    ActionTimelineState.toString = function () {
      return "[class dragonBones.ActionTimelineState]";
    };

    ActionTimelineState.prototype._onCrossFrame = function (frameIndex) {
      var eventDispatcher = this._armature.eventDispatcher;

      if (this._animationState.actionEnabled) {
        var frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5
        /* TimelineFrameOffset */
        + frameIndex];
        var actionCount = this._frameArray[frameOffset + 1];
        var actions = this._animationData.parent.actions; // May be the animaton data not belong to this armature data.

        for (var i = 0; i < actionCount; ++i) {
          var actionIndex = this._frameArray[frameOffset + 2 + i];
          var action = actions[actionIndex];

          if (action.type === 0
          /* Play */
          ) {
              var eventObject = dragonBones.BaseObject.borrowObject(dragonBones.EventObject); // eventObject.time = this._frameArray[frameOffset] * this._frameRateR; // Precision problem

              eventObject.time = this._frameArray[frameOffset] / this._frameRate;
              eventObject.animationState = this._animationState;
              dragonBones.EventObject.actionDataToInstance(action, eventObject, this._armature);

              this._armature._bufferAction(eventObject, true);
            } else {
            var eventType = action.type === 10
            /* Frame */
            ? dragonBones.EventObject.FRAME_EVENT : dragonBones.EventObject.SOUND_EVENT;

            if (action.type === 11
            /* Sound */
            || eventDispatcher.hasDBEventListener(eventType)) {
              var eventObject = dragonBones.BaseObject.borrowObject(dragonBones.EventObject); // eventObject.time = this._frameArray[frameOffset] * this._frameRateR; // Precision problem

              eventObject.time = this._frameArray[frameOffset] / this._frameRate;
              eventObject.animationState = this._animationState;
              dragonBones.EventObject.actionDataToInstance(action, eventObject, this._armature);

              this._armature._dragonBones.bufferEvent(eventObject);
            }
          }
        }
      }
    };

    ActionTimelineState.prototype._onArriveAtFrame = function () {};

    ActionTimelineState.prototype._onUpdateFrame = function () {};

    ActionTimelineState.prototype.update = function (passedTime) {
      var prevState = this.playState;
      var prevPlayTimes = this.currentPlayTimes;
      var prevTime = this.currentTime;

      if (this._setCurrentTime(passedTime)) {
        var eventDispatcher = this._armature.eventDispatcher;

        if (prevState < 0) {
          if (this.playState !== prevState) {
            if (this._animationState.displayControl && this._animationState.resetToPose) {
              // Reset zorder to pose.
              this._armature._sortZOrder(null, 0);
            }

            prevPlayTimes = this.currentPlayTimes;

            if (eventDispatcher.hasDBEventListener(dragonBones.EventObject.START)) {
              var eventObject = dragonBones.BaseObject.borrowObject(dragonBones.EventObject);
              eventObject.type = dragonBones.EventObject.START;
              eventObject.armature = this._armature;
              eventObject.animationState = this._animationState;

              this._armature._dragonBones.bufferEvent(eventObject);
            }
          } else {
            return;
          }
        }

        var isReverse = this._animationState.timeScale < 0.0;
        var loopCompleteEvent = null;
        var completeEvent = null;

        if (this.currentPlayTimes !== prevPlayTimes) {
          if (eventDispatcher.hasDBEventListener(dragonBones.EventObject.LOOP_COMPLETE)) {
            loopCompleteEvent = dragonBones.BaseObject.borrowObject(dragonBones.EventObject);
            loopCompleteEvent.type = dragonBones.EventObject.LOOP_COMPLETE;
            loopCompleteEvent.armature = this._armature;
            loopCompleteEvent.animationState = this._animationState;
          }

          if (this.playState > 0) {
            if (eventDispatcher.hasDBEventListener(dragonBones.EventObject.COMPLETE)) {
              completeEvent = dragonBones.BaseObject.borrowObject(dragonBones.EventObject);
              completeEvent.type = dragonBones.EventObject.COMPLETE;
              completeEvent.armature = this._armature;
              completeEvent.animationState = this._animationState;
            }
          }
        }

        if (this._frameCount > 1) {
          var timelineData = this._timelineData;
          var timelineFrameIndex = Math.floor(this.currentTime * this._frameRate); // uint

          var frameIndex = this._frameIndices[timelineData.frameIndicesOffset + timelineFrameIndex];

          if (this._frameIndex !== frameIndex) {
            // Arrive at frame.                   
            var crossedFrameIndex = this._frameIndex;
            this._frameIndex = frameIndex;

            if (this._timelineArray !== null) {
              this._frameOffset = this._animationData.frameOffset + this._timelineArray[timelineData.offset + 5
              /* TimelineFrameOffset */
              + this._frameIndex];

              if (isReverse) {
                if (crossedFrameIndex < 0) {
                  var prevFrameIndex = Math.floor(prevTime * this._frameRate);
                  crossedFrameIndex = this._frameIndices[timelineData.frameIndicesOffset + prevFrameIndex];

                  if (this.currentPlayTimes === prevPlayTimes) {
                    // Start.
                    if (crossedFrameIndex === frameIndex) {
                      // Uncrossed.
                      crossedFrameIndex = -1;
                    }
                  }
                }

                while (crossedFrameIndex >= 0) {
                  var frameOffset = this._animationData.frameOffset + this._timelineArray[timelineData.offset + 5
                  /* TimelineFrameOffset */
                  + crossedFrameIndex]; // const framePosition = this._frameArray[frameOffset] * this._frameRateR; // Precision problem

                  var framePosition = this._frameArray[frameOffset] / this._frameRate;

                  if (this._position <= framePosition && framePosition <= this._position + this._duration) {
                    // Support interval play.
                    this._onCrossFrame(crossedFrameIndex);
                  }

                  if (loopCompleteEvent !== null && crossedFrameIndex === 0) {
                    // Add loop complete event after first frame.
                    this._armature._dragonBones.bufferEvent(loopCompleteEvent);

                    loopCompleteEvent = null;
                  }

                  if (crossedFrameIndex > 0) {
                    crossedFrameIndex--;
                  } else {
                    crossedFrameIndex = this._frameCount - 1;
                  }

                  if (crossedFrameIndex === frameIndex) {
                    break;
                  }
                }
              } else {
                if (crossedFrameIndex < 0) {
                  var prevFrameIndex = Math.floor(prevTime * this._frameRate);
                  crossedFrameIndex = this._frameIndices[timelineData.frameIndicesOffset + prevFrameIndex];
                  var frameOffset = this._animationData.frameOffset + this._timelineArray[timelineData.offset + 5
                  /* TimelineFrameOffset */
                  + crossedFrameIndex]; // const framePosition = this._frameArray[frameOffset] * this._frameRateR; // Precision problem

                  var framePosition = this._frameArray[frameOffset] / this._frameRate;

                  if (this.currentPlayTimes === prevPlayTimes) {
                    // Start.
                    if (prevTime <= framePosition) {
                      // Crossed.
                      if (crossedFrameIndex > 0) {
                        crossedFrameIndex--;
                      } else {
                        crossedFrameIndex = this._frameCount - 1;
                      }
                    } else if (crossedFrameIndex === frameIndex) {
                      // Uncrossed.
                      crossedFrameIndex = -1;
                    }
                  }
                }

                while (crossedFrameIndex >= 0) {
                  if (crossedFrameIndex < this._frameCount - 1) {
                    crossedFrameIndex++;
                  } else {
                    crossedFrameIndex = 0;
                  }

                  var frameOffset = this._animationData.frameOffset + this._timelineArray[timelineData.offset + 5
                  /* TimelineFrameOffset */
                  + crossedFrameIndex]; // const framePosition = this._frameArray[frameOffset] * this._frameRateR; // Precision problem

                  var framePosition = this._frameArray[frameOffset] / this._frameRate;

                  if (this._position <= framePosition && framePosition <= this._position + this._duration) {
                    // Support interval play.
                    this._onCrossFrame(crossedFrameIndex);
                  }

                  if (loopCompleteEvent !== null && crossedFrameIndex === 0) {
                    // Add loop complete event before first frame.
                    this._armature._dragonBones.bufferEvent(loopCompleteEvent);

                    loopCompleteEvent = null;
                  }

                  if (crossedFrameIndex === frameIndex) {
                    break;
                  }
                }
              }
            }
          }
        } else if (this._frameIndex < 0) {
          this._frameIndex = 0;

          if (this._timelineData !== null) {
            this._frameOffset = this._animationData.frameOffset + this._timelineArray[this._timelineData.offset + 5
            /* TimelineFrameOffset */
            ]; // Arrive at frame.

            var framePosition = this._frameArray[this._frameOffset] / this._frameRate;

            if (this.currentPlayTimes === prevPlayTimes) {
              // Start.
              if (prevTime <= framePosition) {
                this._onCrossFrame(this._frameIndex);
              }
            } else if (this._position <= framePosition) {
              // Loop complete.
              if (!isReverse && loopCompleteEvent !== null) {
                // Add loop complete event before first frame.
                this._armature._dragonBones.bufferEvent(loopCompleteEvent);

                loopCompleteEvent = null;
              }

              this._onCrossFrame(this._frameIndex);
            }
          }
        }

        if (loopCompleteEvent !== null) {
          this._armature._dragonBones.bufferEvent(loopCompleteEvent);
        }

        if (completeEvent !== null) {
          this._armature._dragonBones.bufferEvent(completeEvent);
        }
      }
    };

    ActionTimelineState.prototype.setCurrentTime = function (value) {
      this._setCurrentTime(value);

      this._frameIndex = -1;
    };

    return ActionTimelineState;
  }(dragonBones.TimelineState);

  dragonBones.ActionTimelineState = ActionTimelineState;
  /**
   * @internal
   */

  var ZOrderTimelineState =
  /** @class */
  function (_super) {
    __extends(ZOrderTimelineState, _super);

    function ZOrderTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    ZOrderTimelineState.toString = function () {
      return "[class dragonBones.ZOrderTimelineState]";
    };

    ZOrderTimelineState.prototype._onArriveAtFrame = function () {
      if (this.playState >= 0) {
        var count = this._frameArray[this._frameOffset + 1];

        if (count > 0) {
          this._armature._sortZOrder(this._frameArray, this._frameOffset + 2);
        } else {
          this._armature._sortZOrder(null, 0);
        }
      }
    };

    ZOrderTimelineState.prototype._onUpdateFrame = function () {};

    return ZOrderTimelineState;
  }(dragonBones.TimelineState);

  dragonBones.ZOrderTimelineState = ZOrderTimelineState;
  /**
   * @internal
   */

  var BoneAllTimelineState =
  /** @class */
  function (_super) {
    __extends(BoneAllTimelineState, _super);

    function BoneAllTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    BoneAllTimelineState.toString = function () {
      return "[class dragonBones.BoneAllTimelineState]";
    };

    BoneAllTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData !== null) {
        var valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * 6; // ...(timeline value offset)|xxxxxx|xxxxxx|(Value offset)xxxxx|(Next offset)xxxxx|xxxxxx|xxxxxx|...

        var scale = this._armature._armatureData.scale;
        var frameFloatArray = this._frameFloatArray;
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.x = frameFloatArray[valueOffset++] * scale;
        current.y = frameFloatArray[valueOffset++] * scale;
        current.rotation = frameFloatArray[valueOffset++];
        current.skew = frameFloatArray[valueOffset++];
        current.scaleX = frameFloatArray[valueOffset++];
        current.scaleY = frameFloatArray[valueOffset++];

        if (this._tweenState === 2
        /* Always */
        ) {
            if (this._frameIndex === this._frameCount - 1) {
              valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset; // + 0 * 6
            }

            delta.x = frameFloatArray[valueOffset++] * scale - current.x;
            delta.y = frameFloatArray[valueOffset++] * scale - current.y;
            delta.rotation = frameFloatArray[valueOffset++] - current.rotation;
            delta.skew = frameFloatArray[valueOffset++] - current.skew;
            delta.scaleX = frameFloatArray[valueOffset++] - current.scaleX;
            delta.scaleY = frameFloatArray[valueOffset++] - current.scaleY;
          } else {
          delta.x = 0.0;
          delta.y = 0.0;
          delta.rotation = 0.0;
          delta.skew = 0.0;
          delta.scaleX = 0.0;
          delta.scaleY = 0.0;
        }
      } else {
        // Pose.
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.x = 0.0;
        current.y = 0.0;
        current.rotation = 0.0;
        current.skew = 0.0;
        current.scaleX = 1.0;
        current.scaleY = 1.0;
        delta.x = 0.0;
        delta.y = 0.0;
        delta.rotation = 0.0;
        delta.skew = 0.0;
        delta.scaleX = 0.0;
        delta.scaleY = 0.0;
      }
    };

    BoneAllTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      var current = this.bonePose.current;
      var delta = this.bonePose.delta;
      var result = this.bonePose.result;
      this.bone._transformDirty = true;

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      result.x = current.x + delta.x * this._tweenProgress;
      result.y = current.y + delta.y * this._tweenProgress;
      result.rotation = current.rotation + delta.rotation * this._tweenProgress;
      result.skew = current.skew + delta.skew * this._tweenProgress;
      result.scaleX = current.scaleX + delta.scaleX * this._tweenProgress;
      result.scaleY = current.scaleY + delta.scaleY * this._tweenProgress;
    };

    BoneAllTimelineState.prototype.fadeOut = function () {
      var result = this.bonePose.result;
      result.rotation = dragonBones.Transform.normalizeRadian(result.rotation);
      result.skew = dragonBones.Transform.normalizeRadian(result.skew);
    };

    return BoneAllTimelineState;
  }(dragonBones.BoneTimelineState);

  dragonBones.BoneAllTimelineState = BoneAllTimelineState;
  /**
   * @internal
   */

  var BoneTranslateTimelineState =
  /** @class */
  function (_super) {
    __extends(BoneTranslateTimelineState, _super);

    function BoneTranslateTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    BoneTranslateTimelineState.toString = function () {
      return "[class dragonBones.BoneTranslateTimelineState]";
    };

    BoneTranslateTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData !== null) {
        var valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * 2;
        var scale = this._armature._armatureData.scale;
        var frameFloatArray = this._frameFloatArray;
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.x = frameFloatArray[valueOffset++] * scale;
        current.y = frameFloatArray[valueOffset++] * scale;

        if (this._tweenState === 2
        /* Always */
        ) {
            if (this._frameIndex === this._frameCount - 1) {
              valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset; // + 0 * 2
            }

            delta.x = frameFloatArray[valueOffset++] * scale - current.x;
            delta.y = frameFloatArray[valueOffset++] * scale - current.y;
          } else {
          delta.x = 0.0;
          delta.y = 0.0;
        }
      } else {
        // Pose.
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.x = 0.0;
        current.y = 0.0;
        delta.x = 0.0;
        delta.y = 0.0;
      }
    };

    BoneTranslateTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      var current = this.bonePose.current;
      var delta = this.bonePose.delta;
      var result = this.bonePose.result;
      this.bone._transformDirty = true;

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      result.x = current.x + delta.x * this._tweenProgress;
      result.y = current.y + delta.y * this._tweenProgress;
    };

    return BoneTranslateTimelineState;
  }(dragonBones.BoneTimelineState);

  dragonBones.BoneTranslateTimelineState = BoneTranslateTimelineState;
  /**
   * @internal
   */

  var BoneRotateTimelineState =
  /** @class */
  function (_super) {
    __extends(BoneRotateTimelineState, _super);

    function BoneRotateTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    BoneRotateTimelineState.toString = function () {
      return "[class dragonBones.BoneRotateTimelineState]";
    };

    BoneRotateTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData !== null) {
        var valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * 2;
        var frameFloatArray = this._frameFloatArray;
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.rotation = frameFloatArray[valueOffset++];
        current.skew = frameFloatArray[valueOffset++];

        if (this._tweenState === 2
        /* Always */
        ) {
            if (this._frameIndex === this._frameCount - 1) {
              valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset; // + 0 * 2

              delta.rotation = dragonBones.Transform.normalizeRadian(frameFloatArray[valueOffset++] - current.rotation);
            } else {
              delta.rotation = frameFloatArray[valueOffset++] - current.rotation;
            }

            delta.skew = frameFloatArray[valueOffset++] - current.skew;
          } else {
          delta.rotation = 0.0;
          delta.skew = 0.0;
        }
      } else {
        // Pose.
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.rotation = 0.0;
        current.skew = 0.0;
        delta.rotation = 0.0;
        delta.skew = 0.0;
      }
    };

    BoneRotateTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      var current = this.bonePose.current;
      var delta = this.bonePose.delta;
      var result = this.bonePose.result;
      this.bone._transformDirty = true;

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      result.rotation = current.rotation + delta.rotation * this._tweenProgress;
      result.skew = current.skew + delta.skew * this._tweenProgress;
    };

    BoneRotateTimelineState.prototype.fadeOut = function () {
      var result = this.bonePose.result;
      result.rotation = dragonBones.Transform.normalizeRadian(result.rotation);
      result.skew = dragonBones.Transform.normalizeRadian(result.skew);
    };

    return BoneRotateTimelineState;
  }(dragonBones.BoneTimelineState);

  dragonBones.BoneRotateTimelineState = BoneRotateTimelineState;
  /**
   * @internal
   */

  var BoneScaleTimelineState =
  /** @class */
  function (_super) {
    __extends(BoneScaleTimelineState, _super);

    function BoneScaleTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    BoneScaleTimelineState.toString = function () {
      return "[class dragonBones.BoneScaleTimelineState]";
    };

    BoneScaleTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData !== null) {
        var valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * 2;
        var frameFloatArray = this._frameFloatArray;
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.scaleX = frameFloatArray[valueOffset++];
        current.scaleY = frameFloatArray[valueOffset++];

        if (this._tweenState === 2
        /* Always */
        ) {
            if (this._frameIndex === this._frameCount - 1) {
              valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset; // + 0 * 2
            }

            delta.scaleX = frameFloatArray[valueOffset++] - current.scaleX;
            delta.scaleY = frameFloatArray[valueOffset++] - current.scaleY;
          } else {
          delta.scaleX = 0.0;
          delta.scaleY = 0.0;
        }
      } else {
        // Pose.
        var current = this.bonePose.current;
        var delta = this.bonePose.delta;
        current.scaleX = 1.0;
        current.scaleY = 1.0;
        delta.scaleX = 0.0;
        delta.scaleY = 0.0;
      }
    };

    BoneScaleTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      var current = this.bonePose.current;
      var delta = this.bonePose.delta;
      var result = this.bonePose.result;
      this.bone._transformDirty = true;

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      result.scaleX = current.scaleX + delta.scaleX * this._tweenProgress;
      result.scaleY = current.scaleY + delta.scaleY * this._tweenProgress;
    };

    return BoneScaleTimelineState;
  }(dragonBones.BoneTimelineState);

  dragonBones.BoneScaleTimelineState = BoneScaleTimelineState;
  /**
   * @internal
   */

  var SurfaceTimelineState =
  /** @class */
  function (_super) {
    __extends(SurfaceTimelineState, _super);

    function SurfaceTimelineState() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._current = [];
      _this._delta = [];
      _this._result = [];
      return _this;
    }

    SurfaceTimelineState.toString = function () {
      return "[class dragonBones.SurfaceTimelineState]";
    };

    SurfaceTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.surface = null;
      this._frameFloatOffset = 0;
      this._valueCount = 0;
      this._deformCount = 0;
      this._valueOffset = 0;
      this._current.length = 0;
      this._delta.length = 0;
      this._result.length = 0;
    };

    SurfaceTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData !== null) {
        var valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount;
        var scale = this._armature._armatureData.scale;
        var frameFloatArray = this._frameFloatArray;

        if (this._tweenState === 2
        /* Always */
        ) {
            var nextValueOffset = valueOffset + this._valueCount;

            if (this._frameIndex === this._frameCount - 1) {
              nextValueOffset = this._animationData.frameFloatOffset + this._frameValueOffset;
            }

            for (var i = 0; i < this._valueCount; ++i) {
              this._delta[i] = frameFloatArray[nextValueOffset + i] * scale - (this._current[i] = frameFloatArray[valueOffset + i] * scale);
            }
          } else {
          for (var i = 0; i < this._valueCount; ++i) {
            this._current[i] = frameFloatArray[valueOffset + i] * scale;
          }
        }
      } else {
        for (var i = 0; i < this._valueCount; ++i) {
          this._current[i] = 0.0;
        }
      }
    };

    SurfaceTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      this.surface._transformDirty = true;

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      for (var i = 0; i < this._valueCount; ++i) {
        this._result[i] = this._current[i] + this._delta[i] * this._tweenProgress;
      }
    };

    SurfaceTimelineState.prototype.init = function (armature, animationState, timelineData) {
      _super.prototype.init.call(this, armature, animationState, timelineData);

      if (this._timelineData !== null) {
        var frameIntOffset = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3
        /* TimelineFrameValueCount */
        ];
        this._deformCount = this._frameIntArray[frameIntOffset + 1
        /* DeformCount */
        ];
        this._valueCount = this._frameIntArray[frameIntOffset + 2
        /* DeformValueCount */
        ];
        this._valueOffset = this._frameIntArray[frameIntOffset + 3
        /* DeformValueOffset */
        ];
        this._frameFloatOffset = this._frameIntArray[frameIntOffset + 4
        /* DeformFloatOffset */
        ] + this._animationData.frameFloatOffset;
      } else {
        this._deformCount = this.surface._deformVertices.length;
        this._valueCount = this._deformCount;
        this._valueOffset = 0;
        this._frameFloatOffset = 0;
      }

      this._current.length = this._valueCount;
      this._delta.length = this._valueCount;
      this._result.length = this._valueCount;

      for (var i = 0; i < this._valueCount; ++i) {
        this._delta[i] = 0.0;
      }
    };

    SurfaceTimelineState.prototype.blend = function (state) {
      var blendWeight = this.surface._blendState.blendWeight;
      var result = this.surface._deformVertices;

      for (var i = 0; i < this._deformCount; ++i) {
        var value = 0.0;

        if (i < this._valueOffset) {
          value = this._frameFloatArray[this._frameFloatOffset + i];
        } else if (i < this._valueOffset + this._valueCount) {
          value = this._result[i - this._valueOffset];
        } else {
          value = this._frameFloatArray[this._frameFloatOffset + i - this._valueCount];
        }

        if (state === 2) {
          result[i] += value * blendWeight;
        } else if (blendWeight !== 1.0) {
          result[i] = value * blendWeight;
        } else {
          result[i] = value;
        }
      }

      if (this._animationState._fadeState !== 0 || this._animationState._subFadeState !== 0) {
        this.surface._transformDirty = true;
      }
    };

    return SurfaceTimelineState;
  }(dragonBones.TweenTimelineState);

  dragonBones.SurfaceTimelineState = SurfaceTimelineState;
  /**
   * @internal
   */

  var SlotDislayTimelineState =
  /** @class */
  function (_super) {
    __extends(SlotDislayTimelineState, _super);

    function SlotDislayTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    SlotDislayTimelineState.toString = function () {
      return "[class dragonBones.SlotDislayTimelineState]";
    };

    SlotDislayTimelineState.prototype._onArriveAtFrame = function () {
      if (this.playState >= 0) {
        var displayIndex = this._timelineData !== null ? this._frameArray[this._frameOffset + 1] : this.slot._slotData.displayIndex;

        if (this.slot.displayIndex !== displayIndex) {
          this.slot._setDisplayIndex(displayIndex, true);
        }
      }
    };

    return SlotDislayTimelineState;
  }(dragonBones.SlotTimelineState);

  dragonBones.SlotDislayTimelineState = SlotDislayTimelineState;
  /**
   * @internal
   */

  var SlotColorTimelineState =
  /** @class */
  function (_super) {
    __extends(SlotColorTimelineState, _super);

    function SlotColorTimelineState() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._current = [0, 0, 0, 0, 0, 0, 0, 0];
      _this._delta = [0, 0, 0, 0, 0, 0, 0, 0];
      _this._result = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
      return _this;
    }

    SlotColorTimelineState.toString = function () {
      return "[class dragonBones.SlotColorTimelineState]";
    };

    SlotColorTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this._dirty = false;
    };

    SlotColorTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData !== null) {
        var intArray = this._dragonBonesData.intArray;
        var frameIntArray = this._frameIntArray;
        var valueOffset = this._animationData.frameIntOffset + this._frameValueOffset + this._frameIndex * 1; // ...(timeline value offset)|x|x|(Value offset)|(Next offset)|x|x|...

        var colorOffset = frameIntArray[valueOffset];

        if (colorOffset < 0) {
          colorOffset += 65536; // Fixed out of bouds bug. 
        }

        this._current[0] = intArray[colorOffset++];
        this._current[1] = intArray[colorOffset++];
        this._current[2] = intArray[colorOffset++];
        this._current[3] = intArray[colorOffset++];
        this._current[4] = intArray[colorOffset++];
        this._current[5] = intArray[colorOffset++];
        this._current[6] = intArray[colorOffset++];
        this._current[7] = intArray[colorOffset++];

        if (this._tweenState === 2
        /* Always */
        ) {
            if (this._frameIndex === this._frameCount - 1) {
              colorOffset = frameIntArray[this._animationData.frameIntOffset + this._frameValueOffset];
            } else {
              colorOffset = frameIntArray[valueOffset + 1 * 1];
            }

            if (colorOffset < 0) {
              colorOffset += 65536; // Fixed out of bouds bug. 
            }

            this._delta[0] = intArray[colorOffset++] - this._current[0];
            this._delta[1] = intArray[colorOffset++] - this._current[1];
            this._delta[2] = intArray[colorOffset++] - this._current[2];
            this._delta[3] = intArray[colorOffset++] - this._current[3];
            this._delta[4] = intArray[colorOffset++] - this._current[4];
            this._delta[5] = intArray[colorOffset++] - this._current[5];
            this._delta[6] = intArray[colorOffset++] - this._current[6];
            this._delta[7] = intArray[colorOffset++] - this._current[7];
          }
      } else {
        // Pose.
        var color = this.slot._slotData.color;
        this._current[0] = color.alphaMultiplier * 100.0;
        this._current[1] = color.redMultiplier * 100.0;
        this._current[2] = color.greenMultiplier * 100.0;
        this._current[3] = color.blueMultiplier * 100.0;
        this._current[4] = color.alphaOffset;
        this._current[5] = color.redOffset;
        this._current[6] = color.greenOffset;
        this._current[7] = color.blueOffset;
      }
    };

    SlotColorTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      this._dirty = true;

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      this._result[0] = (this._current[0] + this._delta[0] * this._tweenProgress) * 0.01;
      this._result[1] = (this._current[1] + this._delta[1] * this._tweenProgress) * 0.01;
      this._result[2] = (this._current[2] + this._delta[2] * this._tweenProgress) * 0.01;
      this._result[3] = (this._current[3] + this._delta[3] * this._tweenProgress) * 0.01;
      this._result[4] = this._current[4] + this._delta[4] * this._tweenProgress;
      this._result[5] = this._current[5] + this._delta[5] * this._tweenProgress;
      this._result[6] = this._current[6] + this._delta[6] * this._tweenProgress;
      this._result[7] = this._current[7] + this._delta[7] * this._tweenProgress;
    };

    SlotColorTimelineState.prototype.fadeOut = function () {
      this._tweenState = 0
      /* None */
      ;
      this._dirty = false;
    };

    SlotColorTimelineState.prototype.update = function (passedTime) {
      _super.prototype.update.call(this, passedTime); // Fade animation.


      if (this._tweenState !== 0
      /* None */
      || this._dirty) {
        var result = this.slot._colorTransform;

        if (this._animationState._fadeState !== 0 || this._animationState._subFadeState !== 0) {
          if (result.alphaMultiplier !== this._result[0] || result.redMultiplier !== this._result[1] || result.greenMultiplier !== this._result[2] || result.blueMultiplier !== this._result[3] || result.alphaOffset !== this._result[4] || result.redOffset !== this._result[5] || result.greenOffset !== this._result[6] || result.blueOffset !== this._result[7]) {
            var fadeProgress = Math.pow(this._animationState._fadeProgress, 4);
            result.alphaMultiplier += (this._result[0] - result.alphaMultiplier) * fadeProgress;
            result.redMultiplier += (this._result[1] - result.redMultiplier) * fadeProgress;
            result.greenMultiplier += (this._result[2] - result.greenMultiplier) * fadeProgress;
            result.blueMultiplier += (this._result[3] - result.blueMultiplier) * fadeProgress;
            result.alphaOffset += (this._result[4] - result.alphaOffset) * fadeProgress;
            result.redOffset += (this._result[5] - result.redOffset) * fadeProgress;
            result.greenOffset += (this._result[6] - result.greenOffset) * fadeProgress;
            result.blueOffset += (this._result[7] - result.blueOffset) * fadeProgress;
            this.slot._colorDirty = true;
          }
        } else if (this._dirty) {
          this._dirty = false;

          if (result.alphaMultiplier !== this._result[0] || result.redMultiplier !== this._result[1] || result.greenMultiplier !== this._result[2] || result.blueMultiplier !== this._result[3] || result.alphaOffset !== this._result[4] || result.redOffset !== this._result[5] || result.greenOffset !== this._result[6] || result.blueOffset !== this._result[7]) {
            result.alphaMultiplier = this._result[0];
            result.redMultiplier = this._result[1];
            result.greenMultiplier = this._result[2];
            result.blueMultiplier = this._result[3];
            result.alphaOffset = this._result[4];
            result.redOffset = this._result[5];
            result.greenOffset = this._result[6];
            result.blueOffset = this._result[7];
            this.slot._colorDirty = true;
          }
        }
      }
    };

    return SlotColorTimelineState;
  }(dragonBones.SlotTimelineState);

  dragonBones.SlotColorTimelineState = SlotColorTimelineState;
  /**
   * @internal
   */

  var DeformTimelineState =
  /** @class */
  function (_super) {
    __extends(DeformTimelineState, _super);

    function DeformTimelineState() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._current = [];
      _this._delta = [];
      _this._result = [];
      return _this;
    }

    DeformTimelineState.toString = function () {
      return "[class dragonBones.DeformTimelineState]";
    };

    DeformTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.vertexOffset = 0;
      this._dirty = false;
      this._frameFloatOffset = 0;
      this._valueCount = 0;
      this._deformCount = 0;
      this._valueOffset = 0;
      this._current.length = 0;
      this._delta.length = 0;
      this._result.length = 0;
    };

    DeformTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData !== null) {
        var valueOffset = this._animationData.frameFloatOffset + this._frameValueOffset + this._frameIndex * this._valueCount;
        var scale = this._armature._armatureData.scale;
        var frameFloatArray = this._frameFloatArray;

        if (this._tweenState === 2
        /* Always */
        ) {
            var nextValueOffset = valueOffset + this._valueCount;

            if (this._frameIndex === this._frameCount - 1) {
              nextValueOffset = this._animationData.frameFloatOffset + this._frameValueOffset;
            }

            for (var i = 0; i < this._valueCount; ++i) {
              this._delta[i] = frameFloatArray[nextValueOffset + i] * scale - (this._current[i] = frameFloatArray[valueOffset + i] * scale);
            }
          } else {
          for (var i = 0; i < this._valueCount; ++i) {
            this._current[i] = frameFloatArray[valueOffset + i] * scale;
          }
        }
      } else {
        for (var i = 0; i < this._valueCount; ++i) {
          this._current[i] = 0.0;
        }
      }
    };

    DeformTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      this._dirty = true;

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      for (var i = 0; i < this._valueCount; ++i) {
        this._result[i] = this._current[i] + this._delta[i] * this._tweenProgress;
      }
    };

    DeformTimelineState.prototype.init = function (armature, animationState, timelineData) {
      _super.prototype.init.call(this, armature, animationState, timelineData);

      if (this._timelineData !== null) {
        var frameIntOffset = this._animationData.frameIntOffset + this._timelineArray[this._timelineData.offset + 3
        /* TimelineFrameValueCount */
        ];
        this.vertexOffset = this._frameIntArray[frameIntOffset + 0
        /* DeformVertexOffset */
        ];

        if (this.vertexOffset < 0) {
          this.vertexOffset += 65536; // Fixed out of bouds bug. 
        }

        this._deformCount = this._frameIntArray[frameIntOffset + 1
        /* DeformCount */
        ];
        this._valueCount = this._frameIntArray[frameIntOffset + 2
        /* DeformValueCount */
        ];
        this._valueOffset = this._frameIntArray[frameIntOffset + 3
        /* DeformValueOffset */
        ];
        this._frameFloatOffset = this._frameIntArray[frameIntOffset + 4
        /* DeformFloatOffset */
        ] + this._animationData.frameFloatOffset;
      } else {
        var deformVertices = this.slot._deformVertices;
        this._deformCount = deformVertices !== null ? deformVertices.vertices.length : 0;
        this._valueCount = this._deformCount;
        this._valueOffset = 0;
        this._frameFloatOffset = 0;
      }

      this._current.length = this._valueCount;
      this._delta.length = this._valueCount;
      this._result.length = this._valueCount;

      for (var i = 0; i < this._valueCount; ++i) {
        this._delta[i] = 0.0;
      }
    };

    DeformTimelineState.prototype.fadeOut = function () {
      this._tweenState = 0
      /* None */
      ;
      this._dirty = false;
    };

    DeformTimelineState.prototype.update = function (passedTime) {
      var deformVertices = this.slot._deformVertices;

      if (deformVertices === null || deformVertices.verticesData === null || deformVertices.verticesData.offset !== this.vertexOffset) {
        return;
      }

      _super.prototype.update.call(this, passedTime); // Fade animation.


      if (this._tweenState !== 0
      /* None */
      || this._dirty) {
        var result = deformVertices.vertices;

        if (this._animationState._fadeState !== 0 || this._animationState._subFadeState !== 0) {
          var fadeProgress = Math.pow(this._animationState._fadeProgress, 2);

          for (var i = 0; i < this._deformCount; ++i) {
            if (i < this._valueOffset) {
              result[i] += (this._frameFloatArray[this._frameFloatOffset + i] - result[i]) * fadeProgress;
            } else if (i < this._valueOffset + this._valueCount) {
              result[i] += (this._result[i - this._valueOffset] - result[i]) * fadeProgress;
            } else {
              result[i] += (this._frameFloatArray[this._frameFloatOffset + i - this._valueCount] - result[i]) * fadeProgress;
            }
          }

          deformVertices.verticesDirty = true;
        } else if (this._dirty) {
          this._dirty = false;

          for (var i = 0; i < this._deformCount; ++i) {
            if (i < this._valueOffset) {
              result[i] = this._frameFloatArray[this._frameFloatOffset + i];
            } else if (i < this._valueOffset + this._valueCount) {
              result[i] = this._result[i - this._valueOffset];
            } else {
              result[i] = this._frameFloatArray[this._frameFloatOffset + i - this._valueCount];
            }
          }

          deformVertices.verticesDirty = true;
        }
      }
    };

    return DeformTimelineState;
  }(dragonBones.SlotTimelineState);

  dragonBones.DeformTimelineState = DeformTimelineState;
  /**
   * @internal
   */

  var IKConstraintTimelineState =
  /** @class */
  function (_super) {
    __extends(IKConstraintTimelineState, _super);

    function IKConstraintTimelineState() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    IKConstraintTimelineState.toString = function () {
      return "[class dragonBones.IKConstraintTimelineState]";
    };

    IKConstraintTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this._current = 0.0;
      this._delta = 0.0;
    };

    IKConstraintTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      var ikConstraint = this.constraint;

      if (this._timelineData !== null) {
        var valueOffset = this._animationData.frameIntOffset + this._frameValueOffset + this._frameIndex * 2;
        var frameIntArray = this._frameIntArray;
        var bendPositive = frameIntArray[valueOffset++] !== 0;
        this._current = frameIntArray[valueOffset++] * 0.01;

        if (this._tweenState === 2
        /* Always */
        ) {
            if (this._frameIndex === this._frameCount - 1) {
              valueOffset = this._animationData.frameIntOffset + this._frameValueOffset; // + 0 * 2
            }

            this._delta = frameIntArray[valueOffset + 1] * 0.01 - this._current;
          } else {
          this._delta = 0.0;
        }

        ikConstraint._bendPositive = bendPositive;
      } else {
        var ikConstraintData = ikConstraint._constraintData;
        this._current = ikConstraintData.weight;
        this._delta = 0.0;
        ikConstraint._bendPositive = ikConstraintData.bendPositive;
      }

      ikConstraint.invalidUpdate();
    };

    IKConstraintTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      var ikConstraint = this.constraint;
      ikConstraint._weight = this._current + this._delta * this._tweenProgress;
      ikConstraint.invalidUpdate(); // TODO fade update.
    };

    return IKConstraintTimelineState;
  }(dragonBones.ConstraintTimelineState);

  dragonBones.IKConstraintTimelineState = IKConstraintTimelineState;
  /**
   * @internal
   */

  var AnimationTimelineState =
  /** @class */
  function (_super) {
    __extends(AnimationTimelineState, _super);

    function AnimationTimelineState() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._floats = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
      return _this;
    }

    AnimationTimelineState.toString = function () {
      return "[class dragonBones.AnimationTimelineState]";
    };

    AnimationTimelineState.prototype._onClear = function () {
      _super.prototype._onClear.call(this);

      this.animationState = null;
    };

    AnimationTimelineState.prototype._onArriveAtFrame = function () {
      _super.prototype._onArriveAtFrame.call(this);

      if (this._timelineData === null) {
        return;
      }

      var valueOffset = this._animationData.frameIntOffset + this._frameValueOffset + this._frameIndex * 2;
      var frameRateR = 1.0 / this.animationState._animationData.parent.frameRate;
      var frameIntArray = this._frameIntArray;
      this._floats[0] = frameIntArray[valueOffset++] * frameRateR;
      this._floats[3] = frameIntArray[valueOffset++] * 0.01;

      if (this._tweenState === 2
      /* Always */
      ) {
          if (this._frameIndex === this._frameCount - 1) {
            valueOffset = this._animationData.frameIntOffset + this._frameValueOffset; // + 0 * 2
          }

          this._floats[1] = frameIntArray[valueOffset++] * frameRateR - this._floats[0];
          this._floats[4] = frameIntArray[valueOffset++] * 0.01 - this._floats[3];
        } else {
        this._floats[1] = 0.0;
        this._floats[4] = 0.0;
      }
    };

    AnimationTimelineState.prototype._onUpdateFrame = function () {
      _super.prototype._onUpdateFrame.call(this);

      if (this._tweenState !== 2
      /* Always */
      ) {
          this._tweenState = 0
          /* None */
          ;
        }

      if (this._floats[0] >= 0.0) {
        this._floats[2] = this._floats[0] + this._floats[1] * this._tweenProgress;
      }

      this._floats[5] = this._floats[3] + this._floats[4] * this._tweenProgress;
    };

    AnimationTimelineState.prototype.blend = function (state) {
      var animationState = this.animationState;
      var blendWeight = animationState._blendState.blendWeight;

      if (state === 2) {
        animationState.weight += this._floats[5] * blendWeight;
        animationState.currentTime += this._floats[2] * blendWeight;
      } else {
        animationState.weight = this._floats[5] * blendWeight;
        animationState.currentTime = this._floats[2] * blendWeight;
      }
    };

    return AnimationTimelineState;
  }(dragonBones.TweenTimelineState);

  dragonBones.AnimationTimelineState = AnimationTimelineState;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - The properties of the object carry basic information about an event,
   * which are passed as parameter or parameter's parameter to event listeners when an event occurs.
   * @version DragonBones 4.5
   * @language en_US
   */

  /**
   * - 事件对象，包含有关事件的基本信息，当发生事件时，该实例将作为参数或参数的参数传递给事件侦听器。
   * @version DragonBones 4.5
   * @language zh_CN
   */
  var EventObject =
  /** @class */
  function (_super) {
    __extends(EventObject, _super);

    function EventObject() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @internal
     * @private
     */


    EventObject.actionDataToInstance = function (data, instance, armature) {
      if (data.type === 0
      /* Play */
      ) {
          instance.type = EventObject.FRAME_EVENT;
        } else {
        instance.type = data.type === 10
        /* Frame */
        ? EventObject.FRAME_EVENT : EventObject.SOUND_EVENT;
      }

      instance.name = data.name;
      instance.armature = armature;
      instance.actionData = data;
      instance.data = data.data;

      if (data.bone !== null) {
        instance.bone = armature.getBone(data.bone.name);
      }

      if (data.slot !== null) {
        instance.slot = armature.getSlot(data.slot.name);
      }
    };

    EventObject.toString = function () {
      return "[class dragonBones.EventObject]";
    };

    EventObject.prototype._onClear = function () {
      this.time = 0.0;
      this.type = "";
      this.name = "";
      this.armature = null;
      this.bone = null;
      this.slot = null;
      this.animationState = null;
      this.actionData = null;
      this.data = null;
    };
    /**
     * - Animation start play.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画开始播放。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    EventObject.START = "start";
    /**
     * - Animation loop play complete once.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画循环播放完成一次。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.LOOP_COMPLETE = "loopComplete";
    /**
     * - Animation play complete.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画播放完成。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.COMPLETE = "complete";
    /**
     * - Animation fade in start.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画淡入开始。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.FADE_IN = "fadeIn";
    /**
     * - Animation fade in complete.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画淡入完成。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.FADE_IN_COMPLETE = "fadeInComplete";
    /**
     * - Animation fade out start.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画淡出开始。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.FADE_OUT = "fadeOut";
    /**
     * - Animation fade out complete.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画淡出完成。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.FADE_OUT_COMPLETE = "fadeOutComplete";
    /**
     * - Animation frame event.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画帧事件。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.FRAME_EVENT = "frameEvent";
    /**
     * - Animation frame sound event.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 动画帧声音事件。
     * @version DragonBones 4.5
     * @language zh_CN
     */

    EventObject.SOUND_EVENT = "soundEvent";
    return EventObject;
  }(dragonBones.BaseObject);

  dragonBones.EventObject = EventObject;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var DataParser =
  /** @class */
  function () {
    function DataParser() {}

    DataParser._getArmatureType = function (value) {
      switch (value.toLowerCase()) {
        case "stage":
          return 2
          /* Stage */
          ;

        case "armature":
          return 0
          /* Armature */
          ;

        case "movieclip":
          return 1
          /* MovieClip */
          ;

        default:
          return 0
          /* Armature */
          ;
      }
    };

    DataParser._getBoneType = function (value) {
      switch (value.toLowerCase()) {
        case "bone":
          return 0
          /* Bone */
          ;

        case "surface":
          return 1
          /* Surface */
          ;

        default:
          return 0
          /* Bone */
          ;
      }
    };

    DataParser._getDisplayType = function (value) {
      switch (value.toLowerCase()) {
        case "image":
          return 0
          /* Image */
          ;

        case "mesh":
          return 2
          /* Mesh */
          ;

        case "armature":
          return 1
          /* Armature */
          ;

        case "boundingbox":
          return 3
          /* BoundingBox */
          ;

        case "path":
          return 4
          /* Path */
          ;

        default:
          return 0
          /* Image */
          ;
      }
    };

    DataParser._getBoundingBoxType = function (value) {
      switch (value.toLowerCase()) {
        case "rectangle":
          return 0
          /* Rectangle */
          ;

        case "ellipse":
          return 1
          /* Ellipse */
          ;

        case "polygon":
          return 2
          /* Polygon */
          ;

        default:
          return 0
          /* Rectangle */
          ;
      }
    };

    DataParser._getActionType = function (value) {
      switch (value.toLowerCase()) {
        case "play":
          return 0
          /* Play */
          ;

        case "frame":
          return 10
          /* Frame */
          ;

        case "sound":
          return 11
          /* Sound */
          ;

        default:
          return 0
          /* Play */
          ;
      }
    };

    DataParser._getBlendMode = function (value) {
      switch (value.toLowerCase()) {
        case "normal":
          return 0
          /* Normal */
          ;

        case "add":
          return 1
          /* Add */
          ;

        case "alpha":
          return 2
          /* Alpha */
          ;

        case "darken":
          return 3
          /* Darken */
          ;

        case "difference":
          return 4
          /* Difference */
          ;

        case "erase":
          return 5
          /* Erase */
          ;

        case "hardlight":
          return 6
          /* HardLight */
          ;

        case "invert":
          return 7
          /* Invert */
          ;

        case "layer":
          return 8
          /* Layer */
          ;

        case "lighten":
          return 9
          /* Lighten */
          ;

        case "multiply":
          return 10
          /* Multiply */
          ;

        case "overlay":
          return 11
          /* Overlay */
          ;

        case "screen":
          return 12
          /* Screen */
          ;

        case "subtract":
          return 13
          /* Subtract */
          ;

        default:
          return 0
          /* Normal */
          ;
      }
    };

    DataParser._getPositionMode = function (value) {
      switch (value.toLocaleLowerCase()) {
        case "percent":
          return 1
          /* Percent */
          ;

        case "fixed":
          return 0
          /* Fixed */
          ;

        default:
          return 1
          /* Percent */
          ;
      }
    };

    DataParser._getSpacingMode = function (value) {
      switch (value.toLocaleLowerCase()) {
        case "length":
          return 0
          /* Length */
          ;

        case "percent":
          return 2
          /* Percent */
          ;

        case "fixed":
          return 1
          /* Fixed */
          ;

        default:
          return 0
          /* Length */
          ;
      }
    };

    DataParser._getRotateMode = function (value) {
      switch (value.toLocaleLowerCase()) {
        case "tangent":
          return 0
          /* Tangent */
          ;

        case "chain":
          return 1
          /* Chain */
          ;

        case "chainscale":
          return 2
          /* ChainScale */
          ;

        default:
          return 0
          /* Tangent */
          ;
      }
    };
    /**
     * - Deprecated, please refer to {@link dragonBones.BaseFactory#parsetTextureAtlasData()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link dragonBones.BaseFactory#parsetTextureAtlasData()}。
     * @deprecated
     * @language zh_CN
     */


    DataParser.parseDragonBonesData = function (rawData) {
      console.warn("Deprecated.");

      if (rawData instanceof ArrayBuffer) {
        return dragonBones.BinaryDataParser.getInstance().parseDragonBonesData(rawData);
      } else {
        return dragonBones.ObjectDataParser.getInstance().parseDragonBonesData(rawData);
      }
    };
    /**
     * - Deprecated, please refer to {@link dragonBones.BaseFactory#parsetTextureAtlasData()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link dragonBones.BaseFactory#parsetTextureAtlasData()}。
     * @deprecated
     * @language zh_CN
     */


    DataParser.parseTextureAtlasData = function (rawData, scale) {
      if (scale === void 0) {
        scale = 1;
      }

      console.warn("已废弃");
      var textureAtlasData = {};
      var subTextureList = rawData[DataParser.SUB_TEXTURE];

      for (var i = 0, len = subTextureList.length; i < len; i++) {
        var subTextureObject = subTextureList[i];
        var subTextureName = subTextureObject[DataParser.NAME];
        var subTextureRegion = new dragonBones.Rectangle();
        var subTextureFrame = null;
        subTextureRegion.x = subTextureObject[DataParser.X] / scale;
        subTextureRegion.y = subTextureObject[DataParser.Y] / scale;
        subTextureRegion.width = subTextureObject[DataParser.WIDTH] / scale;
        subTextureRegion.height = subTextureObject[DataParser.HEIGHT] / scale;

        if (DataParser.FRAME_WIDTH in subTextureObject) {
          subTextureFrame = new dragonBones.Rectangle();
          subTextureFrame.x = subTextureObject[DataParser.FRAME_X] / scale;
          subTextureFrame.y = subTextureObject[DataParser.FRAME_Y] / scale;
          subTextureFrame.width = subTextureObject[DataParser.FRAME_WIDTH] / scale;
          subTextureFrame.height = subTextureObject[DataParser.FRAME_HEIGHT] / scale;
        }

        textureAtlasData[subTextureName] = {
          region: subTextureRegion,
          frame: subTextureFrame,
          rotated: false
        };
      }

      return textureAtlasData;
    };

    DataParser.DATA_VERSION_2_3 = "2.3";
    DataParser.DATA_VERSION_3_0 = "3.0";
    DataParser.DATA_VERSION_4_0 = "4.0";
    DataParser.DATA_VERSION_4_5 = "4.5";
    DataParser.DATA_VERSION_5_0 = "5.0";
    DataParser.DATA_VERSION_5_5 = "5.5";
    DataParser.DATA_VERSION = DataParser.DATA_VERSION_5_5;
    DataParser.DATA_VERSIONS = [DataParser.DATA_VERSION_4_0, DataParser.DATA_VERSION_4_5, DataParser.DATA_VERSION_5_0, DataParser.DATA_VERSION_5_5];
    DataParser.TEXTURE_ATLAS = "textureAtlas";
    DataParser.SUB_TEXTURE = "SubTexture";
    DataParser.FORMAT = "format";
    DataParser.IMAGE_PATH = "imagePath";
    DataParser.WIDTH = "width";
    DataParser.HEIGHT = "height";
    DataParser.ROTATED = "rotated";
    DataParser.FRAME_X = "frameX";
    DataParser.FRAME_Y = "frameY";
    DataParser.FRAME_WIDTH = "frameWidth";
    DataParser.FRAME_HEIGHT = "frameHeight";
    DataParser.DRADON_BONES = "dragonBones";
    DataParser.USER_DATA = "userData";
    DataParser.ARMATURE = "armature";
    DataParser.BONE = "bone";
    DataParser.SURFACE = "surface";
    DataParser.SLOT = "slot";
    DataParser.CONSTRAINT = "constraint";
    DataParser.IK = "ik";
    DataParser.PATH_CONSTRAINT = "path";
    DataParser.SKIN = "skin";
    DataParser.DISPLAY = "display";
    DataParser.ANIMATION = "animation";
    DataParser.Z_ORDER = "zOrder";
    DataParser.FFD = "ffd";
    DataParser.FRAME = "frame";
    DataParser.TRANSLATE_FRAME = "translateFrame";
    DataParser.ROTATE_FRAME = "rotateFrame";
    DataParser.SCALE_FRAME = "scaleFrame";
    DataParser.DISPLAY_FRAME = "displayFrame";
    DataParser.COLOR_FRAME = "colorFrame";
    DataParser.DEFAULT_ACTIONS = "defaultActions";
    DataParser.ACTIONS = "actions";
    DataParser.EVENTS = "events";
    DataParser.INTS = "ints";
    DataParser.FLOATS = "floats";
    DataParser.STRINGS = "strings";
    DataParser.CANVAS = "canvas";
    DataParser.TRANSFORM = "transform";
    DataParser.PIVOT = "pivot";
    DataParser.AABB = "aabb";
    DataParser.COLOR = "color";
    DataParser.VERSION = "version";
    DataParser.COMPATIBLE_VERSION = "compatibleVersion";
    DataParser.FRAME_RATE = "frameRate";
    DataParser.TYPE = "type";
    DataParser.SUB_TYPE = "subType";
    DataParser.NAME = "name";
    DataParser.PARENT = "parent";
    DataParser.TARGET = "target";
    DataParser.STAGE = "stage";
    DataParser.SHARE = "share";
    DataParser.PATH = "path";
    DataParser.LENGTH = "length";
    DataParser.DISPLAY_INDEX = "displayIndex";
    DataParser.BLEND_MODE = "blendMode";
    DataParser.INHERIT_TRANSLATION = "inheritTranslation";
    DataParser.INHERIT_ROTATION = "inheritRotation";
    DataParser.INHERIT_SCALE = "inheritScale";
    DataParser.INHERIT_REFLECTION = "inheritReflection";
    DataParser.INHERIT_ANIMATION = "inheritAnimation";
    DataParser.INHERIT_DEFORM = "inheritDeform";
    DataParser.SEGMENT_X = "segmentX";
    DataParser.SEGMENT_Y = "segmentY";
    DataParser.BEND_POSITIVE = "bendPositive";
    DataParser.CHAIN = "chain";
    DataParser.WEIGHT = "weight";
    DataParser.FADE_IN_TIME = "fadeInTime";
    DataParser.PLAY_TIMES = "playTimes";
    DataParser.SCALE = "scale";
    DataParser.OFFSET = "offset";
    DataParser.POSITION = "position";
    DataParser.DURATION = "duration";
    DataParser.TWEEN_EASING = "tweenEasing";
    DataParser.TWEEN_ROTATE = "tweenRotate";
    DataParser.TWEEN_SCALE = "tweenScale";
    DataParser.CLOCK_WISE = "clockwise";
    DataParser.CURVE = "curve";
    DataParser.SOUND = "sound";
    DataParser.EVENT = "event";
    DataParser.ACTION = "action";
    DataParser.X = "x";
    DataParser.Y = "y";
    DataParser.SKEW_X = "skX";
    DataParser.SKEW_Y = "skY";
    DataParser.SCALE_X = "scX";
    DataParser.SCALE_Y = "scY";
    DataParser.VALUE = "value";
    DataParser.ROTATE = "rotate";
    DataParser.SKEW = "skew";
    DataParser.ALPHA_OFFSET = "aO";
    DataParser.RED_OFFSET = "rO";
    DataParser.GREEN_OFFSET = "gO";
    DataParser.BLUE_OFFSET = "bO";
    DataParser.ALPHA_MULTIPLIER = "aM";
    DataParser.RED_MULTIPLIER = "rM";
    DataParser.GREEN_MULTIPLIER = "gM";
    DataParser.BLUE_MULTIPLIER = "bM";
    DataParser.UVS = "uvs";
    DataParser.VERTICES = "vertices";
    DataParser.TRIANGLES = "triangles";
    DataParser.WEIGHTS = "weights";
    DataParser.SLOT_POSE = "slotPose";
    DataParser.BONE_POSE = "bonePose";
    DataParser.GLUE_WEIGHTS = "glueWeights";
    DataParser.GLUE_MESHES = "glueMeshes";
    DataParser.BONES = "bones";
    DataParser.POSITION_MODE = "positionMode";
    DataParser.SPACING_MODE = "spacingMode";
    DataParser.ROTATE_MODE = "rotateMode";
    DataParser.SPACING = "spacing";
    DataParser.ROTATE_OFFSET = "rotateOffset";
    DataParser.ROTATE_MIX = "rotateMix";
    DataParser.TRANSLATE_MIX = "translateMix";
    DataParser.TARGET_DISPLAY = "targetDisplay";
    DataParser.CLOSED = "closed";
    DataParser.CONSTANT_SPEED = "constantSpeed";
    DataParser.VERTEX_COUNT = "vertexCount";
    DataParser.LENGTHS = "lengths";
    DataParser.GOTO_AND_PLAY = "gotoAndPlay";
    DataParser.DEFAULT_NAME = "default";
    return DataParser;
  }();

  dragonBones.DataParser = DataParser;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var ObjectDataParser =
  /** @class */
  function (_super) {
    __extends(ObjectDataParser, _super);

    function ObjectDataParser() {
      var _this = _super !== null && _super.apply(this, arguments) || this;

      _this._rawTextureAtlasIndex = 0;
      _this._rawBones = [];
      _this._data = null; //

      _this._armature = null; //

      _this._bone = null; //

      _this._surface = null; //

      _this._slot = null; //

      _this._skin = null; //

      _this._mesh = null; //

      _this._animation = null; //

      _this._timeline = null; //

      _this._rawTextureAtlases = null;
      _this._defaultColorOffset = -1;
      _this._prevClockwise = 0;
      _this._prevRotation = 0.0;
      _this._helpMatrixA = new dragonBones.Matrix();
      _this._helpMatrixB = new dragonBones.Matrix();
      _this._helpTransform = new dragonBones.Transform();
      _this._helpColorTransform = new dragonBones.ColorTransform();
      _this._helpPoint = new dragonBones.Point();
      _this._helpArray = [];
      _this._intArray = [];
      _this._floatArray = [];
      _this._frameIntArray = [];
      _this._frameFloatArray = [];
      _this._frameArray = [];
      _this._timelineArray = [];
      _this._cacheRawMeshes = [];
      _this._cacheMeshes = [];
      _this._actionFrames = [];
      _this._weightSlotPose = {};
      _this._weightBonePoses = {};
      _this._cacheBones = {};
      _this._slotChildActions = {};
      return _this;
    }

    ObjectDataParser._getBoolean = function (rawData, key, defaultValue) {
      if (key in rawData) {
        var value = rawData[key];
        var type = typeof value;

        if (type === "boolean") {
          return value;
        } else if (type === "string") {
          switch (value) {
            case "0":
            case "NaN":
            case "":
            case "false":
            case "null":
            case "undefined":
              return false;

            default:
              return true;
          }
        } else {
          return !!value;
        }
      }

      return defaultValue;
    };

    ObjectDataParser._getNumber = function (rawData, key, defaultValue) {
      if (key in rawData) {
        var value = rawData[key];

        if (value === null || value === "NaN") {
          return defaultValue;
        }

        return +value || 0;
      }

      return defaultValue;
    };

    ObjectDataParser._getString = function (rawData, key, defaultValue) {
      if (key in rawData) {
        var value = rawData[key];
        var type = typeof value;

        if (type === "string") {
          if (dragonBones.DragonBones.webAssembly) {
            for (var i = 0, l = value.length; i < l; ++i) {
              if (value.charCodeAt(i) > 255) {
                return encodeURI(value);
              }
            }
          }

          return value;
        }

        return String(value);
      }

      return defaultValue;
    };

    ObjectDataParser.prototype._getCurvePoint = function (x1, y1, x2, y2, x3, y3, x4, y4, t, result) {
      var l_t = 1.0 - t;
      var powA = l_t * l_t;
      var powB = t * t;
      var kA = l_t * powA;
      var kB = 3.0 * t * powA;
      var kC = 3.0 * l_t * powB;
      var kD = t * powB;
      result.x = kA * x1 + kB * x2 + kC * x3 + kD * x4;
      result.y = kA * y1 + kB * y2 + kC * y3 + kD * y4;
    };

    ObjectDataParser.prototype._samplingEasingCurve = function (curve, samples) {
      var curveCount = curve.length;
      var stepIndex = -2;

      for (var i = 0, l = samples.length; i < l; ++i) {
        var t = (i + 1) / (l + 1); // float

        while ((stepIndex + 6 < curveCount ? curve[stepIndex + 6] : 1) < t) {
          // stepIndex + 3 * 2
          stepIndex += 6;
        }

        var isInCurve = stepIndex >= 0 && stepIndex + 6 < curveCount;
        var x1 = isInCurve ? curve[stepIndex] : 0.0;
        var y1 = isInCurve ? curve[stepIndex + 1] : 0.0;
        var x2 = curve[stepIndex + 2];
        var y2 = curve[stepIndex + 3];
        var x3 = curve[stepIndex + 4];
        var y3 = curve[stepIndex + 5];
        var x4 = isInCurve ? curve[stepIndex + 6] : 1.0;
        var y4 = isInCurve ? curve[stepIndex + 7] : 1.0;
        var lower = 0.0;
        var higher = 1.0;

        while (higher - lower > 0.0001) {
          var percentage = (higher + lower) * 0.5;

          this._getCurvePoint(x1, y1, x2, y2, x3, y3, x4, y4, percentage, this._helpPoint);

          if (t - this._helpPoint.x > 0.0) {
            lower = percentage;
          } else {
            higher = percentage;
          }
        }

        samples[i] = this._helpPoint.y;
      }
    };

    ObjectDataParser.prototype._parseActionDataInFrame = function (rawData, frameStart, bone, slot) {
      if (dragonBones.DataParser.EVENT in rawData) {
        this._mergeActionFrame(rawData[dragonBones.DataParser.EVENT], frameStart, 10
        /* Frame */
        , bone, slot);
      }

      if (dragonBones.DataParser.SOUND in rawData) {
        this._mergeActionFrame(rawData[dragonBones.DataParser.SOUND], frameStart, 11
        /* Sound */
        , bone, slot);
      }

      if (dragonBones.DataParser.ACTION in rawData) {
        this._mergeActionFrame(rawData[dragonBones.DataParser.ACTION], frameStart, 0
        /* Play */
        , bone, slot);
      }

      if (dragonBones.DataParser.EVENTS in rawData) {
        this._mergeActionFrame(rawData[dragonBones.DataParser.EVENTS], frameStart, 10
        /* Frame */
        , bone, slot);
      }

      if (dragonBones.DataParser.ACTIONS in rawData) {
        this._mergeActionFrame(rawData[dragonBones.DataParser.ACTIONS], frameStart, 0
        /* Play */
        , bone, slot);
      }
    };

    ObjectDataParser.prototype._mergeActionFrame = function (rawData, frameStart, type, bone, slot) {
      var actionOffset = dragonBones.DragonBones.webAssembly ? this._armature.actions.size() : this._armature.actions.length;

      var actions = this._parseActionData(rawData, type, bone, slot);

      var frameIndex = 0;
      var frame = null;

      for (var _i = 0, actions_2 = actions; _i < actions_2.length; _i++) {
        var action = actions_2[_i];

        this._armature.addAction(action, false);
      }

      if (this._actionFrames.length === 0) {
        // First frame.
        frame = new ActionFrame();
        frame.frameStart = 0;

        this._actionFrames.push(frame);

        frame = null;
      }

      for (var _a = 0, _b = this._actionFrames; _a < _b.length; _a++) {
        // Get same frame.
        var eachFrame = _b[_a];

        if (eachFrame.frameStart === frameStart) {
          frame = eachFrame;
          break;
        } else if (eachFrame.frameStart > frameStart) {
          break;
        }

        frameIndex++;
      }

      if (frame === null) {
        // Create and cache frame.
        frame = new ActionFrame();
        frame.frameStart = frameStart;

        this._actionFrames.splice(frameIndex + 1, 0, frame);
      }

      for (var i = 0; i < actions.length; ++i) {
        // Cache action offsets.
        frame.actions.push(actionOffset + i);
      }
    };

    ObjectDataParser.prototype._parseArmature = function (rawData, scale) {
      var armature = dragonBones.BaseObject.borrowObject(dragonBones.ArmatureData);
      armature.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");
      armature.frameRate = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.FRAME_RATE, this._data.frameRate);
      armature.scale = scale;

      if (dragonBones.DataParser.TYPE in rawData && typeof rawData[dragonBones.DataParser.TYPE] === "string") {
        armature.type = dragonBones.DataParser._getArmatureType(rawData[dragonBones.DataParser.TYPE]);
      } else {
        armature.type = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.TYPE, 0
        /* Armature */
        );
      }

      if (armature.frameRate === 0) {
        // Data error.
        armature.frameRate = 24;
      }

      this._armature = armature;

      if (dragonBones.DataParser.CANVAS in rawData) {
        var rawCanvas = rawData[dragonBones.DataParser.CANVAS];
        var canvas = dragonBones.BaseObject.borrowObject(dragonBones.CanvasData);

        if (dragonBones.DataParser.COLOR in rawCanvas) {
          canvas.hasBackground = true;
        } else {
          canvas.hasBackground = false;
        }

        canvas.color = ObjectDataParser._getNumber(rawCanvas, dragonBones.DataParser.COLOR, 0);
        canvas.x = ObjectDataParser._getNumber(rawCanvas, dragonBones.DataParser.X, 0) * armature.scale;
        canvas.y = ObjectDataParser._getNumber(rawCanvas, dragonBones.DataParser.Y, 0) * armature.scale;
        canvas.width = ObjectDataParser._getNumber(rawCanvas, dragonBones.DataParser.WIDTH, 0) * armature.scale;
        canvas.height = ObjectDataParser._getNumber(rawCanvas, dragonBones.DataParser.HEIGHT, 0) * armature.scale;
        armature.canvas = canvas;
      }

      if (dragonBones.DataParser.AABB in rawData) {
        var rawAABB = rawData[dragonBones.DataParser.AABB];
        armature.aabb.x = ObjectDataParser._getNumber(rawAABB, dragonBones.DataParser.X, 0.0) * armature.scale;
        armature.aabb.y = ObjectDataParser._getNumber(rawAABB, dragonBones.DataParser.Y, 0.0) * armature.scale;
        armature.aabb.width = ObjectDataParser._getNumber(rawAABB, dragonBones.DataParser.WIDTH, 0.0) * armature.scale;
        armature.aabb.height = ObjectDataParser._getNumber(rawAABB, dragonBones.DataParser.HEIGHT, 0.0) * armature.scale;
      }

      if (dragonBones.DataParser.BONE in rawData) {
        var rawBones = rawData[dragonBones.DataParser.BONE];

        for (var _i = 0, rawBones_1 = rawBones; _i < rawBones_1.length; _i++) {
          var rawBone = rawBones_1[_i];

          var parentName = ObjectDataParser._getString(rawBone, dragonBones.DataParser.PARENT, "");

          var bone = this._parseBone(rawBone);

          if (parentName.length > 0) {
            // Get bone parent.
            var parent_1 = armature.getBone(parentName);

            if (parent_1 !== null) {
              bone.parent = parent_1;
            } else {
              // Cache.
              if (!(parentName in this._cacheBones)) {
                this._cacheBones[parentName] = [];
              }

              this._cacheBones[parentName].push(bone);
            }
          }

          if (bone.name in this._cacheBones) {
            for (var _a = 0, _b = this._cacheBones[bone.name]; _a < _b.length; _a++) {
              var child = _b[_a];
              child.parent = bone;
            }

            delete this._cacheBones[bone.name];
          }

          armature.addBone(bone);

          this._rawBones.push(bone); // Cache raw bones sort.

        }
      }

      if (dragonBones.DataParser.IK in rawData) {
        var rawIKS = rawData[dragonBones.DataParser.IK];

        for (var _c = 0, rawIKS_1 = rawIKS; _c < rawIKS_1.length; _c++) {
          var rawIK = rawIKS_1[_c];

          var constraint = this._parseIKConstraint(rawIK);

          if (constraint) {
            armature.addConstraint(constraint);
          }
        }
      }

      armature.sortBones();

      if (dragonBones.DataParser.SLOT in rawData) {
        var zOrder = 0;
        var rawSlots = rawData[dragonBones.DataParser.SLOT];

        for (var _d = 0, rawSlots_1 = rawSlots; _d < rawSlots_1.length; _d++) {
          var rawSlot = rawSlots_1[_d];
          armature.addSlot(this._parseSlot(rawSlot, zOrder++));
        }
      }

      if (dragonBones.DataParser.SKIN in rawData) {
        var rawSkins = rawData[dragonBones.DataParser.SKIN];

        for (var _e = 0, rawSkins_1 = rawSkins; _e < rawSkins_1.length; _e++) {
          var rawSkin = rawSkins_1[_e];
          armature.addSkin(this._parseSkin(rawSkin));
        }
      }

      if (dragonBones.DataParser.PATH_CONSTRAINT in rawData) {
        var rawPaths = rawData[dragonBones.DataParser.PATH_CONSTRAINT];

        for (var _f = 0, rawPaths_1 = rawPaths; _f < rawPaths_1.length; _f++) {
          var rawPath = rawPaths_1[_f];

          var constraint = this._parsePathConstraint(rawPath);

          if (constraint) {
            armature.addConstraint(constraint);
          }
        }
      }

      for (var i = 0, l = this._cacheRawMeshes.length; i < l; ++i) {
        // Link glue mesh.
        var rawMeshData = this._cacheRawMeshes[i];

        if (!(dragonBones.DataParser.GLUE_WEIGHTS in rawMeshData) || !(dragonBones.DataParser.GLUE_MESHES in rawMeshData)) {
          continue;
        }

        this._parseMeshGlue(rawMeshData, this._cacheMeshes[i]);
      }

      for (var i = 0, l = this._cacheRawMeshes.length; i < l; ++i) {
        // Link mesh.
        var rawData_1 = this._cacheRawMeshes[i];

        var shareName = ObjectDataParser._getString(rawData_1, dragonBones.DataParser.SHARE, "");

        if (shareName.length === 0) {
          continue;
        }

        var skinName = ObjectDataParser._getString(rawData_1, dragonBones.DataParser.SKIN, dragonBones.DataParser.DEFAULT_NAME);

        if (skinName.length === 0) {
          // 
          skinName = dragonBones.DataParser.DEFAULT_NAME;
        }

        var shareMesh = armature.getMesh(skinName, "", shareName); // TODO slot;

        if (shareMesh === null) {
          continue; // Error.
        }

        var mesh = this._cacheMeshes[i];
        mesh.vertices.shareFrom(shareMesh.vertices);
      }

      if (dragonBones.DataParser.ANIMATION in rawData) {
        var rawAnimations = rawData[dragonBones.DataParser.ANIMATION];

        for (var _g = 0, rawAnimations_1 = rawAnimations; _g < rawAnimations_1.length; _g++) {
          var rawAnimation = rawAnimations_1[_g];

          var animation = this._parseAnimation(rawAnimation);

          armature.addAnimation(animation);
        }
      }

      if (dragonBones.DataParser.DEFAULT_ACTIONS in rawData) {
        var actions = this._parseActionData(rawData[dragonBones.DataParser.DEFAULT_ACTIONS], 0
        /* Play */
        , null, null);

        for (var _h = 0, actions_3 = actions; _h < actions_3.length; _h++) {
          var action = actions_3[_h];
          armature.addAction(action, true);

          if (action.type === 0
          /* Play */
          ) {
              // Set default animation from default action.
              var animation = armature.getAnimation(action.name);

              if (animation !== null) {
                armature.defaultAnimation = animation;
              }
            }
        }
      }

      if (dragonBones.DataParser.ACTIONS in rawData) {
        var actions = this._parseActionData(rawData[dragonBones.DataParser.ACTIONS], 0
        /* Play */
        , null, null);

        for (var _j = 0, actions_4 = actions; _j < actions_4.length; _j++) {
          var action = actions_4[_j];
          armature.addAction(action, false);
        }
      } // Clear helper.


      this._rawBones.length = 0;
      this._cacheRawMeshes.length = 0;
      this._cacheMeshes.length = 0;
      this._armature = null;

      for (var k in this._weightSlotPose) {
        delete this._weightSlotPose[k];
      }

      for (var k in this._weightBonePoses) {
        delete this._weightBonePoses[k];
      }

      for (var k in this._cacheBones) {
        delete this._cacheBones[k];
      }

      for (var k in this._slotChildActions) {
        delete this._slotChildActions[k];
      }

      return armature;
    };

    ObjectDataParser.prototype._parseBone = function (rawData) {
      var type = 0
      /* Bone */
      ;
      var scale = this._armature.scale;

      if (dragonBones.DataParser.TYPE in rawData && typeof rawData[dragonBones.DataParser.TYPE] === "string") {
        type = dragonBones.DataParser._getBoneType(rawData[dragonBones.DataParser.TYPE]);
      } else {
        type = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.TYPE, 0
        /* Bone */
        );
      }

      if (type === 0
      /* Bone */
      ) {
          var bone = dragonBones.BaseObject.borrowObject(dragonBones.BoneData);
          bone.inheritTranslation = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.INHERIT_TRANSLATION, true);
          bone.inheritRotation = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.INHERIT_ROTATION, true);
          bone.inheritScale = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.INHERIT_SCALE, true);
          bone.inheritReflection = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.INHERIT_REFLECTION, true);
          bone.length = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.LENGTH, 0) * scale;
          bone.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");

          if (dragonBones.DataParser.TRANSFORM in rawData) {
            this._parseTransform(rawData[dragonBones.DataParser.TRANSFORM], bone.transform, scale);
          }

          return bone;
        }

      var surface = dragonBones.BaseObject.borrowObject(dragonBones.SurfaceData);
      surface.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");
      surface.segmentX = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SEGMENT_X, 0);
      surface.segmentY = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SEGMENT_Y, 0);
      surface.vertices.length = (surface.segmentX + 1) * (surface.segmentY + 1) * 2;

      if (dragonBones.DataParser.VERTICES in rawData) {
        var rawVertices = rawData[dragonBones.DataParser.VERTICES];

        for (var i = 0, l = surface.vertices.length; i < l; ++i) {
          if (i < rawVertices.length) {
            surface.vertices[i] = rawVertices[i] * scale;
          } else {
            surface.vertices[i] = 0.0;
          }
        }
      }

      return surface;
    };

    ObjectDataParser.prototype._parseIKConstraint = function (rawData) {
      var bone = this._armature.getBone(ObjectDataParser._getString(rawData, dragonBones.DataParser.BONE, ""));

      if (bone === null) {
        return null;
      }

      var target = this._armature.getBone(ObjectDataParser._getString(rawData, dragonBones.DataParser.TARGET, ""));

      if (target === null) {
        return null;
      }

      var constraint = dragonBones.BaseObject.borrowObject(dragonBones.IKConstraintData);
      constraint.scaleEnabled = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.SCALE, false);
      constraint.bendPositive = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.BEND_POSITIVE, true);
      constraint.weight = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.WEIGHT, 1.0);
      constraint.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");
      constraint.type = 0
      /* IK */
      ;
      constraint.target = target;

      var chain = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.CHAIN, 0);

      if (chain > 0 && bone.parent !== null) {
        constraint.root = bone.parent;
        constraint.bone = bone;
      } else {
        constraint.root = bone;
        constraint.bone = null;
      }

      return constraint;
    };

    ObjectDataParser.prototype._parsePathConstraint = function (rawData) {
      var target = this._armature.getSlot(ObjectDataParser._getString(rawData, dragonBones.DataParser.TARGET, ""));

      if (target === null) {
        return null;
      }

      var defaultSkin = this._armature.defaultSkin;

      if (defaultSkin === null) {
        return null;
      } //TODO


      var targetDisplay = defaultSkin.getDisplay(target.name, ObjectDataParser._getString(rawData, dragonBones.DataParser.TARGET_DISPLAY, target.name));

      if (targetDisplay === null || !(targetDisplay instanceof dragonBones.PathDisplayData)) {
        return null;
      }

      var bones = rawData[dragonBones.DataParser.BONES];

      if (bones === null || bones.length === 0) {
        return null;
      }

      var constraint = dragonBones.BaseObject.borrowObject(dragonBones.PathConstraintData);
      constraint.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");
      constraint.type = 1
      /* Path */
      ;
      constraint.pathSlot = target;
      constraint.pathDisplayData = targetDisplay;
      constraint.target = target.parent;
      constraint.positionMode = dragonBones.DataParser._getPositionMode(ObjectDataParser._getString(rawData, dragonBones.DataParser.POSITION_MODE, ""));
      constraint.spacingMode = dragonBones.DataParser._getSpacingMode(ObjectDataParser._getString(rawData, dragonBones.DataParser.SPACING_MODE, ""));
      constraint.rotateMode = dragonBones.DataParser._getRotateMode(ObjectDataParser._getString(rawData, dragonBones.DataParser.ROTATE_MODE, ""));
      constraint.position = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.POSITION, 0);
      constraint.spacing = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SPACING, 0);
      constraint.rotateOffset = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.ROTATE_OFFSET, 0);
      constraint.rotateMix = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.ROTATE_MIX, 1);
      constraint.translateMix = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.TRANSLATE_MIX, 1); //

      for (var _i = 0, bones_3 = bones; _i < bones_3.length; _i++) {
        var boneName = bones_3[_i];

        var bone = this._armature.getBone(boneName);

        if (bone !== null) {
          constraint.AddBone(bone);

          if (constraint.root === null) {
            constraint.root = bone;
          }
        }
      }

      return constraint;
    };

    ObjectDataParser.prototype._parseSlot = function (rawData, zOrder) {
      var slot = dragonBones.BaseObject.borrowObject(dragonBones.SlotData);
      slot.displayIndex = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.DISPLAY_INDEX, 0);
      slot.zOrder = zOrder;
      slot.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");
      slot.parent = this._armature.getBone(ObjectDataParser._getString(rawData, dragonBones.DataParser.PARENT, "")); //

      if (dragonBones.DataParser.BLEND_MODE in rawData && typeof rawData[dragonBones.DataParser.BLEND_MODE] === "string") {
        slot.blendMode = dragonBones.DataParser._getBlendMode(rawData[dragonBones.DataParser.BLEND_MODE]);
      } else {
        slot.blendMode = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.BLEND_MODE, 0
        /* Normal */
        );
      }

      if (dragonBones.DataParser.COLOR in rawData) {
        slot.color = dragonBones.SlotData.createColor();

        this._parseColorTransform(rawData[dragonBones.DataParser.COLOR], slot.color);
      } else {
        slot.color = dragonBones.SlotData.DEFAULT_COLOR;
      }

      if (dragonBones.DataParser.ACTIONS in rawData) {
        this._slotChildActions[slot.name] = this._parseActionData(rawData[dragonBones.DataParser.ACTIONS], 0
        /* Play */
        , null, null);
      }

      return slot;
    };

    ObjectDataParser.prototype._parseSkin = function (rawData) {
      var skin = dragonBones.BaseObject.borrowObject(dragonBones.SkinData);
      skin.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, dragonBones.DataParser.DEFAULT_NAME);

      if (skin.name.length === 0) {
        skin.name = dragonBones.DataParser.DEFAULT_NAME;
      }

      if (dragonBones.DataParser.SLOT in rawData) {
        var rawSlots = rawData[dragonBones.DataParser.SLOT];
        this._skin = skin;

        for (var _i = 0, rawSlots_2 = rawSlots; _i < rawSlots_2.length; _i++) {
          var rawSlot = rawSlots_2[_i];

          var slotName = ObjectDataParser._getString(rawSlot, dragonBones.DataParser.NAME, "");

          var slot = this._armature.getSlot(slotName);

          if (slot !== null) {
            this._slot = slot;

            if (dragonBones.DataParser.DISPLAY in rawSlot) {
              var rawDisplays = rawSlot[dragonBones.DataParser.DISPLAY];

              for (var _a = 0, rawDisplays_1 = rawDisplays; _a < rawDisplays_1.length; _a++) {
                var rawDisplay = rawDisplays_1[_a];

                if (rawDisplay) {
                  skin.addDisplay(slotName, this._parseDisplay(rawDisplay));
                } else {
                  skin.addDisplay(slotName, null);
                }
              }
            }

            this._slot = null; //
          }
        }

        this._skin = null; //
      }

      return skin;
    };

    ObjectDataParser.prototype._parseDisplay = function (rawData) {
      var name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");

      var path = ObjectDataParser._getString(rawData, dragonBones.DataParser.PATH, "");

      var type = 0
      /* Image */
      ;
      var display = null;

      if (dragonBones.DataParser.TYPE in rawData && typeof rawData[dragonBones.DataParser.TYPE] === "string") {
        type = dragonBones.DataParser._getDisplayType(rawData[dragonBones.DataParser.TYPE]);
      } else {
        type = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.TYPE, type);
      }

      switch (type) {
        case 0
        /* Image */
        :
          var imageDisplay = display = dragonBones.BaseObject.borrowObject(dragonBones.ImageDisplayData);
          imageDisplay.name = name;
          imageDisplay.path = path.length > 0 ? path : name;

          this._parsePivot(rawData, imageDisplay);

          break;

        case 1
        /* Armature */
        :
          var armatureDisplay = display = dragonBones.BaseObject.borrowObject(dragonBones.ArmatureDisplayData);
          armatureDisplay.name = name;
          armatureDisplay.path = path.length > 0 ? path : name;
          armatureDisplay.inheritAnimation = true;

          if (dragonBones.DataParser.ACTIONS in rawData) {
            var actions = this._parseActionData(rawData[dragonBones.DataParser.ACTIONS], 0
            /* Play */
            , null, null);

            for (var _i = 0, actions_5 = actions; _i < actions_5.length; _i++) {
              var action = actions_5[_i];
              armatureDisplay.addAction(action);
            }
          } else if (this._slot.name in this._slotChildActions) {
            var displays = this._skin.getDisplays(this._slot.name);

            if (displays === null ? this._slot.displayIndex === 0 : this._slot.displayIndex === displays.length) {
              for (var _a = 0, _b = this._slotChildActions[this._slot.name]; _a < _b.length; _a++) {
                var action = _b[_a];
                armatureDisplay.addAction(action);
              }

              delete this._slotChildActions[this._slot.name];
            }
          }

          break;

        case 2
        /* Mesh */
        :
          var meshDisplay = display = dragonBones.BaseObject.borrowObject(dragonBones.MeshDisplayData);
          meshDisplay.vertices.inheritDeform = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.INHERIT_DEFORM, true);
          meshDisplay.name = name;
          meshDisplay.path = path.length > 0 ? path : name;
          meshDisplay.vertices.data = this._data;

          if (dragonBones.DataParser.SHARE in rawData) {
            this._cacheRawMeshes.push(rawData);

            this._cacheMeshes.push(meshDisplay);
          } else {
            this._parseMesh(rawData, meshDisplay);
          }

          if (dragonBones.DataParser.GLUE_WEIGHTS in rawData && dragonBones.DataParser.GLUE_MESHES in rawData) {
            this._cacheRawMeshes.push(rawData);

            this._cacheMeshes.push(meshDisplay);
          }

          break;

        case 3
        /* BoundingBox */
        :
          var boundingBox = this._parseBoundingBox(rawData);

          if (boundingBox !== null) {
            var boundingBoxDisplay = display = dragonBones.BaseObject.borrowObject(dragonBones.BoundingBoxDisplayData);
            boundingBoxDisplay.name = name;
            boundingBoxDisplay.path = path.length > 0 ? path : name;
            boundingBoxDisplay.boundingBox = boundingBox;
          }

          break;

        case 4
        /* Path */
        :
          var rawCurveLengths = rawData[dragonBones.DataParser.LENGTHS];
          var pathDisplay = display = dragonBones.BaseObject.borrowObject(dragonBones.PathDisplayData);
          pathDisplay.closed = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.CLOSED, false);
          pathDisplay.constantSpeed = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.CONSTANT_SPEED, false);
          pathDisplay.name = name;
          pathDisplay.path = path.length > 0 ? path : name;
          pathDisplay.vertices.data = this._data;
          pathDisplay.curveLengths.length = rawCurveLengths.length;

          for (var i = 0, l = rawCurveLengths.length; i < l; ++i) {
            pathDisplay.curveLengths[i] = rawCurveLengths[i];
          }

          this._parsePath(rawData, pathDisplay);

          break;
      }

      if (display !== null && dragonBones.DataParser.TRANSFORM in rawData) {
        this._parseTransform(rawData[dragonBones.DataParser.TRANSFORM], display.transform, this._armature.scale);
      }

      return display;
    };

    ObjectDataParser.prototype._parsePath = function (rawData, display) {
      var rawVertices = rawData[dragonBones.DataParser.VERTICES];

      var vertexCount = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.VERTEX_COUNT, 0); // uint


      var vertexOffset = this._floatArray.length;
      var pathOffset = this._intArray.length;
      display.vertices.offset = pathOffset;
      this._intArray.length += 1 + 1;
      this._intArray[pathOffset + 0
      /* PathVertexCount */
      ] = vertexCount;
      this._intArray[pathOffset + 2
      /* PathFloatOffset */
      ] = vertexOffset;

      if (!(dragonBones.DataParser.WEIGHTS in rawData)) {
        this._floatArray.length += rawVertices.length;

        for (var i = 0, l = rawVertices.length; i < l; ++i) {
          this._floatArray[vertexOffset + i] = rawVertices[i];
        }
      } else {
        var rawWeights = rawData[dragonBones.DataParser.WEIGHTS];
        var rawBones = rawData[dragonBones.DataParser.BONES];
        var weightBoneCount = rawBones.length;
        var weightCount = Math.floor(rawWeights.length - vertexCount) / 2; // uint

        var weightOffset = this._intArray.length;
        var floatOffset = this._floatArray.length;
        var sortedBones = this._armature.sortedBones;
        var weight = dragonBones.BaseObject.borrowObject(dragonBones.WeightData);
        weight.count = weightCount;
        weight.offset = weightOffset;
        this._intArray.length += 1 + 1 + weightBoneCount + vertexCount + weightCount; //

        this._intArray[weightOffset + 0
        /* WeigthBoneCount */
        ] = weightBoneCount;
        this._intArray[weightOffset + 1
        /* WeigthFloatOffset */
        ] = floatOffset;

        for (var i = 0; i < weightBoneCount; i++) {
          var rawBoneIndex = rawBones[i];
          var bone = this._rawBones[rawBoneIndex];
          weight.addBone(bone);
          this._intArray[weightOffset + 2
          /* WeigthBoneIndices */
          + i] = sortedBones.indexOf(bone);
        }

        this._floatArray.length += weightCount * 3;

        for (var i = 0, iW = 0, iV = 0, iB = weightOffset + 2
        /* WeigthBoneIndices */
        + weightBoneCount, iF = floatOffset; i < weightCount; i++) {
          var boneCount = rawWeights[iW++];
          this._intArray[iB++] = boneCount;

          for (var j = 0; j < boneCount; j++) {
            var boneIndex = rawWeights[iW++];
            var boneWeight = rawWeights[iW++];
            var x = rawVertices[iV++];
            var y = rawVertices[iV++];
            this._intArray[iB++] = rawBones.indexOf(boneIndex);
            this._floatArray[iF++] = boneWeight;
            this._floatArray[iF++] = x;
            this._floatArray[iF++] = y;
          }
        }

        display.vertices.weight = weight;
      }
    };

    ObjectDataParser.prototype._parsePivot = function (rawData, display) {
      if (dragonBones.DataParser.PIVOT in rawData) {
        var rawPivot = rawData[dragonBones.DataParser.PIVOT];
        display.pivot.x = ObjectDataParser._getNumber(rawPivot, dragonBones.DataParser.X, 0.0);
        display.pivot.y = ObjectDataParser._getNumber(rawPivot, dragonBones.DataParser.Y, 0.0);
      } else {
        display.pivot.x = 0.5;
        display.pivot.y = 0.5;
      }
    };

    ObjectDataParser.prototype._parseMesh = function (rawData, mesh) {
      var rawVertices = rawData[dragonBones.DataParser.VERTICES];
      var rawUVs = rawData[dragonBones.DataParser.UVS];
      var rawTriangles = rawData[dragonBones.DataParser.TRIANGLES];
      var vertexCount = Math.floor(rawVertices.length / 2); // uint

      var triangleCount = Math.floor(rawTriangles.length / 3); // uint

      var vertexOffset = this._floatArray.length;
      var uvOffset = vertexOffset + vertexCount * 2;
      var meshOffset = this._intArray.length;
      var meshName = this._skin.name + "_" + this._slot.name + "_" + mesh.name; // Cache pose data.

      mesh.vertices.offset = meshOffset;
      this._intArray.length += 1 + 1 + 1 + 1 + triangleCount * 3;
      this._intArray[meshOffset + 0
      /* MeshVertexCount */
      ] = vertexCount;
      this._intArray[meshOffset + 1
      /* MeshTriangleCount */
      ] = triangleCount;
      this._intArray[meshOffset + 2
      /* MeshFloatOffset */
      ] = vertexOffset;

      for (var i = 0, l = triangleCount * 3; i < l; ++i) {
        this._intArray[meshOffset + 4
        /* MeshVertexIndices */
        + i] = rawTriangles[i];
      }

      this._floatArray.length += vertexCount * 2 + vertexCount * 2;

      for (var i = 0, l = vertexCount * 2; i < l; ++i) {
        this._floatArray[vertexOffset + i] = rawVertices[i];
        this._floatArray[uvOffset + i] = rawUVs[i];
      }

      if (dragonBones.DataParser.WEIGHTS in rawData) {
        var rawWeights = rawData[dragonBones.DataParser.WEIGHTS];
        var rawSlotPose = rawData[dragonBones.DataParser.SLOT_POSE];
        var rawBonePoses = rawData[dragonBones.DataParser.BONE_POSE];
        var sortedBones = this._armature.sortedBones;
        var weightBoneIndices = new Array();
        var weightBoneCount = Math.floor(rawBonePoses.length / 7); // uint

        var floatOffset = this._floatArray.length;
        var weightCount = Math.floor(rawWeights.length - vertexCount) / 2; // uint

        var weightOffset = this._intArray.length;
        var weight = dragonBones.BaseObject.borrowObject(dragonBones.WeightData);
        weight.count = weightCount;
        weight.offset = weightOffset;
        weightBoneIndices.length = weightBoneCount;
        this._intArray.length += 1 + 1 + weightBoneCount + vertexCount + weightCount;
        this._intArray[weightOffset + 1
        /* WeigthFloatOffset */
        ] = floatOffset;

        for (var i = 0; i < weightBoneCount; ++i) {
          var rawBoneIndex = rawBonePoses[i * 7]; // uint

          var bone = this._rawBones[rawBoneIndex];
          weight.addBone(bone);
          weightBoneIndices[i] = rawBoneIndex;
          this._intArray[weightOffset + 2
          /* WeigthBoneIndices */
          + i] = sortedBones.indexOf(bone);
        }

        this._floatArray.length += weightCount * 3;

        this._helpMatrixA.copyFromArray(rawSlotPose, 0);

        for (var i = 0, iW = 0, iB = weightOffset + 2
        /* WeigthBoneIndices */
        + weightBoneCount, iV = floatOffset; i < vertexCount; ++i) {
          var iD = i * 2;
          var vertexBoneCount = this._intArray[iB++] = rawWeights[iW++]; // uint

          var x = this._floatArray[vertexOffset + iD];
          var y = this._floatArray[vertexOffset + iD + 1];

          this._helpMatrixA.transformPoint(x, y, this._helpPoint);

          x = this._helpPoint.x;
          y = this._helpPoint.y;

          for (var j = 0; j < vertexBoneCount; ++j) {
            var rawBoneIndex = rawWeights[iW++]; // uint

            var boneIndex = weightBoneIndices.indexOf(rawBoneIndex);

            this._helpMatrixB.copyFromArray(rawBonePoses, boneIndex * 7 + 1);

            this._helpMatrixB.invert();

            this._helpMatrixB.transformPoint(x, y, this._helpPoint);

            this._intArray[iB++] = boneIndex;
            this._floatArray[iV++] = rawWeights[iW++];
            this._floatArray[iV++] = this._helpPoint.x;
            this._floatArray[iV++] = this._helpPoint.y;
          }
        }

        mesh.vertices.weight = weight;
        this._weightSlotPose[meshName] = rawSlotPose;
        this._weightBonePoses[meshName] = rawBonePoses;
      }
    };

    ObjectDataParser.prototype._parseMeshGlue = function (rawData, mesh) {
      rawData;
      mesh; // const rawWeights = rawData[DataParser.GLUE_WEIGHTS] as Array<number>;
      // const rawMeshes = rawData[DataParser.GLUE_MESHES] as Array<string>;
      // mesh.glue = BaseObject.borrowObject(GlueData);
      // mesh.glue.weights.length = rawWeights.length;
      // for (let i = 0, l = rawWeights.length; i < l; ++i) {
      //     mesh.glue.weights[i] = rawWeights[i];
      // }
      // for (let i = 0, l = rawMeshes.length; i < l; i += 3) {
      //     const glueMesh = this._armature.getMesh(rawMeshes[i], rawMeshes[i + 1], rawMeshes[i + 2]);
      //     mesh.glue.addMesh(glueMesh);
      // }
    };

    ObjectDataParser.prototype._parseBoundingBox = function (rawData) {
      var boundingBox = null;
      var type = 0
      /* Rectangle */
      ;

      if (dragonBones.DataParser.SUB_TYPE in rawData && typeof rawData[dragonBones.DataParser.SUB_TYPE] === "string") {
        type = dragonBones.DataParser._getBoundingBoxType(rawData[dragonBones.DataParser.SUB_TYPE]);
      } else {
        type = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SUB_TYPE, type);
      }

      switch (type) {
        case 0
        /* Rectangle */
        :
          boundingBox = dragonBones.BaseObject.borrowObject(dragonBones.RectangleBoundingBoxData);
          break;

        case 1
        /* Ellipse */
        :
          boundingBox = dragonBones.BaseObject.borrowObject(dragonBones.EllipseBoundingBoxData);
          break;

        case 2
        /* Polygon */
        :
          boundingBox = this._parsePolygonBoundingBox(rawData);
          break;
      }

      if (boundingBox !== null) {
        boundingBox.color = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.COLOR, 0x000000);

        if (boundingBox.type === 0
        /* Rectangle */
        || boundingBox.type === 1
        /* Ellipse */
        ) {
            boundingBox.width = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.WIDTH, 0.0);
            boundingBox.height = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.HEIGHT, 0.0);
          }
      }

      return boundingBox;
    };

    ObjectDataParser.prototype._parsePolygonBoundingBox = function (rawData) {
      var polygonBoundingBox = dragonBones.BaseObject.borrowObject(dragonBones.PolygonBoundingBoxData);

      if (dragonBones.DataParser.VERTICES in rawData) {
        var scale = this._armature.scale;
        var rawVertices = rawData[dragonBones.DataParser.VERTICES];
        var vertices = polygonBoundingBox.vertices;

        if (dragonBones.DragonBones.webAssembly) {
          vertices.resize(rawVertices.length, 0.0);
        } else {
          vertices.length = rawVertices.length;
        }

        for (var i = 0, l = rawVertices.length; i < l; i += 2) {
          var x = rawVertices[i] * scale;
          var y = rawVertices[i + 1] * scale;

          if (dragonBones.DragonBones.webAssembly) {
            vertices.set(i, x);
            vertices.set(i + 1, y);
          } else {
            vertices[i] = x;
            vertices[i + 1] = y;
          } // AABB.


          if (i === 0) {
            polygonBoundingBox.x = x;
            polygonBoundingBox.y = y;
            polygonBoundingBox.width = x;
            polygonBoundingBox.height = y;
          } else {
            if (x < polygonBoundingBox.x) {
              polygonBoundingBox.x = x;
            } else if (x > polygonBoundingBox.width) {
              polygonBoundingBox.width = x;
            }

            if (y < polygonBoundingBox.y) {
              polygonBoundingBox.y = y;
            } else if (y > polygonBoundingBox.height) {
              polygonBoundingBox.height = y;
            }
          }
        }

        polygonBoundingBox.width -= polygonBoundingBox.x;
        polygonBoundingBox.height -= polygonBoundingBox.y;
      } else {
        console.warn("Data error.\n Please reexport DragonBones Data to fixed the bug.");
      }

      return polygonBoundingBox;
    };

    ObjectDataParser.prototype._parseAnimation = function (rawData) {
      var animation = dragonBones.BaseObject.borrowObject(dragonBones.AnimationData);
      animation.frameCount = Math.max(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.DURATION, 1), 1);
      animation.playTimes = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.PLAY_TIMES, 1);
      animation.duration = animation.frameCount / this._armature.frameRate; // float

      animation.fadeInTime = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.FADE_IN_TIME, 0.0);
      animation.scale = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SCALE, 1.0);
      animation.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, dragonBones.DataParser.DEFAULT_NAME);

      if (animation.name.length === 0) {
        animation.name = dragonBones.DataParser.DEFAULT_NAME;
      }

      animation.frameIntOffset = this._frameIntArray.length;
      animation.frameFloatOffset = this._frameFloatArray.length;
      animation.frameOffset = this._frameArray.length;
      this._animation = animation;

      if (dragonBones.DataParser.FRAME in rawData) {
        var rawFrames = rawData[dragonBones.DataParser.FRAME];
        var keyFrameCount = rawFrames.length;

        if (keyFrameCount > 0) {
          for (var i = 0, frameStart = 0; i < keyFrameCount; ++i) {
            var rawFrame = rawFrames[i];

            this._parseActionDataInFrame(rawFrame, frameStart, null, null);

            frameStart += ObjectDataParser._getNumber(rawFrame, dragonBones.DataParser.DURATION, 1);
          }
        }
      }

      if (dragonBones.DataParser.Z_ORDER in rawData) {
        this._animation.zOrderTimeline = this._parseTimeline(rawData[dragonBones.DataParser.Z_ORDER], null, dragonBones.DataParser.FRAME, 1
        /* ZOrder */
        , false, false, 0, this._parseZOrderFrame);
      }

      if (dragonBones.DataParser.BONE in rawData) {
        var rawTimelines = rawData[dragonBones.DataParser.BONE];

        for (var _i = 0, rawTimelines_1 = rawTimelines; _i < rawTimelines_1.length; _i++) {
          var rawTimeline = rawTimelines_1[_i];

          this._parseBoneTimeline(rawTimeline);
        }
      }

      if (dragonBones.DataParser.SURFACE in rawData) {
        var rawTimelines = rawData[dragonBones.DataParser.SURFACE];

        for (var _a = 0, rawTimelines_2 = rawTimelines; _a < rawTimelines_2.length; _a++) {
          var rawTimeline = rawTimelines_2[_a];

          var surfaceName = ObjectDataParser._getString(rawTimeline, dragonBones.DataParser.NAME, "");

          this._surface = this._armature.getBone(surfaceName);

          if (this._surface === null) {
            continue;
          }

          var timeline = this._parseTimeline(rawTimeline, null, dragonBones.DataParser.FRAME, 50
          /* Surface */
          , false, true, 0, this._parseSurfaceFrame);

          if (timeline !== null) {
            this._animation.addSurfaceTimeline(this._surface, timeline);
          }

          this._surface = null; //
        }
      }

      if (dragonBones.DataParser.SLOT in rawData) {
        var rawTimelines = rawData[dragonBones.DataParser.SLOT];

        for (var _b = 0, rawTimelines_3 = rawTimelines; _b < rawTimelines_3.length; _b++) {
          var rawTimeline = rawTimelines_3[_b];

          this._parseSlotTimeline(rawTimeline);
        }
      }

      if (dragonBones.DataParser.FFD in rawData) {
        var rawTimelines = rawData[dragonBones.DataParser.FFD];

        for (var _c = 0, rawTimelines_4 = rawTimelines; _c < rawTimelines_4.length; _c++) {
          var rawTimeline = rawTimelines_4[_c];

          var skinName = ObjectDataParser._getString(rawTimeline, dragonBones.DataParser.SKIN, dragonBones.DataParser.DEFAULT_NAME);

          var slotName = ObjectDataParser._getString(rawTimeline, dragonBones.DataParser.SLOT, "");

          var displayName = ObjectDataParser._getString(rawTimeline, dragonBones.DataParser.NAME, "");

          if (skinName.length === 0) {
            //
            skinName = dragonBones.DataParser.DEFAULT_NAME;
          }

          this._slot = this._armature.getSlot(slotName);
          this._mesh = this._armature.getMesh(skinName, slotName, displayName);

          if (this._slot === null || this._mesh === null) {
            continue;
          }

          var timeline = this._parseTimeline(rawTimeline, null, dragonBones.DataParser.FRAME, 22
          /* SlotDeform */
          , false, true, 0, this._parseSlotFFDFrame);

          if (timeline !== null) {
            this._animation.addSlotTimeline(this._slot, timeline);
          }

          this._slot = null; //

          this._mesh = null; //
        }
      }

      if (dragonBones.DataParser.IK in rawData) {
        var rawTimelines = rawData[dragonBones.DataParser.IK];

        for (var _d = 0, rawTimelines_5 = rawTimelines; _d < rawTimelines_5.length; _d++) {
          var rawTimeline = rawTimelines_5[_d];

          var constraintName = ObjectDataParser._getString(rawTimeline, dragonBones.DataParser.NAME, "");

          var constraint = this._armature.getConstraint(constraintName);

          if (constraint === null) {
            continue;
          }

          var timeline = this._parseTimeline(rawTimeline, null, dragonBones.DataParser.FRAME, 30
          /* IKConstraint */
          , true, false, 2, this._parseIKConstraintFrame);

          if (timeline !== null) {
            this._animation.addConstraintTimeline(constraint, timeline);
          }
        }
      }

      if (dragonBones.DataParser.ANIMATION in rawData) {
        var rawTimelines = rawData[dragonBones.DataParser.ANIMATION];

        for (var _e = 0, rawTimelines_6 = rawTimelines; _e < rawTimelines_6.length; _e++) {
          var rawTimeline = rawTimelines_6[_e];

          var animationName = ObjectDataParser._getString(rawTimeline, dragonBones.DataParser.NAME, "");

          var timeline = this._parseTimeline(rawTimeline, null, dragonBones.DataParser.FRAME, 40
          /* AnimationTime */
          , true, false, 2, this._parseAnimationFrame);

          if (timeline !== null) {
            this._animation.addAnimationTimeline(animationName, timeline);
          }
        }
      }

      if (this._actionFrames.length > 0) {
        this._animation.actionTimeline = this._parseTimeline(null, this._actionFrames, "", 0
        /* Action */
        , false, false, 0, this._parseActionFrame);
        this._actionFrames.length = 0;
      }

      this._animation = null; //

      return animation;
    };

    ObjectDataParser.prototype._parseTimeline = function (rawData, rawFrames, framesKey, type, addIntOffset, addFloatOffset, frameValueCount, frameParser) {
      if (rawData !== null && framesKey.length > 0 && framesKey in rawData) {
        rawFrames = rawData[framesKey];
      }

      if (rawFrames === null) {
        return null;
      }

      var keyFrameCount = rawFrames.length;

      if (keyFrameCount === 0) {
        return null;
      }

      var frameIntArrayLength = this._frameIntArray.length;
      var frameFloatArrayLength = this._frameFloatArray.length;
      var timeline = dragonBones.BaseObject.borrowObject(dragonBones.TimelineData);
      var timelineOffset = this._timelineArray.length;
      this._timelineArray.length += 1 + 1 + 1 + 1 + 1 + keyFrameCount;

      if (rawData !== null) {
        this._timelineArray[timelineOffset + 0
        /* TimelineScale */
        ] = Math.round(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SCALE, 1.0) * 100);
        this._timelineArray[timelineOffset + 1
        /* TimelineOffset */
        ] = Math.round(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.OFFSET, 0.0) * 100);
      } else {
        this._timelineArray[timelineOffset + 0
        /* TimelineScale */
        ] = 100;
        this._timelineArray[timelineOffset + 1
        /* TimelineOffset */
        ] = 0;
      }

      this._timelineArray[timelineOffset + 2
      /* TimelineKeyFrameCount */
      ] = keyFrameCount;
      this._timelineArray[timelineOffset + 3
      /* TimelineFrameValueCount */
      ] = frameValueCount;

      if (addIntOffset) {
        this._timelineArray[timelineOffset + 4
        /* TimelineFrameValueOffset */
        ] = frameIntArrayLength - this._animation.frameIntOffset;
      } else if (addFloatOffset) {
        this._timelineArray[timelineOffset + 4
        /* TimelineFrameValueOffset */
        ] = frameFloatArrayLength - this._animation.frameFloatOffset;
      } else {
        this._timelineArray[timelineOffset + 4
        /* TimelineFrameValueOffset */
        ] = 0;
      }

      this._timeline = timeline;
      timeline.type = type;
      timeline.offset = timelineOffset;

      if (keyFrameCount === 1) {
        // Only one frame.
        timeline.frameIndicesOffset = -1;
        this._timelineArray[timelineOffset + 5
        /* TimelineFrameOffset */
        + 0] = frameParser.call(this, rawFrames[0], 0, 0) - this._animation.frameOffset;
      } else {
        var totalFrameCount = this._animation.frameCount + 1; // One more frame than animation.

        var frameIndices = this._data.frameIndices;
        var frameIndicesOffset = 0;

        if (dragonBones.DragonBones.webAssembly) {
          frameIndicesOffset = frameIndices.size();
          frameIndices.resize(frameIndicesOffset + totalFrameCount, 0);
        } else {
          frameIndicesOffset = frameIndices.length;
          frameIndices.length += totalFrameCount;
        }

        timeline.frameIndicesOffset = frameIndicesOffset;

        for (var i = 0, iK = 0, frameStart = 0, frameCount = 0; i < totalFrameCount; ++i) {
          if (frameStart + frameCount <= i && iK < keyFrameCount) {
            var rawFrame = rawFrames[iK];
            frameStart = i; // frame.frameStart;

            if (iK === keyFrameCount - 1) {
              frameCount = this._animation.frameCount - frameStart;
            } else {
              if (rawFrame instanceof ActionFrame) {
                frameCount = this._actionFrames[iK + 1].frameStart - frameStart;
              } else {
                frameCount = ObjectDataParser._getNumber(rawFrame, dragonBones.DataParser.DURATION, 1);
              }
            }

            this._timelineArray[timelineOffset + 5
            /* TimelineFrameOffset */
            + iK] = frameParser.call(this, rawFrame, frameStart, frameCount) - this._animation.frameOffset;
            iK++;
          }

          if (dragonBones.DragonBones.webAssembly) {
            frameIndices.set(frameIndicesOffset + i, iK - 1);
          } else {
            frameIndices[frameIndicesOffset + i] = iK - 1;
          }
        }
      }

      this._timeline = null; //

      return timeline;
    };

    ObjectDataParser.prototype._parseBoneTimeline = function (rawData) {
      var bone = this._armature.getBone(ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, ""));

      if (bone === null) {
        return;
      }

      this._bone = bone;
      this._slot = this._armature.getSlot(this._bone.name);

      if (dragonBones.DataParser.TRANSLATE_FRAME in rawData) {
        var timeline = this._parseTimeline(rawData, null, dragonBones.DataParser.TRANSLATE_FRAME, 11
        /* BoneTranslate */
        , false, true, 2, this._parseBoneTranslateFrame);

        if (timeline !== null) {
          this._animation.addBoneTimeline(bone, timeline);
        }
      }

      if (dragonBones.DataParser.ROTATE_FRAME in rawData) {
        var timeline = this._parseTimeline(rawData, null, dragonBones.DataParser.ROTATE_FRAME, 12
        /* BoneRotate */
        , false, true, 2, this._parseBoneRotateFrame);

        if (timeline !== null) {
          this._animation.addBoneTimeline(bone, timeline);
        }
      }

      if (dragonBones.DataParser.SCALE_FRAME in rawData) {
        var timeline = this._parseTimeline(rawData, null, dragonBones.DataParser.SCALE_FRAME, 13
        /* BoneScale */
        , false, true, 2, this._parseBoneScaleFrame);

        if (timeline !== null) {
          this._animation.addBoneTimeline(bone, timeline);
        }
      }

      if (dragonBones.DataParser.FRAME in rawData) {
        var timeline = this._parseTimeline(rawData, null, dragonBones.DataParser.FRAME, 10
        /* BoneAll */
        , false, true, 6, this._parseBoneAllFrame);

        if (timeline !== null) {
          this._animation.addBoneTimeline(bone, timeline);
        }
      }

      this._bone = null; //

      this._slot = null; //
    };

    ObjectDataParser.prototype._parseSlotTimeline = function (rawData) {
      var slot = this._armature.getSlot(ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, ""));

      if (slot === null) {
        return;
      }

      this._slot = slot; // Display timeline.

      var displayTimeline = null;

      if (dragonBones.DataParser.DISPLAY_FRAME in rawData) {
        displayTimeline = this._parseTimeline(rawData, null, dragonBones.DataParser.DISPLAY_FRAME, 20
        /* SlotDisplay */
        , false, false, 0, this._parseSlotDisplayFrame);
      } else {
        displayTimeline = this._parseTimeline(rawData, null, dragonBones.DataParser.FRAME, 20
        /* SlotDisplay */
        , false, false, 0, this._parseSlotDisplayFrame);
      }

      if (displayTimeline !== null) {
        this._animation.addSlotTimeline(slot, displayTimeline);
      }

      var colorTimeline = null;

      if (dragonBones.DataParser.COLOR_FRAME in rawData) {
        colorTimeline = this._parseTimeline(rawData, null, dragonBones.DataParser.COLOR_FRAME, 21
        /* SlotColor */
        , true, false, 1, this._parseSlotColorFrame);
      } else {
        colorTimeline = this._parseTimeline(rawData, null, dragonBones.DataParser.FRAME, 21
        /* SlotColor */
        , true, false, 1, this._parseSlotColorFrame);
      }

      if (colorTimeline !== null) {
        this._animation.addSlotTimeline(slot, colorTimeline);
      }

      this._slot = null; //
    };

    ObjectDataParser.prototype._parseFrame = function (rawData, frameStart, frameCount) {
      // tslint:disable-next-line:no-unused-expression
      rawData; // tslint:disable-next-line:no-unused-expression

      frameCount;
      var frameOffset = this._frameArray.length;
      this._frameArray.length += 1;
      this._frameArray[frameOffset + 0
      /* FramePosition */
      ] = frameStart;
      return frameOffset;
    };

    ObjectDataParser.prototype._parseTweenFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseFrame(rawData, frameStart, frameCount);

      if (frameCount > 0) {
        if (dragonBones.DataParser.CURVE in rawData) {
          var sampleCount = frameCount + 1;
          this._helpArray.length = sampleCount;

          this._samplingEasingCurve(rawData[dragonBones.DataParser.CURVE], this._helpArray);

          this._frameArray.length += 1 + 1 + this._helpArray.length;
          this._frameArray[frameOffset + 1
          /* FrameTweenType */
          ] = 2
          /* Curve */
          ;
          this._frameArray[frameOffset + 2
          /* FrameTweenEasingOrCurveSampleCount */
          ] = sampleCount;

          for (var i = 0; i < sampleCount; ++i) {
            this._frameArray[frameOffset + 3
            /* FrameCurveSamples */
            + i] = Math.round(this._helpArray[i] * 10000.0);
          }
        } else {
          var noTween = -2.0;
          var tweenEasing = noTween;

          if (dragonBones.DataParser.TWEEN_EASING in rawData) {
            tweenEasing = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.TWEEN_EASING, noTween);
          }

          if (tweenEasing === noTween) {
            this._frameArray.length += 1;
            this._frameArray[frameOffset + 1
            /* FrameTweenType */
            ] = 0
            /* None */
            ;
          } else if (tweenEasing === 0.0) {
            this._frameArray.length += 1;
            this._frameArray[frameOffset + 1
            /* FrameTweenType */
            ] = 1
            /* Line */
            ;
          } else if (tweenEasing < 0.0) {
            this._frameArray.length += 1 + 1;
            this._frameArray[frameOffset + 1
            /* FrameTweenType */
            ] = 3
            /* QuadIn */
            ;
            this._frameArray[frameOffset + 2
            /* FrameTweenEasingOrCurveSampleCount */
            ] = Math.round(-tweenEasing * 100.0);
          } else if (tweenEasing <= 1.0) {
            this._frameArray.length += 1 + 1;
            this._frameArray[frameOffset + 1
            /* FrameTweenType */
            ] = 4
            /* QuadOut */
            ;
            this._frameArray[frameOffset + 2
            /* FrameTweenEasingOrCurveSampleCount */
            ] = Math.round(tweenEasing * 100.0);
          } else {
            this._frameArray.length += 1 + 1;
            this._frameArray[frameOffset + 1
            /* FrameTweenType */
            ] = 5
            /* QuadInOut */
            ;
            this._frameArray[frameOffset + 2
            /* FrameTweenEasingOrCurveSampleCount */
            ] = Math.round(tweenEasing * 100.0 - 100.0);
          }
        }
      } else {
        this._frameArray.length += 1;
        this._frameArray[frameOffset + 1
        /* FrameTweenType */
        ] = 0
        /* None */
        ;
      }

      return frameOffset;
    };

    ObjectDataParser.prototype._parseActionFrame = function (frame, frameStart, frameCount) {
      // tslint:disable-next-line:no-unused-expression
      frameCount;
      var frameOffset = this._frameArray.length;
      var actionCount = frame.actions.length;
      this._frameArray.length += 1 + 1 + actionCount;
      this._frameArray[frameOffset + 0
      /* FramePosition */
      ] = frameStart;
      this._frameArray[frameOffset + 0
      /* FramePosition */
      + 1] = actionCount; // Action count.

      for (var i = 0; i < actionCount; ++i) {
        // Action offsets.
        this._frameArray[frameOffset + 0
        /* FramePosition */
        + 2 + i] = frame.actions[i];
      }

      return frameOffset;
    };

    ObjectDataParser.prototype._parseZOrderFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseFrame(rawData, frameStart, frameCount);

      if (dragonBones.DataParser.Z_ORDER in rawData) {
        var rawZOrder = rawData[dragonBones.DataParser.Z_ORDER];

        if (rawZOrder.length > 0) {
          var slotCount = this._armature.sortedSlots.length;
          var unchanged = new Array(slotCount - rawZOrder.length / 2);
          var zOrders = new Array(slotCount);

          for (var i_1 = 0; i_1 < unchanged.length; ++i_1) {
            unchanged[i_1] = 0;
          }

          for (var i_2 = 0; i_2 < slotCount; ++i_2) {
            zOrders[i_2] = -1;
          }

          var originalIndex = 0;
          var unchangedIndex = 0;

          for (var i_3 = 0, l = rawZOrder.length; i_3 < l; i_3 += 2) {
            var slotIndex = rawZOrder[i_3];
            var zOrderOffset = rawZOrder[i_3 + 1];

            while (originalIndex !== slotIndex) {
              unchanged[unchangedIndex++] = originalIndex++;
            }

            var index = originalIndex + zOrderOffset;
            zOrders[index] = originalIndex++;
          }

          while (originalIndex < slotCount) {
            unchanged[unchangedIndex++] = originalIndex++;
          }

          this._frameArray.length += 1 + slotCount;
          this._frameArray[frameOffset + 1] = slotCount;
          var i = slotCount;

          while (i--) {
            if (zOrders[i] === -1) {
              this._frameArray[frameOffset + 2 + i] = unchanged[--unchangedIndex] || 0;
            } else {
              this._frameArray[frameOffset + 2 + i] = zOrders[i] || 0;
            }
          }

          return frameOffset;
        }
      }

      this._frameArray.length += 1;
      this._frameArray[frameOffset + 1] = 0;
      return frameOffset;
    };

    ObjectDataParser.prototype._parseBoneAllFrame = function (rawData, frameStart, frameCount) {
      this._helpTransform.identity();

      if (dragonBones.DataParser.TRANSFORM in rawData) {
        this._parseTransform(rawData[dragonBones.DataParser.TRANSFORM], this._helpTransform, 1.0);
      } // Modify rotation.


      var rotation = this._helpTransform.rotation;

      if (frameStart !== 0) {
        if (this._prevClockwise === 0) {
          rotation = this._prevRotation + dragonBones.Transform.normalizeRadian(rotation - this._prevRotation);
        } else {
          if (this._prevClockwise > 0 ? rotation >= this._prevRotation : rotation <= this._prevRotation) {
            this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1;
          }

          rotation = this._prevRotation + rotation - this._prevRotation + dragonBones.Transform.PI_D * this._prevClockwise;
        }
      }

      this._prevClockwise = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.TWEEN_ROTATE, 0.0);
      this._prevRotation = rotation; //

      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var frameFloatOffset = this._frameFloatArray.length;
      this._frameFloatArray.length += 6;
      this._frameFloatArray[frameFloatOffset++] = this._helpTransform.x;
      this._frameFloatArray[frameFloatOffset++] = this._helpTransform.y;
      this._frameFloatArray[frameFloatOffset++] = rotation;
      this._frameFloatArray[frameFloatOffset++] = this._helpTransform.skew;
      this._frameFloatArray[frameFloatOffset++] = this._helpTransform.scaleX;
      this._frameFloatArray[frameFloatOffset++] = this._helpTransform.scaleY;

      this._parseActionDataInFrame(rawData, frameStart, this._bone, this._slot);

      return frameOffset;
    };

    ObjectDataParser.prototype._parseBoneTranslateFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var frameFloatOffset = this._frameFloatArray.length;
      this._frameFloatArray.length += 2;
      this._frameFloatArray[frameFloatOffset++] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.X, 0.0);
      this._frameFloatArray[frameFloatOffset++] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.Y, 0.0);
      return frameOffset;
    };

    ObjectDataParser.prototype._parseBoneRotateFrame = function (rawData, frameStart, frameCount) {
      // Modify rotation.
      var rotation = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.ROTATE, 0.0) * dragonBones.Transform.DEG_RAD;

      if (frameStart !== 0) {
        if (this._prevClockwise === 0) {
          rotation = this._prevRotation + dragonBones.Transform.normalizeRadian(rotation - this._prevRotation);
        } else {
          if (this._prevClockwise > 0 ? rotation >= this._prevRotation : rotation <= this._prevRotation) {
            this._prevClockwise = this._prevClockwise > 0 ? this._prevClockwise - 1 : this._prevClockwise + 1;
          }

          rotation = this._prevRotation + rotation - this._prevRotation + dragonBones.Transform.PI_D * this._prevClockwise;
        }
      }

      this._prevClockwise = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.CLOCK_WISE, 0);
      this._prevRotation = rotation; //

      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var frameFloatOffset = this._frameFloatArray.length;
      this._frameFloatArray.length += 2;
      this._frameFloatArray[frameFloatOffset++] = rotation;
      this._frameFloatArray[frameFloatOffset++] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SKEW, 0.0) * dragonBones.Transform.DEG_RAD;
      return frameOffset;
    };

    ObjectDataParser.prototype._parseBoneScaleFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var frameFloatOffset = this._frameFloatArray.length;
      this._frameFloatArray.length += 2;
      this._frameFloatArray[frameFloatOffset++] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.X, 1.0);
      this._frameFloatArray[frameFloatOffset++] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.Y, 1.0);
      return frameOffset;
    };

    ObjectDataParser.prototype._parseSurfaceFrame = function (rawData, frameStart, frameCount) {
      var frameFloatOffset = this._frameFloatArray.length;

      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var rawVertices = rawData[dragonBones.DataParser.VERTICES];

      var offset = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.OFFSET, 0); // uint


      var vertexCount = this._surface.vertices.length / 2; // uint

      var x = 0.0;
      var y = 0.0;
      this._frameFloatArray.length += vertexCount * 2;

      for (var i = 0; i < vertexCount * 2; i += 2) {
        if (i < offset || i - offset >= rawVertices.length) {
          x = 0.0;
        } else {
          x = rawVertices[i - offset];
        }

        if (i + 1 < offset || i + 1 - offset >= rawVertices.length) {
          y = 0.0;
        } else {
          y = rawVertices[i + 1 - offset];
        }

        this._frameFloatArray[frameFloatOffset + i] = x;
        this._frameFloatArray[frameFloatOffset + i + 1] = y;
      }

      if (frameStart === 0) {
        var frameIntOffset = this._frameIntArray.length;
        this._frameIntArray.length += 1 + 1 + 1 + 1 + 1;
        this._frameIntArray[frameIntOffset + 0
        /* DeformVertexOffset */
        ] = 0; // 

        this._frameIntArray[frameIntOffset + 1
        /* DeformCount */
        ] = this._frameFloatArray.length - frameFloatOffset;
        this._frameIntArray[frameIntOffset + 2
        /* DeformValueCount */
        ] = this._frameFloatArray.length - frameFloatOffset;
        this._frameIntArray[frameIntOffset + 3
        /* DeformValueOffset */
        ] = 0;
        this._frameIntArray[frameIntOffset + 4
        /* DeformFloatOffset */
        ] = frameFloatOffset - this._animation.frameFloatOffset;
        this._timelineArray[this._timeline.offset + 3
        /* TimelineFrameValueCount */
        ] = frameIntOffset - this._animation.frameIntOffset;
      }

      return frameOffset;
    };

    ObjectDataParser.prototype._parseSlotDisplayFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseFrame(rawData, frameStart, frameCount);

      this._frameArray.length += 1;

      if (dragonBones.DataParser.VALUE in rawData) {
        this._frameArray[frameOffset + 1] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.VALUE, 0);
      } else {
        this._frameArray[frameOffset + 1] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.DISPLAY_INDEX, 0);
      }

      this._parseActionDataInFrame(rawData, frameStart, this._slot.parent, this._slot);

      return frameOffset;
    };

    ObjectDataParser.prototype._parseSlotColorFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var colorOffset = -1;

      if (dragonBones.DataParser.VALUE in rawData || dragonBones.DataParser.COLOR in rawData) {
        var rawColor = dragonBones.DataParser.VALUE in rawData ? rawData[dragonBones.DataParser.VALUE] : rawData[dragonBones.DataParser.COLOR];

        for (var k in rawColor) {
          // Detects the presence of color.
          // tslint:disable-next-line:no-unused-expression
          k;

          this._parseColorTransform(rawColor, this._helpColorTransform);

          colorOffset = this._intArray.length;
          this._intArray.length += 8;
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.alphaMultiplier * 100);
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.redMultiplier * 100);
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.greenMultiplier * 100);
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.blueMultiplier * 100);
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.alphaOffset);
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.redOffset);
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.greenOffset);
          this._intArray[colorOffset++] = Math.round(this._helpColorTransform.blueOffset);
          colorOffset -= 8;
          break;
        }
      }

      if (colorOffset < 0) {
        if (this._defaultColorOffset < 0) {
          this._defaultColorOffset = colorOffset = this._intArray.length;
          this._intArray.length += 8;
          this._intArray[colorOffset++] = 100;
          this._intArray[colorOffset++] = 100;
          this._intArray[colorOffset++] = 100;
          this._intArray[colorOffset++] = 100;
          this._intArray[colorOffset++] = 0;
          this._intArray[colorOffset++] = 0;
          this._intArray[colorOffset++] = 0;
          this._intArray[colorOffset++] = 0;
        }

        colorOffset = this._defaultColorOffset;
      }

      var frameIntOffset = this._frameIntArray.length;
      this._frameIntArray.length += 1;
      this._frameIntArray[frameIntOffset] = colorOffset;
      return frameOffset;
    };

    ObjectDataParser.prototype._parseSlotFFDFrame = function (rawData, frameStart, frameCount) {
      var frameFloatOffset = this._frameFloatArray.length;

      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var rawVertices = dragonBones.DataParser.VERTICES in rawData ? rawData[dragonBones.DataParser.VERTICES] : null;

      var offset = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.OFFSET, 0); // uint


      var vertexCount = this._intArray[this._mesh.vertices.offset + 0
      /* MeshVertexCount */
      ];
      var meshName = this._mesh.parent.name + "_" + this._slot.name + "_" + this._mesh.name;
      var weight = this._mesh.vertices.weight;
      var x = 0.0;
      var y = 0.0;
      var iB = 0;
      var iV = 0;

      if (weight !== null) {
        var rawSlotPose = this._weightSlotPose[meshName];

        this._helpMatrixA.copyFromArray(rawSlotPose, 0);

        this._frameFloatArray.length += weight.count * 2;
        iB = weight.offset + 2
        /* WeigthBoneIndices */
        + weight.bones.length;
      } else {
        this._frameFloatArray.length += vertexCount * 2;
      }

      for (var i = 0; i < vertexCount * 2; i += 2) {
        if (rawVertices === null) {
          // Fill 0.
          x = 0.0;
          y = 0.0;
        } else {
          if (i < offset || i - offset >= rawVertices.length) {
            x = 0.0;
          } else {
            x = rawVertices[i - offset];
          }

          if (i + 1 < offset || i + 1 - offset >= rawVertices.length) {
            y = 0.0;
          } else {
            y = rawVertices[i + 1 - offset];
          }
        }

        if (weight !== null) {
          // If mesh is skinned, transform point by bone bind pose.
          var rawBonePoses = this._weightBonePoses[meshName];
          var vertexBoneCount = this._intArray[iB++];

          this._helpMatrixA.transformPoint(x, y, this._helpPoint, true);

          x = this._helpPoint.x;
          y = this._helpPoint.y;

          for (var j = 0; j < vertexBoneCount; ++j) {
            var boneIndex = this._intArray[iB++];

            this._helpMatrixB.copyFromArray(rawBonePoses, boneIndex * 7 + 1);

            this._helpMatrixB.invert();

            this._helpMatrixB.transformPoint(x, y, this._helpPoint, true);

            this._frameFloatArray[frameFloatOffset + iV++] = this._helpPoint.x;
            this._frameFloatArray[frameFloatOffset + iV++] = this._helpPoint.y;
          }
        } else {
          this._frameFloatArray[frameFloatOffset + i] = x;
          this._frameFloatArray[frameFloatOffset + i + 1] = y;
        }
      }

      if (frameStart === 0) {
        var frameIntOffset = this._frameIntArray.length;
        this._frameIntArray.length += 1 + 1 + 1 + 1 + 1;
        this._frameIntArray[frameIntOffset + 0
        /* DeformVertexOffset */
        ] = this._mesh.vertices.offset;
        this._frameIntArray[frameIntOffset + 1
        /* DeformCount */
        ] = this._frameFloatArray.length - frameFloatOffset;
        this._frameIntArray[frameIntOffset + 2
        /* DeformValueCount */
        ] = this._frameFloatArray.length - frameFloatOffset;
        this._frameIntArray[frameIntOffset + 3
        /* DeformValueOffset */
        ] = 0;
        this._frameIntArray[frameIntOffset + 4
        /* DeformFloatOffset */
        ] = frameFloatOffset - this._animation.frameFloatOffset;
        this._timelineArray[this._timeline.offset + 3
        /* TimelineFrameValueCount */
        ] = frameIntOffset - this._animation.frameIntOffset;
      }

      return frameOffset;
    };

    ObjectDataParser.prototype._parseIKConstraintFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var frameIntOffset = this._frameIntArray.length;
      this._frameIntArray.length += 2;
      this._frameIntArray[frameIntOffset++] = ObjectDataParser._getBoolean(rawData, dragonBones.DataParser.BEND_POSITIVE, true) ? 1 : 0;
      this._frameIntArray[frameIntOffset++] = Math.round(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.WEIGHT, 1.0) * 100.0);
      return frameOffset;
    };

    ObjectDataParser.prototype._parseAnimationFrame = function (rawData, frameStart, frameCount) {
      var frameOffset = this._parseTweenFrame(rawData, frameStart, frameCount);

      var frameIntOffset = this._frameIntArray.length;
      this._frameIntArray.length += 2;
      this._frameIntArray[frameIntOffset++] = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.VALUE, 0);
      this._frameIntArray[frameIntOffset++] = Math.round(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.WEIGHT, 1.0) * 100.0);
      return frameOffset;
    };

    ObjectDataParser.prototype._parseActionData = function (rawData, type, bone, slot) {
      var actions = new Array();

      if (typeof rawData === "string") {
        var action = dragonBones.BaseObject.borrowObject(dragonBones.ActionData);
        action.type = type;
        action.name = rawData;
        action.bone = bone;
        action.slot = slot;
        actions.push(action);
      } else if (rawData instanceof Array) {
        for (var _i = 0, rawData_2 = rawData; _i < rawData_2.length; _i++) {
          var rawAction = rawData_2[_i];
          var action = dragonBones.BaseObject.borrowObject(dragonBones.ActionData);

          if (dragonBones.DataParser.GOTO_AND_PLAY in rawAction) {
            action.type = 0
            /* Play */
            ;
            action.name = ObjectDataParser._getString(rawAction, dragonBones.DataParser.GOTO_AND_PLAY, "");
          } else {
            if (dragonBones.DataParser.TYPE in rawAction && typeof rawAction[dragonBones.DataParser.TYPE] === "string") {
              action.type = dragonBones.DataParser._getActionType(rawAction[dragonBones.DataParser.TYPE]);
            } else {
              action.type = ObjectDataParser._getNumber(rawAction, dragonBones.DataParser.TYPE, type);
            }

            action.name = ObjectDataParser._getString(rawAction, dragonBones.DataParser.NAME, "");
          }

          if (dragonBones.DataParser.BONE in rawAction) {
            var boneName = ObjectDataParser._getString(rawAction, dragonBones.DataParser.BONE, "");

            action.bone = this._armature.getBone(boneName);
          } else {
            action.bone = bone;
          }

          if (dragonBones.DataParser.SLOT in rawAction) {
            var slotName = ObjectDataParser._getString(rawAction, dragonBones.DataParser.SLOT, "");

            action.slot = this._armature.getSlot(slotName);
          } else {
            action.slot = slot;
          }

          var userData = null;

          if (dragonBones.DataParser.INTS in rawAction) {
            if (userData === null) {
              userData = dragonBones.BaseObject.borrowObject(dragonBones.UserData);
            }

            var rawInts = rawAction[dragonBones.DataParser.INTS];

            for (var _a = 0, rawInts_1 = rawInts; _a < rawInts_1.length; _a++) {
              var rawValue = rawInts_1[_a];
              userData.addInt(rawValue);
            }
          }

          if (dragonBones.DataParser.FLOATS in rawAction) {
            if (userData === null) {
              userData = dragonBones.BaseObject.borrowObject(dragonBones.UserData);
            }

            var rawFloats = rawAction[dragonBones.DataParser.FLOATS];

            for (var _b = 0, rawFloats_1 = rawFloats; _b < rawFloats_1.length; _b++) {
              var rawValue = rawFloats_1[_b];
              userData.addFloat(rawValue);
            }
          }

          if (dragonBones.DataParser.STRINGS in rawAction) {
            if (userData === null) {
              userData = dragonBones.BaseObject.borrowObject(dragonBones.UserData);
            }

            var rawStrings = rawAction[dragonBones.DataParser.STRINGS];

            for (var _c = 0, rawStrings_1 = rawStrings; _c < rawStrings_1.length; _c++) {
              var rawValue = rawStrings_1[_c];
              userData.addString(rawValue);
            }
          }

          action.data = userData;
          actions.push(action);
        }
      }

      return actions;
    };

    ObjectDataParser.prototype._parseTransform = function (rawData, transform, scale) {
      transform.x = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.X, 0.0) * scale;
      transform.y = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.Y, 0.0) * scale;

      if (dragonBones.DataParser.ROTATE in rawData || dragonBones.DataParser.SKEW in rawData) {
        transform.rotation = dragonBones.Transform.normalizeRadian(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.ROTATE, 0.0) * dragonBones.Transform.DEG_RAD);
        transform.skew = dragonBones.Transform.normalizeRadian(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SKEW, 0.0) * dragonBones.Transform.DEG_RAD);
      } else if (dragonBones.DataParser.SKEW_X in rawData || dragonBones.DataParser.SKEW_Y in rawData) {
        transform.rotation = dragonBones.Transform.normalizeRadian(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SKEW_Y, 0.0) * dragonBones.Transform.DEG_RAD);
        transform.skew = dragonBones.Transform.normalizeRadian(ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SKEW_X, 0.0) * dragonBones.Transform.DEG_RAD) - transform.rotation;
      }

      transform.scaleX = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SCALE_X, 1.0);
      transform.scaleY = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SCALE_Y, 1.0);
    };

    ObjectDataParser.prototype._parseColorTransform = function (rawData, color) {
      color.alphaMultiplier = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.ALPHA_MULTIPLIER, 100) * 0.01;
      color.redMultiplier = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.RED_MULTIPLIER, 100) * 0.01;
      color.greenMultiplier = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.GREEN_MULTIPLIER, 100) * 0.01;
      color.blueMultiplier = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.BLUE_MULTIPLIER, 100) * 0.01;
      color.alphaOffset = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.ALPHA_OFFSET, 0);
      color.redOffset = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.RED_OFFSET, 0);
      color.greenOffset = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.GREEN_OFFSET, 0);
      color.blueOffset = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.BLUE_OFFSET, 0);
    };

    ObjectDataParser.prototype._parseArray = function (rawData) {
      // tslint:disable-next-line:no-unused-expression
      rawData;
      this._intArray.length = 0;
      this._floatArray.length = 0;
      this._frameIntArray.length = 0;
      this._frameFloatArray.length = 0;
      this._frameArray.length = 0;
      this._timelineArray.length = 0;
    };

    ObjectDataParser.prototype._modifyArray = function () {
      // Align.
      if (this._intArray.length % Int16Array.BYTES_PER_ELEMENT !== 0) {
        this._intArray.push(0);
      }

      if (this._frameIntArray.length % Int16Array.BYTES_PER_ELEMENT !== 0) {
        this._frameIntArray.push(0);
      }

      if (this._frameArray.length % Int16Array.BYTES_PER_ELEMENT !== 0) {
        this._frameArray.push(0);
      }

      if (this._timelineArray.length % Uint16Array.BYTES_PER_ELEMENT !== 0) {
        this._timelineArray.push(0);
      }

      var l1 = this._intArray.length * Int16Array.BYTES_PER_ELEMENT;
      var l2 = this._floatArray.length * Float32Array.BYTES_PER_ELEMENT;
      var l3 = this._frameIntArray.length * Int16Array.BYTES_PER_ELEMENT;
      var l4 = this._frameFloatArray.length * Float32Array.BYTES_PER_ELEMENT;
      var l5 = this._frameArray.length * Int16Array.BYTES_PER_ELEMENT;
      var l6 = this._timelineArray.length * Uint16Array.BYTES_PER_ELEMENT;
      var lTotal = l1 + l2 + l3 + l4 + l5 + l6;

      if (dragonBones.DragonBones.webAssembly) {
        var shareBuffer = dragonBones.webAssemblyModule.HEAP16.buffer;

        var bufferPointer = dragonBones.webAssemblyModule._malloc(lTotal);

        var intArray = new Int16Array(shareBuffer, bufferPointer, this._intArray.length);
        var floatArray = new Float32Array(shareBuffer, bufferPointer + l1, this._floatArray.length);
        var frameIntArray = new Int16Array(shareBuffer, bufferPointer + l1 + l2, this._frameIntArray.length);
        var frameFloatArray = new Float32Array(shareBuffer, bufferPointer + l1 + l2 + l3, this._frameFloatArray.length);
        var frameArray = new Int16Array(shareBuffer, bufferPointer + l1 + l2 + l3 + l4, this._frameArray.length);
        var timelineArray = new Uint16Array(shareBuffer, bufferPointer + l1 + l2 + l3 + l4 + l5, this._timelineArray.length);

        for (var i = 0, l = this._intArray.length; i < l; ++i) {
          intArray[i] = this._intArray[i];
        }

        for (var i = 0, l = this._floatArray.length; i < l; ++i) {
          floatArray[i] = this._floatArray[i];
        }

        for (var i = 0, l = this._frameIntArray.length; i < l; ++i) {
          frameIntArray[i] = this._frameIntArray[i];
        }

        for (var i = 0, l = this._frameFloatArray.length; i < l; ++i) {
          frameFloatArray[i] = this._frameFloatArray[i];
        }

        for (var i = 0, l = this._frameArray.length; i < l; ++i) {
          frameArray[i] = this._frameArray[i];
        }

        for (var i = 0, l = this._timelineArray.length; i < l; ++i) {
          timelineArray[i] = this._timelineArray[i];
        }

        dragonBones.webAssemblyModule.setDataBinary(this._data, bufferPointer, l1, l2, l3, l4, l5, l6);
      } else {
        var binary = new ArrayBuffer(lTotal);
        var intArray = new Int16Array(binary, 0, this._intArray.length);
        var floatArray = new Float32Array(binary, l1, this._floatArray.length);
        var frameIntArray = new Int16Array(binary, l1 + l2, this._frameIntArray.length);
        var frameFloatArray = new Float32Array(binary, l1 + l2 + l3, this._frameFloatArray.length);
        var frameArray = new Int16Array(binary, l1 + l2 + l3 + l4, this._frameArray.length);
        var timelineArray = new Uint16Array(binary, l1 + l2 + l3 + l4 + l5, this._timelineArray.length);

        for (var i = 0, l = this._intArray.length; i < l; ++i) {
          intArray[i] = this._intArray[i];
        }

        for (var i = 0, l = this._floatArray.length; i < l; ++i) {
          floatArray[i] = this._floatArray[i];
        }

        for (var i = 0, l = this._frameIntArray.length; i < l; ++i) {
          frameIntArray[i] = this._frameIntArray[i];
        }

        for (var i = 0, l = this._frameFloatArray.length; i < l; ++i) {
          frameFloatArray[i] = this._frameFloatArray[i];
        }

        for (var i = 0, l = this._frameArray.length; i < l; ++i) {
          frameArray[i] = this._frameArray[i];
        }

        for (var i = 0, l = this._timelineArray.length; i < l; ++i) {
          timelineArray[i] = this._timelineArray[i];
        }

        this._data.binary = binary;
        this._data.intArray = intArray;
        this._data.floatArray = floatArray;
        this._data.frameIntArray = frameIntArray;
        this._data.frameFloatArray = frameFloatArray;
        this._data.frameArray = frameArray;
        this._data.timelineArray = timelineArray;
      }

      this._defaultColorOffset = -1;
    };

    ObjectDataParser.prototype.parseDragonBonesData = function (rawData, scale) {
      if (scale === void 0) {
        scale = 1;
      }

      console.assert(rawData !== null && rawData !== undefined, "Data error.");

      var version = ObjectDataParser._getString(rawData, dragonBones.DataParser.VERSION, "");

      var compatibleVersion = ObjectDataParser._getString(rawData, dragonBones.DataParser.COMPATIBLE_VERSION, "");

      if (dragonBones.DataParser.DATA_VERSIONS.indexOf(version) >= 0 || dragonBones.DataParser.DATA_VERSIONS.indexOf(compatibleVersion) >= 0) {
        var data = dragonBones.BaseObject.borrowObject(dragonBones.DragonBonesData);
        data.version = version;
        data.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");
        data.frameRate = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.FRAME_RATE, 24);

        if (data.frameRate === 0) {
          // Data error.
          data.frameRate = 24;
        }

        if (dragonBones.DataParser.ARMATURE in rawData) {
          this._data = data;

          this._parseArray(rawData);

          var rawArmatures = rawData[dragonBones.DataParser.ARMATURE];

          for (var _i = 0, rawArmatures_1 = rawArmatures; _i < rawArmatures_1.length; _i++) {
            var rawArmature = rawArmatures_1[_i];
            data.addArmature(this._parseArmature(rawArmature, scale));
          }

          if (!this._data.binary) {
            // DragonBones.webAssembly ? 0 : null;
            this._modifyArray();
          }

          if (dragonBones.DataParser.STAGE in rawData) {
            data.stage = data.getArmature(ObjectDataParser._getString(rawData, dragonBones.DataParser.STAGE, ""));
          } else if (data.armatureNames.length > 0) {
            data.stage = data.getArmature(data.armatureNames[0]);
          }

          this._data = null;
        }

        if (dragonBones.DataParser.TEXTURE_ATLAS in rawData) {
          this._rawTextureAtlases = rawData[dragonBones.DataParser.TEXTURE_ATLAS];
        }

        return data;
      } else {
        console.assert(false, "Nonsupport data version: " + version + "\n" + "Please convert DragonBones data to support version.\n" + "Read more: https://github.com/DragonBones/Tools/");
      }

      return null;
    };

    ObjectDataParser.prototype.parseTextureAtlasData = function (rawData, textureAtlasData, scale) {
      if (scale === void 0) {
        scale = 1.0;
      }

      console.assert(rawData !== undefined);

      if (rawData === null) {
        if (this._rawTextureAtlases === null || this._rawTextureAtlases.length === 0) {
          return false;
        }

        var rawTextureAtlas = this._rawTextureAtlases[this._rawTextureAtlasIndex++];
        this.parseTextureAtlasData(rawTextureAtlas, textureAtlasData, scale);

        if (this._rawTextureAtlasIndex >= this._rawTextureAtlases.length) {
          this._rawTextureAtlasIndex = 0;
          this._rawTextureAtlases = null;
        }

        return true;
      } // Texture format.


      textureAtlasData.width = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.WIDTH, 0);
      textureAtlasData.height = ObjectDataParser._getNumber(rawData, dragonBones.DataParser.HEIGHT, 0);
      textureAtlasData.scale = scale === 1.0 ? 1.0 / ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SCALE, 1.0) : scale;
      textureAtlasData.name = ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, "");
      textureAtlasData.imagePath = ObjectDataParser._getString(rawData, dragonBones.DataParser.IMAGE_PATH, "");

      if (dragonBones.DataParser.SUB_TEXTURE in rawData) {
        var rawTextures = rawData[dragonBones.DataParser.SUB_TEXTURE];

        for (var i = 0, l = rawTextures.length; i < l; ++i) {
          var rawTexture = rawTextures[i];
          var textureData = textureAtlasData.createTexture();
          textureData.rotated = ObjectDataParser._getBoolean(rawTexture, dragonBones.DataParser.ROTATED, false);
          textureData.name = ObjectDataParser._getString(rawTexture, dragonBones.DataParser.NAME, "");
          textureData.region.x = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.X, 0.0);
          textureData.region.y = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.Y, 0.0);
          textureData.region.width = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.WIDTH, 0.0);
          textureData.region.height = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.HEIGHT, 0.0);

          var frameWidth = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.FRAME_WIDTH, -1.0);

          var frameHeight = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.FRAME_HEIGHT, -1.0);

          if (frameWidth > 0.0 && frameHeight > 0.0) {
            textureData.frame = dragonBones.TextureData.createRectangle();
            textureData.frame.x = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.FRAME_X, 0.0);
            textureData.frame.y = ObjectDataParser._getNumber(rawTexture, dragonBones.DataParser.FRAME_Y, 0.0);
            textureData.frame.width = frameWidth;
            textureData.frame.height = frameHeight;
          }

          textureAtlasData.addTexture(textureData);
        }
      }

      return true;
    };
    /**
     * - Deprecated, please refer to {@link dragonBones.BaseFactory#parseDragonBonesData()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link dragonBones.BaseFactory#parseDragonBonesData()}。
     * @deprecated
     * @language zh_CN
     */


    ObjectDataParser.getInstance = function () {
      if (ObjectDataParser._objectDataParserInstance === null) {
        ObjectDataParser._objectDataParserInstance = new ObjectDataParser();
      }

      return ObjectDataParser._objectDataParserInstance;
    };

    ObjectDataParser._objectDataParserInstance = null;
    return ObjectDataParser;
  }(dragonBones.DataParser);

  dragonBones.ObjectDataParser = ObjectDataParser;
  /**
   * @internal
   */

  var ActionFrame =
  /** @class */
  function () {
    function ActionFrame() {
      this.frameStart = 0;
      this.actions = [];
    }

    return ActionFrame;
  }();

  dragonBones.ActionFrame = ActionFrame;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * @internal
   */
  var BinaryDataParser =
  /** @class */
  function (_super) {
    __extends(BinaryDataParser, _super);

    function BinaryDataParser() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    BinaryDataParser.prototype._inRange = function (a, min, max) {
      return min <= a && a <= max;
    };

    BinaryDataParser.prototype._decodeUTF8 = function (data) {
      var EOF_byte = -1;
      var EOF_code_point = -1;
      var FATAL_POINT = 0xFFFD;
      var pos = 0;
      var result = "";
      var code_point;
      var utf8_code_point = 0;
      var utf8_bytes_needed = 0;
      var utf8_bytes_seen = 0;
      var utf8_lower_boundary = 0;

      while (data.length > pos) {
        var _byte = data[pos++];

        if (_byte === EOF_byte) {
          if (utf8_bytes_needed !== 0) {
            code_point = FATAL_POINT;
          } else {
            code_point = EOF_code_point;
          }
        } else {
          if (utf8_bytes_needed === 0) {
            if (this._inRange(_byte, 0x00, 0x7F)) {
              code_point = _byte;
            } else {
              if (this._inRange(_byte, 0xC2, 0xDF)) {
                utf8_bytes_needed = 1;
                utf8_lower_boundary = 0x80;
                utf8_code_point = _byte - 0xC0;
              } else if (this._inRange(_byte, 0xE0, 0xEF)) {
                utf8_bytes_needed = 2;
                utf8_lower_boundary = 0x800;
                utf8_code_point = _byte - 0xE0;
              } else if (this._inRange(_byte, 0xF0, 0xF4)) {
                utf8_bytes_needed = 3;
                utf8_lower_boundary = 0x10000;
                utf8_code_point = _byte - 0xF0;
              } else {}

              utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);
              code_point = null;
            }
          } else if (!this._inRange(_byte, 0x80, 0xBF)) {
            utf8_code_point = 0;
            utf8_bytes_needed = 0;
            utf8_bytes_seen = 0;
            utf8_lower_boundary = 0;
            pos--;
            code_point = _byte;
          } else {
            utf8_bytes_seen += 1;
            utf8_code_point = utf8_code_point + (_byte - 0x80) * Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);

            if (utf8_bytes_seen !== utf8_bytes_needed) {
              code_point = null;
            } else {
              var cp = utf8_code_point;
              var lower_boundary = utf8_lower_boundary;
              utf8_code_point = 0;
              utf8_bytes_needed = 0;
              utf8_bytes_seen = 0;
              utf8_lower_boundary = 0;

              if (this._inRange(cp, lower_boundary, 0x10FFFF) && !this._inRange(cp, 0xD800, 0xDFFF)) {
                code_point = cp;
              } else {
                code_point = _byte;
              }
            }
          }
        } //Decode string


        if (code_point !== null && code_point !== EOF_code_point) {
          if (code_point <= 0xFFFF) {
            if (code_point > 0) result += String.fromCharCode(code_point);
          } else {
            code_point -= 0x10000;
            result += String.fromCharCode(0xD800 + (code_point >> 10 & 0x3ff));
            result += String.fromCharCode(0xDC00 + (code_point & 0x3ff));
          }
        }
      }

      return result;
    };

    BinaryDataParser.prototype._getUTF16Key = function (value) {
      for (var i = 0, l = value.length; i < l; ++i) {
        if (value.charCodeAt(i) > 255) {
          return encodeURI(value);
        }
      }

      return value;
    };

    BinaryDataParser.prototype._parseBinaryTimeline = function (type, offset, timelineData) {
      if (timelineData === void 0) {
        timelineData = null;
      }

      var timeline = timelineData !== null ? timelineData : dragonBones.BaseObject.borrowObject(dragonBones.TimelineData);
      timeline.type = type;
      timeline.offset = offset;
      this._timeline = timeline;
      var keyFrameCount = this._timelineArrayBuffer[timeline.offset + 2
      /* TimelineKeyFrameCount */
      ];

      if (keyFrameCount === 1) {
        timeline.frameIndicesOffset = -1;
      } else {
        var frameIndicesOffset = 0;
        var totalFrameCount = this._animation.frameCount + 1; // One more frame than animation.

        var frameIndices = this._data.frameIndices;

        if (dragonBones.DragonBones.webAssembly) {
          frameIndicesOffset = frameIndices.size();
          frameIndices.resize(frameIndicesOffset + totalFrameCount, 0);
        } else {
          frameIndicesOffset = frameIndices.length;
          frameIndices.length += totalFrameCount;
        }

        timeline.frameIndicesOffset = frameIndicesOffset;

        for (var i = 0, iK = 0, frameStart = 0, frameCount = 0; i < totalFrameCount; ++i) {
          if (frameStart + frameCount <= i && iK < keyFrameCount) {
            frameStart = this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[timeline.offset + 5
            /* TimelineFrameOffset */
            + iK]];

            if (iK === keyFrameCount - 1) {
              frameCount = this._animation.frameCount - frameStart;
            } else {
              frameCount = this._frameArrayBuffer[this._animation.frameOffset + this._timelineArrayBuffer[timeline.offset + 5
              /* TimelineFrameOffset */
              + iK + 1]] - frameStart;
            }

            iK++;
          }

          if (dragonBones.DragonBones.webAssembly) {
            frameIndices.set(frameIndicesOffset + i, iK - 1);
          } else {
            frameIndices[frameIndicesOffset + i] = iK - 1;
          }
        }
      }

      this._timeline = null; //

      return timeline;
    };

    BinaryDataParser.prototype._parseVertices = function (rawData, vertices) {
      vertices.offset = rawData[dragonBones.DataParser.OFFSET];
      var weightOffset = this._intArrayBuffer[vertices.offset + 3
      /* MeshWeightOffset */
      ];

      if (weightOffset >= 0) {
        var weight = dragonBones.BaseObject.borrowObject(dragonBones.WeightData);
        var vertexCount = this._intArrayBuffer[vertices.offset + 0
        /* MeshVertexCount */
        ];
        var boneCount = this._intArrayBuffer[weightOffset + 0
        /* WeigthBoneCount */
        ];
        weight.offset = weightOffset;

        for (var i = 0; i < boneCount; ++i) {
          var boneIndex = this._intArrayBuffer[weightOffset + 2
          /* WeigthBoneIndices */
          + i];
          weight.addBone(this._rawBones[boneIndex]);
        }

        var boneIndicesOffset = weightOffset + 2
        /* WeigthBoneIndices */
        + boneCount;
        var weightCount = 0;

        for (var i = 0, l = vertexCount; i < l; ++i) {
          var vertexBoneCount = this._intArrayBuffer[boneIndicesOffset++];
          weightCount += vertexBoneCount;
          boneIndicesOffset += vertexBoneCount;
        }

        weight.count = weightCount;
        vertices.weight = weight;
      }
    };

    BinaryDataParser.prototype._parseMesh = function (rawData, mesh) {
      this._parseVertices(rawData, mesh.vertices);
    };

    BinaryDataParser.prototype._parsePath = function (rawData, path) {
      this._parseVertices(rawData, path.vertices);
    };

    BinaryDataParser.prototype._parseAnimation = function (rawData) {
      var animation = dragonBones.BaseObject.borrowObject(dragonBones.AnimationData);
      animation.frameCount = Math.max(dragonBones.ObjectDataParser._getNumber(rawData, dragonBones.DataParser.DURATION, 1), 1);
      animation.playTimes = dragonBones.ObjectDataParser._getNumber(rawData, dragonBones.DataParser.PLAY_TIMES, 1);
      animation.duration = animation.frameCount / this._armature.frameRate; // float

      animation.fadeInTime = dragonBones.ObjectDataParser._getNumber(rawData, dragonBones.DataParser.FADE_IN_TIME, 0.0);
      animation.scale = dragonBones.ObjectDataParser._getNumber(rawData, dragonBones.DataParser.SCALE, 1.0);
      animation.name = dragonBones.ObjectDataParser._getString(rawData, dragonBones.DataParser.NAME, dragonBones.DataParser.DEFAULT_NAME);

      if (animation.name.length === 0) {
        animation.name = dragonBones.DataParser.DEFAULT_NAME;
      } // Offsets.


      var offsets = rawData[dragonBones.DataParser.OFFSET];
      animation.frameIntOffset = offsets[0];
      animation.frameFloatOffset = offsets[1];
      animation.frameOffset = offsets[2];
      this._animation = animation;

      if (dragonBones.DataParser.ACTION in rawData) {
        animation.actionTimeline = this._parseBinaryTimeline(0
        /* Action */
        , rawData[dragonBones.DataParser.ACTION]);
      }

      if (dragonBones.DataParser.Z_ORDER in rawData) {
        animation.zOrderTimeline = this._parseBinaryTimeline(1
        /* ZOrder */
        , rawData[dragonBones.DataParser.Z_ORDER]);
      }

      if (dragonBones.DataParser.BONE in rawData) {
        var rawTimeliness = rawData[dragonBones.DataParser.BONE];

        for (var k in rawTimeliness) {
          var rawTimelines = rawTimeliness[k];

          if (dragonBones.DragonBones.webAssembly) {
            k = this._getUTF16Key(k);
          }

          var bone = this._armature.getBone(k);

          if (bone === null) {
            continue;
          }

          for (var i = 0, l = rawTimelines.length; i < l; i += 2) {
            var timelineType = rawTimelines[i];
            var timelineOffset = rawTimelines[i + 1];

            var timeline = this._parseBinaryTimeline(timelineType, timelineOffset);

            this._animation.addBoneTimeline(bone, timeline);
          }
        }
      }

      if (dragonBones.DataParser.SURFACE in rawData) {
        var rawTimeliness = rawData[dragonBones.DataParser.SURFACE];

        for (var k in rawTimeliness) {
          var rawTimelines = rawTimeliness[k];

          if (dragonBones.DragonBones.webAssembly) {
            k = this._getUTF16Key(k);
          }

          var surface = this._armature.getBone(k);

          if (surface === null) {
            continue;
          }

          for (var i = 0, l = rawTimelines.length; i < l; i += 2) {
            var timelineType = rawTimelines[i];
            var timelineOffset = rawTimelines[i + 1];

            var timeline = this._parseBinaryTimeline(timelineType, timelineOffset);

            this._animation.addSurfaceTimeline(surface, timeline);
          }
        }
      }

      if (dragonBones.DataParser.SLOT in rawData) {
        var rawTimeliness = rawData[dragonBones.DataParser.SLOT];

        for (var k in rawTimeliness) {
          var rawTimelines = rawTimeliness[k];

          if (dragonBones.DragonBones.webAssembly) {
            k = this._getUTF16Key(k);
          }

          var slot = this._armature.getSlot(k);

          if (slot === null) {
            continue;
          }

          for (var i = 0, l = rawTimelines.length; i < l; i += 2) {
            var timelineType = rawTimelines[i];
            var timelineOffset = rawTimelines[i + 1];

            var timeline = this._parseBinaryTimeline(timelineType, timelineOffset);

            this._animation.addSlotTimeline(slot, timeline);
          }
        }
      }

      if (dragonBones.DataParser.CONSTRAINT in rawData) {
        var rawTimeliness = rawData[dragonBones.DataParser.CONSTRAINT];

        for (var k in rawTimeliness) {
          var rawTimelines = rawTimeliness[k];

          if (dragonBones.DragonBones.webAssembly) {
            k = this._getUTF16Key(k);
          }

          var constraint = this._armature.getConstraint(k);

          if (constraint === null) {
            continue;
          }

          for (var i = 0, l = rawTimelines.length; i < l; i += 2) {
            var timelineType = rawTimelines[i];
            var timelineOffset = rawTimelines[i + 1];

            var timeline = this._parseBinaryTimeline(timelineType, timelineOffset);

            this._animation.addConstraintTimeline(constraint, timeline);
          }
        }
      }

      if (dragonBones.DataParser.ANIMATION in rawData) {
        var rawTimeliness = rawData[dragonBones.DataParser.ANIMATION];

        for (var k in rawTimeliness) {
          var rawTimelines = rawTimeliness[k];

          if (dragonBones.DragonBones.webAssembly) {
            k = this._getUTF16Key(k);
          }

          for (var i = 0, l = rawTimelines.length; i < l; i += 2) {
            var timelineType = rawTimelines[i];
            var timelineOffset = rawTimelines[i + 1];

            var timeline = this._parseBinaryTimeline(timelineType, timelineOffset);

            this._animation.addAnimationTimeline(k, timeline);
          }
        }
      }

      this._animation = null;
      return animation;
    };

    BinaryDataParser.prototype._parseArray = function (rawData) {
      var offsets = rawData[dragonBones.DataParser.OFFSET];
      var l1 = offsets[1];
      var l2 = offsets[3];
      var l3 = offsets[5];
      var l4 = offsets[7];
      var l5 = offsets[9];
      var l6 = offsets[11];
      var intArray = new Int16Array(this._binary, this._binaryOffset + offsets[0], l1 / Int16Array.BYTES_PER_ELEMENT);
      var floatArray = new Float32Array(this._binary, this._binaryOffset + offsets[2], l2 / Float32Array.BYTES_PER_ELEMENT);
      var frameIntArray = new Int16Array(this._binary, this._binaryOffset + offsets[4], l3 / Int16Array.BYTES_PER_ELEMENT);
      var frameFloatArray = new Float32Array(this._binary, this._binaryOffset + offsets[6], l4 / Float32Array.BYTES_PER_ELEMENT);
      var frameArray = new Int16Array(this._binary, this._binaryOffset + offsets[8], l5 / Int16Array.BYTES_PER_ELEMENT);
      var timelineArray = new Uint16Array(this._binary, this._binaryOffset + offsets[10], l6 / Uint16Array.BYTES_PER_ELEMENT);

      if (dragonBones.DragonBones.webAssembly) {
        var lTotal = l1 + l2 + l3 + l4 + l5 + l6;

        var bufferPointer = dragonBones.webAssemblyModule._malloc(lTotal);

        var rawArray = new Uint8Array(this._binary, this._binaryOffset, lTotal / Uint8Array.BYTES_PER_ELEMENT);
        var copyArray = new Uint8Array(dragonBones.webAssemblyModule.HEAP16.buffer, bufferPointer, rawArray.length);

        for (var i = 0, l = rawArray.length; i < l; ++i) {
          copyArray[i] = rawArray[i];
        }

        dragonBones.webAssemblyModule.setDataBinary(this._data, bufferPointer, l1, l2, l3, l4, l5, l6);
        this._intArrayBuffer = intArray;
        this._floatArrayBuffer = floatArray;
        this._frameIntArrayBuffer = frameIntArray;
        this._frameFloatArrayBuffer = frameFloatArray;
        this._frameArrayBuffer = frameArray;
        this._timelineArrayBuffer = timelineArray;
      } else {
        this._data.binary = this._binary;
        this._data.intArray = this._intArrayBuffer = intArray;
        this._data.floatArray = this._floatArrayBuffer = floatArray;
        this._data.frameIntArray = this._frameIntArrayBuffer = frameIntArray;
        this._data.frameFloatArray = this._frameFloatArrayBuffer = frameFloatArray;
        this._data.frameArray = this._frameArrayBuffer = frameArray;
        this._data.timelineArray = this._timelineArrayBuffer = timelineArray;
      }
    };

    BinaryDataParser.prototype.parseDragonBonesData = function (rawData, scale) {
      if (scale === void 0) {
        scale = 1;
      }

      console.assert(rawData !== null && rawData !== undefined && rawData instanceof ArrayBuffer, "Data error.");
      var tag = new Uint8Array(rawData, 0, 8);

      if (tag[0] !== "D".charCodeAt(0) || tag[1] !== "B".charCodeAt(0) || tag[2] !== "D".charCodeAt(0) || tag[3] !== "T".charCodeAt(0)) {
        console.assert(false, "Nonsupport data.");
        return null;
      }

      var headerLength = new Uint32Array(rawData, 8, 1)[0];
      var headerBytes = new Uint8Array(rawData, 8 + 4, headerLength);

      var headerString = this._decodeUTF8(headerBytes);

      var header = JSON.parse(headerString); //

      this._binaryOffset = 8 + 4 + headerLength;
      this._binary = rawData;
      return _super.prototype.parseDragonBonesData.call(this, header, scale);
    };
    /**
     * - Deprecated, please refer to {@link dragonBones.BaseFactory#parseDragonBonesData()}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link dragonBones.BaseFactory#parseDragonBonesData()}。
     * @deprecated
     * @language zh_CN
     */


    BinaryDataParser.getInstance = function () {
      if (BinaryDataParser._binaryDataParserInstance === null) {
        BinaryDataParser._binaryDataParserInstance = new BinaryDataParser();
      }

      return BinaryDataParser._binaryDataParserInstance;
    };

    BinaryDataParser._binaryDataParserInstance = null;
    return BinaryDataParser;
  }(dragonBones.ObjectDataParser);

  dragonBones.BinaryDataParser = BinaryDataParser;
})(dragonBones || (dragonBones = {}));
/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2012-2018 DragonBones team and other contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var dragonBones;

(function (dragonBones) {
  /**
   * - Base class for the factory that create the armatures. (Typically only one global factory instance is required)
   * The factory instance create armatures by parsed and added DragonBonesData instances and TextureAtlasData instances.
   * Once the data has been parsed, it has been cached in the factory instance and does not need to be parsed again until it is cleared by the factory instance.
   * @see dragonBones.DragonBonesData
   * @see dragonBones.TextureAtlasData
   * @see dragonBones.ArmatureData
   * @see dragonBones.Armature
   * @version DragonBones 3.0
   * @language en_US
   */

  /**
   * - 创建骨架的工厂基类。 （通常只需要一个全局工厂实例）
   * 工厂通过解析并添加的 DragonBonesData 实例和 TextureAtlasData 实例来创建骨架。
   * 当数据被解析过之后，已经添加到工厂中，在没有被工厂清理之前，不需要再次解析。
   * @see dragonBones.DragonBonesData
   * @see dragonBones.TextureAtlasData
   * @see dragonBones.ArmatureData
   * @see dragonBones.Armature
   * @version DragonBones 3.0
   * @language zh_CN
   */
  var BaseFactory =
  /** @class */
  function () {
    /**
     * - Create a factory instance. (typically only one global factory instance is required)
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 创建一个工厂实例。 （通常只需要一个全局工厂实例）
     * @version DragonBones 3.0
     * @language zh_CN
     */
    function BaseFactory(dataParser) {
      if (dataParser === void 0) {
        dataParser = null;
      }
      /**
       * @private
       */


      this.autoSearch = false;
      this._dragonBonesDataMap = {};
      this._textureAtlasDataMap = {};
      this._dragonBones = null;
      this._dataParser = null;

      if (BaseFactory._objectParser === null) {
        BaseFactory._objectParser = new dragonBones.ObjectDataParser();
      }

      if (BaseFactory._binaryParser === null) {
        BaseFactory._binaryParser = new dragonBones.BinaryDataParser();
      }

      this._dataParser = dataParser !== null ? dataParser : BaseFactory._objectParser;
    }

    BaseFactory.prototype._isSupportMesh = function () {
      return true;
    };

    BaseFactory.prototype._getTextureData = function (textureAtlasName, textureName) {
      if (textureAtlasName in this._textureAtlasDataMap) {
        for (var _i = 0, _a = this._textureAtlasDataMap[textureAtlasName]; _i < _a.length; _i++) {
          var textureAtlasData = _a[_i];
          var textureData = textureAtlasData.getTexture(textureName);

          if (textureData !== null) {
            return textureData;
          }
        }
      }

      if (this.autoSearch) {
        // Will be search all data, if the autoSearch is true.
        for (var k in this._textureAtlasDataMap) {
          for (var _b = 0, _c = this._textureAtlasDataMap[k]; _b < _c.length; _b++) {
            var textureAtlasData = _c[_b];

            if (textureAtlasData.autoSearch) {
              var textureData = textureAtlasData.getTexture(textureName);

              if (textureData !== null) {
                return textureData;
              }
            }
          }
        }
      }

      return null;
    };

    BaseFactory.prototype._fillBuildArmaturePackage = function (dataPackage, dragonBonesName, armatureName, skinName, textureAtlasName) {
      var dragonBonesData = null;
      var armatureData = null;

      if (dragonBonesName.length > 0) {
        if (dragonBonesName in this._dragonBonesDataMap) {
          dragonBonesData = this._dragonBonesDataMap[dragonBonesName];
          armatureData = dragonBonesData.getArmature(armatureName);
        }
      }

      if (armatureData === null && (dragonBonesName.length === 0 || this.autoSearch)) {
        // Will be search all data, if do not give a data name or the autoSearch is true.
        for (var k in this._dragonBonesDataMap) {
          dragonBonesData = this._dragonBonesDataMap[k];

          if (dragonBonesName.length === 0 || dragonBonesData.autoSearch) {
            armatureData = dragonBonesData.getArmature(armatureName);

            if (armatureData !== null) {
              dragonBonesName = k;
              break;
            }
          }
        }
      }

      if (armatureData !== null) {
        dataPackage.dataName = dragonBonesName;
        dataPackage.textureAtlasName = textureAtlasName;
        dataPackage.data = dragonBonesData;
        dataPackage.armature = armatureData;
        dataPackage.skin = null;

        if (skinName.length > 0) {
          dataPackage.skin = armatureData.getSkin(skinName);

          if (dataPackage.skin === null && this.autoSearch) {
            for (var k in this._dragonBonesDataMap) {
              var skinDragonBonesData = this._dragonBonesDataMap[k];
              var skinArmatureData = skinDragonBonesData.getArmature(skinName);

              if (skinArmatureData !== null) {
                dataPackage.skin = skinArmatureData.defaultSkin;
                break;
              }
            }
          }
        }

        if (dataPackage.skin === null) {
          dataPackage.skin = armatureData.defaultSkin;
        }

        return true;
      }

      return false;
    };

    BaseFactory.prototype._buildBones = function (dataPackage, armature) {
      for (var _i = 0, _a = dataPackage.armature.sortedBones; _i < _a.length; _i++) {
        var boneData = _a[_i];
        var bone = dragonBones.BaseObject.borrowObject(boneData.type === 0
        /* Bone */
        ? dragonBones.Bone : dragonBones.Surface);
        bone.init(boneData, armature);
      }
    };
    /**
     * @private
     */


    BaseFactory.prototype._buildSlots = function (dataPackage, armature) {
      var currentSkin = dataPackage.skin;
      var defaultSkin = dataPackage.armature.defaultSkin;

      if (currentSkin === null || defaultSkin === null) {
        return;
      }

      var skinSlots = {};

      for (var k in defaultSkin.displays) {
        var displays = defaultSkin.getDisplays(k);
        skinSlots[k] = displays;
      }

      if (currentSkin !== defaultSkin) {
        for (var k in currentSkin.displays) {
          var displays = currentSkin.getDisplays(k);
          skinSlots[k] = displays;
        }
      }

      for (var _i = 0, _a = dataPackage.armature.sortedSlots; _i < _a.length; _i++) {
        var slotData = _a[_i];
        var displayDatas = slotData.name in skinSlots ? skinSlots[slotData.name] : null;

        var slot = this._buildSlot(dataPackage, slotData, armature);

        slot.rawDisplayDatas = displayDatas;

        if (displayDatas !== null) {
          var displayList = new Array(); // for (const displayData of displays) 

          for (var i = 0, l = dragonBones.DragonBones.webAssembly ? displayDatas.size() : displayDatas.length; i < l; ++i) {
            var displayData = dragonBones.DragonBones.webAssembly ? displayDatas.get(i) : displayDatas[i];

            if (displayData !== null) {
              displayList.push(this._getSlotDisplay(dataPackage, displayData, null, slot));
            } else {
              displayList.push(null);
            }
          }

          slot._setDisplayList(displayList);
        }

        slot._setDisplayIndex(slotData.displayIndex, true);
      }
    };

    BaseFactory.prototype._buildConstraints = function (dataPackage, armature) {
      var constraints = dataPackage.armature.constraints;

      for (var k in constraints) {
        var constraintData = constraints[k]; // TODO more constraint type.

        switch (constraintData.type) {
          case 0
          /* IK */
          :
            var ikConstraint = dragonBones.BaseObject.borrowObject(dragonBones.IKConstraint);
            ikConstraint.init(constraintData, armature);

            armature._addConstraint(ikConstraint);

            break;

          case 1
          /* Path */
          :
            var pathConstraint = dragonBones.BaseObject.borrowObject(dragonBones.PathConstraint);
            pathConstraint.init(constraintData, armature);

            armature._addConstraint(pathConstraint);

            break;

          default:
            var constraint = dragonBones.BaseObject.borrowObject(dragonBones.IKConstraint);
            constraint.init(constraintData, armature);

            armature._addConstraint(constraint);

            break;
        }
      }
    };

    BaseFactory.prototype._buildChildArmature = function (dataPackage, slot, displayData) {
      // tslint:disable-next-line:no-unused-expression
      slot;
      return this.buildArmature(displayData.path, dataPackage !== null ? dataPackage.dataName : "", "", dataPackage !== null ? dataPackage.textureAtlasName : "");
    };

    BaseFactory.prototype._getSlotDisplay = function (dataPackage, displayData, rawDisplayData, slot) {
      var dataName = dataPackage !== null ? dataPackage.dataName : displayData.parent.parent.parent.name;
      var display = null;

      switch (displayData.type) {
        case 0
        /* Image */
        :
          {
            var imageDisplayData = displayData;

            if (dataPackage !== null && dataPackage.textureAtlasName.length > 0) {
              imageDisplayData.texture = this._getTextureData(dataPackage.textureAtlasName, displayData.path);
            }

            if (imageDisplayData.texture === null) {
              imageDisplayData.texture = this._getTextureData(dataName, displayData.path);
            }

            if (rawDisplayData !== null && rawDisplayData.type === 2
            /* Mesh */
            && this._isSupportMesh()) {
              display = slot.meshDisplay;
            } else {
              display = slot.rawDisplay;
            }

            break;
          }

        case 2
        /* Mesh */
        :
          {
            var meshDisplayData = displayData;

            if (dataPackage !== null && dataPackage.textureAtlasName.length > 0) {
              meshDisplayData.texture = this._getTextureData(dataPackage.textureAtlasName, meshDisplayData.path);
            }

            if (meshDisplayData.texture === null) {
              meshDisplayData.texture = this._getTextureData(dataName, meshDisplayData.path);
            }

            if (this._isSupportMesh()) {
              display = slot.meshDisplay;
            } else {
              display = slot.rawDisplay;
            }

            break;
          }

        case 1
        /* Armature */
        :
          {
            var armatureDisplayData = displayData;

            var childArmature = this._buildChildArmature(dataPackage, slot, displayData);

            if (childArmature !== null) {
              childArmature.inheritAnimation = armatureDisplayData.inheritAnimation;

              if (!childArmature.inheritAnimation) {
                var actions = armatureDisplayData.actions.length > 0 ? armatureDisplayData.actions : childArmature.armatureData.defaultActions;

                if (actions.length > 0) {
                  for (var _i = 0, actions_6 = actions; _i < actions_6.length; _i++) {
                    var action = actions_6[_i];
                    var eventObject = dragonBones.BaseObject.borrowObject(dragonBones.EventObject);
                    dragonBones.EventObject.actionDataToInstance(action, eventObject, slot.armature);
                    eventObject.slot = slot;

                    slot.armature._bufferAction(eventObject, false);
                  }
                } else {
                  childArmature.animation.play();
                }
              }

              armatureDisplayData.armature = childArmature.armatureData; // 
            }

            display = childArmature;
            break;
          }

        case 3
        /* BoundingBox */
        :
          break;

        default:
          break;
      }

      return display;
    };
    /**
     * - Parse the raw data to a DragonBonesData instance and cache it to the factory.
     * @param rawData - The raw data.
     * @param name - Specify a cache name for the instance so that the instance can be obtained through this name. (If not set, use the instance name instead)
     * @param scale - Specify a scaling value for all armatures. (Default: 1.0)
     * @returns DragonBonesData instance
     * @see #getDragonBonesData()
     * @see #addDragonBonesData()
     * @see #removeDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 将原始数据解析为 DragonBonesData 实例，并缓存到工厂中。
     * @param rawData - 原始数据。
     * @param name - 为该实例指定一个缓存名称，以便可以通过此名称获取该实例。 （如果未设置，则使用该实例中的名称）
     * @param scale - 为所有的骨架指定一个缩放值。 （默认: 1.0）
     * @returns DragonBonesData 实例
     * @see #getDragonBonesData()
     * @see #addDragonBonesData()
     * @see #removeDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseFactory.prototype.parseDragonBonesData = function (rawData, name, scale) {
      if (name === void 0) {
        name = null;
      }

      if (scale === void 0) {
        scale = 1.0;
      }

      var dataParser = rawData instanceof ArrayBuffer ? BaseFactory._binaryParser : this._dataParser;
      var dragonBonesData = dataParser.parseDragonBonesData(rawData, scale);

      while (true) {
        var textureAtlasData = this._buildTextureAtlasData(null, null);

        if (dataParser.parseTextureAtlasData(null, textureAtlasData, scale)) {
          this.addTextureAtlasData(textureAtlasData, name);
        } else {
          textureAtlasData.returnToPool();
          break;
        }
      }

      if (dragonBonesData !== null) {
        this.addDragonBonesData(dragonBonesData, name);
      }

      return dragonBonesData;
    };
    /**
     * - Parse the raw texture atlas data and the texture atlas object to a TextureAtlasData instance and cache it to the factory.
     * @param rawData - The raw texture atlas data.
     * @param textureAtlas - The texture atlas object.
     * @param name - Specify a cache name for the instance so that the instance can be obtained through this name. (If not set, use the instance name instead)
     * @param scale - Specify a scaling value for the map set. (Default: 1.0)
     * @returns TextureAtlasData instance
     * @see #getTextureAtlasData()
     * @see #addTextureAtlasData()
     * @see #removeTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 将原始贴图集数据和贴图集对象解析为 TextureAtlasData 实例，并缓存到工厂中。
     * @param rawData - 原始贴图集数据。
     * @param textureAtlas - 贴图集对象。
     * @param name - 为该实例指定一个缓存名称，以便可以通过此名称获取该实例。 （如果未设置，则使用该实例中的名称）
     * @param scale - 为贴图集指定一个缩放值。 （默认: 1.0）
     * @returns TextureAtlasData 实例
     * @see #getTextureAtlasData()
     * @see #addTextureAtlasData()
     * @see #removeTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseFactory.prototype.parseTextureAtlasData = function (rawData, textureAtlas, name, scale) {
      if (name === void 0) {
        name = null;
      }

      if (scale === void 0) {
        scale = 1.0;
      }

      var textureAtlasData = this._buildTextureAtlasData(null, null);

      this._dataParser.parseTextureAtlasData(rawData, textureAtlasData, scale);

      this._buildTextureAtlasData(textureAtlasData, textureAtlas || null);

      this.addTextureAtlasData(textureAtlasData, name);
      return textureAtlasData;
    };
    /**
     * @private
     */


    BaseFactory.prototype.updateTextureAtlasData = function (name, textureAtlases) {
      var textureAtlasDatas = this.getTextureAtlasData(name);

      if (textureAtlasDatas !== null) {
        for (var i = 0, l = textureAtlasDatas.length; i < l; ++i) {
          if (i < textureAtlases.length) {
            this._buildTextureAtlasData(textureAtlasDatas[i], textureAtlases[i]);
          }
        }
      }
    };
    /**
     * - Get a specific DragonBonesData instance.
     * @param name - The DragonBonesData instance cache name.
     * @returns DragonBonesData instance
     * @see #parseDragonBonesData()
     * @see #addDragonBonesData()
     * @see #removeDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的 DragonBonesData 实例。
     * @param name - DragonBonesData 实例的缓存名称。
     * @returns DragonBonesData 实例
     * @see #parseDragonBonesData()
     * @see #addDragonBonesData()
     * @see #removeDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    BaseFactory.prototype.getDragonBonesData = function (name) {
      return name in this._dragonBonesDataMap ? this._dragonBonesDataMap[name] : null;
    };
    /**
     * - Cache a DragonBonesData instance to the factory.
     * @param data - The DragonBonesData instance.
     * @param name - Specify a cache name for the instance so that the instance can be obtained through this name. (if not set, use the instance name instead)
     * @see #parseDragonBonesData()
     * @see #getDragonBonesData()
     * @see #removeDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 将 DragonBonesData 实例缓存到工厂中。
     * @param data - DragonBonesData 实例。
     * @param name - 为该实例指定一个缓存名称，以便可以通过此名称获取该实例。 （如果未设置，则使用该实例中的名称）
     * @see #parseDragonBonesData()
     * @see #getDragonBonesData()
     * @see #removeDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    BaseFactory.prototype.addDragonBonesData = function (data, name) {
      if (name === void 0) {
        name = null;
      }

      name = name !== null ? name : data.name;

      if (name in this._dragonBonesDataMap) {
        if (this._dragonBonesDataMap[name] === data) {
          return;
        }

        console.warn("Can not add same name data: " + name);
        return;
      }

      this._dragonBonesDataMap[name] = data;
    };
    /**
     * - Remove a DragonBonesData instance.
     * @param name - The DragonBonesData instance cache name.
     * @param disposeData - Whether to dispose data. (Default: true)
     * @see #parseDragonBonesData()
     * @see #getDragonBonesData()
     * @see #addDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 移除 DragonBonesData 实例。
     * @param name - DragonBonesData 实例缓存名称。
     * @param disposeData - 是否释放数据。 （默认: true）
     * @see #parseDragonBonesData()
     * @see #getDragonBonesData()
     * @see #addDragonBonesData()
     * @see dragonBones.DragonBonesData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    BaseFactory.prototype.removeDragonBonesData = function (name, disposeData) {
      if (disposeData === void 0) {
        disposeData = true;
      }

      if (name in this._dragonBonesDataMap) {
        if (disposeData) {
          this._dragonBones.bufferObject(this._dragonBonesDataMap[name]);
        }

        delete this._dragonBonesDataMap[name];
      }
    };
    /**
     * - Get a list of specific TextureAtlasData instances.
     * @param name - The TextureAtlasData cahce name.
     * @see #parseTextureAtlasData()
     * @see #addTextureAtlasData()
     * @see #removeTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 获取特定的 TextureAtlasData 实例列表。
     * @param name - TextureAtlasData 实例缓存名称。
     * @see #parseTextureAtlasData()
     * @see #addTextureAtlasData()
     * @see #removeTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    BaseFactory.prototype.getTextureAtlasData = function (name) {
      return name in this._textureAtlasDataMap ? this._textureAtlasDataMap[name] : null;
    };
    /**
     * - Cache a TextureAtlasData instance to the factory.
     * @param data - The TextureAtlasData instance.
     * @param name - Specify a cache name for the instance so that the instance can be obtained through this name. (if not set, use the instance name instead)
     * @see #parseTextureAtlasData()
     * @see #getTextureAtlasData()
     * @see #removeTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 将 TextureAtlasData 实例缓存到工厂中。
     * @param data - TextureAtlasData 实例。
     * @param name - 为该实例指定一个缓存名称，以便可以通过此名称获取该实例。 （如果未设置，则使用该实例中的名称）
     * @see #parseTextureAtlasData()
     * @see #getTextureAtlasData()
     * @see #removeTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    BaseFactory.prototype.addTextureAtlasData = function (data, name) {
      if (name === void 0) {
        name = null;
      }

      name = name !== null ? name : data.name;
      var textureAtlasList = name in this._textureAtlasDataMap ? this._textureAtlasDataMap[name] : this._textureAtlasDataMap[name] = [];

      if (textureAtlasList.indexOf(data) < 0) {
        textureAtlasList.push(data);
      }
    };
    /**
     * - Remove a TextureAtlasData instance.
     * @param name - The TextureAtlasData instance cache name.
     * @param disposeData - Whether to dispose data.
     * @see #parseTextureAtlasData()
     * @see #getTextureAtlasData()
     * @see #addTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 移除 TextureAtlasData 实例。
     * @param name - TextureAtlasData 实例的缓存名称。
     * @param disposeData - 是否释放数据。
     * @see #parseTextureAtlasData()
     * @see #getTextureAtlasData()
     * @see #addTextureAtlasData()
     * @see dragonBones.TextureAtlasData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    BaseFactory.prototype.removeTextureAtlasData = function (name, disposeData) {
      if (disposeData === void 0) {
        disposeData = true;
      }

      if (name in this._textureAtlasDataMap) {
        var textureAtlasDataList = this._textureAtlasDataMap[name];

        if (disposeData) {
          for (var _i = 0, textureAtlasDataList_1 = textureAtlasDataList; _i < textureAtlasDataList_1.length; _i++) {
            var textureAtlasData = textureAtlasDataList_1[_i];

            this._dragonBones.bufferObject(textureAtlasData);
          }
        }

        delete this._textureAtlasDataMap[name];
      }
    };
    /**
     * - Get a specific armature data.
     * @param name - The armature data name.
     * @param dragonBonesName - The cached name for DragonbonesData instance.
     * @see dragonBones.ArmatureData
     * @version DragonBones 5.1
     * @language en_US
     */

    /**
     * - 获取特定的骨架数据。
     * @param name - 骨架数据名称。
     * @param dragonBonesName - DragonBonesData 实例的缓存名称。
     * @see dragonBones.ArmatureData
     * @version DragonBones 5.1
     * @language zh_CN
     */


    BaseFactory.prototype.getArmatureData = function (name, dragonBonesName) {
      if (dragonBonesName === void 0) {
        dragonBonesName = "";
      }

      var dataPackage = new BuildArmaturePackage();

      if (!this._fillBuildArmaturePackage(dataPackage, dragonBonesName, name, "", "")) {
        return null;
      }

      return dataPackage.armature;
    };
    /**
     * - Clear all cached DragonBonesData instances and TextureAtlasData instances.
     * @param disposeData - Whether to dispose data.
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 清除缓存的所有 DragonBonesData 实例和 TextureAtlasData 实例。
     * @param disposeData - 是否释放数据。
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseFactory.prototype.clear = function (disposeData) {
      if (disposeData === void 0) {
        disposeData = true;
      }

      for (var k in this._dragonBonesDataMap) {
        if (disposeData) {
          this._dragonBones.bufferObject(this._dragonBonesDataMap[k]);
        }

        delete this._dragonBonesDataMap[k];
      }

      for (var k in this._textureAtlasDataMap) {
        if (disposeData) {
          var textureAtlasDataList = this._textureAtlasDataMap[k];

          for (var _i = 0, textureAtlasDataList_2 = textureAtlasDataList; _i < textureAtlasDataList_2.length; _i++) {
            var textureAtlasData = textureAtlasDataList_2[_i];

            this._dragonBones.bufferObject(textureAtlasData);
          }
        }

        delete this._textureAtlasDataMap[k];
      }
    };
    /**
     * - Create a armature from cached DragonBonesData instances and TextureAtlasData instances.
     * Note that when the created armature that is no longer in use, you need to explicitly dispose {@link #dragonBones.Armature#dispose()}.
     * @param armatureName - The armature data name.
     * @param dragonBonesName - The cached name of the DragonBonesData instance. (If not set, all DragonBonesData instances are retrieved, and when multiple DragonBonesData instances contain a the same name armature data, it may not be possible to accurately create a specific armature)
     * @param skinName - The skin name, you can set a different ArmatureData name to share it's skin data. (If not set, use the default skin data)
     * @returns The armature.
     * @example
     * <pre>
     *     let armature = factory.buildArmature("armatureName", "dragonBonesName");
     *     armature.clock = factory.clock;
     * </pre>
     * @see dragonBones.DragonBonesData
     * @see dragonBones.ArmatureData
     * @version DragonBones 3.0
     * @language en_US
     */

    /**
     * - 通过缓存的 DragonBonesData 实例和 TextureAtlasData 实例创建一个骨架。
     * 注意，创建的骨架不再使用时，需要显式释放 {@link #dragonBones.Armature#dispose()}。
     * @param armatureName - 骨架数据名称。
     * @param dragonBonesName - DragonBonesData 实例的缓存名称。 （如果未设置，将检索所有的 DragonBonesData 实例，当多个 DragonBonesData 实例中包含同名的骨架数据时，可能无法准确的创建出特定的骨架）
     * @param skinName - 皮肤名称，可以设置一个其他骨架数据名称来共享其皮肤数据。（如果未设置，则使用默认的皮肤数据）
     * @returns 骨架。
     * @example
     * <pre>
     *     let armature = factory.buildArmature("armatureName", "dragonBonesName");
     *     armature.clock = factory.clock;
     * </pre>
     * @see dragonBones.DragonBonesData
     * @see dragonBones.ArmatureData
     * @version DragonBones 3.0
     * @language zh_CN
     */


    BaseFactory.prototype.buildArmature = function (armatureName, dragonBonesName, skinName, textureAtlasName) {
      if (dragonBonesName === void 0) {
        dragonBonesName = "";
      }

      if (skinName === void 0) {
        skinName = "";
      }

      if (textureAtlasName === void 0) {
        textureAtlasName = "";
      }

      var dataPackage = new BuildArmaturePackage();

      if (!this._fillBuildArmaturePackage(dataPackage, dragonBonesName || "", armatureName, skinName || "", textureAtlasName || "")) {
        console.warn("No armature data: " + armatureName + ", " + (dragonBonesName !== null ? dragonBonesName : ""));
        return null;
      }

      var armature = this._buildArmature(dataPackage);

      this._buildBones(dataPackage, armature);

      this._buildSlots(dataPackage, armature);

      this._buildConstraints(dataPackage, armature);

      armature.invalidUpdate(null, true);
      armature.advanceTime(0.0); // Update armature pose.

      return armature;
    };
    /**
     * @private
     */


    BaseFactory.prototype.replaceDisplay = function (slot, displayData, displayIndex) {
      if (displayIndex === void 0) {
        displayIndex = -1;
      }

      if (displayIndex < 0) {
        displayIndex = slot.displayIndex;
      }

      if (displayIndex < 0) {
        displayIndex = 0;
      }

      slot.replaceDisplayData(displayData, displayIndex);
      var displayList = slot.displayList; // Copy.

      if (displayList.length <= displayIndex) {
        displayList.length = displayIndex + 1;

        for (var i = 0, l = displayList.length; i < l; ++i) {
          // Clean undefined.
          if (!displayList[i]) {
            displayList[i] = null;
          }
        }
      }

      if (displayData !== null) {
        var rawDisplayDatas = slot.rawDisplayDatas;
        var rawDisplayData = null;

        if (rawDisplayDatas) {
          if (dragonBones.DragonBones.webAssembly) {
            if (displayIndex < rawDisplayDatas.size()) {
              rawDisplayData = rawDisplayDatas.get(displayIndex);
            }
          } else {
            if (displayIndex < rawDisplayDatas.length) {
              rawDisplayData = rawDisplayDatas[displayIndex];
            }
          }
        }

        displayList[displayIndex] = this._getSlotDisplay(null, displayData, rawDisplayData, slot);
      } else {
        displayList[displayIndex] = null;
      }

      slot.displayList = displayList;
    };
    /**
     * - Replaces the current display data for a particular slot with a specific display data.
     * Specify display data with "dragonBonesName/armatureName/slotName/displayName".
     * @param dragonBonesName - The DragonBonesData instance cache name.
     * @param armatureName - The armature data name.
     * @param slotName - The slot data name.
     * @param displayName - The display data name.
     * @param slot - The slot.
     * @param displayIndex - The index of the display data that is replaced. (If it is not set, replaces the current display data)
     * @example
     * <pre>
     *     let slot = armature.getSlot("weapon");
     *     factory.replaceSlotDisplay("dragonBonesName", "armatureName", "slotName", "displayName", slot);
     * </pre>
     * @version DragonBones 4.5
     * @language en_US
     */

    /**
     * - 用特定的显示对象数据替换特定插槽当前的显示对象数据。
     * 用 "dragonBonesName/armatureName/slotName/displayName" 指定显示对象数据。
     * @param dragonBonesName - DragonBonesData 实例的缓存名称。
     * @param armatureName - 骨架数据名称。
     * @param slotName - 插槽数据名称。
     * @param displayName - 显示对象数据名称。
     * @param slot - 插槽。
     * @param displayIndex - 被替换的显示对象数据的索引。 （如果未设置，则替换当前的显示对象数据）
     * @example
     * <pre>
     *     let slot = armature.getSlot("weapon");
     *     factory.replaceSlotDisplay("dragonBonesName", "armatureName", "slotName", "displayName", slot);
     * </pre>
     * @version DragonBones 4.5
     * @language zh_CN
     */


    BaseFactory.prototype.replaceSlotDisplay = function (dragonBonesName, armatureName, slotName, displayName, slot, displayIndex) {
      if (displayIndex === void 0) {
        displayIndex = -1;
      }

      var armatureData = this.getArmatureData(armatureName, dragonBonesName || "");

      if (!armatureData || !armatureData.defaultSkin) {
        return false;
      }

      var displayData = armatureData.defaultSkin.getDisplay(slotName, displayName);

      if (!displayData) {
        return false;
      }

      this.replaceDisplay(slot, displayData, displayIndex);
      return true;
    };
    /**
     * @private
     */


    BaseFactory.prototype.replaceSlotDisplayList = function (dragonBonesName, armatureName, slotName, slot) {
      var armatureData = this.getArmatureData(armatureName, dragonBonesName || "");

      if (!armatureData || !armatureData.defaultSkin) {
        return false;
      }

      var displays = armatureData.defaultSkin.getDisplays(slotName);

      if (!displays) {
        return false;
      }

      var displayIndex = 0; // for (const displayData of displays) 

      for (var i = 0, l = dragonBones.DragonBones.webAssembly ? displays.size() : displays.length; i < l; ++i) {
        var displayData = dragonBones.DragonBones.webAssembly ? displays.get(i) : displays[i];
        this.replaceDisplay(slot, displayData, displayIndex++);
      }

      return true;
    };
    /**
     * - Share specific skin data with specific armature.
     * @param armature - The armature.
     * @param skin - The skin data.
     * @param isOverride - Whether it completely override the original skin. (Default: false)
     * @param exclude - A list of slot names that do not need to be replace.
     * @example
     * <pre>
     *     let armatureA = factory.buildArmature("armatureA", "dragonBonesA");
     *     let armatureDataB = factory.getArmatureData("armatureB", "dragonBonesB");
     *     if (armatureDataB && armatureDataB.defaultSkin) {
     *     factory.replaceSkin(armatureA, armatureDataB.defaultSkin, false, ["arm_l", "weapon_l"]);
     *     }
     * </pre>
     * @see dragonBones.Armature
     * @see dragonBones.SkinData
     * @version DragonBones 5.6
     * @language en_US
     */

    /**
     * - 将特定的皮肤数据共享给特定的骨架使用。
     * @param armature - 骨架。
     * @param skin - 皮肤数据。
     * @param isOverride - 是否完全覆盖原来的皮肤。 （默认: false）
     * @param exclude - 不需要被替换的插槽名称列表。
     * @example
     * <pre>
     *     let armatureA = factory.buildArmature("armatureA", "dragonBonesA");
     *     let armatureDataB = factory.getArmatureData("armatureB", "dragonBonesB");
     *     if (armatureDataB && armatureDataB.defaultSkin) {
     *     factory.replaceSkin(armatureA, armatureDataB.defaultSkin, false, ["arm_l", "weapon_l"]);
     *     }
     * </pre>
     * @see dragonBones.Armature
     * @see dragonBones.SkinData
     * @version DragonBones 5.6
     * @language zh_CN
     */


    BaseFactory.prototype.replaceSkin = function (armature, skin, isOverride, exclude) {
      if (isOverride === void 0) {
        isOverride = false;
      }

      if (exclude === void 0) {
        exclude = null;
      }

      var success = false;
      var defaultSkin = skin.parent.defaultSkin;

      for (var _i = 0, _a = armature.getSlots(); _i < _a.length; _i++) {
        var slot = _a[_i];

        if (exclude !== null && exclude.indexOf(slot.name) >= 0) {
          continue;
        }

        var displays = skin.getDisplays(slot.name);

        if (!displays) {
          if (defaultSkin !== null && skin !== defaultSkin) {
            displays = defaultSkin.getDisplays(slot.name);
          }

          if (!displays) {
            if (isOverride) {
              slot.rawDisplayDatas = null;
              slot.displayList = []; //
            }

            continue;
          }
        }

        var displayCount = dragonBones.DragonBones.webAssembly ? displays.size() : displays.length;
        var displayList = slot.displayList; // Copy.

        displayList.length = displayCount; // Modify displayList length.

        for (var i = 0, l = displayCount; i < l; ++i) {
          var displayData = dragonBones.DragonBones.webAssembly ? displays.get(i) : displays[i];

          if (displayData !== null) {
            displayList[i] = this._getSlotDisplay(null, displayData, null, slot);
          } else {
            displayList[i] = null;
          }
        }

        success = true;
        slot.rawDisplayDatas = displays;
        slot.displayList = displayList;
      }

      return success;
    };
    /**
     * - Replaces the existing animation data for a specific armature with the animation data for the specific armature data.
     * This enables you to make a armature template so that other armature without animations can share it's animations.
     * @param armature - The armtaure.
     * @param armatureData - The armature data.
     * @param isOverride - Whether to completely overwrite the original animation. (Default: false)
     * @example
     * <pre>
     *     let armatureA = factory.buildArmature("armatureA", "dragonBonesA");
     *     let armatureDataB = factory.getArmatureData("armatureB", "dragonBonesB");
     *     if (armatureDataB) {
     *     factory.replaceAnimation(armatureA, armatureDataB);
     *     }
     * </pre>
     * @see dragonBones.Armature
     * @see dragonBones.ArmatureData
     * @version DragonBones 5.6
     * @language en_US
     */

    /**
     * - 用特定骨架数据的动画数据替换特定骨架现有的动画数据。
     * 这样就能实现制作一个骨架动画模板，让其他没有制作动画的骨架共享该动画。
     * @param armature - 骨架。
     * @param armatureData - 骨架数据。
     * @param isOverride - 是否完全覆盖原来的动画。（默认: false）
     * @example
     * <pre>
     *     let armatureA = factory.buildArmature("armatureA", "dragonBonesA");
     *     let armatureDataB = factory.getArmatureData("armatureB", "dragonBonesB");
     *     if (armatureDataB) {
     *     factory.replaceAnimation(armatureA, armatureDataB);
     *     }
     * </pre>
     * @see dragonBones.Armature
     * @see dragonBones.ArmatureData
     * @version DragonBones 5.6
     * @language zh_CN
     */


    BaseFactory.prototype.replaceAnimation = function (armature, armatureData, isOverride) {
      if (isOverride === void 0) {
        isOverride = true;
      }

      var skinData = armatureData.defaultSkin;

      if (skinData === null) {
        return false;
      }

      if (isOverride) {
        armature.animation.animations = armatureData.animations;
      } else {
        var rawAnimations = armature.animation.animations;
        var animations = {};

        for (var k in rawAnimations) {
          animations[k] = rawAnimations[k];
        }

        for (var k in armatureData.animations) {
          animations[k] = armatureData.animations[k];
        }

        armature.animation.animations = animations;
      }

      for (var _i = 0, _a = armature.getSlots(); _i < _a.length; _i++) {
        var slot = _a[_i];
        var index = 0;

        for (var _b = 0, _c = slot.displayList; _b < _c.length; _b++) {
          var display = _c[_b];

          if (display instanceof dragonBones.Armature) {
            var displayDatas = skinData.getDisplays(slot.name);

            if (displayDatas !== null && index < (dragonBones.DragonBones.webAssembly ? displayDatas.size() : displayDatas.length)) {
              var displayData = dragonBones.DragonBones.webAssembly ? displayDatas.get(index) : displayDatas[index];

              if (displayData !== null && displayData.type === 1
              /* Armature */
              ) {
                  var childArmatureData = this.getArmatureData(displayData.path, displayData.parent.parent.parent.name);

                  if (childArmatureData) {
                    this.replaceAnimation(display, childArmatureData, isOverride);
                  }
                }
            }
          }

          index++;
        }
      }

      return true;
    };
    /**
     * @private
     */


    BaseFactory.prototype.getAllDragonBonesData = function () {
      return this._dragonBonesDataMap;
    };
    /**
     * @private
     */


    BaseFactory.prototype.getAllTextureAtlasData = function () {
      return this._textureAtlasDataMap;
    };

    Object.defineProperty(BaseFactory.prototype, "clock", {
      /**
       * - An Worldclock instance updated by engine.
       * @version DragonBones 5.7
       * @language en_US
       */

      /**
       * - 由引擎驱动的 WorldClock 实例。
       * @version DragonBones 5.7
       * @language zh_CN
       */
      get: function get() {
        return this._dragonBones.clock;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(BaseFactory.prototype, "dragonBones", {
      /**
       * @private
       */
      get: function get() {
        return this._dragonBones;
      },
      enumerable: true,
      configurable: true
    });
    /**
     * - Deprecated, please refer to {@link #replaceSkin}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #replaceSkin}。
     * @deprecated
     * @language zh_CN
     */

    BaseFactory.prototype.changeSkin = function (armature, skin, exclude) {
      if (exclude === void 0) {
        exclude = null;
      }

      return this.replaceSkin(armature, skin, false, exclude);
    };
    /**
     * - Deprecated, please refer to {@link #replaceAnimation}.
     * @deprecated
     * @language en_US
     */

    /**
     * - 已废弃，请参考 {@link #replaceAnimation}。
     * @deprecated
     * @language zh_CN
     */


    BaseFactory.prototype.copyAnimationsToArmature = function (toArmature, fromArmatreName, fromSkinName, fromDragonBonesDataName, replaceOriginalAnimation) {
      if (fromSkinName === void 0) {
        fromSkinName = "";
      }

      if (fromDragonBonesDataName === void 0) {
        fromDragonBonesDataName = "";
      }

      if (replaceOriginalAnimation === void 0) {
        replaceOriginalAnimation = true;
      } // tslint:disable-next-line:no-unused-expression


      fromSkinName;
      var armatureData = this.getArmatureData(fromArmatreName, fromDragonBonesDataName);

      if (!armatureData) {
        return false;
      }

      return this.replaceAnimation(toArmature, armatureData, replaceOriginalAnimation);
    };

    BaseFactory._objectParser = null;
    BaseFactory._binaryParser = null;
    return BaseFactory;
  }();

  dragonBones.BaseFactory = BaseFactory;
  /**
   * @internal
   */

  var BuildArmaturePackage =
  /** @class */
  function () {
    function BuildArmaturePackage() {
      this.dataName = "";
      this.textureAtlasName = "";
      this.skin = null;
    }

    return BuildArmaturePackage;
  }();

  dragonBones.BuildArmaturePackage = BuildArmaturePackage;
})(dragonBones || (dragonBones = {}));

module.exports = dragonBones;
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_engine__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuZ2luZS1kZXZcXGV4dGVuc2lvbnNcXGRyYWdvbmJvbmVzXFxsaWJcXGRyYWdvbkJvbmVzLmpzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsImV4dGVuZFN0YXRpY3MiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiZCIsImIiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJfXyIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiZHJhZ29uQm9uZXMiLCJEcmFnb25Cb25lcyIsImV2ZW50TWFuYWdlciIsIl9jbG9jayIsIldvcmxkQ2xvY2siLCJfZXZlbnRzIiwiX29iamVjdHMiLCJfZXZlbnRNYW5hZ2VyIiwiY29uc29sZSIsImluZm8iLCJWRVJTSU9OIiwiYWR2YW5jZVRpbWUiLCJwYXNzZWRUaW1lIiwibGVuZ3RoIiwiX2kiLCJfYSIsIm9iamVjdCIsInJldHVyblRvUG9vbCIsImkiLCJldmVudE9iamVjdCIsImFybWF0dXJlIiwiX2FybWF0dXJlRGF0YSIsImV2ZW50RGlzcGF0Y2hlciIsImRpc3BhdGNoREJFdmVudCIsInR5cGUiLCJFdmVudE9iamVjdCIsIlNPVU5EX0VWRU5UIiwiYnVmZmVyT2JqZWN0IiwiYnVmZmVyRXZlbnQiLCJ2YWx1ZSIsImluZGV4T2YiLCJwdXNoIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwieURvd24iLCJkZWJ1ZyIsImRlYnVnRHJhdyIsIndlYkFzc2VtYmx5Iiwid2FybiIsImFzc2VydCIsIkRhdGUiLCJub3ciLCJnZXRUaW1lIiwidCIsImUiLCJyIiwiQmFzZU9iamVjdCIsImhhc2hDb2RlIiwiX2hhc2hDb2RlIiwiX2lzSW5Qb29sIiwiX3JldHVybk9iamVjdCIsImNsYXNzVHlwZSIsIlN0cmluZyIsIm1heENvdW50IiwiX21heENvdW50TWFwIiwiX2RlZmF1bHRNYXhDb3VudCIsInBvb2wiLCJfcG9vbHNNYXAiLCJ0b1N0cmluZyIsIkVycm9yIiwic2V0TWF4Q291bnQiLCJvYmplY3RDb25zdHJ1Y3RvciIsImNsZWFyUG9vbCIsImsiLCJib3Jyb3dPYmplY3QiLCJvYmplY3RfMSIsInBvcCIsIl9vbkNsZWFyIiwiTWF0cml4IiwiYSIsImMiLCJ0eCIsInR5IiwiY29weUZyb20iLCJjb3B5RnJvbUFycmF5Iiwib2Zmc2V0IiwiaWRlbnRpdHkiLCJjb25jYXQiLCJhQSIsImJBIiwiY0EiLCJkQSIsInR4QSIsInR5QSIsImludmVydCIsImRldGVybWluYW50IiwidHJhbnNmb3JtUG9pbnQiLCJ4IiwieSIsInJlc3VsdCIsImRlbHRhIiwidHJhbnNmb3JtUmVjdGFuZ2xlIiwicmVjdGFuZ2xlIiwieE1heCIsIndpZHRoIiwieU1heCIsImhlaWdodCIsIngwIiwieTAiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIngzIiwieTMiLCJ0bXAiLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwiVHJhbnNmb3JtIiwic2tldyIsInJvdGF0aW9uIiwic2NhbGVYIiwic2NhbGVZIiwibm9ybWFsaXplUmFkaWFuIiwiUEkiLCJhZGQiLCJtaW51cyIsImZyb21NYXRyaXgiLCJtYXRyaXgiLCJiYWNrdXBTY2FsZVgiLCJiYWNrdXBTY2FsZVkiLCJQSV9RIiwiYXRhbiIsInNrZXdYIiwiY29zIiwic2luIiwidG9NYXRyaXgiLCJQSV9EIiwiUElfSCIsIlJBRF9ERUciLCJERUdfUkFEIiwiQ29sb3JUcmFuc2Zvcm0iLCJhbHBoYU11bHRpcGxpZXIiLCJyZWRNdWx0aXBsaWVyIiwiZ3JlZW5NdWx0aXBsaWVyIiwiYmx1ZU11bHRpcGxpZXIiLCJhbHBoYU9mZnNldCIsInJlZE9mZnNldCIsImdyZWVuT2Zmc2V0IiwiYmx1ZU9mZnNldCIsIlBvaW50IiwiY2xlYXIiLCJSZWN0YW5nbGUiLCJVc2VyRGF0YSIsIl9zdXBlciIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpbnRzIiwiZmxvYXRzIiwic3RyaW5ncyIsImFkZEludCIsImFkZEZsb2F0IiwiYWRkU3RyaW5nIiwiZ2V0SW50IiwiaW5kZXgiLCJnZXRGbG9hdCIsImdldFN0cmluZyIsIkFjdGlvbkRhdGEiLCJkYXRhIiwibmFtZSIsImJvbmUiLCJzbG90IiwiRHJhZ29uQm9uZXNEYXRhIiwiZnJhbWVJbmRpY2VzIiwiY2FjaGVkRnJhbWVzIiwiYXJtYXR1cmVOYW1lcyIsImFybWF0dXJlcyIsInVzZXJEYXRhIiwiYXV0b1NlYXJjaCIsImZyYW1lUmF0ZSIsInZlcnNpb24iLCJzdGFnZSIsImJpbmFyeSIsImludEFycmF5IiwiZmxvYXRBcnJheSIsImZyYW1lSW50QXJyYXkiLCJmcmFtZUZsb2F0QXJyYXkiLCJmcmFtZUFycmF5IiwidGltZWxpbmVBcnJheSIsImFkZEFybWF0dXJlIiwicGFyZW50IiwiZ2V0QXJtYXR1cmUiLCJhcm1hdHVyZU5hbWUiLCJkaXNwb3NlIiwiQXJtYXR1cmVEYXRhIiwiYWFiYiIsImFuaW1hdGlvbk5hbWVzIiwic29ydGVkQm9uZXMiLCJzb3J0ZWRTbG90cyIsImRlZmF1bHRBY3Rpb25zIiwiYWN0aW9ucyIsImJvbmVzIiwic2xvdHMiLCJjb25zdHJhaW50cyIsInNraW5zIiwiYW5pbWF0aW9ucyIsImNhbnZhcyIsImFjdGlvbiIsIl9iIiwiX2MiLCJjYWNoZUZyYW1lUmF0ZSIsInNjYWxlIiwiZGVmYXVsdFNraW4iLCJkZWZhdWx0QW5pbWF0aW9uIiwic29ydEJvbmVzIiwidG90YWwiLCJzb3J0SGVscGVyIiwiY291bnQiLCJmbGFnIiwiY29uc3RyYWludCIsInJvb3QiLCJ0YXJnZXQiLCJjYWNoZUZyYW1lcyIsInNldENhY2hlRnJhbWUiLCJnbG9iYWxUcmFuc2Zvcm1NYXRyaXgiLCJ0cmFuc2Zvcm0iLCJkYXRhQXJyYXkiLCJhcnJheU9mZnNldCIsImdldENhY2hlRnJhbWUiLCJhZGRCb25lIiwiYWRkU2xvdCIsImFkZENvbnN0cmFpbnQiLCJhZGRTa2luIiwiYWRkQW5pbWF0aW9uIiwiYWRkQWN0aW9uIiwiaXNEZWZhdWx0IiwiZ2V0Qm9uZSIsImJvbmVOYW1lIiwiZ2V0U2xvdCIsInNsb3ROYW1lIiwiZ2V0Q29uc3RyYWludCIsImNvbnN0cmFpbnROYW1lIiwiZ2V0U2tpbiIsInNraW5OYW1lIiwiZ2V0TWVzaCIsIm1lc2hOYW1lIiwic2tpbiIsImdldERpc3BsYXkiLCJnZXRBbmltYXRpb24iLCJhbmltYXRpb25OYW1lIiwiQm9uZURhdGEiLCJpbmhlcml0VHJhbnNsYXRpb24iLCJpbmhlcml0Um90YXRpb24iLCJpbmhlcml0U2NhbGUiLCJpbmhlcml0UmVmbGVjdGlvbiIsIlN1cmZhY2VEYXRhIiwidmVydGljZXMiLCJjYWxsIiwic2VnbWVudFgiLCJzZWdtZW50WSIsIlNsb3REYXRhIiwiY29sb3IiLCJjcmVhdGVDb2xvciIsImJsZW5kTW9kZSIsImRpc3BsYXlJbmRleCIsInpPcmRlciIsIkRFRkFVTFRfQ09MT1IiLCJDb25zdHJhaW50RGF0YSIsIm9yZGVyIiwiSUtDb25zdHJhaW50RGF0YSIsInNjYWxlRW5hYmxlZCIsImJlbmRQb3NpdGl2ZSIsIndlaWdodCIsIlBhdGhDb25zdHJhaW50RGF0YSIsInBhdGhTbG90IiwicGF0aERpc3BsYXlEYXRhIiwicG9zaXRpb25Nb2RlIiwic3BhY2luZ01vZGUiLCJyb3RhdGVNb2RlIiwicG9zaXRpb24iLCJzcGFjaW5nIiwicm90YXRlT2Zmc2V0Iiwicm90YXRlTWl4IiwidHJhbnNsYXRlTWl4IiwiQWRkQm9uZSIsIkNhbnZhc0RhdGEiLCJoYXNCYWNrZ3JvdW5kIiwiU2tpbkRhdGEiLCJkaXNwbGF5cyIsInNsb3REaXNwbGF5cyIsInNsb3REaXNwbGF5c18xIiwiZGlzcGxheSIsImFkZERpc3BsYXkiLCJkaXNwbGF5TmFtZSIsImdldERpc3BsYXlzIiwic2xvdERpc3BsYXlzXzIiLCJWZXJ0aWNlc0RhdGEiLCJpc1NoYXJlZCIsImluaGVyaXREZWZvcm0iLCJzaGFyZUZyb20iLCJEaXNwbGF5RGF0YSIsInBhdGgiLCJJbWFnZURpc3BsYXlEYXRhIiwicGl2b3QiLCJ0ZXh0dXJlIiwiQXJtYXR1cmVEaXNwbGF5RGF0YSIsImluaGVyaXRBbmltYXRpb24iLCJNZXNoRGlzcGxheURhdGEiLCJCb3VuZGluZ0JveERpc3BsYXlEYXRhIiwiYm91bmRpbmdCb3giLCJQYXRoRGlzcGxheURhdGEiLCJjdXJ2ZUxlbmd0aHMiLCJjbG9zZWQiLCJjb25zdGFudFNwZWVkIiwiV2VpZ2h0RGF0YSIsIkJvdW5kaW5nQm94RGF0YSIsIlJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YSIsIl9jb21wdXRlT3V0Q29kZSIsInhNaW4iLCJ5TWluIiwiY29kZSIsInJlY3RhbmdsZUludGVyc2VjdHNTZWdtZW50IiwieEEiLCJ5QSIsInhCIiwieUIiLCJpbnRlcnNlY3Rpb25Qb2ludEEiLCJpbnRlcnNlY3Rpb25Qb2ludEIiLCJub3JtYWxSYWRpYW5zIiwiaW5TaWRlQSIsImluU2lkZUIiLCJpbnRlcnNlY3Rpb25Db3VudCIsIm91dGNvZGUwIiwib3V0Y29kZTEiLCJub3JtYWxSYWRpYW4iLCJvdXRjb2RlT3V0IiwiY29udGFpbnNQb2ludCIsInBYIiwicFkiLCJ3aWR0aEgiLCJoZWlnaHRIIiwiaW50ZXJzZWN0c1NlZ21lbnQiLCJFbGxpcHNlQm91bmRpbmdCb3hEYXRhIiwiZWxsaXBzZUludGVyc2VjdHNTZWdtZW50IiwieEMiLCJ5QyIsImRkIiwiZFgiLCJkWSIsImxBQiIsInNxcnQiLCJ4RCIsInlEIiwiYWEiLCJlZSIsInJyIiwiZFIiLCJkVCIsInNBIiwic0IiLCJzaWRlQUIiLCJhdGFuMiIsIlBvbHlnb25Cb3VuZGluZ0JveERhdGEiLCJwb2x5Z29uSW50ZXJzZWN0c1NlZ21lbnQiLCJkWEFCIiwiZFlBQiIsImxsQUIiLCJkTWluIiwiZE1heCIsImRYQ0QiLCJkWUNEIiwibGxDRCIsImxsIiwiaXNJblNpZGUiLCJsIiwiaVAiLCJBbmltYXRpb25EYXRhIiwiYm9uZVRpbWVsaW5lcyIsInN1cmZhY2VUaW1lbGluZXMiLCJzbG90VGltZWxpbmVzIiwiY29uc3RyYWludFRpbWVsaW5lcyIsImFuaW1hdGlvblRpbWVsaW5lcyIsImJvbmVDYWNoZWRGcmFtZUluZGljZXMiLCJzbG90Q2FjaGVkRnJhbWVJbmRpY2VzIiwiYWN0aW9uVGltZWxpbmUiLCJ6T3JkZXJUaW1lbGluZSIsInRpbWVsaW5lIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJfaCIsIl9qIiwiZnJhbWVJbnRPZmZzZXQiLCJmcmFtZUZsb2F0T2Zmc2V0IiwiZnJhbWVPZmZzZXQiLCJmcmFtZUNvdW50IiwicGxheVRpbWVzIiwiZHVyYXRpb24iLCJmYWRlSW5UaW1lIiwibWF4IiwiY2FjaGVGcmFtZUNvdW50IiwiaW5kaWNlcyIsImFkZEJvbmVUaW1lbGluZSIsInRpbWVsaW5lcyIsImFkZFN1cmZhY2VUaW1lbGluZSIsInN1cmZhY2UiLCJhZGRTbG90VGltZWxpbmUiLCJhZGRDb25zdHJhaW50VGltZWxpbmUiLCJhZGRBbmltYXRpb25UaW1lbGluZSIsInRpbWVsaW5lTmFtZSIsImdldEJvbmVUaW1lbGluZXMiLCJnZXRTdXJmYWNlVGltZWxpbmVzIiwiZ2V0U2xvdFRpbWVsaW5lcyIsImdldENvbnN0cmFpbnRUaW1lbGluZXMiLCJnZXRBbmltYXRpb25UaW1lbGluZXMiLCJnZXRCb25lQ2FjaGVkRnJhbWVJbmRpY2VzIiwiZ2V0U2xvdENhY2hlZEZyYW1lSW5kaWNlcyIsIlRpbWVsaW5lRGF0YSIsImZyYW1lSW5kaWNlc09mZnNldCIsIkFuaW1hdGlvbkNvbmZpZyIsImJvbmVNYXNrIiwicGF1c2VGYWRlT3V0IiwiZmFkZU91dE1vZGUiLCJmYWRlT3V0VHdlZW5UeXBlIiwiZmFkZU91dFRpbWUiLCJhY3Rpb25FbmFibGVkIiwiYWRkaXRpdmVCbGVuZGluZyIsImRpc3BsYXlDb250cm9sIiwicGF1c2VGYWRlSW4iLCJyZXNldFRvUG9zZSIsImZhZGVJblR3ZWVuVHlwZSIsImxheWVyIiwidGltZVNjYWxlIiwiYXV0b0ZhZGVPdXRUaW1lIiwiYW5pbWF0aW9uIiwiZ3JvdXAiLCJjb250YWluc0JvbmVNYXNrIiwiYWRkQm9uZU1hc2siLCJyZWN1cnNpdmUiLCJjdXJyZW50Qm9uZSIsImdldEJvbmVzIiwiY29udGFpbnMiLCJyZW1vdmVCb25lTWFzayIsInNwbGljZSIsImluZGV4XzEiLCJUZXh0dXJlQXRsYXNEYXRhIiwidGV4dHVyZXMiLCJpbWFnZVBhdGgiLCJjcmVhdGVUZXh0dXJlIiwiYWRkVGV4dHVyZSIsImdldFRleHR1cmUiLCJ0ZXh0dXJlTmFtZSIsIlRleHR1cmVEYXRhIiwicmVnaW9uIiwiZnJhbWUiLCJjcmVhdGVSZWN0YW5nbGUiLCJyb3RhdGVkIiwiRGVmb3JtVmVydGljZXMiLCJ2ZXJ0aWNlc0RpcnR5IiwidmVydGljZXNEYXRhIiwiaW5pdCIsInZlcnRpY2VzRGF0YVZhbHVlIiwidmVydGV4Q291bnQiLCJpc0JvbmVzVXBkYXRlIiwiX2NoaWxkcmVuVHJhbnNmb3JtRGlydHkiLCJkcmFnb25Cb25lc18xIiwiQXJtYXR1cmUiLCJfYm9uZXMiLCJfc2xvdHMiLCJfY29uc3RyYWludHMiLCJfYWN0aW9ucyIsIl9hbmltYXRpb24iLCJfcHJveHkiLCJfcmVwbGFjZVRleHR1cmVBdGxhc0RhdGEiLCJfb25Tb3J0U2xvdHMiLCJfek9yZGVyIiwicmVtb3ZlIiwiZGJDbGVhciIsIl9sb2NrVXBkYXRlIiwiX3Nsb3RzRGlydHkiLCJfek9yZGVyRGlydHkiLCJfZmxpcFgiLCJfZmxpcFkiLCJfY2FjaGVGcmFtZUluZGV4IiwiX2Rpc3BsYXkiLCJfcmVwbGFjZWRUZXh0dXJlIiwiX2RyYWdvbkJvbmVzIiwiX3BhcmVudCIsIl9zb3J0Wk9yZGVyIiwic2xvdEluZGljZXMiLCJzbG90RGF0YXMiLCJpc09yaWdpbmFsIiwic2xvdEluZGV4Iiwic2xvdERhdGEiLCJfc2V0Wm9yZGVyIiwiX2FkZEJvbmUiLCJfYWRkU2xvdCIsIl9hZGRDb25zdHJhaW50IiwiX2J1ZmZlckFjdGlvbiIsImFwcGVuZCIsInVuc2hpZnQiLCJhcm1hdHVyZURhdGEiLCJwcm94eSIsIkFuaW1hdGlvbiIsImRiSW5pdCIsInByZXZDYWNoZUZyYW1lSW5kZXgiLCJzb3J0IiwidXBkYXRlIiwiYWN0aW9uRGF0YSIsImNoaWxkQXJtYXR1cmUiLCJmYWRlSW4iLCJnZXRTbG90cyIsImRiVXBkYXRlIiwiaW52YWxpZFVwZGF0ZSIsInVwZGF0ZVNsb3QiLCJpc1YiLCJpbnRYQSIsImludFlBIiwiaW50WEIiLCJpbnRZQiIsImludEFOIiwiaW50Qk4iLCJpbnRTbG90QSIsImludFNsb3RCIiwiZ2V0Qm9uZUJ5RGlzcGxheSIsImdldFNsb3RCeURpc3BsYXkiLCJzZXQiLCJjbG9jayIsInJlcGxhY2VUZXh0dXJlIiwicmVwbGFjZWRUZXh0dXJlIiwiaGFzRXZlbnRMaXN0ZW5lciIsImhhc0RCRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsImFkZERCRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVEQkV2ZW50TGlzdGVuZXIiLCJlbmFibGVBbmltYXRpb25DYWNoZSIsIlRyYW5zZm9ybU9iamVjdCIsImdsb2JhbCIsIm9yaWdpbiIsIl9nbG9iYWxEaXJ0eSIsIl9hcm1hdHVyZSIsInVwZGF0ZUdsb2JhbFRyYW5zZm9ybSIsIl9oZWxwTWF0cml4IiwiX2hlbHBUcmFuc2Zvcm0iLCJfaGVscFBvaW50IiwiQm9uZSIsImFuaW1hdGlvblBvc2UiLCJfYmxlbmRTdGF0ZSIsIkJsZW5kU3RhdGUiLCJvZmZzZXRNb2RlIiwiX3RyYW5zZm9ybURpcnR5IiwiX2xvY2FsRGlydHkiLCJfaGFzQ29uc3RyYWludCIsIl92aXNpYmxlIiwiX2NhY2hlZEZyYW1lSW5kZXgiLCJfYm9uZURhdGEiLCJfY2FjaGVkRnJhbWVJbmRpY2VzIiwiX3VwZGF0ZUdsb2JhbFRyYW5zZm9ybU1hdHJpeCIsImlzQ2FjaGUiLCJib25lRGF0YSIsImZsaXBYIiwiZmxpcFkiLCJpbmhlcml0IiwicGFyZW50TWF0cml4IiwiX2dldEdsb2JhbFRyYW5zZm9ybU1hdHJpeCIsImFybWF0dXJlVmFsdWUiLCJjYWNoZUZyYW1lSW5kZXgiLCJkaXJ0eSIsImNhY2hlZEZyYW1lSW5kZXgiLCJfcm9vdCIsInVwZGF0ZUJ5Q29uc3RyYWludCIsImFuY2VzdG9yIiwiX3VwZGF0ZVZpc2libGUiLCJTdXJmYWNlIiwiX3ZlcnRpY2VzIiwiX2RlZm9ybVZlcnRpY2VzIiwiX2h1bGxDYWNoZSIsIl9tYXRyaXhDYWhjZSIsIl9kWCIsIl9kWSIsIl9rIiwiX2tYIiwiX2tZIiwiX2dldEFmZmluZVRyYW5zZm9ybSIsImxYIiwibFkiLCJhWCIsImFZIiwiYlgiLCJiWSIsImNYIiwiY1kiLCJpc0Rvd24iLCJkYWJYIiwiZGFiWSIsImRhY1giLCJkYWNZIiwiX3VwZGF0ZVZlcnRpY2VzIiwib3JpZ2luYWxWZXJ0aWNlcyIsImFuaW1hdGlvblZlcnRpY2VzIiwic2VnbWVudFhEIiwibGFzdEluZGV4IiwibEEiLCJyYVgiLCJyYVkiLCJyYlgiLCJyYlkiLCJyY1giLCJyY1kiLCJyZFgiLCJyZFkiLCJkYmRYIiwiZGJkWSIsImxCIiwic3VyZmFjZURhdGEiLCJpbmRleFgiLCJpbmRleFkiLCJtYXRyaXhJbmRleCIsIm1hdHJpY2VzIiwiaGVscE1hdHJpeCIsInZlcnRleEluZGV4IiwiZGRYIiwiZGRZIiwic1giLCJzWSIsImhlbHBQb2ludCIsIlNsb3QiLCJfbG9jYWxNYXRyaXgiLCJfY29sb3JUcmFuc2Zvcm0iLCJfZGlzcGxheURhdGFzIiwiX2Rpc3BsYXlMaXN0IiwiX3Jhd0Rpc3BsYXkiLCJfbWVzaERpc3BsYXkiLCJkaXNwb3NlRGlzcGxheUxpc3QiLCJlYWNoRGlzcGxheSIsImRpc3Bvc2VEaXNwbGF5TGlzdF8xIiwiX2Rpc3Bvc2VEaXNwbGF5IiwiZGlzcGxheUNvbnRyb2xsZXIiLCJfZGlzcGxheURpcnR5IiwiX2JsZW5kTW9kZURpcnR5IiwiX2NvbG9yRGlydHkiLCJfYmxlbmRNb2RlIiwiX2Rpc3BsYXlJbmRleCIsIl9hbmltYXRpb25EaXNwbGF5SW5kZXgiLCJfcGl2b3RYIiwiX3Bpdm90WSIsIl9zbG90RGF0YSIsIl9yYXdEaXNwbGF5RGF0YXMiLCJfZGlzcGxheURhdGEiLCJfYm91bmRpbmdCb3hEYXRhIiwiX3RleHR1cmVEYXRhIiwiX2NoaWxkQXJtYXR1cmUiLCJfZ2V0RGVmYXVsdFJhd0Rpc3BsYXlEYXRhIiwiZGVmYXVsdFJhd0Rpc3BsYXlEYXRhcyIsIl91cGRhdGVEaXNwbGF5RGF0YSIsInByZXZEaXNwbGF5RGF0YSIsInByZXZWZXJ0aWNlc0RhdGEiLCJwcmV2VGV4dHVyZURhdGEiLCJyYXdEaXNwbGF5RGF0YSIsImN1cnJlbnRWZXJ0aWNlc0RhdGEiLCJpbWFnZURpc3BsYXlEYXRhIiwicmVjdCIsIl91cGRhdGVEaXNwbGF5IiwicHJldkRpc3BsYXkiLCJwcmV2Q2hpbGRBcm1hdHVyZSIsImN1cnJlbnREaXNwbGF5IiwiX29uVXBkYXRlRGlzcGxheSIsIl9yZXBsYWNlRGlzcGxheSIsIl92aXNpYmxlRGlydHkiLCJfdXBkYXRlRnJhbWUiLCJyZXNldCIsImFjdGlvbnNfMSIsImFjdGlvbkRhdGFUb0luc3RhbmNlIiwicGxheSIsIl9zZXREaXNwbGF5SW5kZXgiLCJpc0FuaW1hdGlvbiIsIl9zZXRDb2xvciIsIl9zZXREaXNwbGF5TGlzdCIsIl9pbml0RGlzcGxheSIsInJhd0Rpc3BsYXkiLCJtZXNoRGlzcGxheSIsIl9pc0Zyb21DYWNoZSIsInNsb3RQYXJlbnQiLCJfYWRkRGlzcGxheSIsIl91cGRhdGVaT3JkZXIiLCJfdXBkYXRlQmxlbmRNb2RlIiwiX3VwZGF0ZUNvbG9yIiwiaXNTa2lubmVkIiwiaXNTdXJmYWNlIiwiX3VwZGF0ZU1lc2giLCJfdXBkYXRlVHJhbnNmb3JtIiwidXBkYXRlVHJhbnNmb3JtQW5kTWF0cml4IiwicmVwbGFjZURpc3BsYXlEYXRhIiwiYmFja3VwRGlzcGxheUxpc3QiLCJiYWNrdXBEaXNwbGF5TGlzdF8xIiwiZGlzcG9zZURpc3BsYXlMaXN0XzIiLCJkaXNwbGF5TGlzdExlbmd0aCIsInJlcGxhY2VEaXNwbGF5TGlzdCIsImRpc3BsYXlMaXN0Iiwic2V0RGlzcGxheSIsIkNvbnN0cmFpbnQiLCJfdGFyZ2V0IiwiX2JvbmUiLCJfY29uc3RyYWludERhdGEiLCJJS0NvbnN0cmFpbnQiLCJfc2NhbGVFbmFibGVkIiwiX2JlbmRQb3NpdGl2ZSIsIl93ZWlnaHQiLCJfY29tcHV0ZUEiLCJpa0dsb2JhbCIsInJhZGlhbiIsIl9jb21wdXRlQiIsImJvbmVMZW5ndGgiLCJwYXJlbnRHbG9iYWwiLCJsTEwiLCJsTCIsImxQUCIsImxQIiwicmF3UmFkaWFuIiwicmF3UGFyZW50UmFkaWFuIiwicmF3UmFkaWFuQSIsImxUVCIsImxUIiwicmFkaWFuQSIsImgiLCJoWCIsImhZIiwiclgiLCJyWSIsImlzUFBSIiwicGFyZW50UGFyZW50IiwicGFyZW50UGFyZW50TWF0cml4IiwiY3VycmVudFJhZGlhbkEiLCJyYWRpYW5CIiwiY29uc3RyYWludERhdGEiLCJpa0NvbnN0cmFpbnREYXRhIiwiUGF0aENvbnN0cmFpbnQiLCJfc3BhY2VzIiwiX3Bvc2l0aW9ucyIsIl9jdXJ2ZXMiLCJfYm9uZUxlbmd0aHMiLCJfcGF0aEdsb2JhbFZlcnRpY2VzIiwiX3NlZ21lbnRzIiwicGF0aE9mZnNldCIsIl9wYXRoU2xvdCIsIl91cGRhdGVQYXRoVmVydGljZXMiLCJkcmFnb25Cb25lc0RhdGEiLCJwYXRoVmVydGV4Q291bnQiLCJwYXRoVmVydGV4T2Zmc2V0Iiwid2VpZ2h0RGF0YSIsInBhcmVudEJvbmUiLCJpVl8xIiwidngiLCJ2eSIsIndlaWdodEJvbmVDb3VudCIsIndlaWdodE9mZnNldCIsImZsb2F0T2Zmc2V0IiwiaVYiLCJpQiIsImlXIiwidmVydGV4Qm9uZUNvdW50IiwieEciLCJ5RyIsImlpIiwiYm9uZUluZGV4IiwiX2NvbXB1dGVWZXJ0aWNlcyIsInN0YXJ0Iiwib3V0IiwiX2NvbXB1dGVCZXppZXJDdXJ2ZSIsInBhdGhEaXNwbGF5RHRhIiwic3BhY2VDb3VudCIsInRhbmdlbnRzIiwicGVyY2VudFBvc2l0aW9uIiwicGVyY2VudFNwYWNpbmciLCJwb3NpdGlvbnMiLCJzcGFjZXMiLCJpc0Nsb3NlZCIsImN1cnZlVmVydGljZXMiLCJ2ZXJ0aWNlc0xlbmd0aCIsImN1cnZlQ291bnQiLCJwcmVDdXJ2ZSIsInBhdGhMZW5ndGgiLCJsZW5naHRzIiwibyIsImN1cnZlIiwic3BhY2UiLCJwZXJjZW50IiwibGVuIiwicHJlTGVuIiwiYWRkQ3VydmVQb3NpdGlvbiIsImN1cnZlcyIsImN4MSIsImN5MSIsImN4MiIsImN5MiIsInRtcHgiLCJ0bXB5IiwiZGRkZngiLCJkZGRmeSIsImRkZngiLCJkZGZ5IiwiZGZ4IiwiZGZ5IiwidyIsInNlZ21lbnRzIiwiY3VydmVMZW5ndGgiLCJzZWdtZW50IiwibGVuZ3RoXzEiLCJwcmV2IiwibGVuZ3RoXzIiLCJtdCIsIm10MiIsInQyIiwiaXNQYXRoVmVydGljZURpcnR5IiwiZGVmb3JtVmVydGljZXMiLCJpc0xlbmd0aE1vZGUiLCJpc0NoYWluU2NhbGVNb2RlIiwiaXNUYW5nZW50TW9kZSIsImJvbmVDb3VudCIsInNwYWNlc0NvdW50IiwiYm9uZVgiLCJib25lWSIsInRpcCIsImR4IiwiZHkiLCJsZW5naHQiLCJzIiwibGVuZ3RoXzMiLCJ0aW1lIiwiX3N5c3RlbVRpbWUiLCJfYW5pbWF0ZWJsZXMiLCJjdXJyZW50VGltZSIsImFuaW1hdGFibGUiLCJhbmltYXRlYmxlIiwiX2FuaW1hdGlvbk5hbWVzIiwiX2FuaW1hdGlvblN0YXRlcyIsIl9hbmltYXRpb25zIiwiX2FuaW1hdGlvbkNvbmZpZyIsImFuaW1hdGlvblN0YXRlIiwiX2FuaW1hdGlvbkRpcnR5IiwiX2luaGVyaXRUaW1lU2NhbGUiLCJfbGFzdEFuaW1hdGlvblN0YXRlIiwiX2ZhZGVPdXQiLCJhbmltYXRpb25Db25maWciLCJmYWRlT3V0IiwiYW5pbWF0aW9uU3RhdGVDb3VudCIsIl9mYWRlU3RhdGUiLCJfc3ViRmFkZVN0YXRlIiwiYW5pbWF0aW9uRGF0YSIsIl9hbmltYXRpb25EYXRhIiwicmF3RGlzcGxheURhdGFzIiwicmF3RHNwbGF5RGF0YSIsInN0b3AiLCJnZXRTdGF0ZSIsInBsYXlDb25maWciLCJhbmltYXRpb25TdGF0ZV8xIiwiQW5pbWF0aW9uU3RhdGUiLCJhZGRlZCIsImhhc0FuaW1hdGlvbiIsImlzTG9ja2VkIiwiY2hpbGRBbmltYXRpaW9uU3RhdGUiLCJpc1BsYXlpbmciLCJpc0NvbXBsZXRlZCIsImdvdG9BbmRQbGF5QnlUaW1lIiwiZ290b0FuZFBsYXlCeUZyYW1lIiwiZ290b0FuZFBsYXlCeVByb2dyZXNzIiwicHJvZ3Jlc3MiLCJnb3RvQW5kU3RvcEJ5VGltZSIsImdvdG9BbmRTdG9wQnlGcmFtZSIsImdvdG9BbmRTdG9wQnlQcm9ncmVzcyIsImdldFN0YXRlcyIsImdvdG9BbmRQbGF5IiwiZ290b0FuZFN0b3AiLCJsaXN0IiwiX2JvbmVNYXNrIiwiX2JvbmVUaW1lbGluZXMiLCJfc3VyZmFjZVRpbWVsaW5lcyIsIl9zbG90VGltZWxpbmVzIiwiX2NvbnN0cmFpbnRUaW1lbGluZXMiLCJfYW5pbWF0aW9uVGltZWxpbmVzIiwiX3Bvc2VUaW1lbGluZXMiLCJfYm9uZVBvc2VzIiwiX2FjdGlvblRpbWVsaW5lIiwiX3pPcmRlclRpbWVsaW5lIiwiZmFkZVRvdGFsVGltZSIsIl90aW1lbGluZURpcnR5IiwiX3BsYXloZWFkU3RhdGUiLCJfcG9zaXRpb24iLCJfZHVyYXRpb24iLCJfZmFkZVRpbWUiLCJfdGltZSIsIl9mYWRlUHJvZ3Jlc3MiLCJfd2VpZ2h0UmVzdWx0IiwiX3VwZGF0ZVRpbWVsaW5lcyIsInRpbWVsaW5lRGF0YXMiLCJ0aW1lbGluZURhdGFzXzEiLCJ0aW1lbGluZURhdGEiLCJJS0NvbnN0cmFpbnRUaW1lbGluZVN0YXRlIiwidGltZWxpbmVEYXRhc18yIiwiQW5pbWF0aW9uVGltZWxpbmVTdGF0ZSIsIl91cGRhdGVCb25lQW5kU2xvdFRpbWVsaW5lcyIsImJvbmVQb3NlIiwiQm9uZVBvc2UiLCJ0aW1lbGluZURhdGFzXzMiLCJCb25lQWxsVGltZWxpbmVTdGF0ZSIsIkJvbmVUcmFuc2xhdGVUaW1lbGluZVN0YXRlIiwiQm9uZVJvdGF0ZVRpbWVsaW5lU3RhdGUiLCJCb25lU2NhbGVUaW1lbGluZVN0YXRlIiwidGltZWxpbmVEYXRhc180IiwiU3VyZmFjZVRpbWVsaW5lU3RhdGUiLCJmZmRGbGFncyIsIl9sIiwiZGlzcGxheUluZGV4RmxhZyIsImNvbG9yRmxhZyIsIl9tIiwidGltZWxpbmVEYXRhc181IiwiU2xvdERpc2xheVRpbWVsaW5lU3RhdGUiLCJTbG90Q29sb3JUaW1lbGluZVN0YXRlIiwiRGVmb3JtVGltZWxpbmVTdGF0ZSIsInZlcnRleE9mZnNldCIsIl9vIiwiX3AiLCJkaXNwbGF5RGF0YSIsIm1lc2hPZmZzZXQiLCJfcSIsIl9yIiwiX2FkdmFuY2VGYWRlVGltZSIsImlzRmFkZU91dCIsImV2ZW50VHlwZSIsIkZBREVfT1VUIiwiRkFERV9JTiIsIkZBREVfT1VUX0NPTVBMRVRFIiwiRkFERV9JTl9DT01QTEVURSIsIkFjdGlvblRpbWVsaW5lU3RhdGUiLCJaT3JkZXJUaW1lbGluZVN0YXRlIiwiaXNDYWNoZUVuYWJsZWQiLCJpc1VwZGF0ZVRpbWVsaW5lIiwiaXNVcGRhdGVCb25lVGltZWxpbmUiLCJwbGF5U3RhdGUiLCJpbnRlcm52YWwiLCJzdGF0ZSIsImJsZW5kIiwiQm9uZVRpbWVsaW5lU3RhdGUiLCJTbG90VGltZWxpbmVTdGF0ZSIsIkNvbnN0cmFpbnRUaW1lbGluZVN0YXRlIiwicGF1c2VQbGF5aGVhZCIsImJvbmVzXzEiLCJpbmRleF8yIiwiYm9uZXNfMiIsInJlbW92ZUFsbEJvbmVNYXNrIiwiY3VycmVudFBsYXlUaW1lcyIsInNldEN1cnJlbnRUaW1lIiwiY3VycmVudCIsInBfbGF5ZXIiLCJsZWZ0V2VpZ2h0IiwibGF5ZXJXZWlnaHQiLCJibGVuZFdlaWdodCIsIlRpbWVsaW5lU3RhdGUiLCJfdHdlZW5TdGF0ZSIsIl9mcmFtZVJhdGUiLCJfZnJhbWVWYWx1ZU9mZnNldCIsIl9mcmFtZUNvdW50IiwiX2ZyYW1lT2Zmc2V0IiwiX2ZyYW1lSW5kZXgiLCJfZnJhbWVSYXRlUiIsIl90aW1lU2NhbGUiLCJfdGltZU9mZnNldCIsIl9kcmFnb25Cb25lc0RhdGEiLCJfdGltZWxpbmVEYXRhIiwiX2FuaW1hdGlvblN0YXRlIiwiX2ZyYW1lQXJyYXkiLCJfZnJhbWVJbnRBcnJheSIsIl9mcmFtZUZsb2F0QXJyYXkiLCJfdGltZWxpbmVBcnJheSIsIl9mcmFtZUluZGljZXMiLCJfc2V0Q3VycmVudFRpbWUiLCJwcmV2U3RhdGUiLCJwcmV2UGxheVRpbWVzIiwicHJldlRpbWUiLCJ0b3RhbFRpbWUiLCJ0aW1lbGluZUZyYW1lSW5kZXgiLCJmcmFtZUluZGV4IiwiX29uQXJyaXZlQXRGcmFtZSIsIl9vblVwZGF0ZUZyYW1lIiwiVHdlZW5UaW1lbGluZVN0YXRlIiwiX2dldEVhc2luZ1ZhbHVlIiwidHdlZW5UeXBlIiwiZWFzaW5nIiwicG93IiwiX2dldEVhc2luZ0N1cnZlVmFsdWUiLCJzYW1wbGVzIiwic2VnbWVudENvdW50IiwidmFsdWVJbmRleCIsImZyb21WYWx1ZSIsInRvVmFsdWUiLCJfdHdlZW5UeXBlIiwiX2N1cnZlQ291bnQiLCJfZnJhbWVQb3NpdGlvbiIsIl9mcmFtZUR1cmF0aW9uUiIsIl90d2VlblByb2dyZXNzIiwiX3R3ZWVuRWFzaW5nIiwibmV4dEZyYW1lT2Zmc2V0IiwiZnJhbWVEdXJhdGlvbiIsIl9vbkNyb3NzRnJhbWUiLCJhY3Rpb25Db3VudCIsImFjdGlvbkluZGV4IiwiRlJBTUVfRVZFTlQiLCJTVEFSVCIsImlzUmV2ZXJzZSIsImxvb3BDb21wbGV0ZUV2ZW50IiwiY29tcGxldGVFdmVudCIsIkxPT1BfQ09NUExFVEUiLCJDT01QTEVURSIsImNyb3NzZWRGcmFtZUluZGV4IiwicHJldkZyYW1lSW5kZXgiLCJmcmFtZVBvc2l0aW9uIiwidmFsdWVPZmZzZXQiLCJfY3VycmVudCIsIl9kZWx0YSIsIl9yZXN1bHQiLCJfZnJhbWVGbG9hdE9mZnNldCIsIl92YWx1ZUNvdW50IiwiX2RlZm9ybUNvdW50IiwiX3ZhbHVlT2Zmc2V0IiwibmV4dFZhbHVlT2Zmc2V0IiwiX2RpcnR5IiwiY29sb3JPZmZzZXQiLCJmYWRlUHJvZ3Jlc3MiLCJpa0NvbnN0cmFpbnQiLCJfZmxvYXRzIiwiZnJhbWVSYXRlUiIsImluc3RhbmNlIiwiRGF0YVBhcnNlciIsIl9nZXRBcm1hdHVyZVR5cGUiLCJ0b0xvd2VyQ2FzZSIsIl9nZXRCb25lVHlwZSIsIl9nZXREaXNwbGF5VHlwZSIsIl9nZXRCb3VuZGluZ0JveFR5cGUiLCJfZ2V0QWN0aW9uVHlwZSIsIl9nZXRCbGVuZE1vZGUiLCJfZ2V0UG9zaXRpb25Nb2RlIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfZ2V0U3BhY2luZ01vZGUiLCJfZ2V0Um90YXRlTW9kZSIsInBhcnNlRHJhZ29uQm9uZXNEYXRhIiwicmF3RGF0YSIsIkFycmF5QnVmZmVyIiwiQmluYXJ5RGF0YVBhcnNlciIsImdldEluc3RhbmNlIiwiT2JqZWN0RGF0YVBhcnNlciIsInBhcnNlVGV4dHVyZUF0bGFzRGF0YSIsInRleHR1cmVBdGxhc0RhdGEiLCJzdWJUZXh0dXJlTGlzdCIsIlNVQl9URVhUVVJFIiwic3ViVGV4dHVyZU9iamVjdCIsInN1YlRleHR1cmVOYW1lIiwiTkFNRSIsInN1YlRleHR1cmVSZWdpb24iLCJzdWJUZXh0dXJlRnJhbWUiLCJYIiwiWSIsIldJRFRIIiwiSEVJR0hUIiwiRlJBTUVfV0lEVEgiLCJGUkFNRV9YIiwiRlJBTUVfWSIsIkZSQU1FX0hFSUdIVCIsIkRBVEFfVkVSU0lPTl8yXzMiLCJEQVRBX1ZFUlNJT05fM18wIiwiREFUQV9WRVJTSU9OXzRfMCIsIkRBVEFfVkVSU0lPTl80XzUiLCJEQVRBX1ZFUlNJT05fNV8wIiwiREFUQV9WRVJTSU9OXzVfNSIsIkRBVEFfVkVSU0lPTiIsIkRBVEFfVkVSU0lPTlMiLCJURVhUVVJFX0FUTEFTIiwiRk9STUFUIiwiSU1BR0VfUEFUSCIsIlJPVEFURUQiLCJEUkFET05fQk9ORVMiLCJVU0VSX0RBVEEiLCJBUk1BVFVSRSIsIkJPTkUiLCJTVVJGQUNFIiwiU0xPVCIsIkNPTlNUUkFJTlQiLCJJSyIsIlBBVEhfQ09OU1RSQUlOVCIsIlNLSU4iLCJESVNQTEFZIiwiQU5JTUFUSU9OIiwiWl9PUkRFUiIsIkZGRCIsIkZSQU1FIiwiVFJBTlNMQVRFX0ZSQU1FIiwiUk9UQVRFX0ZSQU1FIiwiU0NBTEVfRlJBTUUiLCJESVNQTEFZX0ZSQU1FIiwiQ09MT1JfRlJBTUUiLCJERUZBVUxUX0FDVElPTlMiLCJBQ1RJT05TIiwiRVZFTlRTIiwiSU5UUyIsIkZMT0FUUyIsIlNUUklOR1MiLCJDQU5WQVMiLCJUUkFOU0ZPUk0iLCJQSVZPVCIsIkFBQkIiLCJDT0xPUiIsIkNPTVBBVElCTEVfVkVSU0lPTiIsIkZSQU1FX1JBVEUiLCJUWVBFIiwiU1VCX1RZUEUiLCJQQVJFTlQiLCJUQVJHRVQiLCJTVEFHRSIsIlNIQVJFIiwiUEFUSCIsIkxFTkdUSCIsIkRJU1BMQVlfSU5ERVgiLCJCTEVORF9NT0RFIiwiSU5IRVJJVF9UUkFOU0xBVElPTiIsIklOSEVSSVRfUk9UQVRJT04iLCJJTkhFUklUX1NDQUxFIiwiSU5IRVJJVF9SRUZMRUNUSU9OIiwiSU5IRVJJVF9BTklNQVRJT04iLCJJTkhFUklUX0RFRk9STSIsIlNFR01FTlRfWCIsIlNFR01FTlRfWSIsIkJFTkRfUE9TSVRJVkUiLCJDSEFJTiIsIldFSUdIVCIsIkZBREVfSU5fVElNRSIsIlBMQVlfVElNRVMiLCJTQ0FMRSIsIk9GRlNFVCIsIlBPU0lUSU9OIiwiRFVSQVRJT04iLCJUV0VFTl9FQVNJTkciLCJUV0VFTl9ST1RBVEUiLCJUV0VFTl9TQ0FMRSIsIkNMT0NLX1dJU0UiLCJDVVJWRSIsIlNPVU5EIiwiRVZFTlQiLCJBQ1RJT04iLCJTS0VXX1giLCJTS0VXX1kiLCJTQ0FMRV9YIiwiU0NBTEVfWSIsIlZBTFVFIiwiUk9UQVRFIiwiU0tFVyIsIkFMUEhBX09GRlNFVCIsIlJFRF9PRkZTRVQiLCJHUkVFTl9PRkZTRVQiLCJCTFVFX09GRlNFVCIsIkFMUEhBX01VTFRJUExJRVIiLCJSRURfTVVMVElQTElFUiIsIkdSRUVOX01VTFRJUExJRVIiLCJCTFVFX01VTFRJUExJRVIiLCJVVlMiLCJWRVJUSUNFUyIsIlRSSUFOR0xFUyIsIldFSUdIVFMiLCJTTE9UX1BPU0UiLCJCT05FX1BPU0UiLCJHTFVFX1dFSUdIVFMiLCJHTFVFX01FU0hFUyIsIkJPTkVTIiwiUE9TSVRJT05fTU9ERSIsIlNQQUNJTkdfTU9ERSIsIlJPVEFURV9NT0RFIiwiU1BBQ0lORyIsIlJPVEFURV9PRkZTRVQiLCJST1RBVEVfTUlYIiwiVFJBTlNMQVRFX01JWCIsIlRBUkdFVF9ESVNQTEFZIiwiQ0xPU0VEIiwiQ09OU1RBTlRfU1BFRUQiLCJWRVJURVhfQ09VTlQiLCJMRU5HVEhTIiwiR09UT19BTkRfUExBWSIsIkRFRkFVTFRfTkFNRSIsIl9yYXdUZXh0dXJlQXRsYXNJbmRleCIsIl9yYXdCb25lcyIsIl9kYXRhIiwiX3N1cmZhY2UiLCJfc2xvdCIsIl9za2luIiwiX21lc2giLCJfdGltZWxpbmUiLCJfcmF3VGV4dHVyZUF0bGFzZXMiLCJfZGVmYXVsdENvbG9yT2Zmc2V0IiwiX3ByZXZDbG9ja3dpc2UiLCJfcHJldlJvdGF0aW9uIiwiX2hlbHBNYXRyaXhBIiwiX2hlbHBNYXRyaXhCIiwiX2hlbHBDb2xvclRyYW5zZm9ybSIsIl9oZWxwQXJyYXkiLCJfaW50QXJyYXkiLCJfZmxvYXRBcnJheSIsIl9jYWNoZVJhd01lc2hlcyIsIl9jYWNoZU1lc2hlcyIsIl9hY3Rpb25GcmFtZXMiLCJfd2VpZ2h0U2xvdFBvc2UiLCJfd2VpZ2h0Qm9uZVBvc2VzIiwiX2NhY2hlQm9uZXMiLCJfc2xvdENoaWxkQWN0aW9ucyIsIl9nZXRCb29sZWFuIiwia2V5IiwiZGVmYXVsdFZhbHVlIiwiX2dldE51bWJlciIsIl9nZXRTdHJpbmciLCJjaGFyQ29kZUF0IiwiZW5jb2RlVVJJIiwiX2dldEN1cnZlUG9pbnQiLCJ4NCIsInk0IiwibF90IiwicG93QSIsInBvd0IiLCJrQSIsImtCIiwia0MiLCJrRCIsIl9zYW1wbGluZ0Vhc2luZ0N1cnZlIiwic3RlcEluZGV4IiwiaXNJbkN1cnZlIiwibG93ZXIiLCJoaWdoZXIiLCJwZXJjZW50YWdlIiwiX3BhcnNlQWN0aW9uRGF0YUluRnJhbWUiLCJmcmFtZVN0YXJ0IiwiX21lcmdlQWN0aW9uRnJhbWUiLCJhY3Rpb25PZmZzZXQiLCJzaXplIiwiX3BhcnNlQWN0aW9uRGF0YSIsImFjdGlvbnNfMiIsIkFjdGlvbkZyYW1lIiwiZWFjaEZyYW1lIiwiX3BhcnNlQXJtYXR1cmUiLCJyYXdDYW52YXMiLCJyYXdBQUJCIiwicmF3Qm9uZXMiLCJyYXdCb25lc18xIiwicmF3Qm9uZSIsInBhcmVudE5hbWUiLCJfcGFyc2VCb25lIiwicGFyZW50XzEiLCJjaGlsZCIsInJhd0lLUyIsInJhd0lLU18xIiwicmF3SUsiLCJfcGFyc2VJS0NvbnN0cmFpbnQiLCJyYXdTbG90cyIsInJhd1Nsb3RzXzEiLCJyYXdTbG90IiwiX3BhcnNlU2xvdCIsInJhd1NraW5zIiwicmF3U2tpbnNfMSIsInJhd1NraW4iLCJfcGFyc2VTa2luIiwicmF3UGF0aHMiLCJyYXdQYXRoc18xIiwicmF3UGF0aCIsIl9wYXJzZVBhdGhDb25zdHJhaW50IiwicmF3TWVzaERhdGEiLCJfcGFyc2VNZXNoR2x1ZSIsInJhd0RhdGFfMSIsInNoYXJlTmFtZSIsInNoYXJlTWVzaCIsIm1lc2giLCJyYXdBbmltYXRpb25zIiwicmF3QW5pbWF0aW9uc18xIiwicmF3QW5pbWF0aW9uIiwiX3BhcnNlQW5pbWF0aW9uIiwiYWN0aW9uc18zIiwiYWN0aW9uc180IiwiX3BhcnNlVHJhbnNmb3JtIiwicmF3VmVydGljZXMiLCJjaGFpbiIsInRhcmdldERpc3BsYXkiLCJib25lc18zIiwiX3BhcnNlQ29sb3JUcmFuc2Zvcm0iLCJyYXdTbG90c18yIiwicmF3RGlzcGxheXMiLCJyYXdEaXNwbGF5c18xIiwiX3BhcnNlRGlzcGxheSIsImltYWdlRGlzcGxheSIsIl9wYXJzZVBpdm90IiwiYXJtYXR1cmVEaXNwbGF5IiwiYWN0aW9uc181IiwiX3BhcnNlTWVzaCIsIl9wYXJzZUJvdW5kaW5nQm94IiwiYm91bmRpbmdCb3hEaXNwbGF5IiwicmF3Q3VydmVMZW5ndGhzIiwicGF0aERpc3BsYXkiLCJfcGFyc2VQYXRoIiwicmF3V2VpZ2h0cyIsIndlaWdodENvdW50IiwicmF3Qm9uZUluZGV4IiwiaUYiLCJqIiwiYm9uZVdlaWdodCIsInJhd1Bpdm90IiwicmF3VVZzIiwicmF3VHJpYW5nbGVzIiwidHJpYW5nbGVDb3VudCIsInV2T2Zmc2V0IiwicmF3U2xvdFBvc2UiLCJyYXdCb25lUG9zZXMiLCJ3ZWlnaHRCb25lSW5kaWNlcyIsImlEIiwiX3BhcnNlUG9seWdvbkJvdW5kaW5nQm94IiwicG9seWdvbkJvdW5kaW5nQm94IiwicmVzaXplIiwicmF3RnJhbWVzIiwia2V5RnJhbWVDb3VudCIsInJhd0ZyYW1lIiwiX3BhcnNlVGltZWxpbmUiLCJfcGFyc2VaT3JkZXJGcmFtZSIsInJhd1RpbWVsaW5lcyIsInJhd1RpbWVsaW5lc18xIiwicmF3VGltZWxpbmUiLCJfcGFyc2VCb25lVGltZWxpbmUiLCJyYXdUaW1lbGluZXNfMiIsInN1cmZhY2VOYW1lIiwiX3BhcnNlU3VyZmFjZUZyYW1lIiwicmF3VGltZWxpbmVzXzMiLCJfcGFyc2VTbG90VGltZWxpbmUiLCJyYXdUaW1lbGluZXNfNCIsIl9wYXJzZVNsb3RGRkRGcmFtZSIsInJhd1RpbWVsaW5lc181IiwiX3BhcnNlSUtDb25zdHJhaW50RnJhbWUiLCJyYXdUaW1lbGluZXNfNiIsIl9wYXJzZUFuaW1hdGlvbkZyYW1lIiwiX3BhcnNlQWN0aW9uRnJhbWUiLCJmcmFtZXNLZXkiLCJhZGRJbnRPZmZzZXQiLCJhZGRGbG9hdE9mZnNldCIsImZyYW1lVmFsdWVDb3VudCIsImZyYW1lUGFyc2VyIiwiZnJhbWVJbnRBcnJheUxlbmd0aCIsImZyYW1lRmxvYXRBcnJheUxlbmd0aCIsInRpbWVsaW5lT2Zmc2V0Iiwicm91bmQiLCJ0b3RhbEZyYW1lQ291bnQiLCJpSyIsIl9wYXJzZUJvbmVUcmFuc2xhdGVGcmFtZSIsIl9wYXJzZUJvbmVSb3RhdGVGcmFtZSIsIl9wYXJzZUJvbmVTY2FsZUZyYW1lIiwiX3BhcnNlQm9uZUFsbEZyYW1lIiwiZGlzcGxheVRpbWVsaW5lIiwiX3BhcnNlU2xvdERpc3BsYXlGcmFtZSIsImNvbG9yVGltZWxpbmUiLCJfcGFyc2VTbG90Q29sb3JGcmFtZSIsIl9wYXJzZUZyYW1lIiwiX3BhcnNlVHdlZW5GcmFtZSIsInNhbXBsZUNvdW50Iiwibm9Ud2VlbiIsInR3ZWVuRWFzaW5nIiwicmF3Wk9yZGVyIiwic2xvdENvdW50IiwidW5jaGFuZ2VkIiwiek9yZGVycyIsImlfMSIsImlfMiIsIm9yaWdpbmFsSW5kZXgiLCJ1bmNoYW5nZWRJbmRleCIsImlfMyIsInpPcmRlck9mZnNldCIsInJhd0NvbG9yIiwicmF3RGF0YV8yIiwicmF3QWN0aW9uIiwicmF3SW50cyIsInJhd0ludHNfMSIsInJhd1ZhbHVlIiwicmF3RmxvYXRzIiwicmF3RmxvYXRzXzEiLCJyYXdTdHJpbmdzIiwicmF3U3RyaW5nc18xIiwiX3BhcnNlQXJyYXkiLCJfbW9kaWZ5QXJyYXkiLCJJbnQxNkFycmF5IiwiQllURVNfUEVSX0VMRU1FTlQiLCJVaW50MTZBcnJheSIsImwxIiwibDIiLCJGbG9hdDMyQXJyYXkiLCJsMyIsImw0IiwibDUiLCJsNiIsImxUb3RhbCIsInNoYXJlQnVmZmVyIiwid2ViQXNzZW1ibHlNb2R1bGUiLCJIRUFQMTYiLCJidWZmZXIiLCJidWZmZXJQb2ludGVyIiwiX21hbGxvYyIsInNldERhdGFCaW5hcnkiLCJ1bmRlZmluZWQiLCJjb21wYXRpYmxlVmVyc2lvbiIsInJhd0FybWF0dXJlcyIsInJhd0FybWF0dXJlc18xIiwicmF3QXJtYXR1cmUiLCJyYXdUZXh0dXJlQXRsYXMiLCJyYXdUZXh0dXJlcyIsInJhd1RleHR1cmUiLCJ0ZXh0dXJlRGF0YSIsImZyYW1lV2lkdGgiLCJmcmFtZUhlaWdodCIsIl9vYmplY3REYXRhUGFyc2VySW5zdGFuY2UiLCJfaW5SYW5nZSIsIm1pbiIsIl9kZWNvZGVVVEY4IiwiRU9GX2J5dGUiLCJFT0ZfY29kZV9wb2ludCIsIkZBVEFMX1BPSU5UIiwicG9zIiwiY29kZV9wb2ludCIsInV0ZjhfY29kZV9wb2ludCIsInV0ZjhfYnl0ZXNfbmVlZGVkIiwidXRmOF9ieXRlc19zZWVuIiwidXRmOF9sb3dlcl9ib3VuZGFyeSIsIl9ieXRlIiwiY3AiLCJsb3dlcl9ib3VuZGFyeSIsImZyb21DaGFyQ29kZSIsIl9nZXRVVEYxNktleSIsIl9wYXJzZUJpbmFyeVRpbWVsaW5lIiwiX3RpbWVsaW5lQXJyYXlCdWZmZXIiLCJfZnJhbWVBcnJheUJ1ZmZlciIsIl9wYXJzZVZlcnRpY2VzIiwiX2ludEFycmF5QnVmZmVyIiwiYm9uZUluZGljZXNPZmZzZXQiLCJvZmZzZXRzIiwicmF3VGltZWxpbmVzcyIsInRpbWVsaW5lVHlwZSIsIl9iaW5hcnkiLCJfYmluYXJ5T2Zmc2V0IiwicmF3QXJyYXkiLCJVaW50OEFycmF5IiwiY29weUFycmF5IiwiX2Zsb2F0QXJyYXlCdWZmZXIiLCJfZnJhbWVJbnRBcnJheUJ1ZmZlciIsIl9mcmFtZUZsb2F0QXJyYXlCdWZmZXIiLCJ0YWciLCJoZWFkZXJMZW5ndGgiLCJVaW50MzJBcnJheSIsImhlYWRlckJ5dGVzIiwiaGVhZGVyU3RyaW5nIiwiaGVhZGVyIiwiSlNPTiIsInBhcnNlIiwiX2JpbmFyeURhdGFQYXJzZXJJbnN0YW5jZSIsIkJhc2VGYWN0b3J5IiwiZGF0YVBhcnNlciIsIl9kcmFnb25Cb25lc0RhdGFNYXAiLCJfdGV4dHVyZUF0bGFzRGF0YU1hcCIsIl9kYXRhUGFyc2VyIiwiX29iamVjdFBhcnNlciIsIl9iaW5hcnlQYXJzZXIiLCJfaXNTdXBwb3J0TWVzaCIsIl9nZXRUZXh0dXJlRGF0YSIsInRleHR1cmVBdGxhc05hbWUiLCJfZmlsbEJ1aWxkQXJtYXR1cmVQYWNrYWdlIiwiZGF0YVBhY2thZ2UiLCJkcmFnb25Cb25lc05hbWUiLCJkYXRhTmFtZSIsInNraW5EcmFnb25Cb25lc0RhdGEiLCJza2luQXJtYXR1cmVEYXRhIiwiX2J1aWxkQm9uZXMiLCJfYnVpbGRTbG90cyIsImN1cnJlbnRTa2luIiwic2tpblNsb3RzIiwiZGlzcGxheURhdGFzIiwiX2J1aWxkU2xvdCIsIl9nZXRTbG90RGlzcGxheSIsIl9idWlsZENvbnN0cmFpbnRzIiwicGF0aENvbnN0cmFpbnQiLCJfYnVpbGRDaGlsZEFybWF0dXJlIiwiYnVpbGRBcm1hdHVyZSIsIm1lc2hEaXNwbGF5RGF0YSIsImFybWF0dXJlRGlzcGxheURhdGEiLCJhY3Rpb25zXzYiLCJfYnVpbGRUZXh0dXJlQXRsYXNEYXRhIiwiYWRkVGV4dHVyZUF0bGFzRGF0YSIsImFkZERyYWdvbkJvbmVzRGF0YSIsInRleHR1cmVBdGxhcyIsInVwZGF0ZVRleHR1cmVBdGxhc0RhdGEiLCJ0ZXh0dXJlQXRsYXNlcyIsInRleHR1cmVBdGxhc0RhdGFzIiwiZ2V0VGV4dHVyZUF0bGFzRGF0YSIsImdldERyYWdvbkJvbmVzRGF0YSIsInJlbW92ZURyYWdvbkJvbmVzRGF0YSIsImRpc3Bvc2VEYXRhIiwidGV4dHVyZUF0bGFzTGlzdCIsInJlbW92ZVRleHR1cmVBdGxhc0RhdGEiLCJ0ZXh0dXJlQXRsYXNEYXRhTGlzdCIsInRleHR1cmVBdGxhc0RhdGFMaXN0XzEiLCJnZXRBcm1hdHVyZURhdGEiLCJCdWlsZEFybWF0dXJlUGFja2FnZSIsInRleHR1cmVBdGxhc0RhdGFMaXN0XzIiLCJfYnVpbGRBcm1hdHVyZSIsInJlcGxhY2VEaXNwbGF5IiwicmVwbGFjZVNsb3REaXNwbGF5IiwicmVwbGFjZVNsb3REaXNwbGF5TGlzdCIsInJlcGxhY2VTa2luIiwiaXNPdmVycmlkZSIsImV4Y2x1ZGUiLCJzdWNjZXNzIiwiZGlzcGxheUNvdW50IiwicmVwbGFjZUFuaW1hdGlvbiIsInNraW5EYXRhIiwiY2hpbGRBcm1hdHVyZURhdGEiLCJnZXRBbGxEcmFnb25Cb25lc0RhdGEiLCJnZXRBbGxUZXh0dXJlQXRsYXNEYXRhIiwiY2hhbmdlU2tpbiIsImNvcHlBbmltYXRpb25zVG9Bcm1hdHVyZSIsInRvQXJtYXR1cmUiLCJmcm9tQXJtYXRyZU5hbWUiLCJmcm9tU2tpbk5hbWUiLCJmcm9tRHJhZ29uQm9uZXNEYXRhTmFtZSIsInJlcGxhY2VPcmlnaW5hbEFuaW1hdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0EsSUFB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QixFQUFrQy8vQixZQUFsQyxFQUFnRG1nQyx3QkFBaEQsQ0FBUDtBQUNILEtBWEQ7O0FBWUFwRSxJQUFBQSxXQUFXLENBQUNLLGFBQVosR0FBNEIsSUFBNUI7QUFDQUwsSUFBQUEsV0FBVyxDQUFDTSxhQUFaLEdBQTRCLElBQTVCO0FBQ0EsV0FBT04sV0FBUDtBQUNILEdBdjlCZ0MsRUFBakM7O0FBdzlCQS82QyxFQUFBQSxXQUFXLENBQUMrNkMsV0FBWixHQUEwQkEsV0FBMUI7QUFDQTtBQUNKO0FBQ0E7O0FBQ0ksTUFBSThDLG9CQUFvQjtBQUFHO0FBQWUsY0FBWTtBQUNsRCxhQUFTQSxvQkFBVCxHQUFnQztBQUM1QixXQUFLakMsUUFBTCxHQUFnQixFQUFoQjtBQUNBLFdBQUtKLGdCQUFMLEdBQXdCLEVBQXhCO0FBQ0EsV0FBS3hzQyxJQUFMLEdBQVksSUFBWjtBQUNIOztBQUNELFdBQU82dUMsb0JBQVA7QUFDSCxHQVB5QyxFQUExQzs7QUFRQTc5QyxFQUFBQSxXQUFXLENBQUM2OUMsb0JBQVosR0FBbUNBLG9CQUFuQztBQUNILENBNS9CRCxFQTQvQkc3OUMsV0FBVyxLQUFLQSxXQUFXLEdBQUcsRUFBbkIsQ0E1L0JkOztBQTgvQkFvL0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCci9DLFdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIHZhciBEcmFnb25Cb25lcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBEcmFnb25Cb25lcyhldmVudE1hbmFnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2xvY2sgPSBuZXcgZHJhZ29uQm9uZXMuV29ybGRDbG9jaygpO1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fb2JqZWN0cyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIgPSBldmVudE1hbmFnZXI7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIkRyYWdvbkJvbmVzOiBcIiArIERyYWdvbkJvbmVzLlZFUlNJT04gKyBcIlxcbldlYnNpdGU6IGh0dHA6Ly9kcmFnb25ib25lcy5jb20vXFxuU291cmNlIGFuZCBEZW1vOiBodHRwczovL2dpdGh1Yi5jb20vRHJhZ29uQm9uZXMvXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBEcmFnb25Cb25lcy5wcm90b3R5cGUuYWR2YW5jZVRpbWUgPSBmdW5jdGlvbiAocGFzc2VkVGltZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb2JqZWN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fb2JqZWN0czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX29iamVjdHMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jbG9jay5hZHZhbmNlVGltZShwYXNzZWRUaW1lKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2V2ZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2V2ZW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudE9iamVjdCA9IHRoaXMuX2V2ZW50c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJtYXR1cmUgPSBldmVudE9iamVjdC5hcm1hdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJtYXR1cmUuX2FybWF0dXJlRGF0YSAhPT0gbnVsbCkgeyAvLyBNYXkgYmUgYXJtYXR1cmUgZGlzcG9zZWQgYmVmb3JlIGFkdmFuY2VUaW1lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZS5ldmVudERpc3BhdGNoZXIuZGlzcGF0Y2hEQkV2ZW50KGV2ZW50T2JqZWN0LnR5cGUsIGV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50T2JqZWN0LnR5cGUgPT09IGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LlNPVU5EX0VWRU5UKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudE1hbmFnZXIuZGlzcGF0Y2hEQkV2ZW50KGV2ZW50T2JqZWN0LnR5cGUsIGV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlck9iamVjdChldmVudE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRHJhZ29uQm9uZXMucHJvdG90eXBlLmJ1ZmZlckV2ZW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ldmVudHMuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIERyYWdvbkJvbmVzLnByb3RvdHlwZS5idWZmZXJPYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9vYmplY3RzLmluZGV4T2Yob2JqZWN0KSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29iamVjdHMucHVzaChvYmplY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRHJhZ29uQm9uZXMucHJvdG90eXBlLCBcImNsb2NrXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2s7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEcmFnb25Cb25lcy5wcm90b3R5cGUsIFwiZXZlbnRNYW5hZ2VyXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRNYW5hZ2VyO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBEcmFnb25Cb25lcy5WRVJTSU9OID0gXCI1LjYuMzAwXCI7XHJcbiAgICAgICAgRHJhZ29uQm9uZXMueURvd24gPSBmYWxzZTtcclxuICAgICAgICBEcmFnb25Cb25lcy5kZWJ1ZyA9IGZhbHNlO1xyXG4gICAgICAgIERyYWdvbkJvbmVzLmRlYnVnRHJhdyA9IGZhbHNlO1xyXG4gICAgICAgIERyYWdvbkJvbmVzLndlYkFzc2VtYmx5ID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIERyYWdvbkJvbmVzO1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzID0gRHJhZ29uQm9uZXM7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8vXHJcbmlmICghY29uc29sZS53YXJuKSB7XHJcbiAgICBjb25zb2xlLndhcm4gPSBmdW5jdGlvbiAoKSB7IH07XHJcbn1cclxuaWYgKCFjb25zb2xlLmFzc2VydCkge1xyXG4gICAgY29uc29sZS5hc3NlcnQgPSBmdW5jdGlvbiAoKSB7IH07XHJcbn1cclxuLy9cclxuaWYgKCFEYXRlLm5vdykge1xyXG4gICAgRGF0ZS5ub3cgPSBmdW5jdGlvbiBub3coKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgfTtcclxufVxyXG4vLyBXZWl4aW4gY2FuIG5vdCBzdXBwb3J0IHR5cGVzY3JpcHQgZXh0ZW5kcy5cclxudmFyIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICBmdW5jdGlvbiByKCkge1xyXG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSB0O1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSBpbiBlKSB7XHJcbiAgICAgICAgaWYgKGUuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgICAgICAgdFtpXSA9IGVbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgci5wcm90b3R5cGUgPSBlLnByb3RvdHlwZSwgdC5wcm90b3R5cGUgPSBuZXcgcigpO1xyXG59O1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogLSBUaGUgQmFzZU9iamVjdCBpcyB0aGUgYmFzZSBjbGFzcyBmb3IgYWxsIG9iamVjdHMgaW4gdGhlIERyYWdvbkJvbmVzIGZyYW1ld29yay5cclxuICAgICAqIEFsbCBCYXNlT2JqZWN0IGluc3RhbmNlcyBhcmUgY2FjaGVkIHRvIHRoZSBvYmplY3QgcG9vbCB0byByZWR1Y2UgdGhlIHBlcmZvcm1hbmNlIGNvbnN1bXB0aW9uIG9mIGZyZXF1ZW50IHJlcXVlc3RzIGZvciBtZW1vcnkgb3IgbWVtb3J5IHJlY292ZXJ5LlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOWfuuehgOWvueixoe+8jOmAmuW4uCBEcmFnb25Cb25lcyDnmoTlr7nosaHpg73nu6fmib/oh6ror6XnsbvjgIJcclxuICAgICAqIOaJgOacieWfuuehgOWvueixoeeahOWunuS+i+mDveS8mue8k+WtmOWIsOWvueixoeaxoO+8jOS7peWHj+Wwkemikee5geeUs+ivt+WGheWtmOaIluWGheWtmOWbnuaUtueahOaAp+iDvea2iOiAl+OAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIEJhc2VPYmplY3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gQmFzZU9iamVjdCgpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gQSB1bmlxdWUgaWRlbnRpZmljYXRpb24gbnVtYmVyIGFzc2lnbmVkIHRvIHRoZSBvYmplY3QuXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOWIhumFjee7meatpOWunuS+i+eahOWUr+S4gOagh+ivhuWPt+OAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmhhc2hDb2RlID0gQmFzZU9iamVjdC5faGFzaENvZGUrKztcclxuICAgICAgICAgICAgdGhpcy5faXNJblBvb2wgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQmFzZU9iamVjdC5fcmV0dXJuT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICAgICAgICB2YXIgY2xhc3NUeXBlID0gU3RyaW5nKG9iamVjdC5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgIHZhciBtYXhDb3VudCA9IGNsYXNzVHlwZSBpbiBCYXNlT2JqZWN0Ll9tYXhDb3VudE1hcCA/IEJhc2VPYmplY3QuX21heENvdW50TWFwW2NsYXNzVHlwZV0gOiBCYXNlT2JqZWN0Ll9kZWZhdWx0TWF4Q291bnQ7XHJcbiAgICAgICAgICAgIHZhciBwb29sID0gQmFzZU9iamVjdC5fcG9vbHNNYXBbY2xhc3NUeXBlXSA9IEJhc2VPYmplY3QuX3Bvb2xzTWFwW2NsYXNzVHlwZV0gfHwgW107XHJcbiAgICAgICAgICAgIGlmIChwb29sLmxlbmd0aCA8IG1heENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9iamVjdC5faXNJblBvb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuX2lzSW5Qb29sID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBwb29sLnB1c2gob2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZSBvYmplY3QgaXMgYWxyZWFkeSBpbiB0aGUgcG9vbC5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEJhc2VPYmplY3QudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBTZXQgdGhlIG1heGltdW0gY2FjaGUgY291bnQgb2YgdGhlIHNwZWNpZnkgb2JqZWN0IHBvb2wuXHJcbiAgICAgICAgICogQHBhcmFtIG9iamVjdENvbnN0cnVjdG9yIC0gVGhlIHNwZWNpZnkgY2xhc3MuIChTZXQgYWxsIG9iamVjdCBwb29scyBtYXggY2FjaGUgY291bnQgaWYgbm90IHNldClcclxuICAgICAgICAgKiBAcGFyYW0gbWF4Q291bnQgLSBNYXggY291bnQuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDorr7nva7nibnlrprlr7nosaHmsaDnmoTmnIDlpKfnvJPlrZjmlbDph4/jgIJcclxuICAgICAgICAgKiBAcGFyYW0gb2JqZWN0Q29uc3RydWN0b3IgLSDnibnlrprnmoTnsbvjgIIgKOS4jeiuvue9ruWImeiuvue9ruaJgOacieWvueixoeaxoOeahOacgOWkp+e8k+WtmOaVsOmHjylcclxuICAgICAgICAgKiBAcGFyYW0gbWF4Q291bnQgLSDmnIDlpKfnvJPlrZjmlbDph4/jgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlT2JqZWN0LnNldE1heENvdW50ID0gZnVuY3Rpb24gKG9iamVjdENvbnN0cnVjdG9yLCBtYXhDb3VudCkge1xyXG4gICAgICAgICAgICBpZiAobWF4Q291bnQgPCAwIHx8IG1heENvdW50ICE9PSBtYXhDb3VudCkgeyAvLyBpc05hTlxyXG4gICAgICAgICAgICAgICAgbWF4Q291bnQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvYmplY3RDb25zdHJ1Y3RvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzVHlwZSA9IFN0cmluZyhvYmplY3RDb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9vbCA9IGNsYXNzVHlwZSBpbiBCYXNlT2JqZWN0Ll9wb29sc01hcCA/IEJhc2VPYmplY3QuX3Bvb2xzTWFwW2NsYXNzVHlwZV0gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvb2wgIT09IG51bGwgJiYgcG9vbC5sZW5ndGggPiBtYXhDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvb2wubGVuZ3RoID0gbWF4Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBCYXNlT2JqZWN0Ll9tYXhDb3VudE1hcFtjbGFzc1R5cGVdID0gbWF4Q291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBCYXNlT2JqZWN0Ll9kZWZhdWx0TWF4Q291bnQgPSBtYXhDb3VudDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGNsYXNzVHlwZSBpbiBCYXNlT2JqZWN0Ll9wb29sc01hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb29sID0gQmFzZU9iamVjdC5fcG9vbHNNYXBbY2xhc3NUeXBlXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9vbC5sZW5ndGggPiBtYXhDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb29sLmxlbmd0aCA9IG1heENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NUeXBlIGluIEJhc2VPYmplY3QuX21heENvdW50TWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJhc2VPYmplY3QuX21heENvdW50TWFwW2NsYXNzVHlwZV0gPSBtYXhDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ2xlYXIgdGhlIGNhY2hlZCBpbnN0YW5jZXMgb2YgYSBzcGVjaWZ5IG9iamVjdCBwb29sLlxyXG4gICAgICAgICAqIEBwYXJhbSBvYmplY3RDb25zdHJ1Y3RvciAtIFNwZWNpZnkgY2xhc3MuIChDbGVhciBhbGwgY2FjaGVkIGluc3RhbmNlcyBpZiBub3Qgc2V0KVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5riF6Zmk54m55a6a5a+56LGh5rGg55qE57yT5a2Y5a6e5L6L44CCXHJcbiAgICAgICAgICogQHBhcmFtIG9iamVjdENvbnN0cnVjdG9yIC0g54m55a6a55qE57G744CCICjkuI3orr7nva7liJnmuIXpmaTmiYDmnInnvJPlrZjnmoTlrp7kvospXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZU9iamVjdC5jbGVhclBvb2wgPSBmdW5jdGlvbiAob2JqZWN0Q29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgaWYgKG9iamVjdENvbnN0cnVjdG9yID09PSB2b2lkIDApIHsgb2JqZWN0Q29uc3RydWN0b3IgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChvYmplY3RDb25zdHJ1Y3RvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzVHlwZSA9IFN0cmluZyhvYmplY3RDb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9vbCA9IGNsYXNzVHlwZSBpbiBCYXNlT2JqZWN0Ll9wb29sc01hcCA/IEJhc2VPYmplY3QuX3Bvb2xzTWFwW2NsYXNzVHlwZV0gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvb2wgIT09IG51bGwgJiYgcG9vbC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9vbC5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBCYXNlT2JqZWN0Ll9wb29sc01hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb29sID0gQmFzZU9iamVjdC5fcG9vbHNNYXBba107XHJcbiAgICAgICAgICAgICAgICAgICAgcG9vbC5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEdldCBhbiBpbnN0YW5jZSBvZiB0aGUgc3BlY2lmeSBjbGFzcyBmcm9tIG9iamVjdCBwb29sLlxyXG4gICAgICAgICAqIEBwYXJhbSBvYmplY3RDb25zdHJ1Y3RvciAtIFRoZSBzcGVjaWZ5IGNsYXNzLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5LuO5a+56LGh5rGg5Lit6I635Y+W54m55a6a57G755qE5a6e5L6L44CCXHJcbiAgICAgICAgICogQHBhcmFtIG9iamVjdENvbnN0cnVjdG9yIC0g54m55a6a55qE57G744CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0Q29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgdmFyIGNsYXNzVHlwZSA9IFN0cmluZyhvYmplY3RDb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgIHZhciBwb29sID0gY2xhc3NUeXBlIGluIEJhc2VPYmplY3QuX3Bvb2xzTWFwID8gQmFzZU9iamVjdC5fcG9vbHNNYXBbY2xhc3NUeXBlXSA6IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChwb29sICE9PSBudWxsICYmIHBvb2wubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdF8xID0gcG9vbC5wb3AoKTtcclxuICAgICAgICAgICAgICAgIG9iamVjdF8xLl9pc0luUG9vbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdF8xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBuZXcgb2JqZWN0Q29uc3RydWN0b3IoKTtcclxuICAgICAgICAgICAgb2JqZWN0Ll9vbkNsZWFyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENsZWFyIHRoZSBvYmplY3QgYW5kIHJldHVybiBpdCBiYWNrIHRvIG9iamVjdCBwb29s44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmuIXpmaTor6Xlrp7kvovnmoTmiYDmnInmlbDmja7lubblsIblhbbov5Tov5jlr7nosaHmsaDjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlT2JqZWN0LnByb3RvdHlwZS5yZXR1cm5Ub1Bvb2wgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ2xlYXIoKTtcclxuICAgICAgICAgICAgQmFzZU9iamVjdC5fcmV0dXJuT2JqZWN0KHRoaXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQmFzZU9iamVjdC5faGFzaENvZGUgPSAwO1xyXG4gICAgICAgIEJhc2VPYmplY3QuX2RlZmF1bHRNYXhDb3VudCA9IDMwMDA7XHJcbiAgICAgICAgQmFzZU9iamVjdC5fbWF4Q291bnRNYXAgPSB7fTtcclxuICAgICAgICBCYXNlT2JqZWN0Ll9wb29sc01hcCA9IHt9O1xyXG4gICAgICAgIHJldHVybiBCYXNlT2JqZWN0O1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLkJhc2VPYmplY3QgPSBCYXNlT2JqZWN0O1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogLSAyRCBUcmFuc2Zvcm0gbWF0cml4LlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIDJEIOi9rOaNouefqemYteOAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIE1hdHJpeCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIE1hdHJpeChhLCBiLCBjLCBkLCB0eCwgdHkpIHtcclxuICAgICAgICAgICAgaWYgKGEgPT09IHZvaWQgMCkgeyBhID0gMS4wOyB9XHJcbiAgICAgICAgICAgIGlmIChiID09PSB2b2lkIDApIHsgYiA9IDAuMDsgfVxyXG4gICAgICAgICAgICBpZiAoYyA9PT0gdm9pZCAwKSB7IGMgPSAwLjA7IH1cclxuICAgICAgICAgICAgaWYgKGQgPT09IHZvaWQgMCkgeyBkID0gMS4wOyB9XHJcbiAgICAgICAgICAgIGlmICh0eCA9PT0gdm9pZCAwKSB7IHR4ID0gMC4wOyB9XHJcbiAgICAgICAgICAgIGlmICh0eSA9PT0gdm9pZCAwKSB7IHR5ID0gMC4wOyB9XHJcbiAgICAgICAgICAgIHRoaXMuYSA9IGE7XHJcbiAgICAgICAgICAgIHRoaXMuYiA9IGI7XHJcbiAgICAgICAgICAgIHRoaXMuYyA9IGM7XHJcbiAgICAgICAgICAgIHRoaXMuZCA9IGQ7XHJcbiAgICAgICAgICAgIHRoaXMudHggPSB0eDtcclxuICAgICAgICAgICAgdGhpcy50eSA9IHR5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBNYXRyaXgucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbb2JqZWN0IGRyYWdvbkJvbmVzLk1hdHJpeF0gYTpcIiArIHRoaXMuYSArIFwiIGI6XCIgKyB0aGlzLmIgKyBcIiBjOlwiICsgdGhpcy5jICsgXCIgZDpcIiArIHRoaXMuZCArIFwiIHR4OlwiICsgdGhpcy50eCArIFwiIHR5OlwiICsgdGhpcy50eTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTWF0cml4LnByb3RvdHlwZS5jb3B5RnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmEgPSB2YWx1ZS5hO1xyXG4gICAgICAgICAgICB0aGlzLmIgPSB2YWx1ZS5iO1xyXG4gICAgICAgICAgICB0aGlzLmMgPSB2YWx1ZS5jO1xyXG4gICAgICAgICAgICB0aGlzLmQgPSB2YWx1ZS5kO1xyXG4gICAgICAgICAgICB0aGlzLnR4ID0gdmFsdWUudHg7XHJcbiAgICAgICAgICAgIHRoaXMudHkgPSB2YWx1ZS50eTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE1hdHJpeC5wcm90b3R5cGUuY29weUZyb21BcnJheSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IHZvaWQgMCkgeyBvZmZzZXQgPSAwOyB9XHJcbiAgICAgICAgICAgIHRoaXMuYSA9IHZhbHVlW29mZnNldF07XHJcbiAgICAgICAgICAgIHRoaXMuYiA9IHZhbHVlW29mZnNldCArIDFdO1xyXG4gICAgICAgICAgICB0aGlzLmMgPSB2YWx1ZVtvZmZzZXQgKyAyXTtcclxuICAgICAgICAgICAgdGhpcy5kID0gdmFsdWVbb2Zmc2V0ICsgM107XHJcbiAgICAgICAgICAgIHRoaXMudHggPSB2YWx1ZVtvZmZzZXQgKyA0XTtcclxuICAgICAgICAgICAgdGhpcy50eSA9IHZhbHVlW29mZnNldCArIDVdO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ29udmVydCB0byB1bml0IG1hdHJpeC5cclxuICAgICAgICAgKiBUaGUgcmVzdWx0aW5nIG1hdHJpeCBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiBhPTEsIGI9MCwgYz0wLCBkPTEsIHR4PTAsIHR5PTAuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDovazmjaLkuLrljZXkvY3nn6npmLXjgIJcclxuICAgICAgICAgKiDor6Xnn6npmLXlhbfmnInku6XkuIvlsZ7mgKfvvJphPTHjgIFiPTDjgIFjPTDjgIFkPTHjgIF0eD0w44CBdHk9MOOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE1hdHJpeC5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYSA9IHRoaXMuZCA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy5iID0gdGhpcy5jID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLnR4ID0gdGhpcy50eSA9IDAuMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIE11bHRpcGxpZXMgdGhlIGN1cnJlbnQgbWF0cml4IHdpdGggYW5vdGhlciBtYXRyaXguXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIG1hdHJpeCB0aGF0IG5lZWRzIHRvIGJlIG11bHRpcGxpZWQuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlsIblvZPliY3nn6npmLXkuI7lj6bkuIDkuKrnn6npmLXnm7jkuZjjgIJcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUgLSDpnIDopoHnm7jkuZjnmoTnn6npmLXjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBNYXRyaXgucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgYUEgPSB0aGlzLmEgKiB2YWx1ZS5hO1xyXG4gICAgICAgICAgICB2YXIgYkEgPSAwLjA7XHJcbiAgICAgICAgICAgIHZhciBjQSA9IDAuMDtcclxuICAgICAgICAgICAgdmFyIGRBID0gdGhpcy5kICogdmFsdWUuZDtcclxuICAgICAgICAgICAgdmFyIHR4QSA9IHRoaXMudHggKiB2YWx1ZS5hICsgdmFsdWUudHg7XHJcbiAgICAgICAgICAgIHZhciB0eUEgPSB0aGlzLnR5ICogdmFsdWUuZCArIHZhbHVlLnR5O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5iICE9PSAwLjAgfHwgdGhpcy5jICE9PSAwLjApIHtcclxuICAgICAgICAgICAgICAgIGFBICs9IHRoaXMuYiAqIHZhbHVlLmM7XHJcbiAgICAgICAgICAgICAgICBiQSArPSB0aGlzLmIgKiB2YWx1ZS5kO1xyXG4gICAgICAgICAgICAgICAgY0EgKz0gdGhpcy5jICogdmFsdWUuYTtcclxuICAgICAgICAgICAgICAgIGRBICs9IHRoaXMuYyAqIHZhbHVlLmI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZhbHVlLmIgIT09IDAuMCB8fCB2YWx1ZS5jICE9PSAwLjApIHtcclxuICAgICAgICAgICAgICAgIGJBICs9IHRoaXMuYSAqIHZhbHVlLmI7XHJcbiAgICAgICAgICAgICAgICBjQSArPSB0aGlzLmQgKiB2YWx1ZS5jO1xyXG4gICAgICAgICAgICAgICAgdHhBICs9IHRoaXMudHkgKiB2YWx1ZS5jO1xyXG4gICAgICAgICAgICAgICAgdHlBICs9IHRoaXMudHggKiB2YWx1ZS5iO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYSA9IGFBO1xyXG4gICAgICAgICAgICB0aGlzLmIgPSBiQTtcclxuICAgICAgICAgICAgdGhpcy5jID0gY0E7XHJcbiAgICAgICAgICAgIHRoaXMuZCA9IGRBO1xyXG4gICAgICAgICAgICB0aGlzLnR4ID0gdHhBO1xyXG4gICAgICAgICAgICB0aGlzLnR5ID0gdHlBO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ29udmVydCB0byBpbnZlcnNlIG1hdHJpeC5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOi9rOaNouS4uumAhuefqemYteOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE1hdHJpeC5wcm90b3R5cGUuaW52ZXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYUEgPSB0aGlzLmE7XHJcbiAgICAgICAgICAgIHZhciBiQSA9IHRoaXMuYjtcclxuICAgICAgICAgICAgdmFyIGNBID0gdGhpcy5jO1xyXG4gICAgICAgICAgICB2YXIgZEEgPSB0aGlzLmQ7XHJcbiAgICAgICAgICAgIHZhciB0eEEgPSB0aGlzLnR4O1xyXG4gICAgICAgICAgICB2YXIgdHlBID0gdGhpcy50eTtcclxuICAgICAgICAgICAgaWYgKGJBID09PSAwLjAgJiYgY0EgPT09IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iID0gdGhpcy5jID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFBID09PSAwLjAgfHwgZEEgPT09IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYSA9IHRoaXMuYiA9IHRoaXMudHggPSB0aGlzLnR5ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYUEgPSB0aGlzLmEgPSAxLjAgLyBhQTtcclxuICAgICAgICAgICAgICAgICAgICBkQSA9IHRoaXMuZCA9IDEuMCAvIGRBO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHggPSAtYUEgKiB0eEE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eSA9IC1kQSAqIHR5QTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBkZXRlcm1pbmFudCA9IGFBICogZEEgLSBiQSAqIGNBO1xyXG4gICAgICAgICAgICBpZiAoZGV0ZXJtaW5hbnQgPT09IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hID0gdGhpcy5kID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iID0gdGhpcy5jID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50eCA9IHRoaXMudHkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZXRlcm1pbmFudCA9IDEuMCAvIGRldGVybWluYW50O1xyXG4gICAgICAgICAgICB2YXIgayA9IHRoaXMuYSA9IGRBICogZGV0ZXJtaW5hbnQ7XHJcbiAgICAgICAgICAgIGJBID0gdGhpcy5iID0gLWJBICogZGV0ZXJtaW5hbnQ7XHJcbiAgICAgICAgICAgIGNBID0gdGhpcy5jID0gLWNBICogZGV0ZXJtaW5hbnQ7XHJcbiAgICAgICAgICAgIGRBID0gdGhpcy5kID0gYUEgKiBkZXRlcm1pbmFudDtcclxuICAgICAgICAgICAgdGhpcy50eCA9IC0oayAqIHR4QSArIGNBICogdHlBKTtcclxuICAgICAgICAgICAgdGhpcy50eSA9IC0oYkEgKiB0eEEgKyBkQSAqIHR5QSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBBcHBseSBhIG1hdHJpeCB0cmFuc2Zvcm1hdGlvbiB0byBhIHNwZWNpZmljIHBvaW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB4IC0gWCBjb29yZGluYXRlLlxyXG4gICAgICAgICAqIEBwYXJhbSB5IC0gWSBjb29yZGluYXRlLlxyXG4gICAgICAgICAqIEBwYXJhbSByZXN1bHQgLSBUaGUgcG9pbnQgYWZ0ZXIgdGhlIHRyYW5zZm9ybWF0aW9uIGlzIGFwcGxpZWQuXHJcbiAgICAgICAgICogQHBhcmFtIGRlbHRhIC0gV2hldGhlciB0byBpZ25vcmUgdHgsIHR5J3MgY29udmVyc2lvbiB0byBwb2ludC5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOWwhuefqemYtei9rOaNouW6lOeUqOS6jueJueWumueCueOAglxyXG4gICAgICAgICAqIEBwYXJhbSB4IC0g5qiq5Z2Q5qCH44CCXHJcbiAgICAgICAgICogQHBhcmFtIHkgLSDnurXlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0gcmVzdWx0IC0g5bqU55So6L2s5o2i5LmL5ZCO55qE54K544CCXHJcbiAgICAgICAgICogQHBhcmFtIGRlbHRhIC0g5piv5ZCm5b+955WlIHR477yMdHkg5a+554K555qE6L2s5o2i44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTWF0cml4LnByb3RvdHlwZS50cmFuc2Zvcm1Qb2ludCA9IGZ1bmN0aW9uICh4LCB5LCByZXN1bHQsIGRlbHRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkZWx0YSA9PT0gdm9pZCAwKSB7IGRlbHRhID0gZmFsc2U7IH1cclxuICAgICAgICAgICAgcmVzdWx0LnggPSB0aGlzLmEgKiB4ICsgdGhpcy5jICogeTtcclxuICAgICAgICAgICAgcmVzdWx0LnkgPSB0aGlzLmIgKiB4ICsgdGhpcy5kICogeTtcclxuICAgICAgICAgICAgaWYgKCFkZWx0YSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnggKz0gdGhpcy50eDtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC55ICs9IHRoaXMudHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTWF0cml4LnByb3RvdHlwZS50cmFuc2Zvcm1SZWN0YW5nbGUgPSBmdW5jdGlvbiAocmVjdGFuZ2xlLCBkZWx0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGVsdGEgPT09IHZvaWQgMCkgeyBkZWx0YSA9IGZhbHNlOyB9XHJcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5hO1xyXG4gICAgICAgICAgICB2YXIgYiA9IHRoaXMuYjtcclxuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmM7XHJcbiAgICAgICAgICAgIHZhciBkID0gdGhpcy5kO1xyXG4gICAgICAgICAgICB2YXIgdHggPSBkZWx0YSA/IDAuMCA6IHRoaXMudHg7XHJcbiAgICAgICAgICAgIHZhciB0eSA9IGRlbHRhID8gMC4wIDogdGhpcy50eTtcclxuICAgICAgICAgICAgdmFyIHggPSByZWN0YW5nbGUueDtcclxuICAgICAgICAgICAgdmFyIHkgPSByZWN0YW5nbGUueTtcclxuICAgICAgICAgICAgdmFyIHhNYXggPSB4ICsgcmVjdGFuZ2xlLndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgeU1heCA9IHkgKyByZWN0YW5nbGUuaGVpZ2h0O1xyXG4gICAgICAgICAgICB2YXIgeDAgPSBhICogeCArIGMgKiB5ICsgdHg7XHJcbiAgICAgICAgICAgIHZhciB5MCA9IGIgKiB4ICsgZCAqIHkgKyB0eTtcclxuICAgICAgICAgICAgdmFyIHgxID0gYSAqIHhNYXggKyBjICogeSArIHR4O1xyXG4gICAgICAgICAgICB2YXIgeTEgPSBiICogeE1heCArIGQgKiB5ICsgdHk7XHJcbiAgICAgICAgICAgIHZhciB4MiA9IGEgKiB4TWF4ICsgYyAqIHlNYXggKyB0eDtcclxuICAgICAgICAgICAgdmFyIHkyID0gYiAqIHhNYXggKyBkICogeU1heCArIHR5O1xyXG4gICAgICAgICAgICB2YXIgeDMgPSBhICogeCArIGMgKiB5TWF4ICsgdHg7XHJcbiAgICAgICAgICAgIHZhciB5MyA9IGIgKiB4ICsgZCAqIHlNYXggKyB0eTtcclxuICAgICAgICAgICAgdmFyIHRtcCA9IDAuMDtcclxuICAgICAgICAgICAgaWYgKHgwID4geDEpIHtcclxuICAgICAgICAgICAgICAgIHRtcCA9IHgwO1xyXG4gICAgICAgICAgICAgICAgeDAgPSB4MTtcclxuICAgICAgICAgICAgICAgIHgxID0gdG1wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh4MiA+IHgzKSB7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSB4MjtcclxuICAgICAgICAgICAgICAgIHgyID0geDM7XHJcbiAgICAgICAgICAgICAgICB4MyA9IHRtcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWN0YW5nbGUueCA9IE1hdGguZmxvb3IoeDAgPCB4MiA/IHgwIDogeDIpO1xyXG4gICAgICAgICAgICByZWN0YW5nbGUud2lkdGggPSBNYXRoLmNlaWwoKHgxID4geDMgPyB4MSA6IHgzKSAtIHJlY3RhbmdsZS54KTtcclxuICAgICAgICAgICAgaWYgKHkwID4geTEpIHtcclxuICAgICAgICAgICAgICAgIHRtcCA9IHkwO1xyXG4gICAgICAgICAgICAgICAgeTAgPSB5MTtcclxuICAgICAgICAgICAgICAgIHkxID0gdG1wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5MiA+IHkzKSB7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSB5MjtcclxuICAgICAgICAgICAgICAgIHkyID0geTM7XHJcbiAgICAgICAgICAgICAgICB5MyA9IHRtcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWN0YW5nbGUueSA9IE1hdGguZmxvb3IoeTAgPCB5MiA/IHkwIDogeTIpO1xyXG4gICAgICAgICAgICByZWN0YW5nbGUuaGVpZ2h0ID0gTWF0aC5jZWlsKCh5MSA+IHkzID8geTEgOiB5MykgLSByZWN0YW5nbGUueSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTWF0cml4O1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLk1hdHJpeCA9IE1hdHJpeDtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIC0gMkQgVHJhbnNmb3JtLlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIDJEIOWPmOaNouOAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIFRyYW5zZm9ybSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIFRyYW5zZm9ybSh4LCB5LCBza2V3LCByb3RhdGlvbiwgc2NhbGVYLCBzY2FsZVkpIHtcclxuICAgICAgICAgICAgaWYgKHggPT09IHZvaWQgMCkgeyB4ID0gMC4wOyB9XHJcbiAgICAgICAgICAgIGlmICh5ID09PSB2b2lkIDApIHsgeSA9IDAuMDsgfVxyXG4gICAgICAgICAgICBpZiAoc2tldyA9PT0gdm9pZCAwKSB7IHNrZXcgPSAwLjA7IH1cclxuICAgICAgICAgICAgaWYgKHJvdGF0aW9uID09PSB2b2lkIDApIHsgcm90YXRpb24gPSAwLjA7IH1cclxuICAgICAgICAgICAgaWYgKHNjYWxlWCA9PT0gdm9pZCAwKSB7IHNjYWxlWCA9IDEuMDsgfVxyXG4gICAgICAgICAgICBpZiAoc2NhbGVZID09PSB2b2lkIDApIHsgc2NhbGVZID0gMS4wOyB9XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgICAgIHRoaXMuc2tldyA9IHNrZXc7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVggPSBzY2FsZVg7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVZID0gc2NhbGVZO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFRyYW5zZm9ybS5ub3JtYWxpemVSYWRpYW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgKyBNYXRoLlBJKSAlIChNYXRoLlBJICogMi4wKTtcclxuICAgICAgICAgICAgdmFsdWUgKz0gdmFsdWUgPiAwLjAgPyAtTWF0aC5QSSA6IE1hdGguUEk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltvYmplY3QgZHJhZ29uQm9uZXMuVHJhbnNmb3JtXSB4OlwiICsgdGhpcy54ICsgXCIgeTpcIiArIHRoaXMueSArIFwiIHNrZXdYOlwiICsgdGhpcy5za2V3ICogMTgwLjAgLyBNYXRoLlBJICsgXCIgc2tld1k6XCIgKyB0aGlzLnJvdGF0aW9uICogMTgwLjAgLyBNYXRoLlBJICsgXCIgc2NhbGVYOlwiICsgdGhpcy5zY2FsZVggKyBcIiBzY2FsZVk6XCIgKyB0aGlzLnNjYWxlWTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtLnByb3RvdHlwZS5jb3B5RnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB2YWx1ZS54O1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB2YWx1ZS55O1xyXG4gICAgICAgICAgICB0aGlzLnNrZXcgPSB2YWx1ZS5za2V3O1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0aW9uID0gdmFsdWUucm90YXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVYID0gdmFsdWUuc2NhbGVYO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlWSA9IHZhbHVlLnNjYWxlWTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFRyYW5zZm9ybS5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMueSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5za2V3ID0gdGhpcy5yb3RhdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVggPSB0aGlzLnNjYWxlWSA9IDEuMDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFRyYW5zZm9ybS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCArPSB2YWx1ZS54O1xyXG4gICAgICAgICAgICB0aGlzLnkgKz0gdmFsdWUueTtcclxuICAgICAgICAgICAgdGhpcy5za2V3ICs9IHZhbHVlLnNrZXc7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRpb24gKz0gdmFsdWUucm90YXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVYICo9IHZhbHVlLnNjYWxlWDtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVkgKj0gdmFsdWUuc2NhbGVZO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtLnByb3RvdHlwZS5taW51cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnggLT0gdmFsdWUueDtcclxuICAgICAgICAgICAgdGhpcy55IC09IHZhbHVlLnk7XHJcbiAgICAgICAgICAgIHRoaXMuc2tldyAtPSB2YWx1ZS5za2V3O1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0aW9uIC09IHZhbHVlLnJvdGF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlWCAvPSB2YWx1ZS5zY2FsZVg7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVZIC89IHZhbHVlLnNjYWxlWTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFRyYW5zZm9ybS5wcm90b3R5cGUuZnJvbU1hdHJpeCA9IGZ1bmN0aW9uIChtYXRyaXgpIHtcclxuICAgICAgICAgICAgdmFyIGJhY2t1cFNjYWxlWCA9IHRoaXMuc2NhbGVYLCBiYWNrdXBTY2FsZVkgPSB0aGlzLnNjYWxlWTtcclxuICAgICAgICAgICAgdmFyIFBJX1EgPSBUcmFuc2Zvcm0uUElfUTtcclxuICAgICAgICAgICAgdGhpcy54ID0gbWF0cml4LnR4O1xyXG4gICAgICAgICAgICB0aGlzLnkgPSBtYXRyaXgudHk7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRpb24gPSBNYXRoLmF0YW4obWF0cml4LmIgLyBtYXRyaXguYSk7XHJcbiAgICAgICAgICAgIHZhciBza2V3WCA9IE1hdGguYXRhbigtbWF0cml4LmMgLyBtYXRyaXguZCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGVYID0gKHRoaXMucm90YXRpb24gPiAtUElfUSAmJiB0aGlzLnJvdGF0aW9uIDwgUElfUSkgPyBtYXRyaXguYSAvIE1hdGguY29zKHRoaXMucm90YXRpb24pIDogbWF0cml4LmIgLyBNYXRoLnNpbih0aGlzLnJvdGF0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZVkgPSAoc2tld1ggPiAtUElfUSAmJiBza2V3WCA8IFBJX1EpID8gbWF0cml4LmQgLyBNYXRoLmNvcyhza2V3WCkgOiAtbWF0cml4LmMgLyBNYXRoLnNpbihza2V3WCk7XHJcbiAgICAgICAgICAgIGlmIChiYWNrdXBTY2FsZVggPj0gMC4wICYmIHRoaXMuc2NhbGVYIDwgMC4wKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlWCA9IC10aGlzLnNjYWxlWDtcclxuICAgICAgICAgICAgICAgIHRoaXMucm90YXRpb24gPSB0aGlzLnJvdGF0aW9uIC0gTWF0aC5QSTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYmFja3VwU2NhbGVZID49IDAuMCAmJiB0aGlzLnNjYWxlWSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FsZVkgPSAtdGhpcy5zY2FsZVk7XHJcbiAgICAgICAgICAgICAgICBza2V3WCA9IHNrZXdYIC0gTWF0aC5QSTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNrZXcgPSBza2V3WCAtIHRoaXMucm90YXRpb247XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBUcmFuc2Zvcm0ucHJvdG90eXBlLnRvTWF0cml4ID0gZnVuY3Rpb24gKG1hdHJpeCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yb3RhdGlvbiA9PT0gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXguYSA9IDEuMDtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5iID0gMC4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LmEgPSBNYXRoLmNvcyh0aGlzLnJvdGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5iID0gTWF0aC5zaW4odGhpcy5yb3RhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2tldyA9PT0gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXguYyA9IC1tYXRyaXguYjtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5kID0gbWF0cml4LmE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXguYyA9IC1NYXRoLnNpbih0aGlzLnNrZXcgKyB0aGlzLnJvdGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5kID0gTWF0aC5jb3ModGhpcy5za2V3ICsgdGhpcy5yb3RhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NhbGVYICE9PSAxLjApIHtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5hICo9IHRoaXMuc2NhbGVYO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LmIgKj0gdGhpcy5zY2FsZVg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NhbGVZICE9PSAxLjApIHtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC5jICo9IHRoaXMuc2NhbGVZO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LmQgKj0gdGhpcy5zY2FsZVk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWF0cml4LnR4ID0gdGhpcy54O1xyXG4gICAgICAgICAgICBtYXRyaXgudHkgPSB0aGlzLnk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBUcmFuc2Zvcm0uUEkgPSBNYXRoLlBJO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtLlBJX0QgPSBNYXRoLlBJICogMi4wO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtLlBJX0ggPSBNYXRoLlBJIC8gMi4wO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtLlBJX1EgPSBNYXRoLlBJIC8gNC4wO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtLlJBRF9ERUcgPSAxODAuMCAvIE1hdGguUEk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBUcmFuc2Zvcm0uREVHX1JBRCA9IE1hdGguUEkgLyAxODAuMDtcclxuICAgICAgICByZXR1cm4gVHJhbnNmb3JtO1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLlRyYW5zZm9ybSA9IFRyYW5zZm9ybTtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB2YXIgQ29sb3JUcmFuc2Zvcm0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gQ29sb3JUcmFuc2Zvcm0oYWxwaGFNdWx0aXBsaWVyLCByZWRNdWx0aXBsaWVyLCBncmVlbk11bHRpcGxpZXIsIGJsdWVNdWx0aXBsaWVyLCBhbHBoYU9mZnNldCwgcmVkT2Zmc2V0LCBncmVlbk9mZnNldCwgYmx1ZU9mZnNldCkge1xyXG4gICAgICAgICAgICBpZiAoYWxwaGFNdWx0aXBsaWVyID09PSB2b2lkIDApIHsgYWxwaGFNdWx0aXBsaWVyID0gMS4wOyB9XHJcbiAgICAgICAgICAgIGlmIChyZWRNdWx0aXBsaWVyID09PSB2b2lkIDApIHsgcmVkTXVsdGlwbGllciA9IDEuMDsgfVxyXG4gICAgICAgICAgICBpZiAoZ3JlZW5NdWx0aXBsaWVyID09PSB2b2lkIDApIHsgZ3JlZW5NdWx0aXBsaWVyID0gMS4wOyB9XHJcbiAgICAgICAgICAgIGlmIChibHVlTXVsdGlwbGllciA9PT0gdm9pZCAwKSB7IGJsdWVNdWx0aXBsaWVyID0gMS4wOyB9XHJcbiAgICAgICAgICAgIGlmIChhbHBoYU9mZnNldCA9PT0gdm9pZCAwKSB7IGFscGhhT2Zmc2V0ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAocmVkT2Zmc2V0ID09PSB2b2lkIDApIHsgcmVkT2Zmc2V0ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoZ3JlZW5PZmZzZXQgPT09IHZvaWQgMCkgeyBncmVlbk9mZnNldCA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKGJsdWVPZmZzZXQgPT09IHZvaWQgMCkgeyBibHVlT2Zmc2V0ID0gMDsgfVxyXG4gICAgICAgICAgICB0aGlzLmFscGhhTXVsdGlwbGllciA9IGFscGhhTXVsdGlwbGllcjtcclxuICAgICAgICAgICAgdGhpcy5yZWRNdWx0aXBsaWVyID0gcmVkTXVsdGlwbGllcjtcclxuICAgICAgICAgICAgdGhpcy5ncmVlbk11bHRpcGxpZXIgPSBncmVlbk11bHRpcGxpZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYmx1ZU11bHRpcGxpZXIgPSBibHVlTXVsdGlwbGllcjtcclxuICAgICAgICAgICAgdGhpcy5hbHBoYU9mZnNldCA9IGFscGhhT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLnJlZE9mZnNldCA9IHJlZE9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5ncmVlbk9mZnNldCA9IGdyZWVuT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLmJsdWVPZmZzZXQgPSBibHVlT2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBDb2xvclRyYW5zZm9ybS5wcm90b3R5cGUuY29weUZyb20gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5hbHBoYU11bHRpcGxpZXIgPSB2YWx1ZS5hbHBoYU11bHRpcGxpZXI7XHJcbiAgICAgICAgICAgIHRoaXMucmVkTXVsdGlwbGllciA9IHZhbHVlLnJlZE11bHRpcGxpZXI7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JlZW5NdWx0aXBsaWVyID0gdmFsdWUuZ3JlZW5NdWx0aXBsaWVyO1xyXG4gICAgICAgICAgICB0aGlzLmJsdWVNdWx0aXBsaWVyID0gdmFsdWUuYmx1ZU11bHRpcGxpZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYWxwaGFPZmZzZXQgPSB2YWx1ZS5hbHBoYU9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5yZWRPZmZzZXQgPSB2YWx1ZS5yZWRPZmZzZXQ7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JlZW5PZmZzZXQgPSB2YWx1ZS5ncmVlbk9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5ibHVlT2Zmc2V0ID0gdmFsdWUuYmx1ZU9mZnNldDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIENvbG9yVHJhbnNmb3JtLnByb3RvdHlwZS5pZGVudGl0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5hbHBoYU11bHRpcGxpZXIgPSB0aGlzLnJlZE11bHRpcGxpZXIgPSB0aGlzLmdyZWVuTXVsdGlwbGllciA9IHRoaXMuYmx1ZU11bHRpcGxpZXIgPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMuYWxwaGFPZmZzZXQgPSB0aGlzLnJlZE9mZnNldCA9IHRoaXMuZ3JlZW5PZmZzZXQgPSB0aGlzLmJsdWVPZmZzZXQgPSAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIENvbG9yVHJhbnNmb3JtO1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLkNvbG9yVHJhbnNmb3JtID0gQ29sb3JUcmFuc2Zvcm07XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSBQb2ludCBvYmplY3QgcmVwcmVzZW50cyBhIGxvY2F0aW9uIGluIGEgdHdvLWRpbWVuc2lvbmFsIGNvb3JkaW5hdGUgc3lzdGVtLlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFBvaW50IOWvueixoeihqOekuuS6jOe7tOWdkOagh+ezu+e7n+S4reeahOafkOS4quS9jee9ruOAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIFBvaW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ3JlYXRlcyBhIG5ldyBwb2ludC4gSWYgeW91IHBhc3Mgbm8gcGFyYW1ldGVycyB0byB0aGlzIG1ldGhvZCwgYSBwb2ludCBpcyBjcmVhdGVkIGF0ICgwLDApLlxyXG4gICAgICAgICAqIEBwYXJhbSB4IC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKiBAcGFyYW0geSAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Yib5bu65LiA5LiqIGVncmV0LlBvaW50IOWvueixoS7oi6XkuI3kvKDlhaXku7vkvZXlj4LmlbDvvIzlsIbkvJrliJvlu7rkuIDkuKrkvY3kuo7vvIgw77yMMO+8ieS9jee9rueahOeCueOAglxyXG4gICAgICAgICAqIEBwYXJhbSB4IC0g6K+l5a+56LGh55qEeOWxnuaAp+WAvO+8jOm7mOiupOS4uiAwLjDjgIJcclxuICAgICAgICAgKiBAcGFyYW0geSAtIOivpeWvueixoeeahHnlsZ7mgKflgLzvvIzpu5jorqTkuLogMC4w44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gUG9pbnQoeCwgeSkge1xyXG4gICAgICAgICAgICBpZiAoeCA9PT0gdm9pZCAwKSB7IHggPSAwLjA7IH1cclxuICAgICAgICAgICAgaWYgKHkgPT09IHZvaWQgMCkgeyB5ID0gMC4wOyB9XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUG9pbnQucHJvdG90eXBlLmNvcHlGcm9tID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHZhbHVlLng7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHZhbHVlLnk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFBvaW50LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy54ID0gdGhpcy55ID0gMC4wO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFBvaW50O1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLlBvaW50ID0gUG9pbnQ7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIEEgUmVjdGFuZ2xlIG9iamVjdCBpcyBhbiBhcmVhIGRlZmluZWQgYnkgaXRzIHBvc2l0aW9uLCBhcyBpbmRpY2F0ZWQgYnkgaXRzIHRvcC1sZWZ0IGNvcm5lciBwb2ludCAoeCwgeSkgYW5kIGJ5IGl0c1xyXG4gICAgICogd2lkdGggYW5kIGl0cyBoZWlnaHQuPGJyLz5cclxuICAgICAqIFRoZSB4LCB5LCB3aWR0aCwgYW5kIGhlaWdodCBwcm9wZXJ0aWVzIG9mIHRoZSBSZWN0YW5nbGUgY2xhc3MgYXJlIGluZGVwZW5kZW50IG9mIGVhY2ggb3RoZXI7IGNoYW5naW5nIHRoZSB2YWx1ZSBvZlxyXG4gICAgICogb25lIHByb3BlcnR5IGhhcyBubyBlZmZlY3Qgb24gdGhlIG90aGVycy4gSG93ZXZlciwgdGhlIHJpZ2h0IGFuZCBib3R0b20gcHJvcGVydGllcyBhcmUgaW50ZWdyYWxseSByZWxhdGVkIHRvIHRob3NlXHJcbiAgICAgKiBmb3VyIHByb3BlcnRpZXMuIEZvciBleGFtcGxlLCBpZiB5b3UgY2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGUgcmlnaHQgcHJvcGVydHksIHRoZSB2YWx1ZSBvZiB0aGUgd2lkdGggcHJvcGVydHkgY2hhbmdlcztcclxuICAgICAqIGlmIHlvdSBjaGFuZ2UgdGhlIGJvdHRvbSBwcm9wZXJ0eSwgdGhlIHZhbHVlIG9mIHRoZSBoZWlnaHQgcHJvcGVydHkgY2hhbmdlcy5cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSBSZWN0YW5nbGUg5a+56LGh5piv5oyJ5YW25L2N572u77yI55Sx5a6D5bem5LiK6KeS55qE54K5ICh4LCB5KSDnoa7lrprvvInku6Xlj4rlrr3luqblkozpq5jluqblrprkuYnnmoTljLrln5/jgII8YnIvPlxyXG4gICAgICogUmVjdGFuZ2xlIOexu+eahCB444CBeeOAgXdpZHRoIOWSjCBoZWlnaHQg5bGe5oCn55u45LqS54us56uL77yb5pu05pS55LiA5Liq5bGe5oCn55qE5YC85LiN5Lya5b2x5ZON5YW25LuW5bGe5oCn44CCXHJcbiAgICAgKiDkvYbmmK/vvIxyaWdodCDlkowgYm90dG9tIOWxnuaAp+S4jui/meWbm+S4quWxnuaAp+aYr+aVtOS9k+ebuOWFs+eahOOAguS+i+Wmgu+8jOWmguaenOabtOaUuSByaWdodCDlsZ7mgKfnmoTlgLzvvIzliJkgd2lkdGhcclxuICAgICAqIOWxnuaAp+eahOWAvOWwhuWPkeeUn+WPmOWMlu+8m+WmguaenOabtOaUuSBib3R0b20g5bGe5oCn77yM5YiZIGhlaWdodCDlsZ7mgKfnmoTlgLzlsIblj5HnlJ/lj5jljJbjgIJcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBSZWN0YW5nbGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBSZWN0YW5nbGUoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgICAgICAgICBpZiAoeCA9PT0gdm9pZCAwKSB7IHggPSAwLjA7IH1cclxuICAgICAgICAgICAgaWYgKHkgPT09IHZvaWQgMCkgeyB5ID0gMC4wOyB9XHJcbiAgICAgICAgICAgIGlmICh3aWR0aCA9PT0gdm9pZCAwKSB7IHdpZHRoID0gMC4wOyB9XHJcbiAgICAgICAgICAgIGlmIChoZWlnaHQgPT09IHZvaWQgMCkgeyBoZWlnaHQgPSAwLjA7IH1cclxuICAgICAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBSZWN0YW5nbGUucHJvdG90eXBlLmNvcHlGcm9tID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHZhbHVlLng7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHZhbHVlLnk7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB2YWx1ZS53aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB2YWx1ZS5oZWlnaHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFJlY3RhbmdsZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMueSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gMC4wO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFJlY3RhbmdsZTtcclxuICAgIH0oKSk7XHJcbiAgICBkcmFnb25Cb25lcy5SZWN0YW5nbGUgPSBSZWN0YW5nbGU7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSB1c2VyIGN1c3RvbSBkYXRhLlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOeUqOaIt+iHquWumuS5ieaVsOaNruOAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIFVzZXJEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhVc2VyRGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBVc2VyRGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBjdXN0b20gaW50IG51bWJlcnMuXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOiHquWumuS5ieaVtOaVsOOAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5pbnRzID0gW107XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBjdXN0b20gZmxvYXQgbnVtYmVycy5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g6Ieq5a6a5LmJ5rWu54K55pWw44CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLmZsb2F0cyA9IFtdO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgY3VzdG9tIHN0cmluZ3MuXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOiHquWumuS5ieWtl+espuS4suOAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5zdHJpbmdzID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgVXNlckRhdGEudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5Vc2VyRGF0YV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFVzZXJEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZmxvYXRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyaW5ncy5sZW5ndGggPSAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVXNlckRhdGEucHJvdG90eXBlLmFkZEludCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmludHMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBVc2VyRGF0YS5wcm90b3R5cGUuYWRkRmxvYXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5mbG9hdHMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBVc2VyRGF0YS5wcm90b3R5cGUuYWRkU3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyaW5ncy5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gR2V0IHRoZSBjdXN0b20gaW50IG51bWJlci5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOiOt+WPluiHquWumuS5ieaVtOaVsOOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFVzZXJEYXRhLnByb3RvdHlwZS5nZXRJbnQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB2b2lkIDApIHsgaW5kZXggPSAwOyB9XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5pbnRzLmxlbmd0aCA/IHRoaXMuaW50c1tpbmRleF0gOiAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgdGhlIGN1c3RvbSBmbG9hdCBudW1iZXIuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDojrflj5boh6rlrprkuYnmta7ngrnmlbDjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBVc2VyRGF0YS5wcm90b3R5cGUuZ2V0RmxvYXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSB2b2lkIDApIHsgaW5kZXggPSAwOyB9XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5mbG9hdHMubGVuZ3RoID8gdGhpcy5mbG9hdHNbaW5kZXhdIDogMC4wO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgdGhlIGN1c3RvbSBzdHJpbmcuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDojrflj5boh6rlrprkuYnlrZfnrKbkuLLjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBVc2VyRGF0YS5wcm90b3R5cGUuZ2V0U3RyaW5nID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7IGluZGV4ID0gMDsgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuc3RyaW5ncy5sZW5ndGggPyB0aGlzLnN0cmluZ3NbaW5kZXhdIDogXCJcIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBVc2VyRGF0YTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQmFzZU9iamVjdCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuVXNlckRhdGEgPSBVc2VyRGF0YTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBBY3Rpb25EYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhBY3Rpb25EYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEFjdGlvbkRhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy5kYXRhID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBY3Rpb25EYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQWN0aW9uRGF0YV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFjdGlvbkRhdGEucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50eXBlID0gMCAvKiBQbGF5ICovO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmJvbmUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnNsb3QgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEFjdGlvbkRhdGE7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLkFjdGlvbkRhdGEgPSBBY3Rpb25EYXRhO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogLSBUaGUgRHJhZ29uQm9uZXMgZGF0YS5cclxuICAgICAqIEEgRHJhZ29uQm9uZXMgZGF0YSBjb250YWlucyBtdWx0aXBsZSBhcm1hdHVyZSBkYXRhLlxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDpvpnpqqjmlbDmja7jgIJcclxuICAgICAqIOS4gOS4qum+memqqOaVsOaNruWMheWQq+WkmuS4qumqqOaetuaVsOaNruOAglxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBEcmFnb25Cb25lc0RhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKERyYWdvbkJvbmVzRGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBEcmFnb25Cb25lc0RhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5mcmFtZUluZGljZXMgPSBbXTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuY2FjaGVkRnJhbWVzID0gW107XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIEFsbCBhcm1hdHVyZSBkYXRhIG5hbWVzLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmiYDmnInnmoTpqqjmnrbmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuYXJtYXR1cmVOYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLmFybWF0dXJlcyA9IHt9O1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnVzZXJEYXRhID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBEcmFnb25Cb25lc0RhdGEudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5EcmFnb25Cb25lc0RhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEcmFnb25Cb25lc0RhdGEucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuYXJtYXR1cmVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFybWF0dXJlc1trXS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFybWF0dXJlc1trXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy51c2VyRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VyRGF0YS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmF1dG9TZWFyY2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5mcmFtZVJhdGUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnZlcnNpb24gPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLnN0YWdlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5mcmFtZUluZGljZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZWRGcmFtZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5hcm1hdHVyZU5hbWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIC8vdGhpcy5hcm1hdHVyZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5iaW5hcnkgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLmludEFycmF5ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5mbG9hdEFycmF5ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5mcmFtZUludEFycmF5ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5mcmFtZUZsb2F0QXJyYXkgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lQXJyYXkgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVsaW5lQXJyYXkgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJEYXRhID0gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIERyYWdvbkJvbmVzRGF0YS5wcm90b3R5cGUuYWRkQXJtYXR1cmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLm5hbWUgaW4gdGhpcy5hcm1hdHVyZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNhbWUgYXJtYXR1cmU6IFwiICsgdmFsdWUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFsdWUucGFyZW50ID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5hcm1hdHVyZXNbdmFsdWUubmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5hcm1hdHVyZU5hbWVzLnB1c2godmFsdWUubmFtZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEdldCBhIHNwZWNpZmljIGFybWF0dXJlIGRhdGEuXHJcbiAgICAgICAgICogQHBhcmFtIGFybWF0dXJlTmFtZSAtIFRoZSBhcm1hdHVyZSBkYXRhIG5hbWUuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDojrflj5bnibnlrprnmoTpqqjmnrbmlbDmja7jgIJcclxuICAgICAgICAgKiBAcGFyYW0gYXJtYXR1cmVOYW1lIC0g6aqo5p625pWw5o2u5ZCN56ew44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRHJhZ29uQm9uZXNEYXRhLnByb3RvdHlwZS5nZXRBcm1hdHVyZSA9IGZ1bmN0aW9uIChhcm1hdHVyZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFybWF0dXJlTmFtZSBpbiB0aGlzLmFybWF0dXJlcyA/IHRoaXMuYXJtYXR1cmVzW2FybWF0dXJlTmFtZV0gOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rICNkcmFnb25Cb25lcy5CYXNlRmFjdG9yeSNyZW1vdmVEcmFnb25Cb25lc0RhdGEoKX0uXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW3suW6n+W8g++8jOivt+WPguiAgyB7QGxpbmsgI2RyYWdvbkJvbmVzLkJhc2VGYWN0b3J5I3JlbW92ZURyYWdvbkJvbmVzRGF0YSgpfeOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRHJhZ29uQm9uZXNEYXRhLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLlt7Llup/lvINcIik7XHJcbiAgICAgICAgICAgIHRoaXMucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gRHJhZ29uQm9uZXNEYXRhO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5EcmFnb25Cb25lc0RhdGEgPSBEcmFnb25Cb25lc0RhdGE7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSBhcm1hdHVyZSBkYXRhLlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOmqqOaetuaVsOaNruOAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIEFybWF0dXJlRGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQXJtYXR1cmVEYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEFybWF0dXJlRGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuYWFiYiA9IG5ldyBkcmFnb25Cb25lcy5SZWN0YW5nbGUoKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIG5hbWVzIG9mIGFsbCB0aGUgYW5pbWF0aW9uIGRhdGEuXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOaJgOacieeahOWKqOeUu+aVsOaNruWQjeensOOAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5hbmltYXRpb25OYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnNvcnRlZEJvbmVzID0gW107XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuc29ydGVkU2xvdHMgPSBbXTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5kZWZhdWx0QWN0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5ib25lcyA9IHt9O1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnNsb3RzID0ge307XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuY29uc3RyYWludHMgPSB7fTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5za2lucyA9IHt9O1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5jYW52YXMgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnVzZXJEYXRhID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBcm1hdHVyZURhdGEudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcm1hdHVyZURhdGEucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5kZWZhdWx0QWN0aW9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24ucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHRoaXMuYWN0aW9uczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICBhY3Rpb24ucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLmJvbmVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvbmVzW2tdLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYm9uZXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLnNsb3RzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNsb3RzW2tdLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2xvdHNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLmNvbnN0cmFpbnRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzW2tdLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuY29uc3RyYWludHNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLnNraW5zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNraW5zW2tdLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2tpbnNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLmFuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1trXS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFuaW1hdGlvbnNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY2FudmFzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy51c2VyRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51c2VyRGF0YS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAwIC8qIEFybWF0dXJlICovO1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lUmF0ZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuY2FjaGVGcmFtZVJhdGUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gMS4wO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmFhYmIuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25OYW1lcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnNvcnRlZEJvbmVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuc29ydGVkU2xvdHMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0QWN0aW9ucy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgLy8gdGhpcy5ib25lcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnNsb3RzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuY29uc3RyYWludHMuY2xlYXIoKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5za2lucy5jbGVhcigpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmFuaW1hdGlvbnMuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0U2tpbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFuaW1hdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy51c2VyRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDsgLy9cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlRGF0YS5wcm90b3R5cGUuc29ydEJvbmVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdG90YWwgPSB0aGlzLnNvcnRlZEJvbmVzLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKHRvdGFsIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc29ydEhlbHBlciA9IHRoaXMuc29ydGVkQm9uZXMuY29uY2F0KCk7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuc29ydGVkQm9uZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgd2hpbGUgKGNvdW50IDwgdG90YWwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBib25lID0gc29ydEhlbHBlcltpbmRleCsrXTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSB0b3RhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvcnRlZEJvbmVzLmluZGV4T2YoYm9uZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5jb25zdHJhaW50cykgeyAvLyBXYWl0IGNvbnN0cmFpbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSB0aGlzLmNvbnN0cmFpbnRzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50LnJvb3QgPT09IGJvbmUgJiYgdGhpcy5zb3J0ZWRCb25lcy5pbmRleE9mKGNvbnN0cmFpbnQudGFyZ2V0KSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChmbGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9uZS5wYXJlbnQgIT09IG51bGwgJiYgdGhpcy5zb3J0ZWRCb25lcy5pbmRleE9mKGJvbmUucGFyZW50KSA8IDApIHsgLy8gV2FpdCBwYXJlbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvcnRlZEJvbmVzLnB1c2goYm9uZSk7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZURhdGEucHJvdG90eXBlLmNhY2hlRnJhbWVzID0gZnVuY3Rpb24gKGZyYW1lUmF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jYWNoZUZyYW1lUmF0ZSA+IDApIHsgLy8gVE9ETyBjbGVhciBjYWNoZS5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlRnJhbWVSYXRlID0gZnJhbWVSYXRlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuYW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zW2tdLmNhY2hlRnJhbWVzKHRoaXMuY2FjaGVGcmFtZVJhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZURhdGEucHJvdG90eXBlLnNldENhY2hlRnJhbWUgPSBmdW5jdGlvbiAoZ2xvYmFsVHJhbnNmb3JtTWF0cml4LCB0cmFuc2Zvcm0pIHtcclxuICAgICAgICAgICAgdmFyIGRhdGFBcnJheSA9IHRoaXMucGFyZW50LmNhY2hlZEZyYW1lcztcclxuICAgICAgICAgICAgdmFyIGFycmF5T2Zmc2V0ID0gZGF0YUFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgZGF0YUFycmF5Lmxlbmd0aCArPSAxMDtcclxuICAgICAgICAgICAgZGF0YUFycmF5W2FycmF5T2Zmc2V0XSA9IGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5hO1xyXG4gICAgICAgICAgICBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyAxXSA9IGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5iO1xyXG4gICAgICAgICAgICBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyAyXSA9IGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5jO1xyXG4gICAgICAgICAgICBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyAzXSA9IGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5kO1xyXG4gICAgICAgICAgICBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyA0XSA9IGdsb2JhbFRyYW5zZm9ybU1hdHJpeC50eDtcclxuICAgICAgICAgICAgZGF0YUFycmF5W2FycmF5T2Zmc2V0ICsgNV0gPSBnbG9iYWxUcmFuc2Zvcm1NYXRyaXgudHk7XHJcbiAgICAgICAgICAgIGRhdGFBcnJheVthcnJheU9mZnNldCArIDZdID0gdHJhbnNmb3JtLnJvdGF0aW9uO1xyXG4gICAgICAgICAgICBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyA3XSA9IHRyYW5zZm9ybS5za2V3O1xyXG4gICAgICAgICAgICBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyA4XSA9IHRyYW5zZm9ybS5zY2FsZVg7XHJcbiAgICAgICAgICAgIGRhdGFBcnJheVthcnJheU9mZnNldCArIDldID0gdHJhbnNmb3JtLnNjYWxlWTtcclxuICAgICAgICAgICAgcmV0dXJuIGFycmF5T2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5nZXRDYWNoZUZyYW1lID0gZnVuY3Rpb24gKGdsb2JhbFRyYW5zZm9ybU1hdHJpeCwgdHJhbnNmb3JtLCBhcnJheU9mZnNldCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YUFycmF5ID0gdGhpcy5wYXJlbnQuY2FjaGVkRnJhbWVzO1xyXG4gICAgICAgICAgICBnbG9iYWxUcmFuc2Zvcm1NYXRyaXguYSA9IGRhdGFBcnJheVthcnJheU9mZnNldF07XHJcbiAgICAgICAgICAgIGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5iID0gZGF0YUFycmF5W2FycmF5T2Zmc2V0ICsgMV07XHJcbiAgICAgICAgICAgIGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5jID0gZGF0YUFycmF5W2FycmF5T2Zmc2V0ICsgMl07XHJcbiAgICAgICAgICAgIGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5kID0gZGF0YUFycmF5W2FycmF5T2Zmc2V0ICsgM107XHJcbiAgICAgICAgICAgIGdsb2JhbFRyYW5zZm9ybU1hdHJpeC50eCA9IGRhdGFBcnJheVthcnJheU9mZnNldCArIDRdO1xyXG4gICAgICAgICAgICBnbG9iYWxUcmFuc2Zvcm1NYXRyaXgudHkgPSBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyA1XTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLnJvdGF0aW9uID0gZGF0YUFycmF5W2FycmF5T2Zmc2V0ICsgNl07XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS5za2V3ID0gZGF0YUFycmF5W2FycmF5T2Zmc2V0ICsgN107XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS5zY2FsZVggPSBkYXRhQXJyYXlbYXJyYXlPZmZzZXQgKyA4XTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLnNjYWxlWSA9IGRhdGFBcnJheVthcnJheU9mZnNldCArIDldO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0ueCA9IGdsb2JhbFRyYW5zZm9ybU1hdHJpeC50eDtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLnkgPSBnbG9iYWxUcmFuc2Zvcm1NYXRyaXgudHk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZURhdGEucHJvdG90eXBlLmFkZEJvbmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLm5hbWUgaW4gdGhpcy5ib25lcykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU2FtZSBib25lOiBcIiArIHZhbHVlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYm9uZXNbdmFsdWUubmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5zb3J0ZWRCb25lcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlRGF0YS5wcm90b3R5cGUuYWRkU2xvdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubmFtZSBpbiB0aGlzLnNsb3RzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTYW1lIHNsb3Q6IFwiICsgdmFsdWUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zbG90c1t2YWx1ZS5uYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnNvcnRlZFNsb3RzLnB1c2godmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5hZGRDb25zdHJhaW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5uYW1lIGluIHRoaXMuY29uc3RyYWludHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlNhbWUgY29uc3RyYWludDogXCIgKyB2YWx1ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbnN0cmFpbnRzW3ZhbHVlLm5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZURhdGEucHJvdG90eXBlLmFkZFNraW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLm5hbWUgaW4gdGhpcy5za2lucykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiU2FtZSBza2luOiBcIiArIHZhbHVlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhbHVlLnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuc2tpbnNbdmFsdWUubmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdFNraW4gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNraW4gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsdWUubmFtZSA9PT0gXCJkZWZhdWx0XCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNraW4gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5hZGRBbmltYXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLm5hbWUgaW4gdGhpcy5hbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTYW1lIGFuaW1hdGlvbjogXCIgKyB2YWx1ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YWx1ZS5wYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnNbdmFsdWUubmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25OYW1lcy5wdXNoKHZhbHVlLm5hbWUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWZhdWx0QW5pbWF0aW9uID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRBbmltYXRpb24gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5hZGRBY3Rpb24gPSBmdW5jdGlvbiAodmFsdWUsIGlzRGVmYXVsdCkge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRBY3Rpb25zLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEdldCBhIHNwZWNpZmljIGRvbmUgZGF0YS5cclxuICAgICAgICAgKiBAcGFyYW0gYm9uZU5hbWUgLSBUaGUgYm9uZSBuYW1lLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g6I635Y+W54m55a6a55qE6aqo6aq85pWw5o2u44CCXHJcbiAgICAgICAgICogQHBhcmFtIGJvbmVOYW1lIC0g6aqo6aq85ZCN56ew44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5nZXRCb25lID0gZnVuY3Rpb24gKGJvbmVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBib25lTmFtZSBpbiB0aGlzLmJvbmVzID8gdGhpcy5ib25lc1tib25lTmFtZV0gOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBzcGVjaWZpYyBzbG90IGRhdGEuXHJcbiAgICAgICAgICogQHBhcmFtIHNsb3ROYW1lIC0gVGhlIHNsb3QgbmFtZS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOiOt+WPlueJueWumueahOaPkuanveaVsOaNruOAglxyXG4gICAgICAgICAqIEBwYXJhbSBzbG90TmFtZSAtIOaPkuanveWQjeensOOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlRGF0YS5wcm90b3R5cGUuZ2V0U2xvdCA9IGZ1bmN0aW9uIChzbG90TmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2xvdE5hbWUgaW4gdGhpcy5zbG90cyA/IHRoaXMuc2xvdHNbc2xvdE5hbWVdIDogbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5nZXRDb25zdHJhaW50ID0gZnVuY3Rpb24gKGNvbnN0cmFpbnROYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25zdHJhaW50TmFtZSBpbiB0aGlzLmNvbnN0cmFpbnRzID8gdGhpcy5jb25zdHJhaW50c1tjb25zdHJhaW50TmFtZV0gOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBzcGVjaWZpYyBza2luIGRhdGEuXHJcbiAgICAgICAgICogQHBhcmFtIHNraW5OYW1lIC0gVGhlIHNraW4gbmFtZS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOiOt+WPlueJueWumuearuiCpOaVsOaNruOAglxyXG4gICAgICAgICAqIEBwYXJhbSBza2luTmFtZSAtIOearuiCpOWQjeensOOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlRGF0YS5wcm90b3R5cGUuZ2V0U2tpbiA9IGZ1bmN0aW9uIChza2luTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2tpbk5hbWUgaW4gdGhpcy5za2lucyA/IHRoaXMuc2tpbnNbc2tpbk5hbWVdIDogbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5nZXRNZXNoID0gZnVuY3Rpb24gKHNraW5OYW1lLCBzbG90TmFtZSwgbWVzaE5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIHNraW4gPSB0aGlzLmdldFNraW4oc2tpbk5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoc2tpbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNraW4uZ2V0RGlzcGxheShzbG90TmFtZSwgbWVzaE5hbWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBzcGVjaWZpYyBhbmltYXRpb24gZGF0YS5cclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIFRoZSBhbmltYXRpb24gYW5pbWF0aW9uTmFtZS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOiOt+WPlueJueWumueahOWKqOeUu+aVsOaNruOAglxyXG4gICAgICAgICAqIEBwYXJhbSBhbmltYXRpb25OYW1lIC0g5Yqo55S75ZCN56ew44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmVEYXRhLnByb3RvdHlwZS5nZXRBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbWF0aW9uTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uTmFtZSBpbiB0aGlzLmFuaW1hdGlvbnMgPyB0aGlzLmFuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0gOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEFybWF0dXJlRGF0YTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQmFzZU9iamVjdCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQXJtYXR1cmVEYXRhID0gQXJtYXR1cmVEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSBib25lIGRhdGEuXHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICovXHJcbiAgICAvKipcclxuICAgICAqIC0g6aqo6aq85pWw5o2u44CCXHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICovXHJcbiAgICB2YXIgQm9uZURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEJvbmVEYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEJvbmVEYXRhKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy50cmFuc2Zvcm0gPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMudXNlckRhdGEgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEJvbmVEYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQm9uZURhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCb25lRGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVzZXJEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJEYXRhLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5oZXJpdFRyYW5zbGF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuaW5oZXJpdFJvdGF0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuaW5oZXJpdFNjYWxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuaW5oZXJpdFJlZmxlY3Rpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gMCAvKiBCb25lICovO1xyXG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uaWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy51c2VyRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBCb25lRGF0YTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQmFzZU9iamVjdCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQm9uZURhdGEgPSBCb25lRGF0YTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBTdXJmYWNlRGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoU3VyZmFjZURhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU3VyZmFjZURhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy52ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFN1cmZhY2VEYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuU3VyZmFjZURhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTdXJmYWNlRGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gMSAvKiBTdXJmYWNlICovO1xyXG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRYID0gMDtcclxuICAgICAgICAgICAgdGhpcy5zZWdtZW50WSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMubGVuZ3RoID0gMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBTdXJmYWNlRGF0YTtcclxuICAgIH0oQm9uZURhdGEpKTtcclxuICAgIGRyYWdvbkJvbmVzLlN1cmZhY2VEYXRhID0gU3VyZmFjZURhdGE7XHJcbiAgICAvKipcclxuICAgICAqIC0gVGhlIHNsb3QgZGF0YS5cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDmj5Lmp73mlbDmja7jgIJcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBTbG90RGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoU2xvdERhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU2xvdERhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLmNvbG9yID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy51c2VyRGF0YSA9IG51bGw7IC8vIEluaXRpYWwgdmFsdWUuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2xvdERhdGEuY3JlYXRlQ29sb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgZHJhZ29uQm9uZXMuQ29sb3JUcmFuc2Zvcm0oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNsb3REYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuU2xvdERhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTbG90RGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnVzZXJEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJEYXRhLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYmxlbmRNb2RlID0gMCAvKiBOb3JtYWwgKi87XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUluZGV4ID0gMDtcclxuICAgICAgICAgICAgdGhpcy56T3JkZXIgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy51c2VyRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDsgLy9cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNsb3REYXRhLkRFRkFVTFRfQ09MT1IgPSBuZXcgZHJhZ29uQm9uZXMuQ29sb3JUcmFuc2Zvcm0oKTtcclxuICAgICAgICByZXR1cm4gU2xvdERhdGE7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLlNsb3REYXRhID0gU2xvdERhdGE7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIENvbnN0cmFpbnREYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhDb25zdHJhaW50RGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBDb25zdHJhaW50RGF0YSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBDb25zdHJhaW50RGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3JkZXIgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAwIC8qIElLICovO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMucm9vdCA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuYm9uZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQ29uc3RyYWludERhdGE7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLkNvbnN0cmFpbnREYXRhID0gQ29uc3RyYWludERhdGE7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB2YXIgSUtDb25zdHJhaW50RGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoSUtDb25zdHJhaW50RGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBJS0NvbnN0cmFpbnREYXRhKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIElLQ29uc3RyYWludERhdGEudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5JS0NvbnN0cmFpbnREYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSUtDb25zdHJhaW50RGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZUVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5iZW5kUG9zaXRpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy53ZWlnaHQgPSAxLjA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gSUtDb25zdHJhaW50RGF0YTtcclxuICAgIH0oQ29uc3RyYWludERhdGEpKTtcclxuICAgIGRyYWdvbkJvbmVzLklLQ29uc3RyYWludERhdGEgPSBJS0NvbnN0cmFpbnREYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIFBhdGhDb25zdHJhaW50RGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoUGF0aENvbnN0cmFpbnREYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFBhdGhDb25zdHJhaW50RGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLmJvbmVzID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgUGF0aENvbnN0cmFpbnREYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuUGF0aENvbnN0cmFpbnREYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUGF0aENvbnN0cmFpbnREYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25DbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnBhdGhTbG90ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5wYXRoRGlzcGxheURhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmJvbmVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25Nb2RlID0gMCAvKiBGaXhlZCAqLztcclxuICAgICAgICAgICAgdGhpcy5zcGFjaW5nTW9kZSA9IDEgLyogRml4ZWQgKi87XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlTW9kZSA9IDEgLyogQ2hhaW4gKi87XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuc3BhY2luZyA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5yb3RhdGVPZmZzZXQgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlTWl4ID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZU1peCA9IDAuMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFBhdGhDb25zdHJhaW50RGF0YS5wcm90b3R5cGUuQWRkQm9uZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJvbmVzLnB1c2godmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFBhdGhDb25zdHJhaW50RGF0YTtcclxuICAgIH0oQ29uc3RyYWludERhdGEpKTtcclxuICAgIGRyYWdvbkJvbmVzLlBhdGhDb25zdHJhaW50RGF0YSA9IFBhdGhDb25zdHJhaW50RGF0YTtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB2YXIgQ2FudmFzRGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQ2FudmFzRGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBDYW52YXNEYXRhKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIENhbnZhc0RhdGEudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5DYW52YXNEYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQ2FudmFzRGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzQmFja2dyb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gMHgwMDAwMDA7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQ2FudmFzRGF0YTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQmFzZU9iamVjdCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQ2FudmFzRGF0YSA9IENhbnZhc0RhdGE7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSBza2luIGRhdGEsIHR5cGljYWxseSBhIGFybWF0dXJlIGRhdGEgaW5zdGFuY2UgY29udGFpbnMgYXQgbGVhc3Qgb25lIHNraW5EYXRhLlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOearuiCpOaVsOaNru+8jOmAmuW4uOS4gOS4qumqqOaetuaVsOaNruiHs+WwkeWMheWQq+S4gOS4quearuiCpOaVsOaNruOAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIFNraW5EYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhTa2luRGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBTa2luRGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuZGlzcGxheXMgPSB7fTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBTa2luRGF0YS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLlNraW5EYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2tpbkRhdGEucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuZGlzcGxheXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzbG90RGlzcGxheXMgPSB0aGlzLmRpc3BsYXlzW2tdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzbG90RGlzcGxheXNfMSA9IHNsb3REaXNwbGF5czsgX2kgPCBzbG90RGlzcGxheXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheSA9IHNsb3REaXNwbGF5c18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcGxheSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5LnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmRpc3BsYXlzW2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuZGlzcGxheXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsOyAvL1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2tpbkRhdGEucHJvdG90eXBlLmFkZERpc3BsYXkgPSBmdW5jdGlvbiAoc2xvdE5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICghKHNsb3ROYW1lIGluIHRoaXMuZGlzcGxheXMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlzW3Nsb3ROYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUucGFyZW50ID0gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2xvdERpc3BsYXlzID0gdGhpcy5kaXNwbGF5c1tzbG90TmFtZV07IC8vIFRPRE8gY2xlYXIgcHJldlxyXG4gICAgICAgICAgICBzbG90RGlzcGxheXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNraW5EYXRhLnByb3RvdHlwZS5nZXREaXNwbGF5ID0gZnVuY3Rpb24gKHNsb3ROYW1lLCBkaXNwbGF5TmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgc2xvdERpc3BsYXlzID0gdGhpcy5nZXREaXNwbGF5cyhzbG90TmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChzbG90RGlzcGxheXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgc2xvdERpc3BsYXlzXzIgPSBzbG90RGlzcGxheXM7IF9pIDwgc2xvdERpc3BsYXlzXzIubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXkgPSBzbG90RGlzcGxheXNfMltfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3BsYXkgIT09IG51bGwgJiYgZGlzcGxheS5uYW1lID09PSBkaXNwbGF5TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGxheTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNraW5EYXRhLnByb3RvdHlwZS5nZXREaXNwbGF5cyA9IGZ1bmN0aW9uIChzbG90TmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoIShzbG90TmFtZSBpbiB0aGlzLmRpc3BsYXlzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheXNbc2xvdE5hbWVdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFNraW5EYXRhO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5Ta2luRGF0YSA9IFNraW5EYXRhO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBWZXJ0aWNlc0RhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gVmVydGljZXNEYXRhKCkge1xyXG4gICAgICAgICAgICB0aGlzLndlaWdodCA9IG51bGw7IC8vIEluaXRpYWwgdmFsdWUuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFZlcnRpY2VzRGF0YS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1NoYXJlZCAmJiB0aGlzLndlaWdodCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWlnaHQucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pc1NoYXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmluaGVyaXREZWZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLndlaWdodCA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBWZXJ0aWNlc0RhdGEucHJvdG90eXBlLnNoYXJlRnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmlzU2hhcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSB2YWx1ZS5vZmZzZXQ7XHJcbiAgICAgICAgICAgIHRoaXMud2VpZ2h0ID0gdmFsdWUud2VpZ2h0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFZlcnRpY2VzRGF0YTtcclxuICAgIH0oKSk7XHJcbiAgICBkcmFnb25Cb25lcy5WZXJ0aWNlc0RhdGEgPSBWZXJ0aWNlc0RhdGE7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB2YXIgRGlzcGxheURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKERpc3BsYXlEYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIERpc3BsYXlEYXRhKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICAgICAgX3RoaXMudHJhbnNmb3JtID0gbmV3IGRyYWdvbkJvbmVzLlRyYW5zZm9ybSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIERpc3BsYXlEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5wYXRoID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uaWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsOyAvL1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIERpc3BsYXlEYXRhO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5EaXNwbGF5RGF0YSA9IERpc3BsYXlEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEltYWdlRGlzcGxheURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEltYWdlRGlzcGxheURhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gSW1hZ2VEaXNwbGF5RGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLnBpdm90ID0gbmV3IGRyYWdvbkJvbmVzLlBvaW50KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgSW1hZ2VEaXNwbGF5RGF0YS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLkltYWdlRGlzcGxheURhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBJbWFnZURpc3BsYXlEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25DbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAwIC8qIEltYWdlICovO1xyXG4gICAgICAgICAgICB0aGlzLnBpdm90LmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gSW1hZ2VEaXNwbGF5RGF0YTtcclxuICAgIH0oRGlzcGxheURhdGEpKTtcclxuICAgIGRyYWdvbkJvbmVzLkltYWdlRGlzcGxheURhdGEgPSBJbWFnZURpc3BsYXlEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEFybWF0dXJlRGlzcGxheURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEFybWF0dXJlRGlzcGxheURhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQXJtYXR1cmVEaXNwbGF5RGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBcm1hdHVyZURpc3BsYXlEYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5RGF0YV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFybWF0dXJlRGlzcGxheURhdGEucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkNsZWFyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmFjdGlvbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IDEgLyogQXJtYXR1cmUgKi87XHJcbiAgICAgICAgICAgIHRoaXMuaW5oZXJpdEFuaW1hdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5hcm1hdHVyZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlRGlzcGxheURhdGEucHJvdG90eXBlLmFkZEFjdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQXJtYXR1cmVEaXNwbGF5RGF0YTtcclxuICAgIH0oRGlzcGxheURhdGEpKTtcclxuICAgIGRyYWdvbkJvbmVzLkFybWF0dXJlRGlzcGxheURhdGEgPSBBcm1hdHVyZURpc3BsYXlEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIE1lc2hEaXNwbGF5RGF0YSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoTWVzaERpc3BsYXlEYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIE1lc2hEaXNwbGF5RGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLnZlcnRpY2VzID0gbmV3IFZlcnRpY2VzRGF0YSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE1lc2hEaXNwbGF5RGF0YS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLk1lc2hEaXNwbGF5RGF0YV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1lc2hEaXNwbGF5RGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gMiAvKiBNZXNoICovO1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2VzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTWVzaERpc3BsYXlEYXRhO1xyXG4gICAgfShEaXNwbGF5RGF0YSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuTWVzaERpc3BsYXlEYXRhID0gTWVzaERpc3BsYXlEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJvdW5kaW5nQm94RGlzcGxheURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEJvdW5kaW5nQm94RGlzcGxheURhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQm91bmRpbmdCb3hEaXNwbGF5RGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLmJvdW5kaW5nQm94ID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBCb3VuZGluZ0JveERpc3BsYXlEYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQm91bmRpbmdCb3hEaXNwbGF5RGF0YV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEJvdW5kaW5nQm94RGlzcGxheURhdGEucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkNsZWFyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJvdW5kaW5nQm94ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvdW5kaW5nQm94LnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IDMgLyogQm91bmRpbmdCb3ggKi87XHJcbiAgICAgICAgICAgIHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEJvdW5kaW5nQm94RGlzcGxheURhdGE7XHJcbiAgICB9KERpc3BsYXlEYXRhKSk7XHJcbiAgICBkcmFnb25Cb25lcy5Cb3VuZGluZ0JveERpc3BsYXlEYXRhID0gQm91bmRpbmdCb3hEaXNwbGF5RGF0YTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBQYXRoRGlzcGxheURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFBhdGhEaXNwbGF5RGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBQYXRoRGlzcGxheURhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy52ZXJ0aWNlcyA9IG5ldyBWZXJ0aWNlc0RhdGEoKTtcclxuICAgICAgICAgICAgX3RoaXMuY3VydmVMZW5ndGhzID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgUGF0aERpc3BsYXlEYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuUGF0aERpc3BsYXlEYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUGF0aERpc3BsYXlEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25DbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSA0IC8qIFBhdGggKi87XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY29uc3RhbnRTcGVlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2VzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3VydmVMZW5ndGhzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gUGF0aERpc3BsYXlEYXRhO1xyXG4gICAgfShEaXNwbGF5RGF0YSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuUGF0aERpc3BsYXlEYXRhID0gUGF0aERpc3BsYXlEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIFdlaWdodERhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFdlaWdodERhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gV2VpZ2h0RGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLmJvbmVzID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgV2VpZ2h0RGF0YS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLldlaWdodERhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBXZWlnaHREYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jb3VudCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5ib25lcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgV2VpZ2h0RGF0YS5wcm90b3R5cGUuYWRkQm9uZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJvbmVzLnB1c2godmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFdlaWdodERhdGE7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLldlaWdodERhdGEgPSBXZWlnaHREYXRhO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogLSBUaGUgYmFzZSBjbGFzcyBvZiBib3VuZGluZyBib3ggZGF0YS5cclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuUmVjdGFuZ2xlRGF0YVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5FbGxpcHNlRGF0YVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Qb2x5Z29uRGF0YVxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOi+ueeVjOahhuaVsOaNruWfuuexu+OAglxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5SZWN0YW5nbGVEYXRhXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkVsbGlwc2VEYXRhXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlBvbHlnb25EYXRhXHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICovXHJcbiAgICB2YXIgQm91bmRpbmdCb3hEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhCb3VuZGluZ0JveERhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQm91bmRpbmdCb3hEYXRhKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEJvdW5kaW5nQm94RGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sb3IgPSAweDAwMDAwMDtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAwLjA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQm91bmRpbmdCb3hEYXRhO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5Cb3VuZGluZ0JveERhdGEgPSBCb3VuZGluZ0JveERhdGE7XHJcbiAgICAvKipcclxuICAgICAqIC0gVGhlIHJlY3RhbmdsZSBib3VuZGluZyBib3ggZGF0YS5cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDnn6nlvaLovrnnlYzmoYbmlbDmja7jgIJcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBSZWN0YW5nbGVCb3VuZGluZ0JveERhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBSZWN0YW5nbGVCb3VuZGluZ0JveERhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBDb21wdXRlIHRoZSBiaXQgY29kZSBmb3IgYSBwb2ludCAoeCwgeSkgdXNpbmcgdGhlIGNsaXAgcmVjdGFuZ2xlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLl9jb21wdXRlT3V0Q29kZSA9IGZ1bmN0aW9uICh4LCB5LCB4TWluLCB5TWluLCB4TWF4LCB5TWF4KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gMCAvKiBJblNpZGUgKi87IC8vIGluaXRpYWxpc2VkIGFzIGJlaW5nIGluc2lkZSBvZiBbW2NsaXAgd2luZG93XV1cclxuICAgICAgICAgICAgaWYgKHggPCB4TWluKSB7IC8vIHRvIHRoZSBsZWZ0IG9mIGNsaXAgd2luZG93XHJcbiAgICAgICAgICAgICAgICBjb2RlIHw9IDEgLyogTGVmdCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh4ID4geE1heCkgeyAvLyB0byB0aGUgcmlnaHQgb2YgY2xpcCB3aW5kb3dcclxuICAgICAgICAgICAgICAgIGNvZGUgfD0gMiAvKiBSaWdodCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSA8IHlNaW4pIHsgLy8gYmVsb3cgdGhlIGNsaXAgd2luZG93XHJcbiAgICAgICAgICAgICAgICBjb2RlIHw9IDQgLyogVG9wICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHkgPiB5TWF4KSB7IC8vIGFib3ZlIHRoZSBjbGlwIHdpbmRvd1xyXG4gICAgICAgICAgICAgICAgY29kZSB8PSA4IC8qIEJvdHRvbSAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29kZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLnJlY3RhbmdsZUludGVyc2VjdHNTZWdtZW50ID0gZnVuY3Rpb24gKHhBLCB5QSwgeEIsIHlCLCB4TWluLCB5TWluLCB4TWF4LCB5TWF4LCBpbnRlcnNlY3Rpb25Qb2ludEEsIGludGVyc2VjdGlvblBvaW50Qiwgbm9ybWFsUmFkaWFucykge1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBID09PSB2b2lkIDApIHsgaW50ZXJzZWN0aW9uUG9pbnRBID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRCID09PSB2b2lkIDApIHsgaW50ZXJzZWN0aW9uUG9pbnRCID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyA9PT0gdm9pZCAwKSB7IG5vcm1hbFJhZGlhbnMgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIHZhciBpblNpZGVBID0geEEgPiB4TWluICYmIHhBIDwgeE1heCAmJiB5QSA+IHlNaW4gJiYgeUEgPCB5TWF4O1xyXG4gICAgICAgICAgICB2YXIgaW5TaWRlQiA9IHhCID4geE1pbiAmJiB4QiA8IHhNYXggJiYgeUIgPiB5TWluICYmIHlCIDwgeU1heDtcclxuICAgICAgICAgICAgaWYgKGluU2lkZUEgJiYgaW5TaWRlQikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25Db3VudCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBvdXRjb2RlMCA9IFJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YS5fY29tcHV0ZU91dENvZGUoeEEsIHlBLCB4TWluLCB5TWluLCB4TWF4LCB5TWF4KTtcclxuICAgICAgICAgICAgdmFyIG91dGNvZGUxID0gUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLl9jb21wdXRlT3V0Q29kZSh4QiwgeUIsIHhNaW4sIHlNaW4sIHhNYXgsIHlNYXgpO1xyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChvdXRjb2RlMCB8IG91dGNvZGUxKSA9PT0gMCkgeyAvLyBCaXR3aXNlIE9SIGlzIDAuIFRyaXZpYWxseSBhY2NlcHQgYW5kIGdldCBvdXQgb2YgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNvdW50ID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChvdXRjb2RlMCAmIG91dGNvZGUxKSAhPT0gMCkgeyAvLyBCaXR3aXNlIEFORCBpcyBub3QgMC4gVHJpdmlhbGx5IHJlamVjdCBhbmQgZ2V0IG91dCBvZiBsb29wXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBmYWlsZWQgYm90aCB0ZXN0cywgc28gY2FsY3VsYXRlIHRoZSBsaW5lIHNlZ21lbnQgdG8gY2xpcFxyXG4gICAgICAgICAgICAgICAgLy8gZnJvbSBhbiBvdXRzaWRlIHBvaW50IHRvIGFuIGludGVyc2VjdGlvbiB3aXRoIGNsaXAgZWRnZVxyXG4gICAgICAgICAgICAgICAgdmFyIHggPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB2YXIgeSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxSYWRpYW4gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAvLyBBdCBsZWFzdCBvbmUgZW5kcG9pbnQgaXMgb3V0c2lkZSB0aGUgY2xpcCByZWN0YW5nbGU7IHBpY2sgaXQuXHJcbiAgICAgICAgICAgICAgICB2YXIgb3V0Y29kZU91dCA9IG91dGNvZGUwICE9PSAwID8gb3V0Y29kZTAgOiBvdXRjb2RlMTtcclxuICAgICAgICAgICAgICAgIC8vIE5vdyBmaW5kIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoKG91dGNvZGVPdXQgJiA0IC8qIFRvcCAqLykgIT09IDApIHsgLy8gcG9pbnQgaXMgYWJvdmUgdGhlIGNsaXAgcmVjdGFuZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHhBICsgKHhCIC0geEEpICogKHlNaW4gLSB5QSkgLyAoeUIgLSB5QSk7XHJcbiAgICAgICAgICAgICAgICAgICAgeSA9IHlNaW47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFuID0gLU1hdGguUEkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKG91dGNvZGVPdXQgJiA4IC8qIEJvdHRvbSAqLykgIT09IDApIHsgLy8gcG9pbnQgaXMgYmVsb3cgdGhlIGNsaXAgcmVjdGFuZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHhBICsgKHhCIC0geEEpICogKHlNYXggLSB5QSkgLyAoeUIgLSB5QSk7XHJcbiAgICAgICAgICAgICAgICAgICAgeSA9IHlNYXg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFuID0gTWF0aC5QSSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgob3V0Y29kZU91dCAmIDIgLyogUmlnaHQgKi8pICE9PSAwKSB7IC8vIHBvaW50IGlzIHRvIHRoZSByaWdodCBvZiBjbGlwIHJlY3RhbmdsZVxyXG4gICAgICAgICAgICAgICAgICAgIHkgPSB5QSArICh5QiAtIHlBKSAqICh4TWF4IC0geEEpIC8gKHhCIC0geEEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHggPSB4TWF4O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKG91dGNvZGVPdXQgJiAxIC8qIExlZnQgKi8pICE9PSAwKSB7IC8vIHBvaW50IGlzIHRvIHRoZSBsZWZ0IG9mIGNsaXAgcmVjdGFuZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgeSA9IHlBICsgKHlCIC0geUEpICogKHhNaW4gLSB4QSkgLyAoeEIgLSB4QSk7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHhNaW47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFuID0gTWF0aC5QSTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBOb3cgd2UgbW92ZSBvdXRzaWRlIHBvaW50IHRvIGludGVyc2VjdGlvbiBwb2ludCB0byBjbGlwXHJcbiAgICAgICAgICAgICAgICAvLyBhbmQgZ2V0IHJlYWR5IGZvciBuZXh0IHBhc3MuXHJcbiAgICAgICAgICAgICAgICBpZiAob3V0Y29kZU91dCA9PT0gb3V0Y29kZTApIHtcclxuICAgICAgICAgICAgICAgICAgICB4QSA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgeUEgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIG91dGNvZGUwID0gUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLl9jb21wdXRlT3V0Q29kZSh4QSwgeUEsIHhNaW4sIHlNaW4sIHhNYXgsIHlNYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueCA9IG5vcm1hbFJhZGlhbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB4QiA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgeUIgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIG91dGNvZGUxID0gUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLl9jb21wdXRlT3V0Q29kZSh4QiwgeUIsIHhNaW4sIHlNaW4sIHhNYXgsIHlNYXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueSA9IG5vcm1hbFJhZGlhbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvbkNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5TaWRlQSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNvdW50ID0gMjsgLy8gMTBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50QS54ID0geEI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50QS55ID0geUI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnggPSB4QjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnkgPSB4QjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFucy54ID0gbm9ybWFsUmFkaWFucy55ICsgTWF0aC5QSTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpblNpZGVCKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uQ291bnQgPSAxOyAvLyAwMVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnggPSB4QTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnkgPSB5QTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludEIueCA9IHhBO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludEIueSA9IHlBO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxSYWRpYW5zLnkgPSBub3JtYWxSYWRpYW5zLnggKyBNYXRoLlBJO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNvdW50ID0gMzsgLy8gMTFcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50QS54ID0geEE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50QS55ID0geUE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnggPSB4QjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnkgPSB5QjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbkNvdW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25DbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAwIC8qIFJlY3RhbmdsZSAqLztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhLnByb3RvdHlwZS5jb250YWluc1BvaW50ID0gZnVuY3Rpb24gKHBYLCBwWSkge1xyXG4gICAgICAgICAgICB2YXIgd2lkdGhIID0gdGhpcy53aWR0aCAqIDAuNTtcclxuICAgICAgICAgICAgaWYgKHBYID49IC13aWR0aEggJiYgcFggPD0gd2lkdGhIKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0SCA9IHRoaXMuaGVpZ2h0ICogMC41O1xyXG4gICAgICAgICAgICAgICAgaWYgKHBZID49IC1oZWlnaHRIICYmIHBZIDw9IGhlaWdodEgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YS5wcm90b3R5cGUuaW50ZXJzZWN0c1NlZ21lbnQgPSBmdW5jdGlvbiAoeEEsIHlBLCB4QiwgeUIsIGludGVyc2VjdGlvblBvaW50QSwgaW50ZXJzZWN0aW9uUG9pbnRCLCBub3JtYWxSYWRpYW5zKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEEgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEEgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEIgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zID09PSB2b2lkIDApIHsgbm9ybWFsUmFkaWFucyA9IG51bGw7IH1cclxuICAgICAgICAgICAgdmFyIHdpZHRoSCA9IHRoaXMud2lkdGggKiAwLjU7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHRIID0gdGhpcy5oZWlnaHQgKiAwLjU7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25Db3VudCA9IFJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YS5yZWN0YW5nbGVJbnRlcnNlY3RzU2VnbWVudCh4QSwgeUEsIHhCLCB5QiwgLXdpZHRoSCwgLWhlaWdodEgsIHdpZHRoSCwgaGVpZ2h0SCwgaW50ZXJzZWN0aW9uUG9pbnRBLCBpbnRlcnNlY3Rpb25Qb2ludEIsIG5vcm1hbFJhZGlhbnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uQ291bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gUmVjdGFuZ2xlQm91bmRpbmdCb3hEYXRhO1xyXG4gICAgfShCb3VuZGluZ0JveERhdGEpKTtcclxuICAgIGRyYWdvbkJvbmVzLlJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YSA9IFJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YTtcclxuICAgIC8qKlxyXG4gICAgICogLSBUaGUgZWxsaXBzZSBib3VuZGluZyBib3ggZGF0YS5cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDmpK3lnIbovrnnlYzmoYbmlbDmja7jgIJcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBFbGxpcHNlQm91bmRpbmdCb3hEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhFbGxpcHNlQm91bmRpbmdCb3hEYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEVsbGlwc2VCb3VuZGluZ0JveERhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgRWxsaXBzZUJvdW5kaW5nQm94RGF0YS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLkVsbGlwc2VEYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBFbGxpcHNlQm91bmRpbmdCb3hEYXRhLmVsbGlwc2VJbnRlcnNlY3RzU2VnbWVudCA9IGZ1bmN0aW9uICh4QSwgeUEsIHhCLCB5QiwgeEMsIHlDLCB3aWR0aEgsIGhlaWdodEgsIGludGVyc2VjdGlvblBvaW50QSwgaW50ZXJzZWN0aW9uUG9pbnRCLCBub3JtYWxSYWRpYW5zKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEEgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEEgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEIgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zID09PSB2b2lkIDApIHsgbm9ybWFsUmFkaWFucyA9IG51bGw7IH1cclxuICAgICAgICAgICAgdmFyIGQgPSB3aWR0aEggLyBoZWlnaHRIO1xyXG4gICAgICAgICAgICB2YXIgZGQgPSBkICogZDtcclxuICAgICAgICAgICAgeUEgKj0gZDtcclxuICAgICAgICAgICAgeUIgKj0gZDtcclxuICAgICAgICAgICAgdmFyIGRYID0geEIgLSB4QTtcclxuICAgICAgICAgICAgdmFyIGRZID0geUIgLSB5QTtcclxuICAgICAgICAgICAgdmFyIGxBQiA9IE1hdGguc3FydChkWCAqIGRYICsgZFkgKiBkWSk7XHJcbiAgICAgICAgICAgIHZhciB4RCA9IGRYIC8gbEFCO1xyXG4gICAgICAgICAgICB2YXIgeUQgPSBkWSAvIGxBQjtcclxuICAgICAgICAgICAgdmFyIGEgPSAoeEMgLSB4QSkgKiB4RCArICh5QyAtIHlBKSAqIHlEO1xyXG4gICAgICAgICAgICB2YXIgYWEgPSBhICogYTtcclxuICAgICAgICAgICAgdmFyIGVlID0geEEgKiB4QSArIHlBICogeUE7XHJcbiAgICAgICAgICAgIHZhciByciA9IHdpZHRoSCAqIHdpZHRoSDtcclxuICAgICAgICAgICAgdmFyIGRSID0gcnIgLSBlZSArIGFhO1xyXG4gICAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uQ291bnQgPSAwO1xyXG4gICAgICAgICAgICBpZiAoZFIgPj0gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZFQgPSBNYXRoLnNxcnQoZFIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNBID0gYSAtIGRUO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNCID0gYSArIGRUO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluU2lkZUEgPSBzQSA8IDAuMCA/IC0xIDogKHNBIDw9IGxBQiA/IDAgOiAxKTtcclxuICAgICAgICAgICAgICAgIHZhciBpblNpZGVCID0gc0IgPCAwLjAgPyAtMSA6IChzQiA8PSBsQUIgPyAwIDogMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2lkZUFCID0gaW5TaWRlQSAqIGluU2lkZUI7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2lkZUFCIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNpZGVBQiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpblNpZGVBID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Db3VudCA9IDI7IC8vIDEwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhCID0geEEgKyBzQiAqIHhEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5QiA9ICh5QSArIHNCICogeUQpIC8gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnggPSB4QjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50QS55ID0geUI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnggPSB4QjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50Qi55ID0geUI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueCA9IE1hdGguYXRhbjIoeUIgLyByciAqIGRkLCB4QiAvIHJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueSA9IG5vcm1hbFJhZGlhbnMueCArIE1hdGguUEk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5TaWRlQiA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Db3VudCA9IDE7IC8vIDAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhBID0geEEgKyBzQSAqIHhEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5QSA9ICh5QSArIHNBICogeUQpIC8gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnggPSB4QTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50QS55ID0geUE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnggPSB4QTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50Qi55ID0geUE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueCA9IE1hdGguYXRhbjIoeUEgLyByciAqIGRkLCB4QSAvIHJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueSA9IG5vcm1hbFJhZGlhbnMueCArIE1hdGguUEk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNvdW50ID0gMzsgLy8gMTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnggPSB4QSArIHNBICogeEQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludEEueSA9ICh5QSArIHNBICogeUQpIC8gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFucy54ID0gTWF0aC5hdGFuMihpbnRlcnNlY3Rpb25Qb2ludEEueSAvIHJyICogZGQsIGludGVyc2VjdGlvblBvaW50QS54IC8gcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50Qi54ID0geEEgKyBzQiAqIHhEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnkgPSAoeUEgKyBzQiAqIHlEKSAvIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueSA9IE1hdGguYXRhbjIoaW50ZXJzZWN0aW9uUG9pbnRCLnkgLyByciAqIGRkLCBpbnRlcnNlY3Rpb25Qb2ludEIueCAvIHJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uQ291bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBFbGxpcHNlQm91bmRpbmdCb3hEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25DbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSAxIC8qIEVsbGlwc2UgKi87XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEVsbGlwc2VCb3VuZGluZ0JveERhdGEucHJvdG90eXBlLmNvbnRhaW5zUG9pbnQgPSBmdW5jdGlvbiAocFgsIHBZKSB7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aEggPSB0aGlzLndpZHRoICogMC41O1xyXG4gICAgICAgICAgICBpZiAocFggPj0gLXdpZHRoSCAmJiBwWCA8PSB3aWR0aEgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHRIID0gdGhpcy5oZWlnaHQgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBpZiAocFkgPj0gLWhlaWdodEggJiYgcFkgPD0gaGVpZ2h0SCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBZICo9IHdpZHRoSCAvIGhlaWdodEg7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydChwWCAqIHBYICsgcFkgKiBwWSkgPD0gd2lkdGhIO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRWxsaXBzZUJvdW5kaW5nQm94RGF0YS5wcm90b3R5cGUuaW50ZXJzZWN0c1NlZ21lbnQgPSBmdW5jdGlvbiAoeEEsIHlBLCB4QiwgeUIsIGludGVyc2VjdGlvblBvaW50QSwgaW50ZXJzZWN0aW9uUG9pbnRCLCBub3JtYWxSYWRpYW5zKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEEgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEEgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEIgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zID09PSB2b2lkIDApIHsgbm9ybWFsUmFkaWFucyA9IG51bGw7IH1cclxuICAgICAgICAgICAgdmFyIGludGVyc2VjdGlvbkNvdW50ID0gRWxsaXBzZUJvdW5kaW5nQm94RGF0YS5lbGxpcHNlSW50ZXJzZWN0c1NlZ21lbnQoeEEsIHlBLCB4QiwgeUIsIDAuMCwgMC4wLCB0aGlzLndpZHRoICogMC41LCB0aGlzLmhlaWdodCAqIDAuNSwgaW50ZXJzZWN0aW9uUG9pbnRBLCBpbnRlcnNlY3Rpb25Qb2ludEIsIG5vcm1hbFJhZGlhbnMpO1xyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uQ291bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gRWxsaXBzZUJvdW5kaW5nQm94RGF0YTtcclxuICAgIH0oQm91bmRpbmdCb3hEYXRhKSk7XHJcbiAgICBkcmFnb25Cb25lcy5FbGxpcHNlQm91bmRpbmdCb3hEYXRhID0gRWxsaXBzZUJvdW5kaW5nQm94RGF0YTtcclxuICAgIC8qKlxyXG4gICAgICogLSBUaGUgcG9seWdvbiBib3VuZGluZyBib3ggZGF0YS5cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDlpJrovrnlvaLovrnnlYzmoYbmlbDmja7jgIJcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBQb2x5Z29uQm91bmRpbmdCb3hEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhQb2x5Z29uQm91bmRpbmdCb3hEYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFBvbHlnb25Cb3VuZGluZ0JveERhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgcG9seWdvbiB2ZXJ0aWNlcy5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4xXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5aSa6L655b2i6aG254K544CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnZlcnRpY2VzID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgUG9seWdvbkJvdW5kaW5nQm94RGF0YS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLlBvbHlnb25Cb3VuZGluZ0JveERhdGFdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFBvbHlnb25Cb3VuZGluZ0JveERhdGEucG9seWdvbkludGVyc2VjdHNTZWdtZW50ID0gZnVuY3Rpb24gKHhBLCB5QSwgeEIsIHlCLCB2ZXJ0aWNlcywgaW50ZXJzZWN0aW9uUG9pbnRBLCBpbnRlcnNlY3Rpb25Qb2ludEIsIG5vcm1hbFJhZGlhbnMpIHtcclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QSA9PT0gdm9pZCAwKSB7IGludGVyc2VjdGlvblBvaW50QSA9IG51bGw7IH1cclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QiA9PT0gdm9pZCAwKSB7IGludGVyc2VjdGlvblBvaW50QiA9IG51bGw7IH1cclxuICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgPT09IHZvaWQgMCkgeyBub3JtYWxSYWRpYW5zID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAoeEEgPT09IHhCKSB7XHJcbiAgICAgICAgICAgICAgICB4QSA9IHhCICsgMC4wMDAwMDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHlBID09PSB5Qikge1xyXG4gICAgICAgICAgICAgICAgeUEgPSB5QiArIDAuMDAwMDAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9IHZlcnRpY2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGRYQUIgPSB4QSAtIHhCO1xyXG4gICAgICAgICAgICB2YXIgZFlBQiA9IHlBIC0geUI7XHJcbiAgICAgICAgICAgIHZhciBsbEFCID0geEEgKiB5QiAtIHlBICogeEI7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25Db3VudCA9IDA7XHJcbiAgICAgICAgICAgIHZhciB4QyA9IHZlcnRpY2VzW2NvdW50IC0gMl07XHJcbiAgICAgICAgICAgIHZhciB5QyA9IHZlcnRpY2VzW2NvdW50IC0gMV07XHJcbiAgICAgICAgICAgIHZhciBkTWluID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgZE1heCA9IDAuMDtcclxuICAgICAgICAgICAgdmFyIHhNaW4gPSAwLjA7XHJcbiAgICAgICAgICAgIHZhciB5TWluID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgeE1heCA9IDAuMDtcclxuICAgICAgICAgICAgdmFyIHlNYXggPSAwLjA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHhEID0gdmVydGljZXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgeUQgPSB2ZXJ0aWNlc1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoeEMgPT09IHhEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeEMgPSB4RCArIDAuMDAwMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh5QyA9PT0geUQpIHtcclxuICAgICAgICAgICAgICAgICAgICB5QyA9IHlEICsgMC4wMDAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGRYQ0QgPSB4QyAtIHhEO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRZQ0QgPSB5QyAtIHlEO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxsQ0QgPSB4QyAqIHlEIC0geUMgKiB4RDtcclxuICAgICAgICAgICAgICAgIHZhciBsbCA9IGRYQUIgKiBkWUNEIC0gZFlBQiAqIGRYQ0Q7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IChsbEFCICogZFhDRCAtIGRYQUIgKiBsbENEKSAvIGxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKCgoeCA+PSB4QyAmJiB4IDw9IHhEKSB8fCAoeCA+PSB4RCAmJiB4IDw9IHhDKSkgJiYgKGRYQUIgPT09IDAuMCB8fCAoeCA+PSB4QSAmJiB4IDw9IHhCKSB8fCAoeCA+PSB4QiAmJiB4IDw9IHhBKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IChsbEFCICogZFlDRCAtIGRZQUIgKiBsbENEKSAvIGxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoKHkgPj0geUMgJiYgeSA8PSB5RCkgfHwgKHkgPj0geUQgJiYgeSA8PSB5QykpICYmIChkWUFCID09PSAwLjAgfHwgKHkgPj0geUEgJiYgeSA8PSB5QikgfHwgKHkgPj0geUIgJiYgeSA8PSB5QSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0geCAtIHhBO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gLWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkTWluID0gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkTWF4ID0gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4TWluID0geDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5TWluID0geTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4TWF4ID0geDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5TWF4ID0geTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxSYWRpYW5zLnggPSBNYXRoLmF0YW4yKHlEIC0geUMsIHhEIC0geEMpIC0gTWF0aC5QSSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFucy55ID0gbm9ybWFsUmFkaWFucy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIDwgZE1pbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkTWluID0gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeE1pbiA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlNaW4gPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFucy54ID0gTWF0aC5hdGFuMih5RCAtIHlDLCB4RCAtIHhDKSAtIE1hdGguUEkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPiBkTWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRNYXggPSBkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4TWF4ID0geDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeU1heCA9IHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxSYWRpYW5zLnkgPSBNYXRoLmF0YW4yKHlEIC0geUMsIHhEIC0geEMpIC0gTWF0aC5QSSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4TWluID0geDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlNaW4gPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeE1heCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5TWF4ID0geTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueCA9IE1hdGguYXRhbjIoeUQgLSB5QywgeEQgLSB4QykgLSBNYXRoLlBJICogMC41O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueSA9IG5vcm1hbFJhZGlhbnMueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgeEMgPSB4RDtcclxuICAgICAgICAgICAgICAgIHlDID0geUQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvbkNvdW50ID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnggPSB4TWluO1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50QS55ID0geU1pbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludEIueCA9IHhNaW47XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnkgPSB5TWluO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBub3JtYWxSYWRpYW5zLnkgPSBub3JtYWxSYWRpYW5zLnggKyBNYXRoLlBJO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGludGVyc2VjdGlvbkNvdW50ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uQ291bnQrKztcclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludEEueCA9IHhNaW47XHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnkgPSB5TWluO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50Qi54ID0geE1heDtcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludEIueSA9IHlNYXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvbkNvdW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgUG9seWdvbkJvdW5kaW5nQm94RGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gMiAvKiBQb2x5Z29uICovO1xyXG4gICAgICAgICAgICB0aGlzLnggPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGluaGVyaXREb2NcclxuICAgICAgICAgKi9cclxuICAgICAgICBQb2x5Z29uQm91bmRpbmdCb3hEYXRhLnByb3RvdHlwZS5jb250YWluc1BvaW50ID0gZnVuY3Rpb24gKHBYLCBwWSkge1xyXG4gICAgICAgICAgICB2YXIgaXNJblNpZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHBYID49IHRoaXMueCAmJiBwWCA8PSB0aGlzLndpZHRoICYmIHBZID49IHRoaXMueSAmJiBwWSA8PSB0aGlzLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCwgaVAgPSBsIC0gMjsgaSA8IGw7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5QSA9IHRoaXMudmVydGljZXNbaVAgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeUIgPSB0aGlzLnZlcnRpY2VzW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHlCIDwgcFkgJiYgeUEgPj0gcFkpIHx8ICh5QSA8IHBZICYmIHlCID49IHBZKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeEEgPSB0aGlzLnZlcnRpY2VzW2lQXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHhCID0gdGhpcy52ZXJ0aWNlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwWSAtIHlCKSAqICh4QSAtIHhCKSAvICh5QSAtIHlCKSArIHhCIDwgcFgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW5TaWRlID0gIWlzSW5TaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlQID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXNJblNpZGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW5oZXJpdERvY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFBvbHlnb25Cb3VuZGluZ0JveERhdGEucHJvdG90eXBlLmludGVyc2VjdHNTZWdtZW50ID0gZnVuY3Rpb24gKHhBLCB5QSwgeEIsIHlCLCBpbnRlcnNlY3Rpb25Qb2ludEEsIGludGVyc2VjdGlvblBvaW50Qiwgbm9ybWFsUmFkaWFucykge1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBID09PSB2b2lkIDApIHsgaW50ZXJzZWN0aW9uUG9pbnRBID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRCID09PSB2b2lkIDApIHsgaW50ZXJzZWN0aW9uUG9pbnRCID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyA9PT0gdm9pZCAwKSB7IG5vcm1hbFJhZGlhbnMgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25Db3VudCA9IDA7XHJcbiAgICAgICAgICAgIGlmIChSZWN0YW5nbGVCb3VuZGluZ0JveERhdGEucmVjdGFuZ2xlSW50ZXJzZWN0c1NlZ21lbnQoeEEsIHlBLCB4QiwgeUIsIHRoaXMueCwgdGhpcy55LCB0aGlzLnggKyB0aGlzLndpZHRoLCB0aGlzLnkgKyB0aGlzLmhlaWdodCwgbnVsbCwgbnVsbCwgbnVsbCkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvbkNvdW50ID0gUG9seWdvbkJvdW5kaW5nQm94RGF0YS5wb2x5Z29uSW50ZXJzZWN0c1NlZ21lbnQoeEEsIHlBLCB4QiwgeUIsIHRoaXMudmVydGljZXMsIGludGVyc2VjdGlvblBvaW50QSwgaW50ZXJzZWN0aW9uUG9pbnRCLCBub3JtYWxSYWRpYW5zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uQ291bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gUG9seWdvbkJvdW5kaW5nQm94RGF0YTtcclxuICAgIH0oQm91bmRpbmdCb3hEYXRhKSk7XHJcbiAgICBkcmFnb25Cb25lcy5Qb2x5Z29uQm91bmRpbmdCb3hEYXRhID0gUG9seWdvbkJvdW5kaW5nQm94RGF0YTtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIC0gVGhlIGFuaW1hdGlvbiBkYXRhLlxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOWKqOeUu+aVsOaNruOAglxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIEFuaW1hdGlvbkRhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEFuaW1hdGlvbkRhdGEsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQW5pbWF0aW9uRGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuY2FjaGVkRnJhbWVzID0gW107XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuYm9uZVRpbWVsaW5lcyA9IHt9O1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnN1cmZhY2VUaW1lbGluZXMgPSB7fTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5zbG90VGltZWxpbmVzID0ge307XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuY29uc3RyYWludFRpbWVsaW5lcyA9IHt9O1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvblRpbWVsaW5lcyA9IHt9O1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLmJvbmVDYWNoZWRGcmFtZUluZGljZXMgPSB7fTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5zbG90Q2FjaGVkRnJhbWVJbmRpY2VzID0ge307XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuYWN0aW9uVGltZWxpbmUgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnpPcmRlclRpbWVsaW5lID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBbmltYXRpb25EYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQW5pbWF0aW9uRGF0YV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuYm9uZVRpbWVsaW5lcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuYm9uZVRpbWVsaW5lc1trXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5ib25lVGltZWxpbmVzW2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5zdXJmYWNlVGltZWxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5zdXJmYWNlVGltZWxpbmVzW2tdOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN1cmZhY2VUaW1lbGluZXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLnNsb3RUaW1lbGluZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gMCwgX2UgPSB0aGlzLnNsb3RUaW1lbGluZXNba107IF9kIDwgX2UubGVuZ3RoOyBfZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gX2VbX2RdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2xvdFRpbWVsaW5lc1trXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuY29uc3RyYWludFRpbWVsaW5lcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2YgPSAwLCBfZyA9IHRoaXMuY29uc3RyYWludFRpbWVsaW5lc1trXTsgX2YgPCBfZy5sZW5ndGg7IF9mKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfZ1tfZl07XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jb25zdHJhaW50VGltZWxpbmVzW2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5hbmltYXRpb25UaW1lbGluZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9oID0gMCwgX2ogPSB0aGlzLmFuaW1hdGlvblRpbWVsaW5lc1trXTsgX2ggPCBfai5sZW5ndGg7IF9oKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfaltfaF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hbmltYXRpb25UaW1lbGluZXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLmJvbmVDYWNoZWRGcmFtZUluZGljZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJvbmVDYWNoZWRGcmFtZUluZGljZXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLnNsb3RDYWNoZWRGcmFtZUluZGljZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNsb3RDYWNoZWRGcmFtZUluZGljZXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aW9uVGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9uVGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuek9yZGVyVGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuek9yZGVyVGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5mcmFtZUludE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVGbG9hdE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlUaW1lcyA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuZHVyYXRpb24gPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMuZmFkZUluVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZUZyYW1lUmF0ZSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZWRGcmFtZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgLy8gdGhpcy5ib25lVGltZWxpbmVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc3VyZmFjZVRpbWVsaW5lcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnNsb3RUaW1lbGluZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgLy8gdGhpcy5jb25zdHJhaW50VGltZWxpbmVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuYW5pbWF0aW9uVGltZWxpbmVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuYm9uZUNhY2hlZEZyYW1lSW5kaWNlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnNsb3RDYWNoZWRGcmFtZUluZGljZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25UaW1lbGluZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuek9yZGVyVGltZWxpbmUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7IC8vXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25EYXRhLnByb3RvdHlwZS5jYWNoZUZyYW1lcyA9IGZ1bmN0aW9uIChmcmFtZVJhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVGcmFtZVJhdGUgPiAwLjApIHsgLy8gVE9ETyBjbGVhciBjYWNoZS5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlRnJhbWVSYXRlID0gTWF0aC5tYXgoTWF0aC5jZWlsKGZyYW1lUmF0ZSAqIHRoaXMuc2NhbGUpLCAxLjApO1xyXG4gICAgICAgICAgICB2YXIgY2FjaGVGcmFtZUNvdW50ID0gTWF0aC5jZWlsKHRoaXMuY2FjaGVGcmFtZVJhdGUgKiB0aGlzLmR1cmF0aW9uKSArIDE7IC8vIENhY2hlIG9uZSBtb3JlIGZyYW1lLlxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlZEZyYW1lcy5sZW5ndGggPSBjYWNoZUZyYW1lQ291bnQ7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5jYWNoZUZyYW1lcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkRnJhbWVzW2ldID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMucGFyZW50LnNvcnRlZEJvbmVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kaWNlcyA9IG5ldyBBcnJheShjYWNoZUZyYW1lQ291bnQpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNbaV0gPSAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuYm9uZUNhY2hlZEZyYW1lSW5kaWNlc1tib25lLm5hbWVdID0gaW5kaWNlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5wYXJlbnQuc29ydGVkU2xvdHM7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2VzID0gbmV3IEFycmF5KGNhY2hlRnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGluZGljZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlc1tpXSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zbG90Q2FjaGVkRnJhbWVJbmRpY2VzW3Nsb3QubmFtZV0gPSBpbmRpY2VzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLmFkZEJvbmVUaW1lbGluZSA9IGZ1bmN0aW9uIChib25lLCB0aW1lbGluZSkge1xyXG4gICAgICAgICAgICB2YXIgdGltZWxpbmVzID0gYm9uZS5uYW1lIGluIHRoaXMuYm9uZVRpbWVsaW5lcyA/IHRoaXMuYm9uZVRpbWVsaW5lc1tib25lLm5hbWVdIDogKHRoaXMuYm9uZVRpbWVsaW5lc1tib25lLm5hbWVdID0gW10pO1xyXG4gICAgICAgICAgICBpZiAodGltZWxpbmVzLmluZGV4T2YodGltZWxpbmUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLmFkZFN1cmZhY2VUaW1lbGluZSA9IGZ1bmN0aW9uIChzdXJmYWNlLCB0aW1lbGluZSkge1xyXG4gICAgICAgICAgICB2YXIgdGltZWxpbmVzID0gc3VyZmFjZS5uYW1lIGluIHRoaXMuc3VyZmFjZVRpbWVsaW5lcyA/IHRoaXMuc3VyZmFjZVRpbWVsaW5lc1tzdXJmYWNlLm5hbWVdIDogKHRoaXMuc3VyZmFjZVRpbWVsaW5lc1tzdXJmYWNlLm5hbWVdID0gW10pO1xyXG4gICAgICAgICAgICBpZiAodGltZWxpbmVzLmluZGV4T2YodGltZWxpbmUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLmFkZFNsb3RUaW1lbGluZSA9IGZ1bmN0aW9uIChzbG90LCB0aW1lbGluZSkge1xyXG4gICAgICAgICAgICB2YXIgdGltZWxpbmVzID0gc2xvdC5uYW1lIGluIHRoaXMuc2xvdFRpbWVsaW5lcyA/IHRoaXMuc2xvdFRpbWVsaW5lc1tzbG90Lm5hbWVdIDogKHRoaXMuc2xvdFRpbWVsaW5lc1tzbG90Lm5hbWVdID0gW10pO1xyXG4gICAgICAgICAgICBpZiAodGltZWxpbmVzLmluZGV4T2YodGltZWxpbmUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLmFkZENvbnN0cmFpbnRUaW1lbGluZSA9IGZ1bmN0aW9uIChjb25zdHJhaW50LCB0aW1lbGluZSkge1xyXG4gICAgICAgICAgICB2YXIgdGltZWxpbmVzID0gY29uc3RyYWludC5uYW1lIGluIHRoaXMuY29uc3RyYWludFRpbWVsaW5lcyA/IHRoaXMuY29uc3RyYWludFRpbWVsaW5lc1tjb25zdHJhaW50Lm5hbWVdIDogKHRoaXMuY29uc3RyYWludFRpbWVsaW5lc1tjb25zdHJhaW50Lm5hbWVdID0gW10pO1xyXG4gICAgICAgICAgICBpZiAodGltZWxpbmVzLmluZGV4T2YodGltZWxpbmUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLmFkZEFuaW1hdGlvblRpbWVsaW5lID0gZnVuY3Rpb24gKHRpbWVsaW5lTmFtZSwgdGltZWxpbmUpIHtcclxuICAgICAgICAgICAgdmFyIHRpbWVsaW5lcyA9IHRpbWVsaW5lTmFtZSBpbiB0aGlzLmFuaW1hdGlvblRpbWVsaW5lcyA/IHRoaXMuYW5pbWF0aW9uVGltZWxpbmVzW3RpbWVsaW5lTmFtZV0gOiAodGhpcy5hbmltYXRpb25UaW1lbGluZXNbdGltZWxpbmVOYW1lXSA9IFtdKTtcclxuICAgICAgICAgICAgaWYgKHRpbWVsaW5lcy5pbmRleE9mKHRpbWVsaW5lKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25EYXRhLnByb3RvdHlwZS5nZXRCb25lVGltZWxpbmVzID0gZnVuY3Rpb24gKHRpbWVsaW5lTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZWxpbmVOYW1lIGluIHRoaXMuYm9uZVRpbWVsaW5lcyA/IHRoaXMuYm9uZVRpbWVsaW5lc1t0aW1lbGluZU5hbWVdIDogbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uRGF0YS5wcm90b3R5cGUuZ2V0U3VyZmFjZVRpbWVsaW5lcyA9IGZ1bmN0aW9uICh0aW1lbGluZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRpbWVsaW5lTmFtZSBpbiB0aGlzLnN1cmZhY2VUaW1lbGluZXMgPyB0aGlzLnN1cmZhY2VUaW1lbGluZXNbdGltZWxpbmVOYW1lXSA6IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLmdldFNsb3RUaW1lbGluZXMgPSBmdW5jdGlvbiAodGltZWxpbmVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aW1lbGluZU5hbWUgaW4gdGhpcy5zbG90VGltZWxpbmVzID8gdGhpcy5zbG90VGltZWxpbmVzW3RpbWVsaW5lTmFtZV0gOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25EYXRhLnByb3RvdHlwZS5nZXRDb25zdHJhaW50VGltZWxpbmVzID0gZnVuY3Rpb24gKHRpbWVsaW5lTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZWxpbmVOYW1lIGluIHRoaXMuY29uc3RyYWludFRpbWVsaW5lcyA/IHRoaXMuY29uc3RyYWludFRpbWVsaW5lc1t0aW1lbGluZU5hbWVdIDogbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uRGF0YS5wcm90b3R5cGUuZ2V0QW5pbWF0aW9uVGltZWxpbmVzID0gZnVuY3Rpb24gKHRpbWVsaW5lTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZWxpbmVOYW1lIGluIHRoaXMuYW5pbWF0aW9uVGltZWxpbmVzID8gdGhpcy5hbmltYXRpb25UaW1lbGluZXNbdGltZWxpbmVOYW1lXSA6IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkRhdGEucHJvdG90eXBlLmdldEJvbmVDYWNoZWRGcmFtZUluZGljZXMgPSBmdW5jdGlvbiAoYm9uZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJvbmVOYW1lIGluIHRoaXMuYm9uZUNhY2hlZEZyYW1lSW5kaWNlcyA/IHRoaXMuYm9uZUNhY2hlZEZyYW1lSW5kaWNlc1tib25lTmFtZV0gOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25EYXRhLnByb3RvdHlwZS5nZXRTbG90Q2FjaGVkRnJhbWVJbmRpY2VzID0gZnVuY3Rpb24gKHNsb3ROYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzbG90TmFtZSBpbiB0aGlzLnNsb3RDYWNoZWRGcmFtZUluZGljZXMgPyB0aGlzLnNsb3RDYWNoZWRGcmFtZUluZGljZXNbc2xvdE5hbWVdIDogbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb25EYXRhO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5BbmltYXRpb25EYXRhID0gQW5pbWF0aW9uRGF0YTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBUaW1lbGluZURhdGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFRpbWVsaW5lRGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBUaW1lbGluZURhdGEoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgVGltZWxpbmVEYXRhLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuVGltZWxpbmVEYXRhXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVGltZWxpbmVEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gMTAgLyogQm9uZUFsbCAqLztcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lSW5kaWNlc09mZnNldCA9IC0xO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFRpbWVsaW5lRGF0YTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQmFzZU9iamVjdCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuVGltZWxpbmVEYXRhID0gVGltZWxpbmVEYXRhO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogLSBUaGUgYW5pbWF0aW9uIGNvbmZpZyBpcyB1c2VkIHRvIGRlc2NyaWJlIGFsbCB0aGUgaW5mb3JtYXRpb24gbmVlZGVkIHRvIHBsYXkgYW4gYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgICogVGhlIEFQSSBpcyBzdGlsbCBpbiB0aGUgZXhwZXJpbWVudGFsIHBoYXNlIGFuZCBtYXkgZW5jb3VudGVyIGJ1Z3Mgb3Igc3RhYmlsaXR5IG9yIGNvbXBhdGliaWxpdHkgaXNzdWVzIHdoZW4gdXNlZC5cclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uU3RhdGVcclxuICAgICAqIEBiZXRhXHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICovXHJcbiAgICAvKipcclxuICAgICAqIC0g5Yqo55S76YWN572u55So5p2l5o+P6L+w5pKt5pS+5LiA5Liq5Yqo55S754q25oCB5omA6ZyA6KaB55qE5YWo6YOo5L+h5oGv44CCXHJcbiAgICAgKiDor6UgQVBJIOS7jeWcqOWunumqjOmYtuaute+8jOS9v+eUqOaXtuWPr+iDvemBremBhyBidWcg5oiW56iz5a6a5oCn5oiW5YW85a655oCn6Zeu6aKY44CCXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvblN0YXRlXHJcbiAgICAgKiBAYmV0YVxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIEFuaW1hdGlvbkNvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQW5pbWF0aW9uQ29uZmlnLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEFuaW1hdGlvbkNvbmZpZygpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuYm9uZU1hc2sgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBbmltYXRpb25Db25maWcudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5BbmltYXRpb25Db25maWddXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25Db25maWcucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlRmFkZU91dCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmFkZU91dE1vZGUgPSA0IC8qIEFsbCAqLztcclxuICAgICAgICAgICAgdGhpcy5mYWRlT3V0VHdlZW5UeXBlID0gMSAvKiBMaW5lICovO1xyXG4gICAgICAgICAgICB0aGlzLmZhZGVPdXRUaW1lID0gLTEuMDtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25FbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5hZGRpdGl2ZUJsZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUNvbnRyb2wgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlRmFkZUluID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5yZXNldFRvUG9zZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmFkZUluVHdlZW5UeXBlID0gMSAvKiBMaW5lICovO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlUaW1lcyA9IC0xO1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyID0gMDtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5kdXJhdGlvbiA9IC0xLjA7XHJcbiAgICAgICAgICAgIHRoaXMudGltZVNjYWxlID0gLTEwMC4wO1xyXG4gICAgICAgICAgICB0aGlzLndlaWdodCA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy5mYWRlSW5UaW1lID0gLTEuMDtcclxuICAgICAgICAgICAgdGhpcy5hdXRvRmFkZU91dFRpbWUgPSAtMS4wO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmJvbmVNYXNrLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkNvbmZpZy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ2xlYXIoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uQ29uZmlnLnByb3RvdHlwZS5jb3B5RnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlRmFkZU91dCA9IHZhbHVlLnBhdXNlRmFkZU91dDtcclxuICAgICAgICAgICAgdGhpcy5mYWRlT3V0TW9kZSA9IHZhbHVlLmZhZGVPdXRNb2RlO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9GYWRlT3V0VGltZSA9IHZhbHVlLmF1dG9GYWRlT3V0VGltZTtcclxuICAgICAgICAgICAgdGhpcy5mYWRlT3V0VHdlZW5UeXBlID0gdmFsdWUuZmFkZU91dFR3ZWVuVHlwZTtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25FbmFibGVkID0gdmFsdWUuYWN0aW9uRW5hYmxlZDtcclxuICAgICAgICAgICAgdGhpcy5hZGRpdGl2ZUJsZW5kaW5nID0gdmFsdWUuYWRkaXRpdmVCbGVuZGluZztcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5Q29udHJvbCA9IHZhbHVlLmRpc3BsYXlDb250cm9sO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlRmFkZUluID0gdmFsdWUucGF1c2VGYWRlSW47XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRUb1Bvc2UgPSB2YWx1ZS5yZXNldFRvUG9zZTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5VGltZXMgPSB2YWx1ZS5wbGF5VGltZXM7XHJcbiAgICAgICAgICAgIHRoaXMubGF5ZXIgPSB2YWx1ZS5sYXllcjtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHZhbHVlLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gdmFsdWUuZHVyYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMudGltZVNjYWxlID0gdmFsdWUudGltZVNjYWxlO1xyXG4gICAgICAgICAgICB0aGlzLmZhZGVJblRpbWUgPSB2YWx1ZS5mYWRlSW5UaW1lO1xyXG4gICAgICAgICAgICB0aGlzLmZhZGVPdXRUaW1lID0gdmFsdWUuZmFkZU91dFRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmFkZUluVHdlZW5UeXBlID0gdmFsdWUuZmFkZUluVHdlZW5UeXBlO1xyXG4gICAgICAgICAgICB0aGlzLndlaWdodCA9IHZhbHVlLndlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gdmFsdWUubmFtZTtcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSB2YWx1ZS5hbmltYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAgPSB2YWx1ZS5ncm91cDtcclxuICAgICAgICAgICAgdGhpcy5ib25lTWFzay5sZW5ndGggPSB2YWx1ZS5ib25lTWFzay5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5ib25lTWFzay5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9uZU1hc2tbaV0gPSB2YWx1ZS5ib25lTWFza1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25Db25maWcucHJvdG90eXBlLmNvbnRhaW5zQm9uZU1hc2sgPSBmdW5jdGlvbiAoYm9uZU5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9uZU1hc2subGVuZ3RoID09PSAwIHx8IHRoaXMuYm9uZU1hc2suaW5kZXhPZihib25lTmFtZSkgPj0gMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uQ29uZmlnLnByb3RvdHlwZS5hZGRCb25lTWFzayA9IGZ1bmN0aW9uIChhcm1hdHVyZSwgYm9uZU5hbWUsIHJlY3Vyc2l2ZSkge1xyXG4gICAgICAgICAgICBpZiAocmVjdXJzaXZlID09PSB2b2lkIDApIHsgcmVjdXJzaXZlID0gdHJ1ZTsgfVxyXG4gICAgICAgICAgICB2YXIgY3VycmVudEJvbmUgPSBhcm1hdHVyZS5nZXRCb25lKGJvbmVOYW1lKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRCb25lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuYm9uZU1hc2suaW5kZXhPZihib25lTmFtZSkgPCAwKSB7IC8vIEFkZCBtaXhpbmdcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9uZU1hc2sucHVzaChib25lTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSkgeyAvLyBBZGQgcmVjdXJzaXZlIG1peGluZy5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBhcm1hdHVyZS5nZXRCb25lcygpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvbmVNYXNrLmluZGV4T2YoYm9uZS5uYW1lKSA8IDAgJiYgY3VycmVudEJvbmUuY29udGFpbnMoYm9uZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib25lTWFzay5wdXNoKGJvbmUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbkNvbmZpZy5wcm90b3R5cGUucmVtb3ZlQm9uZU1hc2sgPSBmdW5jdGlvbiAoYXJtYXR1cmUsIGJvbmVOYW1lLCByZWN1cnNpdmUpIHtcclxuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IHRydWU7IH1cclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5ib25lTWFzay5pbmRleE9mKGJvbmVOYW1lKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHsgLy8gUmVtb3ZlIG1peGluZy5cclxuICAgICAgICAgICAgICAgIHRoaXMuYm9uZU1hc2suc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVjdXJzaXZlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEJvbmUgPSBhcm1hdHVyZS5nZXRCb25lKGJvbmVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Qm9uZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJvbmVNYXNrLmxlbmd0aCA+IDApIHsgLy8gUmVtb3ZlIHJlY3Vyc2l2ZSBtaXhpbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBhcm1hdHVyZS5nZXRCb25lcygpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhfMSA9IHRoaXMuYm9uZU1hc2suaW5kZXhPZihib25lLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4XzEgPj0gMCAmJiBjdXJyZW50Qm9uZS5jb250YWlucyhib25lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9uZU1hc2suc3BsaWNlKGluZGV4XzEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBBZGQgdW5yZWN1cnNpdmUgbWl4aW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gYXJtYXR1cmUuZ2V0Qm9uZXMoKTsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvbmUgPT09IGN1cnJlbnRCb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRCb25lLmNvbnRhaW5zKGJvbmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib25lTWFzay5wdXNoKGJvbmUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb25Db25maWc7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLkFuaW1hdGlvbkNvbmZpZyA9IEFuaW1hdGlvbkNvbmZpZztcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIC0gVGhlIHRleHR1cmUgYXRsYXMgZGF0YS5cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDotLTlm77pm4bmlbDmja7jgIJcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBUZXh0dXJlQXRsYXNEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhUZXh0dXJlQXRsYXNEYXRhLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFRleHR1cmVBdGxhc0RhdGEoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLnRleHR1cmVzID0ge307XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgVGV4dHVyZUF0bGFzRGF0YS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy50ZXh0dXJlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlc1trXS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRleHR1cmVzW2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYXV0b1NlYXJjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlID0gMS4wO1xyXG4gICAgICAgICAgICAvLyB0aGlzLnRleHR1cmVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VQYXRoID0gXCJcIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVGV4dHVyZUF0bGFzRGF0YS5wcm90b3R5cGUuY29weUZyb20gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5hdXRvU2VhcmNoID0gdmFsdWUuYXV0b1NlYXJjaDtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZSA9IHZhbHVlLnNjYWxlO1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdmFsdWUud2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdmFsdWUuaGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSB2YWx1ZS5uYW1lO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlUGF0aCA9IHZhbHVlLmltYWdlUGF0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLnRleHR1cmVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHR1cmVzW2tdLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudGV4dHVyZXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGhpcy50ZXh0dXJlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHZhbHVlLnRleHR1cmVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZSA9IHRoaXMuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgICAgICAgICAgdGV4dHVyZS5jb3B5RnJvbSh2YWx1ZS50ZXh0dXJlc1trXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHR1cmVzW2tdID0gdGV4dHVyZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVGV4dHVyZUF0bGFzRGF0YS5wcm90b3R5cGUuYWRkVGV4dHVyZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUubmFtZSBpbiB0aGlzLnRleHR1cmVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTYW1lIHRleHR1cmU6IFwiICsgdmFsdWUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFsdWUucGFyZW50ID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy50ZXh0dXJlc1t2YWx1ZS5uYW1lXSA9IHZhbHVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBUZXh0dXJlQXRsYXNEYXRhLnByb3RvdHlwZS5nZXRUZXh0dXJlID0gZnVuY3Rpb24gKHRleHR1cmVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlTmFtZSBpbiB0aGlzLnRleHR1cmVzID8gdGhpcy50ZXh0dXJlc1t0ZXh0dXJlTmFtZV0gOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFRleHR1cmVBdGxhc0RhdGE7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLlRleHR1cmVBdGxhc0RhdGEgPSBUZXh0dXJlQXRsYXNEYXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIFRleHR1cmVEYXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhUZXh0dXJlRGF0YSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBUZXh0dXJlRGF0YSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLnJlZ2lvbiA9IG5ldyBkcmFnb25Cb25lcy5SZWN0YW5nbGUoKTtcclxuICAgICAgICAgICAgX3RoaXMuZnJhbWUgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFRleHR1cmVEYXRhLmNyZWF0ZVJlY3RhbmdsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBkcmFnb25Cb25lcy5SZWN0YW5nbGUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRleHR1cmVEYXRhLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3RhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaW9uLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5mcmFtZSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUZXh0dXJlRGF0YS5wcm90b3R5cGUuY29weUZyb20gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3RhdGVkID0gdmFsdWUucm90YXRlZDtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gdmFsdWUubmFtZTtcclxuICAgICAgICAgICAgdGhpcy5yZWdpb24uY29weUZyb20odmFsdWUucmVnaW9uKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSB2YWx1ZS5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZyYW1lID09PSBudWxsICYmIHZhbHVlLmZyYW1lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lID0gVGV4dHVyZURhdGEuY3JlYXRlUmVjdGFuZ2xlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5mcmFtZSAhPT0gbnVsbCAmJiB2YWx1ZS5mcmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWUgIT09IG51bGwgJiYgdmFsdWUuZnJhbWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWUuY29weUZyb20odmFsdWUuZnJhbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gVGV4dHVyZURhdGE7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLlRleHR1cmVEYXRhID0gVGV4dHVyZURhdGE7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIERlZm9ybVZlcnRpY2VzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhEZWZvcm1WZXJ0aWNlcywgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBEZWZvcm1WZXJ0aWNlcygpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLnZlcnRpY2VzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLmJvbmVzID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgRGVmb3JtVmVydGljZXMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5EZWZvcm1WZXJ0aWNlc11cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIERlZm9ybVZlcnRpY2VzLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlc0RpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5ib25lcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2VzRGF0YSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEZWZvcm1WZXJ0aWNlcy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICh2ZXJ0aWNlc0RhdGFWYWx1ZSwgYXJtYXR1cmUpIHtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0aWNlc0RhdGEgPSB2ZXJ0aWNlc0RhdGFWYWx1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljZXNEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmVydGV4Q291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmVydGljZXNEYXRhLndlaWdodCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleENvdW50ID0gdGhpcy52ZXJ0aWNlc0RhdGEud2VpZ2h0LmNvdW50ICogMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleENvdW50ID0gdGhpcy52ZXJ0aWNlc0RhdGEuZGF0YS5pbnRBcnJheVt0aGlzLnZlcnRpY2VzRGF0YS5vZmZzZXQgKyAwIC8qIE1lc2hWZXJ0ZXhDb3VudCAqL10gKiAyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNlc0RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXMubGVuZ3RoID0gdmVydGV4Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvbmVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXNbaV0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52ZXJ0aWNlc0RhdGEud2VpZ2h0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnZlcnRpY2VzRGF0YS53ZWlnaHQuYm9uZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gYXJtYXR1cmUuZ2V0Qm9uZSh0aGlzLnZlcnRpY2VzRGF0YS53ZWlnaHQuYm9uZXNbaV0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9uZXMucHVzaChib25lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnRpY2VzRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9uZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVydGljZXNEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRGVmb3JtVmVydGljZXMucHJvdG90eXBlLmlzQm9uZXNVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmJvbmVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9uZSAhPT0gbnVsbCAmJiBib25lLl9jaGlsZHJlblRyYW5zZm9ybURpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIERlZm9ybVZlcnRpY2VzO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5EZWZvcm1WZXJ0aWNlcyA9IERlZm9ybVZlcnRpY2VzO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXNfMSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIEFybWF0dXJlIGlzIHRoZSBjb3JlIG9mIHRoZSBza2VsZXRvbiBhbmltYXRpb24gc3lzdGVtLlxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQm9uZVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90XHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvblxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOmqqOaetuaYr+mqqOmqvOWKqOeUu+ezu+e7n+eahOaguOW/g+OAglxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQm9uZVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90XHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvblxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIEFybWF0dXJlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhBcm1hdHVyZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBBcm1hdHVyZSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLl9ib25lcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fc2xvdHMgPSBbXTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuX2NvbnN0cmFpbnRzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9hY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9hbmltYXRpb24gPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICBfdGhpcy5fcHJveHkgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVwbGFjZVRleHR1cmVBdGxhc0RhdGEgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICBfdGhpcy5fY2xvY2sgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEFybWF0dXJlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQXJtYXR1cmVdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBcm1hdHVyZS5fb25Tb3J0U2xvdHMgPSBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5fek9yZGVyID4gYi5fek9yZGVyID8gMSA6IC0xO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2xvY2sgIT09IG51bGwpIHsgLy8gUmVtb3ZlIGNsb2NrIGZpcnN0LlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xvY2sucmVtb3ZlKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9ib25lczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBib25lID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgYm9uZS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5fc2xvdHM7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgIHNsb3QucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2QgPSAwLCBfZSA9IHRoaXMuX2NvbnN0cmFpbnRzOyBfZCA8IF9lLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBfZVtfZF07XHJcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50LnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9mID0gMCwgX2cgPSB0aGlzLl9hY3Rpb25zOyBfZiA8IF9nLmxlbmd0aDsgX2YrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IF9nW19mXTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb24ucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Byb3h5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm94eS5kYkNsZWFyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlcGxhY2VUZXh0dXJlQXRsYXNEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXBsYWNlVGV4dHVyZUF0bGFzRGF0YS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmluaGVyaXRBbmltYXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbG9ja1VwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9zbG90c0RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fek9yZGVyRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fZmxpcFggPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fZmxpcFkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fY2FjaGVGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuX2JvbmVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nsb3RzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnN0cmFpbnRzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmVEYXRhID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fcHJveHkgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fcmVwbGFjZVRleHR1cmVBdGxhc0RhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9yZXBsYWNlZFRleHR1cmUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnb25Cb25lcyA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2Nsb2NrID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5fc29ydFpPcmRlciA9IGZ1bmN0aW9uIChzbG90SW5kaWNlcywgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHZhciBzbG90RGF0YXMgPSB0aGlzLl9hcm1hdHVyZURhdGEuc29ydGVkU2xvdHM7XHJcbiAgICAgICAgICAgIHZhciBpc09yaWdpbmFsID0gc2xvdEluZGljZXMgPT09IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl96T3JkZXJEaXJ0eSB8fCAhaXNPcmlnaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzbG90RGF0YXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsb3RJbmRleCA9IGlzT3JpZ2luYWwgPyBpIDogc2xvdEluZGljZXNbb2Zmc2V0ICsgaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsb3RJbmRleCA8IDAgfHwgc2xvdEluZGV4ID49IGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbG90RGF0YSA9IHNsb3REYXRhc1tzbG90SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbG90ID0gdGhpcy5nZXRTbG90KHNsb3REYXRhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbG90ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QuX3NldFpvcmRlcihpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zbG90c0RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3pPcmRlckRpcnR5ID0gIWlzT3JpZ2luYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5fYWRkQm9uZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYm9uZXMuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ib25lcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLl9hZGRTbG90ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zbG90cy5pbmRleE9mKHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RzLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZS5wcm90b3R5cGUuX2FkZENvbnN0cmFpbnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnN0cmFpbnRzLmluZGV4T2YodmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uc3RyYWludHMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5fYnVmZmVyQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbiwgYXBwZW5kKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb25zLmluZGV4T2YoYWN0aW9uKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25zLnB1c2goYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMudW5zaGlmdChhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIERpc3Bvc2UgdGhlIGFybWF0dXJlLiAoUmV0dXJuIHRvIHRoZSBvYmplY3QgcG9vbClcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICogICAgIHJlbW92ZUNoaWxkKGFybWF0dXJlLmRpc3BsYXkpO1xyXG4gICAgICAgICAqICAgICBhcm1hdHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDph4rmlL7pqqjmnrbjgIIg77yI5Zue5pS25Yiw5a+56LGh5rGg77yJXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICByZW1vdmVDaGlsZChhcm1hdHVyZS5kaXNwbGF5KTtcclxuICAgICAgICAgKiAgICAgYXJtYXR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXJtYXR1cmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NrVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzLmJ1ZmZlck9iamVjdCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoYXJtYXR1cmVEYXRhLCBwcm94eSwgZGlzcGxheSwgZHJhZ29uQm9uZXMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FybWF0dXJlRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlRGF0YSA9IGFybWF0dXJlRGF0YTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uID0gZHJhZ29uQm9uZXNfMS5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lc18xLkFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb3h5ID0gcHJveHk7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXkgPSBkaXNwbGF5O1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnb25Cb25lcyA9IGRyYWdvbkJvbmVzO1xyXG4gICAgICAgICAgICB0aGlzLl9wcm94eS5kYkluaXQodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5pbml0KHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb24uYW5pbWF0aW9ucyA9IHRoaXMuX2FybWF0dXJlRGF0YS5hbmltYXRpb25zO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGluaGVyaXREb2NcclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZS5wcm90b3R5cGUuYWR2YW5jZVRpbWUgPSBmdW5jdGlvbiAocGFzc2VkVGltZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbG9ja1VwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hcm1hdHVyZURhdGEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZSBhcm1hdHVyZSBoYXMgYmVlbiBkaXNwb3NlZC5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fYXJtYXR1cmVEYXRhLnBhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhlIGFybWF0dXJlIGRhdGEgaGFzIGJlZW4gZGlzcG9zZWQuXFxuUGxlYXNlIG1ha2Ugc3VyZSBkaXNwb3NlIGFybWF0dXJlIGJlZm9yZSBjYWxsIGZhY3RvcnkuY2xlYXIoKS5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHByZXZDYWNoZUZyYW1lSW5kZXggPSB0aGlzLl9jYWNoZUZyYW1lSW5kZXg7XHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBhbmltYXRpb24uXHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZHZhbmNlVGltZShwYXNzZWRUaW1lKTtcclxuICAgICAgICAgICAgLy8gU29ydCBzbG90cy5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Nsb3RzRGlydHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RzRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RzLnNvcnQoQXJtYXR1cmUuX29uU29ydFNsb3RzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgYm9uZXMgYW5kIHNsb3RzLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVGcmFtZUluZGV4IDwgMCB8fCB0aGlzLl9jYWNoZUZyYW1lSW5kZXggIT09IHByZXZDYWNoZUZyYW1lSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gMCwgbCA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5fYm9uZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9uZXNbaV0udXBkYXRlKHRoaXMuX2NhY2hlRnJhbWVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5fc2xvdHMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2xvdHNbaV0udXBkYXRlKHRoaXMuX2NhY2hlRnJhbWVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRG8gYWN0aW9ucy5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9ja1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYWN0aW9uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25EYXRhID0gYWN0aW9uLmFjdGlvbkRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkRhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbkRhdGEudHlwZSA9PT0gMCAvKiBQbGF5ICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLnNsb3QgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRBcm1hdHVyZSA9IGFjdGlvbi5zbG90LmNoaWxkQXJtYXR1cmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkQXJtYXR1cmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRBcm1hdHVyZS5hbmltYXRpb24uZmFkZUluKGFjdGlvbkRhdGEubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWN0aW9uLmJvbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5nZXRTbG90cygpOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNsb3QucGFyZW50ID09PSBhY3Rpb24uYm9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkQXJtYXR1cmUgPSBzbG90LmNoaWxkQXJtYXR1cmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRBcm1hdHVyZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkQXJtYXR1cmUuYW5pbWF0aW9uLmZhZGVJbihhY3Rpb25EYXRhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uLmZhZGVJbihhY3Rpb25EYXRhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2tVcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9wcm94eS5kYlVwZGF0ZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBGb3JjZXMgYSBzcGVjaWZpYyBib25lIG9yIGl0cyBvd25pbmcgc2xvdCB0byB1cGRhdGUgdGhlIHRyYW5zZm9ybSBvciBkaXNwbGF5IHByb3BlcnR5IGluIHRoZSBuZXh0IGZyYW1lLlxyXG4gICAgICAgICAqIEBwYXJhbSBib25lTmFtZSAtIFRoZSBib25lIG5hbWUuIChJZiBub3Qgc2V0LCBhbGwgYm9uZXMgd2lsbCBiZSB1cGRhdGUpXHJcbiAgICAgICAgICogQHBhcmFtIHVwZGF0ZVNsb3QgLSBXaGV0aGVyIHRvIHVwZGF0ZSB0aGUgYm9uZSdzIHNsb3RzLiAoRGVmYXVsdDogZmFsc2UpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Cb25lI2ludmFsaWRVcGRhdGUoKVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdCNpbnZhbGlkVXBkYXRlKClcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW8uuWItueJueWumumqqOmqvOaIluWFtuaLpeacieeahOaPkuanveWcqOS4i+S4gOW4p+abtOaWsOWPmOaNouaIluaYvuekuuWxnuaAp+OAglxyXG4gICAgICAgICAqIEBwYXJhbSBib25lTmFtZSAtIOmqqOmqvOWQjeensOOAgiDvvIjlpoLmnpzmnKrorr7nva7vvIzlsIbmm7TmlrDmiYDmnInpqqjpqrzvvIlcclxuICAgICAgICAgKiBAcGFyYW0gdXBkYXRlU2xvdCAtIOaYr+WQpuabtOaWsOmqqOmqvOeahOaPkuanveOAgiDvvIjpu5jorqQ6IGZhbHNl77yJXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Cb25lI2ludmFsaWRVcGRhdGUoKVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdCNpbnZhbGlkVXBkYXRlKClcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZS5wcm90b3R5cGUuaW52YWxpZFVwZGF0ZSA9IGZ1bmN0aW9uIChib25lTmFtZSwgdXBkYXRlU2xvdCkge1xyXG4gICAgICAgICAgICBpZiAoYm9uZU5hbWUgPT09IHZvaWQgMCkgeyBib25lTmFtZSA9IG51bGw7IH1cclxuICAgICAgICAgICAgaWYgKHVwZGF0ZVNsb3QgPT09IHZvaWQgMCkgeyB1cGRhdGVTbG90ID0gZmFsc2U7IH1cclxuICAgICAgICAgICAgaWYgKGJvbmVOYW1lICE9PSBudWxsICYmIGJvbmVOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBib25lID0gdGhpcy5nZXRCb25lKGJvbmVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChib25lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9uZS5pbnZhbGlkVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVNsb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX3Nsb3RzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsb3QgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xvdC5wYXJlbnQgPT09IGJvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90LmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLl9ib25lczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZSA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgICAgICBib25lLmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVTbG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2QgPSAwLCBfZSA9IHRoaXMuX3Nsb3RzOyBfZCA8IF9lLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9lW19kXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdC5pbnZhbGlkVXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENoZWNrIHdoZXRoZXIgYSBzcGVjaWZpYyBwb2ludCBpcyBpbnNpZGUgYSBjdXN0b20gYm91bmRpbmcgYm94IGluIGEgc2xvdC5cclxuICAgICAgICAgKiBUaGUgY29vcmRpbmF0ZSBzeXN0ZW0gb2YgdGhlIHBvaW50IGlzIHRoZSBpbm5lciBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgYXJtYXR1cmUuXHJcbiAgICAgICAgICogQ3VzdG9tIGJvdW5kaW5nIGJveGVzIG5lZWQgdG8gYmUgY3VzdG9taXplZCBpbiBEcmFnb25ib25lcyBQcm8uXHJcbiAgICAgICAgICogQHBhcmFtIHggLSBUaGUgaG9yaXpvbnRhbCBjb29yZGluYXRlIG9mIHRoZSBwb2ludC5cclxuICAgICAgICAgKiBAcGFyYW0geSAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIG9mIHRoZSBwb2ludC5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOajgOafpeeJueWumueCueaYr+WQpuWcqOafkOS4quaPkuanveeahOiHquWumuS5iei+ueeVjOahhuWGheOAglxyXG4gICAgICAgICAqIOeCueeahOWdkOagh+ezu+S4uumqqOaetuWGheWdkOagh+ezu+OAglxyXG4gICAgICAgICAqIOiHquWumuS5iei+ueeVjOahhumcgOimgeWcqCBEcmFnb25Cb25lcyBQcm8g5Lit6Ieq5a6a5LmJ44CCXHJcbiAgICAgICAgICogQHBhcmFtIHggLSDngrnnmoTmsLTlubPlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0geSAtIOeCueeahOWeguebtOWdkOagh+OAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5jb250YWluc1BvaW50ID0gZnVuY3Rpb24gKHgsIHkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX3Nsb3RzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsb3QgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoc2xvdC5jb250YWluc1BvaW50KHgsIHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsb3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENoZWNrIHdoZXRoZXIgYSBzcGVjaWZpYyBzZWdtZW50IGludGVyc2VjdHMgYSBjdXN0b20gYm91bmRpbmcgYm94IGZvciBhIHNsb3QgaW4gdGhlIGFybWF0dXJlLlxyXG4gICAgICAgICAqIFRoZSBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgc2VnbWVudCBhbmQgaW50ZXJzZWN0aW9uIGlzIHRoZSBpbm5lciBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgYXJtYXR1cmUuXHJcbiAgICAgICAgICogQ3VzdG9tIGJvdW5kaW5nIGJveGVzIG5lZWQgdG8gYmUgY3VzdG9taXplZCBpbiBEcmFnb25ib25lcyBQcm8uXHJcbiAgICAgICAgICogQHBhcmFtIHhBIC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZSBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWdtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB5QSAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlZ21lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHhCIC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50IG9mIHRoZSBzZWdtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB5QiAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIG9mIHRoZSBlbmQgcG9pbnQgb2YgdGhlIHNlZ21lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIGludGVyc2VjdGlvblBvaW50QSAtIFRoZSBmaXJzdCBpbnRlcnNlY3Rpb24gYXQgd2hpY2ggYSBsaW5lIHNlZ21lbnQgaW50ZXJzZWN0cyB0aGUgYm91bmRpbmcgYm94IGZyb20gdGhlIGJlZ2lubmluZyB0byB0aGUgZW5kLiAoSWYgbm90IHNldCwgdGhlIGludGVyc2VjdGlvbiBwb2ludCB3aWxsIG5vdCBjYWxjdWxhdGVkKVxyXG4gICAgICAgICAqIEBwYXJhbSBpbnRlcnNlY3Rpb25Qb2ludEIgLSBUaGUgZmlyc3QgaW50ZXJzZWN0aW9uIGF0IHdoaWNoIGEgbGluZSBzZWdtZW50IGludGVyc2VjdHMgdGhlIGJvdW5kaW5nIGJveCBmcm9tIHRoZSBlbmQgdG8gdGhlIGJlZ2lubmluZy4gKElmIG5vdCBzZXQsIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgd2lsbCBub3QgY2FsY3VsYXRlZClcclxuICAgICAgICAgKiBAcGFyYW0gbm9ybWFsUmFkaWFucyAtIFRoZSBub3JtYWwgcmFkaWFucyBvZiB0aGUgdGFuZ2VudCBvZiB0aGUgaW50ZXJzZWN0aW9uIGJvdW5kYXJ5IGJveC4gW3g6IE5vcm1hbCByYWRpYW4gb2YgdGhlIGZpcnN0IGludGVyc2VjdGlvbiB0YW5nZW50LCB5OiBOb3JtYWwgcmFkaWFuIG9mIHRoZSBzZWNvbmQgaW50ZXJzZWN0aW9uIHRhbmdlbnRdIChJZiBub3Qgc2V0LCB0aGUgbm9ybWFsIHdpbGwgbm90IGNhbGN1bGF0ZWQpXHJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHNsb3Qgb2YgdGhlIGZpcnN0IGN1c3RvbSBib3VuZGluZyBib3ggd2hlcmUgdGhlIHNlZ21lbnQgaW50ZXJzZWN0cyBmcm9tIHRoZSBzdGFydCBwb2ludCB0byB0aGUgZW5kIHBvaW50LlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5qOA5p+l54m55a6a57q/5q615piv5ZCm5LiO6aqo5p6255qE5p+Q5Liq5o+S5qe955qE6Ieq5a6a5LmJ6L6555WM5qGG55u45Lqk44CCXHJcbiAgICAgICAgICog57q/5q615ZKM5Lqk54K555qE5Z2Q5qCH57O75Z2H5Li66aqo5p625YaF5Z2Q5qCH57O744CCXHJcbiAgICAgICAgICog6Ieq5a6a5LmJ6L6555WM5qGG6ZyA6KaB5ZyoIERyYWdvbkJvbmVzIFBybyDkuK3oh6rlrprkuYnjgIJcclxuICAgICAgICAgKiBAcGFyYW0geEEgLSDnur/mrrXotbfngrnnmoTmsLTlubPlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0geUEgLSDnur/mrrXotbfngrnnmoTlnoLnm7TlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0geEIgLSDnur/mrrXnu4jngrnnmoTmsLTlubPlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0geUIgLSDnur/mrrXnu4jngrnnmoTlnoLnm7TlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0gaW50ZXJzZWN0aW9uUG9pbnRBIC0g57q/5q615LuO6LW354K55Yiw57uI54K55LiO6L6555WM5qGG55u45Lqk55qE56ys5LiA5Liq5Lqk54K544CCIO+8iOWmguaenOacquiuvue9ru+8jOWImeS4jeiuoeeul+S6pOeCue+8iVxyXG4gICAgICAgICAqIEBwYXJhbSBpbnRlcnNlY3Rpb25Qb2ludEIgLSDnur/mrrXku47nu4jngrnliLDotbfngrnkuI7ovrnnlYzmoYbnm7jkuqTnmoTnrKzkuIDkuKrkuqTngrnjgIIg77yI5aaC5p6c5pyq6K6+572u77yM5YiZ5LiN6K6h566X5Lqk54K577yJXHJcbiAgICAgICAgICogQHBhcmFtIG5vcm1hbFJhZGlhbnMgLSDkuqTngrnovrnnlYzmoYbliIfnur/nmoTms5Xnur/lvKfluqbjgIIgW3g6IOesrOS4gOS4quS6pOeCueWIh+e6v+eahOazlee6v+W8p+W6piwgeTog56ys5LqM5Liq5Lqk54K55YiH57q/55qE5rOV57q/5byn5bqmXSDvvIjlpoLmnpzmnKrorr7nva7vvIzliJnkuI3orqHnrpfms5Xnur/vvIlcclxuICAgICAgICAgKiBAcmV0dXJucyDnur/mrrXku47otbfngrnliLDnu4jngrnnm7jkuqTnmoTnrKzkuIDkuKroh6rlrprkuYnovrnnlYzmoYbnmoTmj5Lmp73jgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZS5wcm90b3R5cGUuaW50ZXJzZWN0c1NlZ21lbnQgPSBmdW5jdGlvbiAoeEEsIHlBLCB4QiwgeUIsIGludGVyc2VjdGlvblBvaW50QSwgaW50ZXJzZWN0aW9uUG9pbnRCLCBub3JtYWxSYWRpYW5zKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEEgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEEgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Qb2ludEIgPT09IHZvaWQgMCkgeyBpbnRlcnNlY3Rpb25Qb2ludEIgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zID09PSB2b2lkIDApIHsgbm9ybWFsUmFkaWFucyA9IG51bGw7IH1cclxuICAgICAgICAgICAgdmFyIGlzViA9IHhBID09PSB4QjtcclxuICAgICAgICAgICAgdmFyIGRNaW4gPSAwLjA7XHJcbiAgICAgICAgICAgIHZhciBkTWF4ID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgaW50WEEgPSAwLjA7XHJcbiAgICAgICAgICAgIHZhciBpbnRZQSA9IDAuMDtcclxuICAgICAgICAgICAgdmFyIGludFhCID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgaW50WUIgPSAwLjA7XHJcbiAgICAgICAgICAgIHZhciBpbnRBTiA9IDAuMDtcclxuICAgICAgICAgICAgdmFyIGludEJOID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgaW50U2xvdEEgPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgaW50U2xvdEIgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fc2xvdHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25Db3VudCA9IHNsb3QuaW50ZXJzZWN0c1NlZ21lbnQoeEEsIHlBLCB4QiwgeUIsIGludGVyc2VjdGlvblBvaW50QSwgaW50ZXJzZWN0aW9uUG9pbnRCLCBub3JtYWxSYWRpYW5zKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnRlcnNlY3Rpb25Db3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsIHx8IGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGlzViA/IGludGVyc2VjdGlvblBvaW50QS55IC0geUEgOiBpbnRlcnNlY3Rpb25Qb2ludEEueCAtIHhBO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gLWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50U2xvdEEgPT09IG51bGwgfHwgZCA8IGRNaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkTWluID0gZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRYQSA9IGludGVyc2VjdGlvblBvaW50QS54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludFlBID0gaW50ZXJzZWN0aW9uUG9pbnRBLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50U2xvdEEgPSBzbG90O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludEFOID0gbm9ybWFsUmFkaWFucy54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRCICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGludGVyc2VjdGlvblBvaW50Qi54IC0geEE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAtZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnRTbG90QiA9PT0gbnVsbCB8fCBkID4gZE1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRNYXggPSBkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludFhCID0gaW50ZXJzZWN0aW9uUG9pbnRCLng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50WUIgPSBpbnRlcnNlY3Rpb25Qb2ludEIueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRTbG90QiA9IHNsb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50Qk4gPSBub3JtYWxSYWRpYW5zLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRTbG90QSA9IHNsb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW50U2xvdEEgIT09IG51bGwgJiYgaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25Qb2ludEEueCA9IGludFhBO1xyXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRBLnkgPSBpbnRZQTtcclxuICAgICAgICAgICAgICAgIGlmIChub3JtYWxSYWRpYW5zICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsUmFkaWFucy54ID0gaW50QU47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGludFNsb3RCICE9PSBudWxsICYmIGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnggPSBpbnRYQjtcclxuICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50Qi55ID0gaW50WUI7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueSA9IGludEJOO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpbnRTbG90QTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gR2V0IGEgc3BlY2lmaWMgYm9uZS5cclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBib25lIG5hbWUuXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Cb25lXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDojrflj5bnibnlrprnmoTpqqjpqrzjgIJcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIOmqqOmqvOWQjeensOOAglxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQm9uZVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5nZXRCb25lID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2JvbmVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9uZS5uYW1lID09PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvbmU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEdldCBhIHNwZWNpZmljIGJvbmUgYnkgdGhlIGRpc3BsYXkuXHJcbiAgICAgICAgICogQHBhcmFtIGRpc3BsYXkgLSBUaGUgZGlzcGxheSBvYmplY3QuXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Cb25lXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDpgJrov4fmmL7npLrlr7nosaHojrflj5bnibnlrprnmoTpqqjpqrzjgIJcclxuICAgICAgICAgKiBAcGFyYW0gZGlzcGxheSAtIOaYvuekuuWvueixoeOAglxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQm9uZVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5nZXRCb25lQnlEaXNwbGF5ID0gZnVuY3Rpb24gKGRpc3BsYXkpIHtcclxuICAgICAgICAgICAgdmFyIHNsb3QgPSB0aGlzLmdldFNsb3RCeURpc3BsYXkoZGlzcGxheSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzbG90ICE9PSBudWxsID8gc2xvdC5wYXJlbnQgOiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBzcGVjaWZpYyBzbG90LlxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIHNsb3QgbmFtZS5cclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlNsb3RcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOiOt+WPlueJueWumueahOaPkuanveOAglxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIC0g5o+S5qe95ZCN56ew44CCXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90XHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLmdldFNsb3QgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fc2xvdHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGlmIChzbG90Lm5hbWUgPT09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xvdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gR2V0IGEgc3BlY2lmaWMgc2xvdCBieSB0aGUgZGlzcGxheS5cclxuICAgICAgICAgKiBAcGFyYW0gZGlzcGxheSAtIFRoZSBkaXNwbGF5IG9iamVjdC5cclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlNsb3RcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOmAmui/h+aYvuekuuWvueixoeiOt+WPlueJueWumueahOaPkuanveOAglxyXG4gICAgICAgICAqIEBwYXJhbSBkaXNwbGF5IC0g5pi+56S65a+56LGh44CCXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90XHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLmdldFNsb3RCeURpc3BsYXkgPSBmdW5jdGlvbiAoZGlzcGxheSkge1xyXG4gICAgICAgICAgICBpZiAoZGlzcGxheSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX3Nsb3RzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbG90ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbG90LmRpc3BsYXkgPT09IGRpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYWxsIGJvbmVzLlxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQm9uZVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g6I635Y+W5omA5pyJ55qE6aqo6aq844CCXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Cb25lXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLmdldEJvbmVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYm9uZXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEdldCBhbGwgc2xvdHMuXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90XHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDojrflj5bmiYDmnInnmoTmj5Lmp73jgIJcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlNsb3RcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZS5wcm90b3R5cGUuZ2V0U2xvdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbG90cztcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcm1hdHVyZS5wcm90b3R5cGUsIFwiZmxpcFhcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBXaGV0aGVyIHRvIGZsaXAgdGhlIGFybWF0dXJlIGhvcml6b250YWxseS5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5piv5ZCm5bCG6aqo5p625rC05bmz57+76L2s44CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuNVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZsaXBYO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZsaXBYID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZsaXBYID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFybWF0dXJlLnByb3RvdHlwZSwgXCJmbGlwWVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFdoZXRoZXIgdG8gZmxpcCB0aGUgYXJtYXR1cmUgdmVydGljYWxseS5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5piv5ZCm5bCG6aqo5p625Z6C55u057+76L2s44CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuNVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZsaXBZO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZsaXBZID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZsaXBZID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFybWF0dXJlLnByb3RvdHlwZSwgXCJjYWNoZUZyYW1lUmF0ZVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBhbmltYXRpb24gY2FjaGUgZnJhbWUgcmF0ZSwgd2hpY2ggdHVybnMgb24gdGhlIGFuaW1hdGlvbiBjYWNoZSB3aGVuIHRoZSBzZXQgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIDAuXHJcbiAgICAgICAgICAgICAqIFRoZXJlIGlzIGEgY2VydGFpbiBhbW91bnQgb2YgbWVtb3J5IG92ZXJoZWFkIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UgYnkgY2FjaGluZyBhbmltYXRpb24gZGF0YSBpbiBtZW1vcnkuXHJcbiAgICAgICAgICAgICAqIFRoZSBmcmFtZSByYXRlIHNob3VsZCBub3QgYmUgc2V0IHRvbyBoaWdoLCB1c3VhbGx5IHdpdGggdGhlIGZyYW1lIHJhdGUgb2YgdGhlIGFuaW1hdGlvbiBpcyBzaW1pbGFyIGFuZCBsb3dlciB0aGFuIHRoZSBwcm9ncmFtIHJ1bm5pbmcgZnJhbWUgcmF0ZS5cclxuICAgICAgICAgICAgICogV2hlbiB0aGUgYW5pbWF0aW9uIGNhY2hlIGlzIHR1cm5lZCBvbiwgc29tZSBmZWF0dXJlcyB3aWxsIGZhaWwsIHN1Y2ggYXMgdGhlIG9mZnNldCBwcm9wZXJ0eSBvZiBib25lLlxyXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAgICAgKiAgICAgYXJtYXR1cmUuY2FjaGVGcmFtZVJhdGUgPSAyNDtcclxuICAgICAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXNEYXRhI2ZyYW1lUmF0ZVxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlRGF0YSNmcmFtZVJhdGVcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5Yqo55S757yT5a2Y5bin546H77yM5b2T6K6+572u55qE5YC85aSn5LqOIDAg55qE5pe277yM5bCG5Lya5byA5ZCv5Yqo55S757yT5a2Y44CCXHJcbiAgICAgICAgICAgICAqIOmAmui/h+WwhuWKqOeUu+aVsOaNrue8k+WtmOWcqOWGheWtmOS4readpeaPkOmrmOi/kOihjOaAp+iDve+8jOS8muacieS4gOWumueahOWGheWtmOW8gOmUgOOAglxyXG4gICAgICAgICAgICAgKiDluKfnjofkuI3lrpzorr7nva7nmoTov4fpq5jvvIzpgJrluLjot5/liqjnlLvnmoTluKfnjofnm7jlvZPkuJTkvY7kuo7nqIvluo/ov5DooYznmoTluKfnjofjgIJcclxuICAgICAgICAgICAgICog5byA5ZCv5Yqo55S757yT5a2Y5ZCO77yM5p+Q5Lqb5Yqf6IO95bCG5Lya5aSx5pWI77yM5q+U5aaC6aqo6aq855qEIG9mZnNldCDlsZ7mgKfnrYnjgIJcclxuICAgICAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgICAgICogPHByZT5cclxuICAgICAgICAgICAgICogICAgIGFybWF0dXJlLmNhY2hlRnJhbWVSYXRlID0gMjQ7XHJcbiAgICAgICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzRGF0YSNmcmFtZVJhdGVcclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGEjZnJhbWVSYXRlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FybWF0dXJlRGF0YS5jYWNoZUZyYW1lUmF0ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hcm1hdHVyZURhdGEuY2FjaGVGcmFtZVJhdGUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmVEYXRhLmNhY2hlRnJhbWVzKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgY2hpbGQgYXJtYXR1cmUgZnJhbWVSYXRlLlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9zbG90czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsb3QgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEFybWF0dXJlID0gc2xvdC5jaGlsZEFybWF0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRBcm1hdHVyZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRBcm1hdHVyZS5jYWNoZUZyYW1lUmF0ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJtYXR1cmUucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgYXJtYXR1cmUgbmFtZS5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g6aqo5p625ZCN56ew44CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FybWF0dXJlRGF0YS5uYW1lO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJtYXR1cmUucHJvdG90eXBlLCBcImFybWF0dXJlRGF0YVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBhcm1hdHVyZSBkYXRhLlxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlRGF0YVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDpqqjmnrbmlbDmja7jgIJcclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXJtYXR1cmVEYXRhO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJtYXR1cmUucHJvdG90eXBlLCBcImFuaW1hdGlvblwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBhbmltYXRpb24gcGxheWVyLlxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvblxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDliqjnlLvmkq3mlL7lmajjgIJcclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJtYXR1cmUucHJvdG90eXBlLCBcInByb3h5XCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3h5O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJtYXR1cmUucHJvdG90eXBlLCBcImV2ZW50RGlzcGF0Y2hlclwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBFdmVudERpc3BhdGNoZXIgaW5zdGFuY2Ugb2YgdGhlIGFybWF0dXJlLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDor6XpqqjmnrbnmoQgRXZlbnREaXNwYXRjaGVyIOWunuS+i+OAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm94eTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFybWF0dXJlLnByb3RvdHlwZSwgXCJkaXNwbGF5XCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIGRpc3BsYXkgY29udGFpbmVyLlxyXG4gICAgICAgICAgICAgKiBUaGUgZGlzcGxheSBvZiB0aGUgc2xvdCBpcyBkaXNwbGF5ZWQgYXMgdGhlIHBhcmVudC5cclxuICAgICAgICAgICAgICogRGVwZW5kaW5nIG9uIHRoZSByZW5kZXJpbmcgZW5naW5lLCB0aGUgdHlwZSB3aWxsIGJlIGRpZmZlcmVudCwgdXN1YWxseSB0aGUgRGlzcGxheU9iamVjdENvbnRhaW5lciB0eXBlLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmmL7npLrlrrnlmajlrp7kvovjgIJcclxuICAgICAgICAgICAgICog5o+S5qe955qE5pi+56S65a+56LGh6YO95Lya5Lul5q2k5pi+56S65a655Zmo5Li654i257qn44CCXHJcbiAgICAgICAgICAgICAqIOagueaNrua4suafk+W8leaTjueahOS4jeWQjO+8jOexu+Wei+S8muS4jeWQjO+8jOmAmuW4uOaYryBEaXNwbGF5T2JqZWN0Q29udGFpbmVyIOexu+Wei+OAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJtYXR1cmUucHJvdG90eXBlLCBcInJlcGxhY2VkVGV4dHVyZVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVwbGFjZWRUZXh0dXJlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlcGxhY2VkVGV4dHVyZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVwbGFjZVRleHR1cmVBdGxhc0RhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXBsYWNlVGV4dHVyZUF0bGFzRGF0YS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXBsYWNlVGV4dHVyZUF0bGFzRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXBsYWNlZFRleHR1cmUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9zbG90czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBzbG90LmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBzbG90LnVwZGF0ZSgtMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcm1hdHVyZS5wcm90b3R5cGUsIFwiY2xvY2tcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGluaGVyaXREb2NcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb2NrO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb2NrID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jbG9jayAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb2NrLnJlbW92ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2Nsb2NrID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2xvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9jay5hZGQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgY2hpbGRBcm1hdHVyZSBjbG9jay5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9zbG90czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRBcm1hdHVyZSA9IHNsb3QuY2hpbGRBcm1hdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRBcm1hdHVyZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEFybWF0dXJlLmNsb2NrID0gdGhpcy5fY2xvY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXJtYXR1cmUucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIEdldCB0aGUgcGFyZW50IHNsb3Qgd2hpY2ggdGhlIGFybWF0dXJlIGJlbG9uZ3MgdG8uXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdFxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDor6XpqqjmnrbmiYDlsZ7nmoTniLbmj5Lmp73jgIJcclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90XHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5yZXBsYWNlVGV4dHVyZSA9IGZ1bmN0aW9uICh0ZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZWRUZXh0dXJlID0gdGV4dHVyZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayAjZXZlbnREaXNwYXRjaGVyfS5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5bey5bqf5byD77yM6K+35Y+C6ICDIHtAbGluayAjZXZlbnREaXNwYXRjaGVyfeOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLmhhc0V2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJveHkuaGFzREJFdmVudExpc3RlbmVyKHR5cGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rICNldmVudERpc3BhdGNoZXJ9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rICNldmVudERpc3BhdGNoZXJ944CCXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lciwgdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb3h5LmFkZERCRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgdGFyZ2V0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayAjZXZlbnREaXNwYXRjaGVyfS5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5bey5bqf5byD77yM6K+35Y+C6ICDIHtAbGluayAjZXZlbnREaXNwYXRjaGVyfeOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXJtYXR1cmUucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIsIHRhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLl9wcm94eS5yZW1vdmVEQkV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIHRhcmdldCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIERlcHJlY2F0ZWQsIHBsZWFzZSByZWZlciB0byB7QGxpbmsgI2NhY2hlRnJhbWVSYXRlfS5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5bey5bqf5byD77yM6K+35Y+C6ICDIHtAbGluayAjY2FjaGVGcmFtZVJhdGV944CCXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBcm1hdHVyZS5wcm90b3R5cGUuZW5hYmxlQW5pbWF0aW9uQ2FjaGUgPSBmdW5jdGlvbiAoZnJhbWVSYXRlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkRlcHJlY2F0ZWQuXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmNhY2hlRnJhbWVSYXRlID0gZnJhbWVSYXRlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rICNkaXNwbGF5fS5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5bey5bqf5byD77yM6K+35Y+C6ICDIHtAbGluayAjZGlzcGxheX3jgIJcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFybWF0dXJlLnByb3RvdHlwZS5nZXREaXNwbGF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBBcm1hdHVyZTtcclxuICAgIH0oZHJhZ29uQm9uZXNfMS5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lc18xLkFybWF0dXJlID0gQXJtYXR1cmU7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSBiYXNlIGNsYXNzIG9mIHRoZSB0cmFuc2Zvcm0gb2JqZWN0LlxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5UcmFuc2Zvcm1cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDlj5jmjaLlr7nosaHnmoTln7rnsbvjgIJcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuVHJhbnNmb3JtXHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICovXHJcbiAgICB2YXIgVHJhbnNmb3JtT2JqZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhUcmFuc2Zvcm1PYmplY3QsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gVHJhbnNmb3JtT2JqZWN0KCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gQSBtYXRyaXggcmVsYXRpdmUgdG8gdGhlIGFybWF0dXJlIGNvb3JkaW5hdGUgc3lzdGVtLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDnm7jlr7nkuo7pqqjmnrblnZDmoIfns7vnmoTnn6npmLXjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4ID0gbmV3IGRyYWdvbkJvbmVzLk1hdHJpeCgpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBBIHRyYW5zZm9ybSByZWxhdGl2ZSB0byB0aGUgYXJtYXR1cmUgY29vcmRpbmF0ZSBzeXN0ZW0uXHJcbiAgICAgICAgICAgICAqIEBzZWUgI3VwZGF0ZUdsb2JhbFRyYW5zZm9ybSgpXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOebuOWvueS6jumqqOaetuWdkOagh+ezu+eahOWPmOaNouOAglxyXG4gICAgICAgICAgICAgKiBAc2VlICN1cGRhdGVHbG9iYWxUcmFuc2Zvcm0oKVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5nbG9iYWwgPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBvZmZzZXQgdHJhbnNmb3JtIHJlbGF0aXZlIHRvIHRoZSBhcm1hdHVyZSBvciB0aGUgcGFyZW50IGJvbmUgY29vcmRpbmF0ZSBzeXN0ZW0uXHJcbiAgICAgICAgICAgICAqIEBzZWUgI2RyYWdvbkJvbmVzLkJvbmUjaW52YWxpZFVwZGF0ZSgpXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOebuOWvueS6jumqqOaetuaIlueItumqqOmqvOWdkOagh+ezu+eahOWBj+enu+WPmOaNouOAglxyXG4gICAgICAgICAgICAgKiBAc2VlICNkcmFnb25Cb25lcy5Cb25lI2ludmFsaWRVcGRhdGUoKVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5vZmZzZXQgPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtT2JqZWN0LnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXguaWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5nbG9iYWwuaWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXQuaWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW4gPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnVzZXJEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fZ2xvYmFsRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUgPSBudWxsOyAvL1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBGb3IgcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbnMsIHJvdGF0aW9uIG9yIHNjYWxlIGluIHRoZSB7QGxpbmsgI2dsb2JhbH0gYXR0cmlidXRlIG9mIHRoZSBib25lIG9yIHNsb3QgaXMgbm90IGFsd2F5cyBwcm9wZXJseSBhY2Nlc3NpYmxlLFxyXG4gICAgICAgICAqIHNvbWUgZW5naW5lcyBkbyBub3QgcmVseSBvbiB0aGVzZSBhdHRyaWJ1dGVzIHRvIHVwZGF0ZSByZW5kZXJpbmcsIHN1Y2ggYXMgRWdyZXQuXHJcbiAgICAgICAgICogVGhlIHVzZSBvZiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoYXQgdGhlIGFjY2VzcyB0byB0aGUge0BsaW5rICNnbG9iYWx9IHByb3BlcnR5IGlzIGNvcnJlY3RseSByb3RhdGlvbiBvciBzY2FsZS5cclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICogICAgIGJvbmUudXBkYXRlR2xvYmFsVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICogICAgIGxldCByb3RhdGlvbiA9IGJvbmUuZ2xvYmFsLnJvdGF0aW9uO1xyXG4gICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Ye65LqO5oCn6IO955qE6ICD6JmR77yM6aqo6aq85oiW5o+S5qe955qEIHtAbGluayAjZ2xvYmFsfSDlsZ7mgKfkuK3nmoTml4vovazmiJbnvKnmlL7lubbkuI3mgLvmmK/mraPnoa7lj6/orr/pl67nmoTvvIzmnInkupvlvJXmk47lubbkuI3kvp3otZbov5nkupvlsZ7mgKfmm7TmlrDmuLLmn5PvvIzmr5TlpoIgRWdyZXTjgIJcclxuICAgICAgICAgKiDkvb/nlKjmraTmlrnms5Xlj6/ku6Xkv53or4Horr/pl67liLAge0BsaW5rICNnbG9iYWx9IOWxnuaAp+S4reato+ehrueahOaXi+i9rOaIlue8qeaUvuOAglxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICogPHByZT5cclxuICAgICAgICAgKiAgICAgYm9uZS51cGRhdGVHbG9iYWxUcmFuc2Zvcm0oKTtcclxuICAgICAgICAgKiAgICAgbGV0IHJvdGF0aW9uID0gYm9uZS5nbG9iYWwucm90YXRpb247XHJcbiAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVHJhbnNmb3JtT2JqZWN0LnByb3RvdHlwZS51cGRhdGVHbG9iYWxUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9nbG9iYWxEaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZ2xvYmFsRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsLmZyb21NYXRyaXgodGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtT2JqZWN0LnByb3RvdHlwZSwgXCJhcm1hdHVyZVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBhcm1hdHVyZSB0byB3aGljaCBpdCBiZWxvbmdzLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmiYDlsZ7nmoTpqqjmnrbjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXJtYXR1cmU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFRyYW5zZm9ybU9iamVjdC5faGVscE1hdHJpeCA9IG5ldyBkcmFnb25Cb25lcy5NYXRyaXgoKTtcclxuICAgICAgICBUcmFuc2Zvcm1PYmplY3QuX2hlbHBUcmFuc2Zvcm0gPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgVHJhbnNmb3JtT2JqZWN0Ll9oZWxwUG9pbnQgPSBuZXcgZHJhZ29uQm9uZXMuUG9pbnQoKTtcclxuICAgICAgICByZXR1cm4gVHJhbnNmb3JtT2JqZWN0O1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5UcmFuc2Zvcm1PYmplY3QgPSBUcmFuc2Zvcm1PYmplY3Q7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIEJvbmUgaXMgb25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCBsb2dpY2FsIHVuaXRzIGluIHRoZSBhcm1hdHVyZSBhbmltYXRpb24gc3lzdGVtLFxyXG4gICAgICogYW5kIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgcmVhbGl6YXRpb24gb2YgdHJhbnNsYXRlLCByb3RhdGlvbiwgc2NhbGluZyBpbiB0aGUgYW5pbWF0aW9ucy5cclxuICAgICAqIEEgYXJtYXR1cmUgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYm9uZXMuXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkJvbmVEYXRhXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlNsb3RcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDpqqjpqrzlnKjpqqjpqrzliqjnlLvkvZPns7vkuK3mmK/mnIDph43opoHnmoTpgLvovpHljZXlhYPkuYvkuIDvvIzotJ/otKPliqjnlLvkuK3nmoTlubPnp7vjgIHml4vovazjgIHnvKnmlL7nmoTlrp7njrDjgIJcclxuICAgICAqIOS4gOS4qumqqOaetuS4reWPr+S7peWMheWQq+WkmuS4qumqqOmqvOOAglxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Cb25lRGF0YVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90XHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICovXHJcbiAgICB2YXIgQm9uZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQm9uZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBCb25lKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uUG9zZSA9IG5ldyBkcmFnb25Cb25lcy5UcmFuc2Zvcm0oKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuX2JsZW5kU3RhdGUgPSBuZXcgZHJhZ29uQm9uZXMuQmxlbmRTdGF0ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEJvbmUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5Cb25lXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQm9uZS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXRNb2RlID0gMSAvKiBBZGRpdGl2ZSAqLztcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25Qb3NlLmlkZW50aXR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuVHJhbnNmb3JtRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fbG9jYWxEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhc0NvbnN0cmFpbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgdGhpcy5fYmxlbmRTdGF0ZS5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9ib25lRGF0YSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlcyA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCb25lLnByb3RvdHlwZS5fdXBkYXRlR2xvYmFsVHJhbnNmb3JtTWF0cml4ID0gZnVuY3Rpb24gKGlzQ2FjaGUpIHtcclxuICAgICAgICAgICAgLy8gRm9yIHR5cGVzY3JpcHQuXHJcbiAgICAgICAgICAgIHZhciBib25lRGF0YSA9IHRoaXMuX2JvbmVEYXRhO1xyXG4gICAgICAgICAgICB2YXIgZ2xvYmFsID0gdGhpcy5nbG9iYWw7XHJcbiAgICAgICAgICAgIHZhciBnbG9iYWxUcmFuc2Zvcm1NYXRyaXggPSB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeDtcclxuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IHRoaXMub3JpZ2luO1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25Qb3NlID0gdGhpcy5hbmltYXRpb25Qb3NlO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5fcGFyZW50OyAvL1xyXG4gICAgICAgICAgICB2YXIgZmxpcFggPSB0aGlzLl9hcm1hdHVyZS5mbGlwWDtcclxuICAgICAgICAgICAgdmFyIGZsaXBZID0gdGhpcy5fYXJtYXR1cmUuZmxpcFkgPT09IGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLnlEb3duO1xyXG4gICAgICAgICAgICB2YXIgaW5oZXJpdCA9IHBhcmVudCAhPT0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIHJvdGF0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vZmZzZXRNb2RlID09PSAxIC8qIEFkZGl0aXZlICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2xvYmFsLmNvcHlGcm9tKHRoaXMub3JpZ2luKS5hZGQodGhpcy5vZmZzZXQpLmFkZCh0aGlzLmFuaW1hdGlvblBvc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC54ID0gb3JpZ2luLnggKyBvZmZzZXQueCArIGFuaW1hdGlvblBvc2UueDtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWwuc2NhbGVYID0gb3JpZ2luLnNjYWxlWCAqIG9mZnNldC5zY2FsZVggKiBhbmltYXRpb25Qb3NlLnNjYWxlWDtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWwuc2NhbGVZID0gb3JpZ2luLnNjYWxlWSAqIG9mZnNldC5zY2FsZVkgKiBhbmltYXRpb25Qb3NlLnNjYWxlWTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMueURvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnkgPSBvcmlnaW4ueSArIG9mZnNldC55ICsgYW5pbWF0aW9uUG9zZS55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuc2tldyA9IG9yaWdpbi5za2V3ICsgb2Zmc2V0LnNrZXcgKyBhbmltYXRpb25Qb3NlLnNrZXc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5yb3RhdGlvbiA9IG9yaWdpbi5yb3RhdGlvbiArIG9mZnNldC5yb3RhdGlvbiArIGFuaW1hdGlvblBvc2Uucm90YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwueSA9IG9yaWdpbi55IC0gb2Zmc2V0LnkgKyBhbmltYXRpb25Qb3NlLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5za2V3ID0gb3JpZ2luLnNrZXcgLSBvZmZzZXQuc2tldyArIGFuaW1hdGlvblBvc2Uuc2tldztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnJvdGF0aW9uID0gb3JpZ2luLnJvdGF0aW9uIC0gb2Zmc2V0LnJvdGF0aW9uICsgYW5pbWF0aW9uUG9zZS5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWwuY29weUZyb20ob2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLnlEb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC55ID0gLWdsb2JhbC55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuc2tldyA9IC1nbG9iYWwuc2tldztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnJvdGF0aW9uID0gLWdsb2JhbC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLmFkZChhbmltYXRpb25Qb3NlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLm9mZnNldE1vZGUgPT09IDAgLyogTm9uZSAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5jb3B5RnJvbShvcmlnaW4pLmFkZChhbmltYXRpb25Qb3NlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5jb3B5RnJvbShhbmltYXRpb25Qb3NlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGluaGVyaXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGdsb2JhbC5jb3B5RnJvbShvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkcmFnb25Cb25lcy5EcmFnb25Cb25lcy55RG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC55ID0gLWdsb2JhbC55O1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5za2V3ID0gLWdsb2JhbC5za2V3O1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC5yb3RhdGlvbiA9IC1nbG9iYWwucm90YXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluaGVyaXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRNYXRyaXggPSBwYXJlbnQuX2JvbmVEYXRhLnR5cGUgPT09IDAgLyogQm9uZSAqLyA/IHBhcmVudC5nbG9iYWxUcmFuc2Zvcm1NYXRyaXggOiBwYXJlbnQuX2dldEdsb2JhbFRyYW5zZm9ybU1hdHJpeChnbG9iYWwueCwgZ2xvYmFsLnkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvbmVEYXRhLmluaGVyaXRTY2FsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYm9uZURhdGEuaW5oZXJpdFJvdGF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC51cGRhdGVHbG9iYWxUcmFuc2Zvcm0oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsaXBYICYmIGZsaXBZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IGdsb2JhbC5yb3RhdGlvbiAtIChwYXJlbnQuZ2xvYmFsLnJvdGF0aW9uICsgTWF0aC5QSSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxpcFgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gZ2xvYmFsLnJvdGF0aW9uICsgcGFyZW50Lmdsb2JhbC5yb3RhdGlvbiArIE1hdGguUEk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxpcFkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gZ2xvYmFsLnJvdGF0aW9uICsgcGFyZW50Lmdsb2JhbC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gZ2xvYmFsLnJvdGF0aW9uIC0gcGFyZW50Lmdsb2JhbC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwucm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnRvTWF0cml4KGdsb2JhbFRyYW5zZm9ybU1hdHJpeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVHJhbnNmb3JtTWF0cml4LmNvbmNhdChwYXJlbnRNYXRyaXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib25lRGF0YS5pbmhlcml0VHJhbnNsYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnggPSBnbG9iYWxUcmFuc2Zvcm1NYXRyaXgudHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC55ID0gZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnR5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnR4ID0gZ2xvYmFsLng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbFRyYW5zZm9ybU1hdHJpeC50eSA9IGdsb2JhbC55O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuZnJvbU1hdHJpeChnbG9iYWxUcmFuc2Zvcm1NYXRyaXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2xvYmFsRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib25lRGF0YS5pbmhlcml0VHJhbnNsYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBnbG9iYWwueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBnbG9iYWwueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnggPSBwYXJlbnRNYXRyaXguYSAqIHggKyBwYXJlbnRNYXRyaXguYyAqIHkgKyBwYXJlbnRNYXRyaXgudHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC55ID0gcGFyZW50TWF0cml4LmIgKiB4ICsgcGFyZW50TWF0cml4LmQgKiB5ICsgcGFyZW50TWF0cml4LnR5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsaXBYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwueCA9IC1nbG9iYWwueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxpcFkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC55ID0gLWdsb2JhbC55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib25lRGF0YS5pbmhlcml0Um90YXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnVwZGF0ZUdsb2JhbFRyYW5zZm9ybSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50Lmdsb2JhbC5zY2FsZVggPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gZ2xvYmFsLnJvdGF0aW9uICsgcGFyZW50Lmdsb2JhbC5yb3RhdGlvbiArIE1hdGguUEk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IGdsb2JhbC5yb3RhdGlvbiArIHBhcmVudC5nbG9iYWwucm90YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudE1hdHJpeC5hICogcGFyZW50TWF0cml4LmQgLSBwYXJlbnRNYXRyaXguYiAqIHBhcmVudE1hdHJpeC5jIDwgMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiAtPSBnbG9iYWwucm90YXRpb24gKiAyLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxpcFggIT09IGZsaXBZIHx8IGJvbmVEYXRhLmluaGVyaXRSZWZsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnNrZXcgKz0gTWF0aC5QSTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMueURvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuc2tldyA9IC1nbG9iYWwuc2tldztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwucm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmxpcFggfHwgZmxpcFkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsaXBYICYmIGZsaXBZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IGdsb2JhbC5yb3RhdGlvbiArIE1hdGguUEk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxpcFgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IE1hdGguUEkgLSBnbG9iYWwucm90YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IC1nbG9iYWwucm90YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwuc2tldyArPSBNYXRoLlBJO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC5yb3RhdGlvbiA9IHJvdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWwudG9NYXRyaXgoZ2xvYmFsVHJhbnNmb3JtTWF0cml4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChmbGlwWCB8fCBmbGlwWSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGlwWCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwueCA9IC1nbG9iYWwueDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsaXBZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbC55ID0gLWdsb2JhbC55O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxpcFggJiYgZmxpcFkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRpb24gPSBnbG9iYWwucm90YXRpb24gKyBNYXRoLlBJO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsaXBYKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IE1hdGguUEkgLSBnbG9iYWwucm90YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IC1nbG9iYWwucm90YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnNrZXcgKz0gTWF0aC5QSTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnJvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnbG9iYWwudG9NYXRyaXgoZ2xvYmFsVHJhbnNmb3JtTWF0cml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQm9uZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChib25lRGF0YSwgYXJtYXR1cmVWYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYm9uZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9ib25lRGF0YSA9IGJvbmVEYXRhO1xyXG4gICAgICAgICAgICB0aGlzLl9hcm1hdHVyZSA9IGFybWF0dXJlVmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ib25lRGF0YS5wYXJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IHRoaXMuX2FybWF0dXJlLmdldEJvbmUodGhpcy5fYm9uZURhdGEucGFyZW50Lm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9hZGRCb25lKHRoaXMpO1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aGlzLm9yaWdpbiA9IHRoaXMuX2JvbmVEYXRhLnRyYW5zZm9ybTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJvbmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjYWNoZUZyYW1lSW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmxlbmRTdGF0ZS5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVGcmFtZUluZGV4ID49IDAgJiYgdGhpcy5fY2FjaGVkRnJhbWVJbmRpY2VzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkRnJhbWVJbmRleCA9IHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlc1tjYWNoZUZyYW1lSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZEZyYW1lSW5kZXggPj0gMCAmJiB0aGlzLl9jYWNoZWRGcmFtZUluZGV4ID09PSBjYWNoZWRGcmFtZUluZGV4KSB7IC8vIFNhbWUgY2FjaGUuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhY2hlZEZyYW1lSW5kZXggPj0gMCkgeyAvLyBIYXMgYmVlbiBDYWNoZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPSBjYWNoZWRGcmFtZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2hhc0NvbnN0cmFpbnQpIHsgLy8gVXBkYXRlIGNvbnN0cmFpbnRzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYXJtYXR1cmUuX2NvbnN0cmFpbnRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludC5fcm9vdCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zZm9ybURpcnR5IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9wYXJlbnQgIT09IG51bGwgJiYgdGhpcy5fcGFyZW50Ll9jaGlsZHJlblRyYW5zZm9ybURpcnR5KSkgeyAvLyBEaXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPj0gMCkgeyAvLyBTYW1lIGNhY2hlLCBidXQgbm90IHNldCBpbmRleCB5ZXQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlc1tjYWNoZUZyYW1lSW5kZXhdID0gdGhpcy5fY2FjaGVkRnJhbWVJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIERpcnR5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzQ29uc3RyYWludCkgeyAvLyBVcGRhdGUgY29uc3RyYWludHMuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHRoaXMuX2FybWF0dXJlLl9jb25zdHJhaW50czsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50Ll9yb290ID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50LnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zZm9ybURpcnR5IHx8ICh0aGlzLl9wYXJlbnQgIT09IG51bGwgJiYgdGhpcy5fcGFyZW50Ll9jaGlsZHJlblRyYW5zZm9ybURpcnR5KSkgeyAvLyBEaXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICBjYWNoZUZyYW1lSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90cmFuc2Zvcm1EaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuVHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZWRGcmFtZUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0NhY2hlID0gY2FjaGVGcmFtZUluZGV4ID49IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xvY2FsRGlydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlR2xvYmFsVHJhbnNmb3JtTWF0cml4KGlzQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDYWNoZSAmJiB0aGlzLl9jYWNoZWRGcmFtZUluZGljZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9IHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlc1tjYWNoZUZyYW1lSW5kZXhdID0gdGhpcy5fYXJtYXR1cmUuX2FybWF0dXJlRGF0YS5zZXRDYWNoZUZyYW1lKHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LCB0aGlzLmdsb2JhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2FybWF0dXJlRGF0YS5nZXRDYWNoZUZyYW1lKHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LCB0aGlzLmdsb2JhbCwgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2NoaWxkcmVuVHJhbnNmb3JtRGlydHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuVHJhbnNmb3JtRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9sb2NhbERpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJvbmUucHJvdG90eXBlLnVwZGF0ZUJ5Q29uc3RyYWludCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xvY2FsRGlydHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90cmFuc2Zvcm1EaXJ0eSB8fCAodGhpcy5fcGFyZW50ICE9PSBudWxsICYmIHRoaXMuX3BhcmVudC5fY2hpbGRyZW5UcmFuc2Zvcm1EaXJ0eSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVHbG9iYWxUcmFuc2Zvcm1NYXRyaXgodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gRm9yY2VzIHRoZSBib25lIHRvIHVwZGF0ZSB0aGUgdHJhbnNmb3JtIGluIHRoZSBuZXh0IGZyYW1lLlxyXG4gICAgICAgICAqIFdoZW4gdGhlIGJvbmUgaXMgbm90IGFuaW1hdGVkIG9yIGl0cyBhbmltYXRpb24gc3RhdGUgaXMgZmluaXNoZWQsIHRoZSBib25lIHdpbGwgbm90IGNvbnRpbnVlIHRvIHVwZGF0ZSxcclxuICAgICAgICAgKiBhbmQgd2hlbiB0aGUgc2tlbGV0b24gbXVzdCBiZSB1cGRhdGVkIGZvciBzb21lIHJlYXNvbiwgdGhlIG1ldGhvZCBuZWVkcyB0byBiZSBjYWxsZWQgZXhwbGljaXRseS5cclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICogICAgIGxldCBib25lID0gYXJtYXR1cmUuZ2V0Qm9uZShcImFybVwiKTtcclxuICAgICAgICAgKiAgICAgYm9uZS5vZmZzZXQuc2NhbGVYID0gMi4wO1xyXG4gICAgICAgICAqICAgICBib25lLmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW8uuWItumqqOmqvOWcqOS4i+S4gOW4p+abtOaWsOWPmOaNouOAglxyXG4gICAgICAgICAqIOW9k+ivpemqqOmqvOayoeacieWKqOeUu+eKtuaAgeaIluWFtuWKqOeUu+eKtuaAgeaSreaUvuWujOaIkOaXtu+8jOmqqOmqvOWwhuS4jeWcqOe7p+e7reabtOaWsO+8jOiAjOatpOaXtueUseS6juafkOS6m+WOn+WboOW/hemhu+abtOaWsOmqqOmqvOaXtu+8jOWImemcgOimgeaYvuW8j+iwg+eUqOivpeaWueazleOAglxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICogPHByZT5cclxuICAgICAgICAgKiAgICAgbGV0IGJvbmUgPSBhcm1hdHVyZS5nZXRCb25lKFwiYXJtXCIpO1xyXG4gICAgICAgICAqICAgICBib25lLm9mZnNldC5zY2FsZVggPSAyLjA7XHJcbiAgICAgICAgICogICAgIGJvbmUuaW52YWxpZFVwZGF0ZSgpO1xyXG4gICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJvbmUucHJvdG90eXBlLmludmFsaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ2hlY2sgd2hldGhlciB0aGUgYm9uZSBjb250YWlucyBhIHNwZWNpZmljIGJvbmUuXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Cb25lXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmo4Dmn6Xor6XpqqjpqrzmmK/lkKbljIXlkKvnibnlrprnmoTpqqjpqrzjgIJcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkJvbmVcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCb25lLnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2YWx1ZTtcclxuICAgICAgICAgICAgd2hpbGUgKGFuY2VzdG9yICE9PSB0aGlzICYmIGFuY2VzdG9yICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYW5jZXN0b3IgPT09IHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQm9uZS5wcm90b3R5cGUsIFwiYm9uZURhdGFcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgYm9uZSBkYXRhLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDpqqjpqrzmlbDmja7jgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYm9uZURhdGE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCb25lLnByb3RvdHlwZSwgXCJ2aXNpYmxlXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIHZpc2libGUgb2YgYWxsIHNsb3RzIGluIHRoZSBib25lLlxyXG4gICAgICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdCN2aXNpYmxlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOatpOmqqOmqvOaJgOacieaPkuanveeahOWPr+ingeOAglxyXG4gICAgICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdCN2aXNpYmxlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmlzaWJsZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYXJtYXR1cmUuZ2V0U2xvdHMoKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2xvdC5wYXJlbnQgPT09IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdC5fdXBkYXRlVmlzaWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJvbmUucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgYm9uZSBuYW1lLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDpqqjpqrzlkI3np7DjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYm9uZURhdGEubmFtZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJvbmUucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBwYXJlbnQgYm9uZSB0byB3aGljaCBpdCBiZWxvbmdzLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmiYDlsZ7nmoTniLbpqqjpqrzjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIERlcHJlY2F0ZWQsIHBsZWFzZSByZWZlciB0byB7QGxpbmsgZHJhZ29uQm9uZXMuQXJtYXR1cmUjZ2V0Qm9uZXMoKX0uXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW3suW6n+W8g++8jOivt+WPguiAgyB7QGxpbmsgZHJhZ29uQm9uZXMuQXJtYXR1cmUjZ2V0Qm9uZXMoKX3jgIJcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJvbmUucHJvdG90eXBlLmdldEJvbmVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkLlwiKTtcclxuICAgICAgICAgICAgdmFyIGJvbmVzID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lcygpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9uZS5wYXJlbnQgPT09IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBib25lcy5wdXNoKGJvbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBib25lcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayBkcmFnb25Cb25lcy5Bcm1hdHVyZSNnZXRTbG90cygpfS5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5bey5bqf5byD77yM6K+35Y+C6ICDIHtAbGluayBkcmFnb25Cb25lcy5Bcm1hdHVyZSNnZXRTbG90cygpfeOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQm9uZS5wcm90b3R5cGUuZ2V0U2xvdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkRlcHJlY2F0ZWQuXCIpO1xyXG4gICAgICAgICAgICB2YXIgc2xvdHMgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2FybWF0dXJlLmdldFNsb3RzKCk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGlmIChzbG90LnBhcmVudCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsb3RzLnB1c2goc2xvdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNsb3RzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJvbmUucHJvdG90eXBlLCBcInNsb3RcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rIGRyYWdvbkJvbmVzLkFybWF0dXJlI2dldFNsb3QoKX0uXHJcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5bey5bqf5byD77yM6K+35Y+C6ICDIHtAbGluayBkcmFnb25Cb25lcy5Bcm1hdHVyZSNnZXRTbG90KCl944CCXHJcbiAgICAgICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkLlwiKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9hcm1hdHVyZS5nZXRTbG90cygpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzbG90ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbG90LnBhcmVudCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xvdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIEJvbmU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLlRyYW5zZm9ybU9iamVjdCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQm9uZSA9IEJvbmU7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIFN1cmZhY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFN1cmZhY2UsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU3VyZmFjZSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLl92ZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGVmb3JtVmVydGljZXMgPSBbXTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0geDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0LCBkMVgsIGQxWSwgZDJYLCBkMllcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLl9odWxsQ2FjaGUgPSBbXTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gSW5zaWRlIFtmbGFnLCBhLCBiLCBjLCBkLCB0eCwgdHldLCBPdXRzaWRlIFtmbGFnLCBhLCBiLCBjLCBkLCB0eCwgdHldXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5fbWF0cml4Q2FoY2UgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBTdXJmYWNlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuU3VyZmFjZV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFN1cmZhY2UucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkNsZWFyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RYID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9kWSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fayA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fa1ggPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2tZID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl92ZXJ0aWNlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZvcm1WZXJ0aWNlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRyaXhDYWhjZS5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9odWxsQ2FjaGUubGVuZ3RoID0gMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFN1cmZhY2UucHJvdG90eXBlLl9nZXRBZmZpbmVUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoeCwgeSwgbFgsIGxZLCBhWCwgYVksIGJYLCBiWSwgY1gsIGNZLCB0cmFuc2Zvcm0sIG1hdHJpeCwgaXNEb3duKSB7XHJcbiAgICAgICAgICAgIHZhciBkYWJYID0gYlggLSBhWDtcclxuICAgICAgICAgICAgdmFyIGRhYlkgPSBiWSAtIGFZO1xyXG4gICAgICAgICAgICB2YXIgZGFjWCA9IGNYIC0gYVg7XHJcbiAgICAgICAgICAgIHZhciBkYWNZID0gY1kgLSBhWTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLnJvdGF0aW9uID0gTWF0aC5hdGFuMihkYWJZLCBkYWJYKTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLnNrZXcgPSBNYXRoLmF0YW4yKGRhY1ksIGRhY1gpIC0gTWF0aC5QSSAqIDAuNSAtIHRyYW5zZm9ybS5yb3RhdGlvbjtcclxuICAgICAgICAgICAgaWYgKGlzRG93bikge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtLnJvdGF0aW9uICs9IE1hdGguUEk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJhbnNmb3JtLnNjYWxlWCA9IE1hdGguc3FydChkYWJYICogZGFiWCArIGRhYlkgKiBkYWJZKSAvIGxYO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0uc2NhbGVZID0gTWF0aC5zcXJ0KGRhY1ggKiBkYWNYICsgZGFjWSAqIGRhY1kpIC8gbFk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS50b01hdHJpeChtYXRyaXgpO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0ueCA9IG1hdHJpeC50eCA9IGFYIC0gKG1hdHJpeC5hICogeCArIG1hdHJpeC5jICogeSk7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS55ID0gbWF0cml4LnR5ID0gYVkgLSAobWF0cml4LmIgKiB4ICsgbWF0cml4LmQgKiB5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFN1cmZhY2UucHJvdG90eXBlLl91cGRhdGVWZXJ0aWNlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG9yaWdpbmFsVmVydGljZXMgPSB0aGlzLl9ib25lRGF0YS52ZXJ0aWNlcztcclxuICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gdGhpcy5fdmVydGljZXM7XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25WZXJ0aWNlcyA9IHRoaXMuX2RlZm9ybVZlcnRpY2VzO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50Ll9ib25lRGF0YS50eXBlID09PSAxIC8qIFN1cmZhY2UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9yaWdpbmFsVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gb3JpZ2luYWxWZXJ0aWNlc1tpXSArIGFuaW1hdGlvblZlcnRpY2VzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IG9yaWdpbmFsVmVydGljZXNbaSArIDFdICsgYW5pbWF0aW9uVmVydGljZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRyaXggPSB0aGlzLl9wYXJlbnQuX2dldEdsb2JhbFRyYW5zZm9ybU1hdHJpeCh4LCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbaV0gPSBtYXRyaXguYSAqIHggKyBtYXRyaXguYyAqIHkgKyBtYXRyaXgudHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzW2kgKyAxXSA9IG1hdHJpeC5iICogeCArIG1hdHJpeC5kICogeSArIG1hdHJpeC50eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50TWF0cml4ID0gdGhpcy5fcGFyZW50Lmdsb2JhbFRyYW5zZm9ybU1hdHJpeDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9yaWdpbmFsVmVydGljZXMubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gb3JpZ2luYWxWZXJ0aWNlc1tpXSArIGFuaW1hdGlvblZlcnRpY2VzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IG9yaWdpbmFsVmVydGljZXNbaSArIDFdICsgYW5pbWF0aW9uVmVydGljZXNbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXSA9IHBhcmVudE1hdHJpeC5hICogeCArIHBhcmVudE1hdHJpeC5jICogeSArIHBhcmVudE1hdHJpeC50eDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljZXNbaSArIDFdID0gcGFyZW50TWF0cml4LmIgKiB4ICsgcGFyZW50TWF0cml4LmQgKiB5ICsgcGFyZW50TWF0cml4LnR5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3JpZ2luYWxWZXJ0aWNlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXSA9IG9yaWdpbmFsVmVydGljZXNbaV0gKyBhbmltYXRpb25WZXJ0aWNlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpICsgMV0gPSBvcmlnaW5hbFZlcnRpY2VzW2kgKyAxXSArIGFuaW1hdGlvblZlcnRpY2VzW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU3VyZmFjZS5wcm90b3R5cGUuX3VwZGF0ZUdsb2JhbFRyYW5zZm9ybU1hdHJpeCA9IGZ1bmN0aW9uIChpc0NhY2hlKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxyXG4gICAgICAgICAgICBpc0NhY2hlO1xyXG4gICAgICAgICAgICB2YXIgc2VnbWVudFhEID0gdGhpcy5fYm9uZURhdGEuc2VnbWVudFggKiAyO1xyXG4gICAgICAgICAgICB2YXIgbGFzdEluZGV4ID0gdGhpcy5fdmVydGljZXMubGVuZ3RoIC0gMjtcclxuICAgICAgICAgICAgdmFyIGxBID0gMjAwLjA7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHZhciByYVggPSB0aGlzLl92ZXJ0aWNlc1swXTtcclxuICAgICAgICAgICAgdmFyIHJhWSA9IHRoaXMuX3ZlcnRpY2VzWzFdO1xyXG4gICAgICAgICAgICB2YXIgcmJYID0gdGhpcy5fdmVydGljZXNbc2VnbWVudFhEXTtcclxuICAgICAgICAgICAgdmFyIHJiWSA9IHRoaXMuX3ZlcnRpY2VzW3NlZ21lbnRYRCArIDFdO1xyXG4gICAgICAgICAgICB2YXIgcmNYID0gdGhpcy5fdmVydGljZXNbbGFzdEluZGV4XTtcclxuICAgICAgICAgICAgdmFyIHJjWSA9IHRoaXMuX3ZlcnRpY2VzW2xhc3RJbmRleCArIDFdO1xyXG4gICAgICAgICAgICB2YXIgcmRYID0gdGhpcy5fdmVydGljZXNbbGFzdEluZGV4IC0gc2VnbWVudFhEXTtcclxuICAgICAgICAgICAgdmFyIHJkWSA9IHRoaXMuX3ZlcnRpY2VzW2xhc3RJbmRleCAtIHNlZ21lbnRYRCArIDFdO1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB2YXIgZGFjWCA9IHJhWCArIChyY1ggLSByYVgpICogMC41O1xyXG4gICAgICAgICAgICB2YXIgZGFjWSA9IHJhWSArIChyY1kgLSByYVkpICogMC41O1xyXG4gICAgICAgICAgICB2YXIgZGJkWCA9IHJiWCArIChyZFggLSByYlgpICogMC41O1xyXG4gICAgICAgICAgICB2YXIgZGJkWSA9IHJiWSArIChyZFkgLSByYlkpICogMC41O1xyXG4gICAgICAgICAgICB2YXIgYVggPSBkYWNYICsgKGRiZFggLSBkYWNYKSAqIDAuNTtcclxuICAgICAgICAgICAgdmFyIGFZID0gZGFjWSArIChkYmRZIC0gZGFjWSkgKiAwLjU7XHJcbiAgICAgICAgICAgIHZhciBiWCA9IHJiWCArIChyY1ggLSByYlgpICogMC41O1xyXG4gICAgICAgICAgICB2YXIgYlkgPSByYlkgKyAocmNZIC0gcmJZKSAqIDAuNTtcclxuICAgICAgICAgICAgdmFyIGNYID0gcmRYICsgKHJjWCAtIHJkWCkgKiAwLjU7XHJcbiAgICAgICAgICAgIHZhciBjWSA9IHJkWSArIChyY1kgLSByZFkpICogMC41O1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aGlzLl9nbG9iYWxEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9nZXRBZmZpbmVUcmFuc2Zvcm0oMC4wLCAwLjAsIGxBLCBsQSwgYVgsIGFZLCBiWCwgYlksIGNYLCBjWSwgdGhpcy5nbG9iYWwsIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LCBmYWxzZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTdXJmYWNlLnByb3RvdHlwZS5fZ2V0R2xvYmFsVHJhbnNmb3JtTWF0cml4ID0gZnVuY3Rpb24gKHgsIHkpIHtcclxuICAgICAgICAgICAgdmFyIGxCID0gMTAwMC4wO1xyXG4gICAgICAgICAgICBpZiAoeCA8IC1sQiB8fCBsQiA8IHggfHwgeSA8IC1sQiB8fCBsQiA8IHkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaXNEb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBsQSA9IDIwMC4wO1xyXG4gICAgICAgICAgICB2YXIgc3VyZmFjZURhdGEgPSB0aGlzLl9ib25lRGF0YTtcclxuICAgICAgICAgICAgdmFyIHNlZ21lbnRYID0gc3VyZmFjZURhdGEuc2VnbWVudFg7XHJcbiAgICAgICAgICAgIHZhciBzZWdtZW50WSA9IHN1cmZhY2VEYXRhLnNlZ21lbnRZO1xyXG4gICAgICAgICAgICB2YXIgc2VnbWVudFhEID0gc3VyZmFjZURhdGEuc2VnbWVudFggKiAyO1xyXG4gICAgICAgICAgICB2YXIgZFggPSB0aGlzLl9kWDtcclxuICAgICAgICAgICAgdmFyIGRZID0gdGhpcy5fZFk7XHJcbiAgICAgICAgICAgIHZhciBpbmRleFggPSBNYXRoLmZsb29yKCh4ICsgbEEpIC8gZFgpOyAvLyAtMSB+IHNlZ21lbnRYIC0gMVxyXG4gICAgICAgICAgICB2YXIgaW5kZXhZID0gTWF0aC5mbG9vcigoeSArIGxBKSAvIGRZKTsgLy8gLTEgfiBzZWdtZW50WSAtIDFcclxuICAgICAgICAgICAgdmFyIG1hdHJpeEluZGV4ID0gMDtcclxuICAgICAgICAgICAgdmFyIHBYID0gaW5kZXhYICogZFggLSBsQTtcclxuICAgICAgICAgICAgdmFyIHBZID0gaW5kZXhZICogZFkgLSBsQTtcclxuICAgICAgICAgICAgdmFyIG1hdHJpY2VzID0gdGhpcy5fbWF0cml4Q2FoY2U7XHJcbiAgICAgICAgICAgIHZhciBoZWxwTWF0cml4ID0gU3VyZmFjZS5faGVscE1hdHJpeDtcclxuICAgICAgICAgICAgaWYgKHggPCAtbEEpIHtcclxuICAgICAgICAgICAgICAgIGlmICh5IDwgLWxBIHx8IHkgPj0gbEEpIHsgLy8gT3V0LlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIExlZnQuXHJcbiAgICAgICAgICAgICAgICBpc0Rvd24gPSB5ID4gdGhpcy5fa1ggKiAoeCArIGxBKSArIHBZO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4SW5kZXggPSAoKHNlZ21lbnRYICogKHNlZ21lbnRZICsgMSkgKyBzZWdtZW50WCAqIDIgKyBzZWdtZW50WSArIGluZGV4WSkgKiAyICsgKGlzRG93biA/IDEgOiAwKSkgKiA3O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdHJpeENhaGNlW21hdHJpeEluZGV4XSA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlbHBNYXRyaXguY29weUZyb21BcnJheShtYXRyaWNlcywgbWF0cml4SW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0ZXhJbmRleCA9IGluZGV4WSAqIChzZWdtZW50WEQgKyAyKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGRYID0gdGhpcy5faHVsbENhY2hlWzRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZFkgPSB0aGlzLl9odWxsQ2FjaGVbNV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNYID0gdGhpcy5faHVsbENhY2hlWzJdIC0gKHNlZ21lbnRZIC0gaW5kZXhZKSAqIGRkWDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc1kgPSB0aGlzLl9odWxsQ2FjaGVbM10gLSAoc2VnbWVudFkgLSBpbmRleFkpICogZGRZO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMuX3ZlcnRpY2VzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Rvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0QWZmaW5lVHJhbnNmb3JtKC1sQSwgcFkgKyBkWSwgbEIgLSBsQSwgZFksIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgMl0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgM10sIHNYICsgZGRYLCBzWSArIGRkWSwgdmVydGljZXNbdmVydGV4SW5kZXhdLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleCArIDFdLCBTdXJmYWNlLl9oZWxwVHJhbnNmb3JtLCBoZWxwTWF0cml4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldEFmZmluZVRyYW5zZm9ybSgtbEIsIHBZLCBsQiAtIGxBLCBkWSwgc1gsIHNZLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleF0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMV0sIHNYICsgZGRYLCBzWSArIGRkWSwgU3VyZmFjZS5faGVscFRyYW5zZm9ybSwgaGVscE1hdHJpeCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleF0gPSAxLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyAxXSA9IGhlbHBNYXRyaXguYTtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDJdID0gaGVscE1hdHJpeC5iO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgM10gPSBoZWxwTWF0cml4LmM7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA0XSA9IGhlbHBNYXRyaXguZDtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDVdID0gaGVscE1hdHJpeC50eDtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDZdID0gaGVscE1hdHJpeC50eTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh4ID49IGxBKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA8IC1sQSB8fCB5ID49IGxBKSB7IC8vIE91dC5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBSaWdodC5cclxuICAgICAgICAgICAgICAgIGlzRG93biA9IHkgPiB0aGlzLl9rWCAqICh4IC0gbEIpICsgcFk7XHJcbiAgICAgICAgICAgICAgICBtYXRyaXhJbmRleCA9ICgoc2VnbWVudFggKiAoc2VnbWVudFkgKyAxKSArIHNlZ21lbnRYICsgaW5kZXhZKSAqIDIgKyAoaXNEb3duID8gMSA6IDApKSAqIDc7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF0cml4Q2FoY2VbbWF0cml4SW5kZXhdID4gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVscE1hdHJpeC5jb3B5RnJvbUFycmF5KG1hdHJpY2VzLCBtYXRyaXhJbmRleCArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRleEluZGV4ID0gKGluZGV4WSArIDEpICogKHNlZ21lbnRYRCArIDIpIC0gMjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGRYID0gdGhpcy5faHVsbENhY2hlWzRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZFkgPSB0aGlzLl9odWxsQ2FjaGVbNV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNYID0gdGhpcy5faHVsbENhY2hlWzBdICsgaW5kZXhZICogZGRYO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzWSA9IHRoaXMuX2h1bGxDYWNoZVsxXSArIGluZGV4WSAqIGRkWTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmVydGljZXMgPSB0aGlzLl92ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldEFmZmluZVRyYW5zZm9ybShsQiwgcFkgKyBkWSwgbEIgLSBsQSwgZFksIHNYICsgZGRYLCBzWSArIGRkWSwgdmVydGljZXNbdmVydGV4SW5kZXggKyBzZWdtZW50WEQgKyAyXSwgdmVydGljZXNbdmVydGV4SW5kZXggKyBzZWdtZW50WEQgKyAzXSwgc1gsIHNZLCBTdXJmYWNlLl9oZWxwVHJhbnNmb3JtLCBoZWxwTWF0cml4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldEFmZmluZVRyYW5zZm9ybShsQSwgcFksIGxCIC0gbEEsIGRZLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleF0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMV0sIHNYLCBzWSwgdmVydGljZXNbdmVydGV4SW5kZXggKyBzZWdtZW50WEQgKyAyXSwgdmVydGljZXNbdmVydGV4SW5kZXggKyBzZWdtZW50WEQgKyAzXSwgU3VyZmFjZS5faGVscFRyYW5zZm9ybSwgaGVscE1hdHJpeCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleF0gPSAxLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyAxXSA9IGhlbHBNYXRyaXguYTtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDJdID0gaGVscE1hdHJpeC5iO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgM10gPSBoZWxwTWF0cml4LmM7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA0XSA9IGhlbHBNYXRyaXguZDtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDVdID0gaGVscE1hdHJpeC50eDtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDZdID0gaGVscE1hdHJpeC50eTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh5IDwgLWxBKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeCA8IC1sQSB8fCB4ID49IGxBKSB7IC8vIE91dC5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBVcC5cclxuICAgICAgICAgICAgICAgIGlzRG93biA9IHkgPiB0aGlzLl9rWSAqICh4IC0gcFggLSBkWCkgLSBsQjtcclxuICAgICAgICAgICAgICAgIG1hdHJpeEluZGV4ID0gKHNlZ21lbnRYICogKHNlZ21lbnRZICsgMSkgKyBpbmRleFggKiAyICsgKGlzRG93biA/IDEgOiAwKSkgKiA3O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdHJpeENhaGNlW21hdHJpeEluZGV4XSA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlbHBNYXRyaXguY29weUZyb21BcnJheShtYXRyaWNlcywgbWF0cml4SW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0ZXhJbmRleCA9IGluZGV4WCAqIDI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRkWCA9IHRoaXMuX2h1bGxDYWNoZVsxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRkWSA9IHRoaXMuX2h1bGxDYWNoZVsxMV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNYID0gdGhpcy5faHVsbENhY2hlWzhdICsgaW5kZXhYICogZGRYO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzWSA9IHRoaXMuX2h1bGxDYWNoZVs5XSArIGluZGV4WCAqIGRkWTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmVydGljZXMgPSB0aGlzLl92ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldEFmZmluZVRyYW5zZm9ybShwWCArIGRYLCAtbEEsIGRYLCBsQiAtIGxBLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleCArIDJdLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleCArIDNdLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleF0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMV0sIHNYICsgZGRYLCBzWSArIGRkWSwgU3VyZmFjZS5faGVscFRyYW5zZm9ybSwgaGVscE1hdHJpeCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRBZmZpbmVUcmFuc2Zvcm0ocFgsIC1sQiwgZFgsIGxCIC0gbEEsIHNYLCBzWSwgc1ggKyBkZFgsIHNZICsgZGRZLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleF0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMV0sIFN1cmZhY2UuX2hlbHBUcmFuc2Zvcm0sIGhlbHBNYXRyaXgsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXhdID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgMV0gPSBoZWxwTWF0cml4LmE7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyAyXSA9IGhlbHBNYXRyaXguYjtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDNdID0gaGVscE1hdHJpeC5jO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgNF0gPSBoZWxwTWF0cml4LmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA1XSA9IGhlbHBNYXRyaXgudHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA2XSA9IGhlbHBNYXRyaXgudHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoeSA+PSBsQSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHggPCAtbEEgfHwgeCA+PSBsQSkgeyAvLyAgT3V0LlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIERvd25cclxuICAgICAgICAgICAgICAgIGlzRG93biA9IHkgPiB0aGlzLl9rWSAqICh4IC0gcFggLSBkWCkgKyBsQTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeEluZGV4ID0gKChzZWdtZW50WCAqIChzZWdtZW50WSArIDEpICsgc2VnbWVudFggKyBzZWdtZW50WSArIGluZGV4WSkgKiAyICsgKGlzRG93biA/IDEgOiAwKSkgKiA3O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdHJpeENhaGNlW21hdHJpeEluZGV4XSA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlbHBNYXRyaXguY29weUZyb21BcnJheShtYXRyaWNlcywgbWF0cml4SW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0ZXhJbmRleCA9IHNlZ21lbnRZICogKHNlZ21lbnRYRCArIDIpICsgaW5kZXhYICogMjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGRYID0gdGhpcy5faHVsbENhY2hlWzEwXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGRZID0gdGhpcy5faHVsbENhY2hlWzExXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc1ggPSB0aGlzLl9odWxsQ2FjaGVbNl0gLSAoc2VnbWVudFggLSBpbmRleFgpICogZGRYO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzWSA9IHRoaXMuX2h1bGxDYWNoZVs3XSAtIChzZWdtZW50WCAtIGluZGV4WCkgKiBkZFk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gdGhpcy5fdmVydGljZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRBZmZpbmVUcmFuc2Zvcm0ocFggKyBkWCwgbEIsIGRYLCBsQiAtIGxBLCBzWCArIGRkWCwgc1kgKyBkZFksIHNYLCBzWSwgdmVydGljZXNbdmVydGV4SW5kZXggKyAyXSwgdmVydGljZXNbdmVydGV4SW5kZXggKyAzXSwgU3VyZmFjZS5faGVscFRyYW5zZm9ybSwgaGVscE1hdHJpeCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZXRBZmZpbmVUcmFuc2Zvcm0ocFgsIGxBLCBkWCwgbEIgLSBsQSwgdmVydGljZXNbdmVydGV4SW5kZXhdLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleCArIDFdLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleCArIDJdLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleCArIDNdLCBzWCwgc1ksIFN1cmZhY2UuX2hlbHBUcmFuc2Zvcm0sIGhlbHBNYXRyaXgsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXhdID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgMV0gPSBoZWxwTWF0cml4LmE7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyAyXSA9IGhlbHBNYXRyaXguYjtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDNdID0gaGVscE1hdHJpeC5jO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgNF0gPSBoZWxwTWF0cml4LmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA1XSA9IGhlbHBNYXRyaXgudHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA2XSA9IGhlbHBNYXRyaXgudHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IC8vIENlbnRlci5cclxuICAgICAgICAgICAgICAgIGlzRG93biA9IHkgPiB0aGlzLl9rICogKHggLSBwWCAtIGRYKSArIHBZO1xyXG4gICAgICAgICAgICAgICAgbWF0cml4SW5kZXggPSAoKHNlZ21lbnRYICogaW5kZXhZICsgaW5kZXhYKSAqIDIgKyAoaXNEb3duID8gMSA6IDApKSAqIDc7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF0cml4Q2FoY2VbbWF0cml4SW5kZXhdID4gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVscE1hdHJpeC5jb3B5RnJvbUFycmF5KG1hdHJpY2VzLCBtYXRyaXhJbmRleCArIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRleEluZGV4ID0gaW5kZXhYICogMiArIGluZGV4WSAqIChzZWdtZW50WEQgKyAyKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmVydGljZXMgPSB0aGlzLl92ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNEb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldEFmZmluZVRyYW5zZm9ybShwWCArIGRYLCBwWSArIGRZLCBkWCwgZFksIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgNF0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgNV0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgMl0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgM10sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMl0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgM10sIFN1cmZhY2UuX2hlbHBUcmFuc2Zvcm0sIGhlbHBNYXRyaXgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0QWZmaW5lVHJhbnNmb3JtKHBYLCBwWSwgZFgsIGRZLCB2ZXJ0aWNlc1t2ZXJ0ZXhJbmRleF0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMV0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgMl0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgM10sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgMl0sIHZlcnRpY2VzW3ZlcnRleEluZGV4ICsgc2VnbWVudFhEICsgM10sIFN1cmZhY2UuX2hlbHBUcmFuc2Zvcm0sIGhlbHBNYXRyaXgsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXhdID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgMV0gPSBoZWxwTWF0cml4LmE7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyAyXSA9IGhlbHBNYXRyaXguYjtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaWNlc1ttYXRyaXhJbmRleCArIDNdID0gaGVscE1hdHJpeC5jO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpY2VzW21hdHJpeEluZGV4ICsgNF0gPSBoZWxwTWF0cml4LmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA1XSA9IGhlbHBNYXRyaXgudHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cmljZXNbbWF0cml4SW5kZXggKyA2XSA9IGhlbHBNYXRyaXgudHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGhlbHBNYXRyaXg7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFN1cmZhY2UucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoc3VyZmFjZURhdGEsIGFybWF0dXJlVmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JvbmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5pbml0LmNhbGwodGhpcywgc3VyZmFjZURhdGEsIGFybWF0dXJlVmFsdWUpO1xyXG4gICAgICAgICAgICB2YXIgc2VnbWVudFggPSBzdXJmYWNlRGF0YS5zZWdtZW50WDtcclxuICAgICAgICAgICAgdmFyIHNlZ21lbnRZID0gc3VyZmFjZURhdGEuc2VnbWVudFk7XHJcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhDb3VudCA9IHN1cmZhY2VEYXRhLnZlcnRpY2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGxCID0gMTAwMC4wO1xyXG4gICAgICAgICAgICB2YXIgbEEgPSAyMDAuMDtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5fZFggPSBsQSAqIDIuMCAvIHNlZ21lbnRYO1xyXG4gICAgICAgICAgICB0aGlzLl9kWSA9IGxBICogMi4wIC8gc2VnbWVudFk7XHJcbiAgICAgICAgICAgIHRoaXMuX2sgPSAtdGhpcy5fZFkgLyB0aGlzLl9kWDtcclxuICAgICAgICAgICAgdGhpcy5fa1ggPSAtdGhpcy5fZFkgLyAobEIgLSBsQSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2tZID0gLShsQiAtIGxBKSAvIHRoaXMuX2RYO1xyXG4gICAgICAgICAgICB0aGlzLl92ZXJ0aWNlcy5sZW5ndGggPSB2ZXJ0ZXhDb3VudDtcclxuICAgICAgICAgICAgdGhpcy5fZGVmb3JtVmVydGljZXMubGVuZ3RoID0gdmVydGV4Q291bnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeENhaGNlLmxlbmd0aCA9IChzZWdtZW50WCAqIHNlZ21lbnRZICsgc2VnbWVudFggKiAyICsgc2VnbWVudFkgKiAyKSAqIDIgKiA3O1xyXG4gICAgICAgICAgICB0aGlzLl9odWxsQ2FjaGUubGVuZ3RoID0gMTA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGV4Q291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmb3JtVmVydGljZXNbaV0gPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFN1cmZhY2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjYWNoZUZyYW1lSW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5fYmxlbmRTdGF0ZS5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVGcmFtZUluZGV4ID49IDAgJiYgdGhpcy5fY2FjaGVkRnJhbWVJbmRpY2VzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkRnJhbWVJbmRleCA9IHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlc1tjYWNoZUZyYW1lSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZEZyYW1lSW5kZXggPj0gMCAmJiB0aGlzLl9jYWNoZWRGcmFtZUluZGV4ID09PSBjYWNoZWRGcmFtZUluZGV4KSB7IC8vIFNhbWUgY2FjaGUuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNhY2hlZEZyYW1lSW5kZXggPj0gMCkgeyAvLyBIYXMgYmVlbiBDYWNoZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPSBjYWNoZWRGcmFtZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2hhc0NvbnN0cmFpbnQpIHsgLy8gVXBkYXRlIGNvbnN0cmFpbnRzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYXJtYXR1cmUuX2NvbnN0cmFpbnRzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludC5fcm9vdCA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zZm9ybURpcnR5IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLl9wYXJlbnQgIT09IG51bGwgJiYgdGhpcy5fcGFyZW50Ll9jaGlsZHJlblRyYW5zZm9ybURpcnR5KSkgeyAvLyBEaXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPj0gMCkgeyAvLyBTYW1lIGNhY2hlLCBidXQgbm90IHNldCBpbmRleCB5ZXQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlc1tjYWNoZUZyYW1lSW5kZXhdID0gdGhpcy5fY2FjaGVkRnJhbWVJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIERpcnR5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzQ29uc3RyYWludCkgeyAvLyBVcGRhdGUgY29uc3RyYWludHMuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHRoaXMuX2FybWF0dXJlLl9jb25zdHJhaW50czsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50Ll9yb290ID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50LnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RyYW5zZm9ybURpcnR5IHx8ICh0aGlzLl9wYXJlbnQgIT09IG51bGwgJiYgdGhpcy5fcGFyZW50Ll9jaGlsZHJlblRyYW5zZm9ybURpcnR5KSkgeyAvLyBEaXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICBjYWNoZUZyYW1lSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90cmFuc2Zvcm1EaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuVHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fbWF0cml4Q2FoY2UubGVuZ3RoOyBpIDwgbDsgaSArPSA3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWF0cml4Q2FoY2VbaV0gPSAtMS4wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZlcnRpY2VzKCk7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlZEZyYW1lSW5kZXggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ2FjaGUgPSBjYWNoZUZyYW1lSW5kZXggPj0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fbG9jYWxEaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVHbG9iYWxUcmFuc2Zvcm1NYXRyaXgoaXNDYWNoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NhY2hlICYmIHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRGcmFtZUluZGV4ID0gdGhpcy5fY2FjaGVkRnJhbWVJbmRpY2VzW2NhY2hlRnJhbWVJbmRleF0gPSB0aGlzLl9hcm1hdHVyZS5fYXJtYXR1cmVEYXRhLnNldENhY2hlRnJhbWUodGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXgsIHRoaXMuZ2xvYmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5fYXJtYXR1cmVEYXRhLmdldENhY2hlRnJhbWUodGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXgsIHRoaXMuZ2xvYmFsLCB0aGlzLl9jYWNoZWRGcmFtZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBodWxsIHZlcnRpY2VzLlxyXG4gICAgICAgICAgICAgICAgdmFyIGxCID0gMTAwMC4wO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxBID0gMjAwLjA7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGRYID0gMiAqIHRoaXMuZ2xvYmFsLng7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGRZID0gMiAqIHRoaXMuZ2xvYmFsLnk7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgdmFyIGhlbHBQb2ludCA9IFN1cmZhY2UuX2hlbHBQb2ludDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnRyYW5zZm9ybVBvaW50KGxCLCAtbEEsIGhlbHBQb2ludCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9odWxsQ2FjaGVbMF0gPSBoZWxwUG9pbnQueDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h1bGxDYWNoZVsxXSA9IGhlbHBQb2ludC55O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faHVsbENhY2hlWzJdID0gZGRYIC0gaGVscFBvaW50Lng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9odWxsQ2FjaGVbM10gPSBkZFkgLSBoZWxwUG9pbnQueTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnRyYW5zZm9ybVBvaW50KDAuMCwgdGhpcy5fZFksIGhlbHBQb2ludCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9odWxsQ2FjaGVbNF0gPSBoZWxwUG9pbnQueDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h1bGxDYWNoZVs1XSA9IGhlbHBQb2ludC55O1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnRyYW5zZm9ybVBvaW50KGxBLCBsQiwgaGVscFBvaW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h1bGxDYWNoZVs2XSA9IGhlbHBQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faHVsbENhY2hlWzddID0gaGVscFBvaW50Lnk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9odWxsQ2FjaGVbOF0gPSBkZFggLSBoZWxwUG9pbnQueDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h1bGxDYWNoZVs5XSA9IGRkWSAtIGhlbHBQb2ludC55O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXgudHJhbnNmb3JtUG9pbnQodGhpcy5fZFgsIDAuMCwgaGVscFBvaW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h1bGxDYWNoZVsxMF0gPSBoZWxwUG9pbnQueDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h1bGxDYWNoZVsxMV0gPSBoZWxwUG9pbnQueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9jaGlsZHJlblRyYW5zZm9ybURpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZHJlblRyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbG9jYWxEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gU3VyZmFjZTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQm9uZSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuU3VyZmFjZSA9IFN1cmZhY2U7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSBzbG90IGF0dGFjaGVkIHRvIHRoZSBhcm1hdHVyZSwgY29udHJvbHMgdGhlIGRpc3BsYXkgc3RhdHVzIGFuZCBwcm9wZXJ0aWVzIG9mIHRoZSBkaXNwbGF5IG9iamVjdC5cclxuICAgICAqIEEgYm9uZSBjYW4gY29udGFpbiBtdWx0aXBsZSBzbG90cy5cclxuICAgICAqIEEgc2xvdCBjYW4gY29udGFpbiBtdWx0aXBsZSBkaXNwbGF5IG9iamVjdHMsIGRpc3BsYXlpbmcgb25seSBvbmUgb2YgdGhlIGRpc3BsYXkgb2JqZWN0cyBhdCBhIHRpbWUsXHJcbiAgICAgKiBidXQgeW91IGNhbiB0b2dnbGUgdGhlIGRpc3BsYXkgb2JqZWN0IGludG8gZnJhbWUgYW5pbWF0aW9uIHdoaWxlIHRoZSBhbmltYXRpb24gaXMgcGxheWluZy5cclxuICAgICAqIFRoZSBkaXNwbGF5IG9iamVjdCBjYW4gYmUgYSBub3JtYWwgdGV4dHVyZSwgb3IgaXQgY2FuIGJlIGEgZGlzcGxheSBvZiBhIGNoaWxkIGFybWF0dXJlLCBhIGdyaWQgZGlzcGxheSBvYmplY3QsXHJcbiAgICAgKiBhbmQgYSBjdXN0b20gb3RoZXIgZGlzcGxheSBvYmplY3QuXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkJvbmVcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdERhdGFcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDmj5Lmp73pmYTnnYDlnKjpqqjpqrzkuIrvvIzmjqfliLbmmL7npLrlr7nosaHnmoTmmL7npLrnirbmgIHlkozlsZ7mgKfjgIJcclxuICAgICAqIOS4gOS4qumqqOmqvOS4iuWPr+S7peWMheWQq+WkmuS4quaPkuanveOAglxyXG4gICAgICog5LiA5Liq5o+S5qe95Lit5Y+v5Lul5YyF5ZCr5aSa5Liq5pi+56S65a+56LGh77yM5ZCM5LiA5pe26Ze05Y+q6IO95pi+56S65YW25Lit55qE5LiA5Liq5pi+56S65a+56LGh77yM5L2G5Y+v5Lul5Zyo5Yqo55S75pKt5pS+55qE6L+H56iL5Lit5YiH5o2i5pi+56S65a+56LGh5a6e546w5bin5Yqo55S744CCXHJcbiAgICAgKiDmmL7npLrlr7nosaHlj6/ku6XmmK/mma7pgJrnmoTlm77niYfnurnnkIbvvIzkuZ/lj6/ku6XmmK/lrZDpqqjmnrbnmoTmmL7npLrlrrnlmajvvIznvZHmoLzmmL7npLrlr7nosaHvvIzov5jlj6/ku6XmmK/oh6rlrprkuYnnmoTlhbbku5bmmL7npLrlr7nosaHjgIJcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQXJtYXR1cmVcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQm9uZVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5TbG90RGF0YVxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIFNsb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFNsb3QsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU2xvdCgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLl9sb2NhbE1hdHJpeCA9IG5ldyBkcmFnb25Cb25lcy5NYXRyaXgoKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgX3RoaXMuX2NvbG9yVHJhbnNmb3JtID0gbmV3IGRyYWdvbkJvbmVzLkNvbG9yVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9kaXNwbGF5RGF0YXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2Rpc3BsYXlMaXN0ID0gW107XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLl9kZWZvcm1WZXJ0aWNlcyA9IG51bGw7XHJcbiAgICAgICAgICAgIF90aGlzLl9yYXdEaXNwbGF5ID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgX3RoaXMuX21lc2hEaXNwbGF5ID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBTbG90LnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25DbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgZGlzcG9zZURpc3BsYXlMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9kaXNwbGF5TGlzdDsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBlYWNoRGlzcGxheSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGlmIChlYWNoRGlzcGxheSAhPT0gbnVsbCAmJiBlYWNoRGlzcGxheSAhPT0gdGhpcy5fcmF3RGlzcGxheSAmJiBlYWNoRGlzcGxheSAhPT0gdGhpcy5fbWVzaERpc3BsYXkgJiZcclxuICAgICAgICAgICAgICAgICAgICBkaXNwb3NlRGlzcGxheUxpc3QuaW5kZXhPZihlYWNoRGlzcGxheSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZURpc3BsYXlMaXN0LnB1c2goZWFjaERpc3BsYXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgZGlzcG9zZURpc3BsYXlMaXN0XzEgPSBkaXNwb3NlRGlzcGxheUxpc3Q7IF9iIDwgZGlzcG9zZURpc3BsYXlMaXN0XzEubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWFjaERpc3BsYXkgPSBkaXNwb3NlRGlzcGxheUxpc3RfMVtfYl07XHJcbiAgICAgICAgICAgICAgICBpZiAoZWFjaERpc3BsYXkgaW5zdGFuY2VvZiBkcmFnb25Cb25lcy5Bcm1hdHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2hEaXNwbGF5LmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VEaXNwbGF5KGVhY2hEaXNwbGF5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGVmb3JtVmVydGljZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZm9ybVZlcnRpY2VzLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9tZXNoRGlzcGxheSAhPT0gbnVsbCAmJiB0aGlzLl9tZXNoRGlzcGxheSAhPT0gdGhpcy5fcmF3RGlzcGxheSkgeyAvLyBNYXkgYmUgX21lc2hEaXNwbGF5IGFuZCBfcmF3RGlzcGxheSBpcyB0aGUgc2FtZSBvbmUuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwb3NlRGlzcGxheSh0aGlzLl9tZXNoRGlzcGxheSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9yYXdEaXNwbGF5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwb3NlRGlzcGxheSh0aGlzLl9yYXdEaXNwbGF5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5Q29udHJvbGxlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl96T3JkZXJEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9ibGVuZE1vZGVEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xvckRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9ibGVuZE1vZGUgPSAwIC8qIE5vcm1hbCAqLztcclxuICAgICAgICAgICAgdGhpcy5fZGlzcGxheUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkRpc3BsYXlJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICB0aGlzLl96T3JkZXIgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bpdm90WCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fcGl2b3RZID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9sb2NhbE1hdHJpeC5pZGVudGl0eSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xvclRyYW5zZm9ybS5pZGVudGl0eSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5TGlzdC5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5RGF0YXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fc2xvdERhdGEgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9yYXdEaXNwbGF5RGF0YXMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5RGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kaW5nQm94RGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fZGVmb3JtVmVydGljZXMgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9yYXdEaXNwbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbWVzaERpc3BsYXkgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGRBcm1hdHVyZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlcyA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFN1cHBvcnQgZGVmYXVsdCBza2luIGRhdGEuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2xvdC5wcm90b3R5cGUuX2dldERlZmF1bHRSYXdEaXNwbGF5RGF0YSA9IGZ1bmN0aW9uIChkaXNwbGF5SW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGRlZmF1bHRTa2luID0gdGhpcy5fYXJtYXR1cmUuX2FybWF0dXJlRGF0YS5kZWZhdWx0U2tpbjtcclxuICAgICAgICAgICAgaWYgKGRlZmF1bHRTa2luICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFJhd0Rpc3BsYXlEYXRhcyA9IGRlZmF1bHRTa2luLmdldERpc3BsYXlzKHRoaXMuX3Nsb3REYXRhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRSYXdEaXNwbGF5RGF0YXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGxheUluZGV4IDwgZGVmYXVsdFJhd0Rpc3BsYXlEYXRhcy5sZW5ndGggPyBkZWZhdWx0UmF3RGlzcGxheURhdGFzW2Rpc3BsYXlJbmRleF0gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2xvdC5wcm90b3R5cGUuX3VwZGF0ZURpc3BsYXlEYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcHJldkRpc3BsYXlEYXRhID0gdGhpcy5fZGlzcGxheURhdGE7XHJcbiAgICAgICAgICAgIHZhciBwcmV2VmVydGljZXNEYXRhID0gdGhpcy5fZGVmb3JtVmVydGljZXMgIT09IG51bGwgPyB0aGlzLl9kZWZvcm1WZXJ0aWNlcy52ZXJ0aWNlc0RhdGEgOiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgcHJldlRleHR1cmVEYXRhID0gdGhpcy5fdGV4dHVyZURhdGE7XHJcbiAgICAgICAgICAgIHZhciByYXdEaXNwbGF5RGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VmVydGljZXNEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fZGlzcGxheURhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9ib3VuZGluZ0JveERhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jhd0Rpc3BsYXlEYXRhcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd0Rpc3BsYXlEYXRhID0gdGhpcy5fZGlzcGxheUluZGV4IDwgdGhpcy5fcmF3RGlzcGxheURhdGFzLmxlbmd0aCA/IHRoaXMuX3Jhd0Rpc3BsYXlEYXRhc1t0aGlzLl9kaXNwbGF5SW5kZXhdIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyYXdEaXNwbGF5RGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd0Rpc3BsYXlEYXRhID0gdGhpcy5fZ2V0RGVmYXVsdFJhd0Rpc3BsYXlEYXRhKHRoaXMuX2Rpc3BsYXlJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheUluZGV4IDwgdGhpcy5fZGlzcGxheURhdGFzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEYXRhID0gdGhpcy5fZGlzcGxheURhdGFzW3RoaXMuX2Rpc3BsYXlJbmRleF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXlEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheURhdGEudHlwZSA9PT0gMiAvKiBNZXNoICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZlcnRpY2VzRGF0YSA9IHRoaXMuX2Rpc3BsYXlEYXRhLnZlcnRpY2VzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fZGlzcGxheURhdGEudHlwZSA9PT0gNCAvKiBQYXRoICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZlcnRpY2VzRGF0YSA9IHRoaXMuX2Rpc3BsYXlEYXRhLnZlcnRpY2VzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmF3RGlzcGxheURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF3RGlzcGxheURhdGEudHlwZSA9PT0gMiAvKiBNZXNoICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWZXJ0aWNlc0RhdGEgPSByYXdEaXNwbGF5RGF0YS52ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmF3RGlzcGxheURhdGEudHlwZSA9PT0gNCAvKiBQYXRoICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWZXJ0aWNlc0RhdGEgPSByYXdEaXNwbGF5RGF0YS52ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheURhdGEudHlwZSA9PT0gMyAvKiBCb3VuZGluZ0JveCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kaW5nQm94RGF0YSA9IHRoaXMuX2Rpc3BsYXlEYXRhLmJvdW5kaW5nQm94O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmF3RGlzcGxheURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF3RGlzcGxheURhdGEudHlwZSA9PT0gMyAvKiBCb3VuZGluZ0JveCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib3VuZGluZ0JveERhdGEgPSByYXdEaXNwbGF5RGF0YS5ib3VuZGluZ0JveDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheURhdGEudHlwZSA9PT0gMCAvKiBJbWFnZSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVEYXRhID0gdGhpcy5fZGlzcGxheURhdGEudGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2Rpc3BsYXlEYXRhLnR5cGUgPT09IDIgLyogTWVzaCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVEYXRhID0gdGhpcy5fZGlzcGxheURhdGEudGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheURhdGEgIT09IHByZXZEaXNwbGF5RGF0YSB8fCBjdXJyZW50VmVydGljZXNEYXRhICE9PSBwcmV2VmVydGljZXNEYXRhIHx8IHRoaXMuX3RleHR1cmVEYXRhICE9PSBwcmV2VGV4dHVyZURhdGEpIHtcclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBwaXZvdCBvZmZzZXQuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZlcnRpY2VzRGF0YSA9PT0gbnVsbCAmJiB0aGlzLl90ZXh0dXJlRGF0YSAhPT0gbnVsbCkgeyAvLyBUT0RPXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlRGlzcGxheURhdGEgPSB0aGlzLl9kaXNwbGF5RGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzLl90ZXh0dXJlRGF0YS5wYXJlbnQuc2NhbGUgKiB0aGlzLl9hcm1hdHVyZS5fYXJtYXR1cmVEYXRhLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9IHRoaXMuX3RleHR1cmVEYXRhLmZyYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bpdm90WCA9IGltYWdlRGlzcGxheURhdGEucGl2b3QueDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9waXZvdFkgPSBpbWFnZURpc3BsYXlEYXRhLnBpdm90Lnk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBmcmFtZSAhPT0gbnVsbCA/IGZyYW1lIDogdGhpcy5fdGV4dHVyZURhdGEucmVnaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHJlY3QuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXh0dXJlRGF0YS5yb3RhdGVkICYmIGZyYW1lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gcmVjdC5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bpdm90WCAqPSB3aWR0aCAqIHNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bpdm90WSAqPSBoZWlnaHQgKiBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGl2b3RYICs9IGZyYW1lLnggKiBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGl2b3RZICs9IGZyYW1lLnkgKiBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHJlcGxhY2UgcGl2b3QuIFRPRE9cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheURhdGEgIT09IG51bGwgJiYgcmF3RGlzcGxheURhdGEgIT09IG51bGwgJiYgdGhpcy5fZGlzcGxheURhdGEgIT09IHJhd0Rpc3BsYXlEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd0Rpc3BsYXlEYXRhLnRyYW5zZm9ybS50b01hdHJpeChTbG90Ll9oZWxwTWF0cml4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2xvdC5faGVscE1hdHJpeC5pbnZlcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2xvdC5faGVscE1hdHJpeC50cmFuc2Zvcm1Qb2ludCgwLjAsIDAuMCwgU2xvdC5faGVscFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGl2b3RYIC09IFNsb3QuX2hlbHBQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9waXZvdFkgLT0gU2xvdC5faGVscFBvaW50Lnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEYXRhLnRyYW5zZm9ybS50b01hdHJpeChTbG90Ll9oZWxwTWF0cml4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2xvdC5faGVscE1hdHJpeC5pbnZlcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2xvdC5faGVscE1hdHJpeC50cmFuc2Zvcm1Qb2ludCgwLjAsIDAuMCwgU2xvdC5faGVscFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGl2b3RYICs9IFNsb3QuX2hlbHBQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9waXZvdFkgKz0gU2xvdC5faGVscFBvaW50Lnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMueURvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGl2b3RZID0gKHRoaXMuX3RleHR1cmVEYXRhLnJvdGF0ZWQgPyB0aGlzLl90ZXh0dXJlRGF0YS5yZWdpb24ud2lkdGggOiB0aGlzLl90ZXh0dXJlRGF0YS5yZWdpb24uaGVpZ2h0KSAqIHNjYWxlIC0gdGhpcy5fcGl2b3RZO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bpdm90WCA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9waXZvdFkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgb3JpZ2luYWwgdHJhbnNmb3JtLlxyXG4gICAgICAgICAgICAgICAgaWYgKHJhd0Rpc3BsYXlEYXRhICE9PSBudWxsKSB7IC8vIENvbXBhdGlibGUuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW4gPSByYXdEaXNwbGF5RGF0YS50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9kaXNwbGF5RGF0YSAhPT0gbnVsbCkgeyAvLyBDb21wYXRpYmxlLlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luID0gdGhpcy5fZGlzcGxheURhdGEudHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW4gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHZlcnRpY2VzLlxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWZXJ0aWNlc0RhdGEgIT09IHByZXZWZXJ0aWNlc0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGVmb3JtVmVydGljZXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVmb3JtVmVydGljZXMgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5EZWZvcm1WZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZm9ybVZlcnRpY2VzLmluaXQoY3VycmVudFZlcnRpY2VzRGF0YSwgdGhpcy5fYXJtYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fZGVmb3JtVmVydGljZXMgIT09IG51bGwgJiYgdGhpcy5fdGV4dHVyZURhdGEgIT09IHByZXZUZXh0dXJlRGF0YSkgeyAvLyBVcGRhdGUgbWVzaCBhZnRlciB1cGRhdGUgZnJhbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVmb3JtVmVydGljZXMudmVydGljZXNEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5RGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTbG90LnByb3RvdHlwZS5fdXBkYXRlRGlzcGxheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHByZXZEaXNwbGF5ID0gdGhpcy5fZGlzcGxheSAhPT0gbnVsbCA/IHRoaXMuX2Rpc3BsYXkgOiB0aGlzLl9yYXdEaXNwbGF5O1xyXG4gICAgICAgICAgICB2YXIgcHJldkNoaWxkQXJtYXR1cmUgPSB0aGlzLl9jaGlsZEFybWF0dXJlO1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgZGlzcGxheSBhbmQgY2hpbGQgYXJtYXR1cmUuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5SW5kZXggPj0gMCAmJiB0aGlzLl9kaXNwbGF5SW5kZXggPCB0aGlzLl9kaXNwbGF5TGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXkgPSB0aGlzLl9kaXNwbGF5TGlzdFt0aGlzLl9kaXNwbGF5SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXkgIT09IG51bGwgJiYgdGhpcy5fZGlzcGxheSBpbnN0YW5jZW9mIGRyYWdvbkJvbmVzLkFybWF0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRBcm1hdHVyZSA9IHRoaXMuX2Rpc3BsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheSA9IHRoaXMuX2NoaWxkQXJtYXR1cmUuZGlzcGxheTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkQXJtYXR1cmUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZEFybWF0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgZGlzcGxheS5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnREaXNwbGF5ID0gdGhpcy5fZGlzcGxheSAhPT0gbnVsbCA/IHRoaXMuX2Rpc3BsYXkgOiB0aGlzLl9yYXdEaXNwbGF5O1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudERpc3BsYXkgIT09IHByZXZEaXNwbGF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vblVwZGF0ZURpc3BsYXkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcGxhY2VEaXNwbGF5KHByZXZEaXNwbGF5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Zpc2libGVEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZE1vZGVEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvckRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgZnJhbWUuXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50RGlzcGxheSA9PT0gdGhpcy5fcmF3RGlzcGxheSB8fCBjdXJyZW50RGlzcGxheSA9PT0gdGhpcy5fbWVzaERpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUZyYW1lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gVXBkYXRlIGNoaWxkIGFybWF0dXJlLlxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2hpbGRBcm1hdHVyZSAhPT0gcHJldkNoaWxkQXJtYXR1cmUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2Q2hpbGRBcm1hdHVyZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZDaGlsZEFybWF0dXJlLl9wYXJlbnQgPSBudWxsOyAvLyBVcGRhdGUgY2hpbGQgYXJtYXR1cmUgcGFyZW50LlxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZDaGlsZEFybWF0dXJlLmNsb2NrID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldkNoaWxkQXJtYXR1cmUuaW5oZXJpdEFuaW1hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2Q2hpbGRBcm1hdHVyZS5hbmltYXRpb24ucmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2hpbGRBcm1hdHVyZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkQXJtYXR1cmUuX3BhcmVudCA9IHRoaXM7IC8vIFVwZGF0ZSBjaGlsZCBhcm1hdHVyZSBwYXJlbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRBcm1hdHVyZS5jbG9jayA9IHRoaXMuX2FybWF0dXJlLmNsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGlsZEFybWF0dXJlLmluaGVyaXRBbmltYXRpb24pIHsgLy8gU2V0IGNoaWxkIGFybWF0dXJlIGNhY2hlIGZyYW1lUmF0ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NoaWxkQXJtYXR1cmUuY2FjaGVGcmFtZVJhdGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZUZyYW1lUmF0ZSA9IHRoaXMuX2FybWF0dXJlLmNhY2hlRnJhbWVSYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlRnJhbWVSYXRlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRBcm1hdHVyZS5jYWNoZUZyYW1lUmF0ZSA9IGNhY2hlRnJhbWVSYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoaWxkIGFybWF0dXJlIGFjdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheURhdGEgIT09IG51bGwgJiYgdGhpcy5fZGlzcGxheURhdGEudHlwZSA9PT0gMSAvKiBBcm1hdHVyZSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHRoaXMuX2Rpc3BsYXlEYXRhLmFjdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fZGlzcGxheUluZGV4ID49IDAgJiYgdGhpcy5fcmF3RGlzcGxheURhdGFzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3RGlzcGxheURhdGEgPSB0aGlzLl9kaXNwbGF5SW5kZXggPCB0aGlzLl9yYXdEaXNwbGF5RGF0YXMubGVuZ3RoID8gdGhpcy5fcmF3RGlzcGxheURhdGFzW3RoaXMuX2Rpc3BsYXlJbmRleF0gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhd0Rpc3BsYXlEYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3RGlzcGxheURhdGEgPSB0aGlzLl9nZXREZWZhdWx0UmF3RGlzcGxheURhdGEodGhpcy5fZGlzcGxheUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYXdEaXNwbGF5RGF0YSAhPT0gbnVsbCAmJiByYXdEaXNwbGF5RGF0YS50eXBlID09PSAxIC8qIEFybWF0dXJlICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJhd0Rpc3BsYXlEYXRhLmFjdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbnMgIT09IG51bGwgJiYgYWN0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFjdGlvbnNfMSA9IGFjdGlvbnM7IF9pIDwgYWN0aW9uc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhY3Rpb25zXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudE9iamVjdCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnb25Cb25lcy5FdmVudE9iamVjdC5hY3Rpb25EYXRhVG9JbnN0YW5jZShhY3Rpb24sIGV2ZW50T2JqZWN0LCB0aGlzLl9hcm1hdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRPYmplY3Quc2xvdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2J1ZmZlckFjdGlvbihldmVudE9iamVjdCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRBcm1hdHVyZS5hbmltYXRpb24ucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTbG90LnByb3RvdHlwZS5fdXBkYXRlR2xvYmFsVHJhbnNmb3JtTWF0cml4ID0gZnVuY3Rpb24gKGlzQ2FjaGUpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudE1hdHJpeCA9IHRoaXMuX3BhcmVudC5fYm9uZURhdGEudHlwZSA9PT0gMCAvKiBCb25lICovID8gdGhpcy5fcGFyZW50Lmdsb2JhbFRyYW5zZm9ybU1hdHJpeCA6IHRoaXMuX3BhcmVudC5fZ2V0R2xvYmFsVHJhbnNmb3JtTWF0cml4KHRoaXMuZ2xvYmFsLngsIHRoaXMuZ2xvYmFsLnkpO1xyXG4gICAgICAgICAgICB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeC5jb3B5RnJvbSh0aGlzLl9sb2NhbE1hdHJpeCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LmNvbmNhdChwYXJlbnRNYXRyaXgpO1xyXG4gICAgICAgICAgICBpZiAoaXNDYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWwuZnJvbU1hdHJpeCh0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9nbG9iYWxEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNsb3QucHJvdG90eXBlLl9zZXREaXNwbGF5SW5kZXggPSBmdW5jdGlvbiAodmFsdWUsIGlzQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FuaW1hdGlvbiA9PT0gdm9pZCAwKSB7IGlzQW5pbWF0aW9uID0gZmFsc2U7IH1cclxuICAgICAgICAgICAgaWYgKGlzQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRGlzcGxheUluZGV4ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkRpc3BsYXlJbmRleCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5SW5kZXggPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZGlzcGxheUluZGV4ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURpc3BsYXlEYXRhKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5RGlydHk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBTbG90LnByb3RvdHlwZS5fc2V0Wm9yZGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl96T3JkZXIgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAvL3JldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl96T3JkZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5fek9yZGVyRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fek9yZGVyRGlydHk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBTbG90LnByb3RvdHlwZS5fc2V0Q29sb3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29sb3JUcmFuc2Zvcm0uY29weUZyb20odmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xvckRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yRGlydHk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBTbG90LnByb3RvdHlwZS5fc2V0RGlzcGxheUxpc3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5TGlzdC5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlMaXN0Lmxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7IC8vIFJldGFpbiBpbnB1dCByZW5kZXIgZGlzcGxheXMuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVhY2hEaXNwbGF5ID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVhY2hEaXNwbGF5ICE9PSBudWxsICYmIGVhY2hEaXNwbGF5ICE9PSB0aGlzLl9yYXdEaXNwbGF5ICYmIGVhY2hEaXNwbGF5ICE9PSB0aGlzLl9tZXNoRGlzcGxheSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhKGVhY2hEaXNwbGF5IGluc3RhbmNlb2YgZHJhZ29uQm9uZXMuQXJtYXR1cmUpICYmIHRoaXMuX2Rpc3BsYXlMaXN0LmluZGV4T2YoZWFjaERpc3BsYXkpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0RGlzcGxheShlYWNoRGlzcGxheSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlMaXN0W2ldID0gZWFjaERpc3BsYXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fZGlzcGxheUxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheUxpc3QubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGlzcGxheUluZGV4ID49IDAgJiYgdGhpcy5fZGlzcGxheUluZGV4IDwgdGhpcy5fZGlzcGxheUxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5RGlydHkgPSB0aGlzLl9kaXNwbGF5ICE9PSB0aGlzLl9kaXNwbGF5TGlzdFt0aGlzLl9kaXNwbGF5SW5kZXhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheURpcnR5ID0gdGhpcy5fZGlzcGxheSAhPT0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVEaXNwbGF5RGF0YSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURpcnR5O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2xvdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChzbG90RGF0YSwgYXJtYXR1cmVWYWx1ZSwgcmF3RGlzcGxheSwgbWVzaERpc3BsYXkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Nsb3REYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fc2xvdERhdGEgPSBzbG90RGF0YTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5faXNGcm9tQ2FjaGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fdmlzaWJsZURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fYmxlbmRNb2RlRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xvckRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fYmxlbmRNb2RlID0gdGhpcy5fc2xvdERhdGEuYmxlbmRNb2RlO1xyXG4gICAgICAgICAgICB0aGlzLl96T3JkZXIgPSB0aGlzLl9zbG90RGF0YS56T3JkZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yVHJhbnNmb3JtLmNvcHlGcm9tKHRoaXMuX3Nsb3REYXRhLmNvbG9yKTtcclxuICAgICAgICAgICAgdGhpcy5fcmF3RGlzcGxheSA9IHJhd0Rpc3BsYXk7XHJcbiAgICAgICAgICAgIHRoaXMuX21lc2hEaXNwbGF5ID0gbWVzaERpc3BsYXk7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlID0gYXJtYXR1cmVWYWx1ZTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdmFyIHNsb3RQYXJlbnQgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lKHRoaXMuX3Nsb3REYXRhLnBhcmVudC5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKHNsb3RQYXJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IHNsb3RQYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBOZXZlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5fYWRkU2xvdCh0aGlzKTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5faW5pdERpc3BsYXkodGhpcy5fcmF3RGlzcGxheSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcmF3RGlzcGxheSAhPT0gdGhpcy5fbWVzaERpc3BsYXkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luaXREaXNwbGF5KHRoaXMuX21lc2hEaXNwbGF5LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fb25VcGRhdGVEaXNwbGF5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FkZERpc3BsYXkoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNsb3QucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjYWNoZUZyYW1lSW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5faXNGcm9tQ2FjaGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXlEaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEaXNwbGF5KCk7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPIHJlbW92ZSBzbG90IG9mZnNldC5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90cmFuc2Zvcm1EaXJ0eSkgeyAvLyBVcGRhdGUgbG9jYWwgbWF0cml4LiAoT25seSB1cGRhdGVkIHdoZW4gYm90aCBkaXNwbGF5IGFuZCB0cmFuc2Zvcm0gYXJlIGRpcnR5LilcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcmlnaW4gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbG9iYWwuY29weUZyb20odGhpcy5vcmlnaW4pLmFkZCh0aGlzLm9mZnNldCkudG9NYXRyaXgodGhpcy5fbG9jYWxNYXRyaXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nbG9iYWwuY29weUZyb20odGhpcy5vZmZzZXQpLnRvTWF0cml4KHRoaXMuX2xvY2FsTWF0cml4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3pPcmRlckRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl96T3JkZXJEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlWk9yZGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNhY2hlRnJhbWVJbmRleCA+PSAwICYmIHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhY2hlZEZyYW1lSW5kZXggPSB0aGlzLl9jYWNoZWRGcmFtZUluZGljZXNbY2FjaGVGcmFtZUluZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWRGcmFtZUluZGV4ID49IDAgJiYgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9PT0gY2FjaGVkRnJhbWVJbmRleCkgeyAvLyBTYW1lIGNhY2hlLlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjYWNoZWRGcmFtZUluZGV4ID49IDApIHsgLy8gSGFzIGJlZW4gQ2FjaGVkLlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRGcmFtZUluZGV4ID0gY2FjaGVkRnJhbWVJbmRleDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3RyYW5zZm9ybURpcnR5IHx8IHRoaXMuX3BhcmVudC5fY2hpbGRyZW5UcmFuc2Zvcm1EaXJ0eSkgeyAvLyBEaXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fY2FjaGVkRnJhbWVJbmRleCA+PSAwKSB7IC8vIFNhbWUgY2FjaGUsIGJ1dCBub3Qgc2V0IGluZGV4IHlldC5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlc1tjYWNoZUZyYW1lSW5kZXhdID0gdGhpcy5fY2FjaGVkRnJhbWVJbmRleDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBEaXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3RyYW5zZm9ybURpcnR5IHx8IHRoaXMuX3BhcmVudC5fY2hpbGRyZW5UcmFuc2Zvcm1EaXJ0eSkgeyAvLyBEaXJ0eS5cclxuICAgICAgICAgICAgICAgIGNhY2hlRnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Zpc2libGVEaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaWJsZURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2JsZW5kTW9kZURpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGVuZE1vZGVEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlQmxlbmRNb2RlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbG9yRGlydHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNvbG9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RlZm9ybVZlcnRpY2VzICE9PSBudWxsICYmIHRoaXMuX2RlZm9ybVZlcnRpY2VzLnZlcnRpY2VzRGF0YSAhPT0gbnVsbCAmJiB0aGlzLl9kaXNwbGF5ID09PSB0aGlzLl9tZXNoRGlzcGxheSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzU2tpbm5lZCA9IHRoaXMuX2RlZm9ybVZlcnRpY2VzLnZlcnRpY2VzRGF0YS53ZWlnaHQgIT09IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNTdXJmYWNlID0gdGhpcy5fcGFyZW50Ll9ib25lRGF0YS50eXBlICE9PSAwIC8qIEJvbmUgKi87XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGVmb3JtVmVydGljZXMudmVydGljZXNEaXJ0eSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChpc1NraW5uZWQgJiYgdGhpcy5fZGVmb3JtVmVydGljZXMuaXNCb25lc1VwZGF0ZSgpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChpc1N1cmZhY2UgJiYgdGhpcy5fcGFyZW50Ll9jaGlsZHJlblRyYW5zZm9ybURpcnR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZm9ybVZlcnRpY2VzLnZlcnRpY2VzRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVNZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTa2lubmVkIHx8IGlzU3VyZmFjZSkgeyAvLyBDb21wYXRpYmxlLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNmb3JtRGlydHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVkRnJhbWVJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaXNDYWNoZSA9IGNhY2hlRnJhbWVJbmRleCA+PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUdsb2JhbFRyYW5zZm9ybU1hdHJpeChpc0NhY2hlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDYWNoZSAmJiB0aGlzLl9jYWNoZWRGcmFtZUluZGljZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkRnJhbWVJbmRleCA9IHRoaXMuX2NhY2hlZEZyYW1lSW5kaWNlc1tjYWNoZUZyYW1lSW5kZXhdID0gdGhpcy5fYXJtYXR1cmUuX2FybWF0dXJlRGF0YS5zZXRDYWNoZUZyYW1lKHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LCB0aGlzLmdsb2JhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNGcm9tQ2FjaGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9hcm1hdHVyZURhdGEuZ2V0Q2FjaGVGcmFtZSh0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeCwgdGhpcy5nbG9iYWwsIHRoaXMuX2NhY2hlZEZyYW1lSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2xvdC5wcm90b3R5cGUudXBkYXRlVHJhbnNmb3JtQW5kTWF0cml4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHJhbnNmb3JtRGlydHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVHbG9iYWxUcmFuc2Zvcm1NYXRyaXgoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNsb3QucHJvdG90eXBlLnJlcGxhY2VEaXNwbGF5RGF0YSA9IGZ1bmN0aW9uICh2YWx1ZSwgZGlzcGxheUluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChkaXNwbGF5SW5kZXggPT09IHZvaWQgMCkgeyBkaXNwbGF5SW5kZXggPSAtMTsgfVxyXG4gICAgICAgICAgICBpZiAoZGlzcGxheUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXlJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5SW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUluZGV4ID0gdGhpcy5fZGlzcGxheUluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5RGF0YXMubGVuZ3RoIDw9IGRpc3BsYXlJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheURhdGFzLmxlbmd0aCA9IGRpc3BsYXlJbmRleCArIDE7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX2Rpc3BsYXlEYXRhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHsgLy8gQ2xlYW4gdW5kZWZpbmVkLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZGlzcGxheURhdGFzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEYXRhc1tpXSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEYXRhc1tkaXNwbGF5SW5kZXhdID0gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENoZWNrIHdoZXRoZXIgYSBzcGVjaWZpYyBwb2ludCBpcyBpbnNpZGUgYSBjdXN0b20gYm91bmRpbmcgYm94IGluIHRoZSBzbG90LlxyXG4gICAgICAgICAqIFRoZSBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgcG9pbnQgaXMgdGhlIGlubmVyIGNvb3JkaW5hdGUgc3lzdGVtIG9mIHRoZSBhcm1hdHVyZS5cclxuICAgICAgICAgKiBDdXN0b20gYm91bmRpbmcgYm94ZXMgbmVlZCB0byBiZSBjdXN0b21pemVkIGluIERyYWdvbmJvbmVzIFByby5cclxuICAgICAgICAgKiBAcGFyYW0geCAtIFRoZSBob3Jpem9udGFsIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB5IC0gVGhlIHZlcnRpY2FsIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50LlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5qOA5p+l54m55a6a54K55piv5ZCm5Zyo5o+S5qe955qE6Ieq5a6a5LmJ6L6555WM5qGG5YaF44CCXHJcbiAgICAgICAgICog54K555qE5Z2Q5qCH57O75Li66aqo5p625YaF5Z2Q5qCH57O744CCXHJcbiAgICAgICAgICog6Ieq5a6a5LmJ6L6555WM5qGG6ZyA6KaB5ZyoIERyYWdvbkJvbmVzIFBybyDkuK3oh6rlrprkuYnjgIJcclxuICAgICAgICAgKiBAcGFyYW0geCAtIOeCueeahOawtOW5s+WdkOagh+OAglxyXG4gICAgICAgICAqIEBwYXJhbSB5IC0g54K555qE5Z6C55u05Z2Q5qCH44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2xvdC5wcm90b3R5cGUuY29udGFpbnNQb2ludCA9IGZ1bmN0aW9uICh4LCB5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ib3VuZGluZ0JveERhdGEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRyYW5zZm9ybUFuZE1hdHJpeCgpO1xyXG4gICAgICAgICAgICBTbG90Ll9oZWxwTWF0cml4LmNvcHlGcm9tKHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4KTtcclxuICAgICAgICAgICAgU2xvdC5faGVscE1hdHJpeC5pbnZlcnQoKTtcclxuICAgICAgICAgICAgU2xvdC5faGVscE1hdHJpeC50cmFuc2Zvcm1Qb2ludCh4LCB5LCBTbG90Ll9oZWxwUG9pbnQpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYm91bmRpbmdCb3hEYXRhLmNvbnRhaW5zUG9pbnQoU2xvdC5faGVscFBvaW50LngsIFNsb3QuX2hlbHBQb2ludC55KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ2hlY2sgd2hldGhlciBhIHNwZWNpZmljIHNlZ21lbnQgaW50ZXJzZWN0cyBhIGN1c3RvbSBib3VuZGluZyBib3ggZm9yIHRoZSBzbG90LlxyXG4gICAgICAgICAqIFRoZSBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgc2VnbWVudCBhbmQgaW50ZXJzZWN0aW9uIGlzIHRoZSBpbm5lciBjb29yZGluYXRlIHN5c3RlbSBvZiB0aGUgYXJtYXR1cmUuXHJcbiAgICAgICAgICogQ3VzdG9tIGJvdW5kaW5nIGJveGVzIG5lZWQgdG8gYmUgY3VzdG9taXplZCBpbiBEcmFnb25ib25lcyBQcm8uXHJcbiAgICAgICAgICogQHBhcmFtIHhBIC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZSBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWdtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB5QSAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIG9mIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlZ21lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHhCIC0gVGhlIGhvcml6b250YWwgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50IG9mIHRoZSBzZWdtZW50LlxyXG4gICAgICAgICAqIEBwYXJhbSB5QiAtIFRoZSB2ZXJ0aWNhbCBjb29yZGluYXRlIG9mIHRoZSBlbmQgcG9pbnQgb2YgdGhlIHNlZ21lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIGludGVyc2VjdGlvblBvaW50QSAtIFRoZSBmaXJzdCBpbnRlcnNlY3Rpb24gYXQgd2hpY2ggYSBsaW5lIHNlZ21lbnQgaW50ZXJzZWN0cyB0aGUgYm91bmRpbmcgYm94IGZyb20gdGhlIGJlZ2lubmluZyB0byB0aGUgZW5kLiAoSWYgbm90IHNldCwgdGhlIGludGVyc2VjdGlvbiBwb2ludCB3aWxsIG5vdCBjYWxjdWxhdGVkKVxyXG4gICAgICAgICAqIEBwYXJhbSBpbnRlcnNlY3Rpb25Qb2ludEIgLSBUaGUgZmlyc3QgaW50ZXJzZWN0aW9uIGF0IHdoaWNoIGEgbGluZSBzZWdtZW50IGludGVyc2VjdHMgdGhlIGJvdW5kaW5nIGJveCBmcm9tIHRoZSBlbmQgdG8gdGhlIGJlZ2lubmluZy4gKElmIG5vdCBzZXQsIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgd2lsbCBub3QgY2FsY3VsYXRlZClcclxuICAgICAgICAgKiBAcGFyYW0gbm9ybWFsUmFkaWFucyAtIFRoZSBub3JtYWwgcmFkaWFucyBvZiB0aGUgdGFuZ2VudCBvZiB0aGUgaW50ZXJzZWN0aW9uIGJvdW5kYXJ5IGJveC4gW3g6IE5vcm1hbCByYWRpYW4gb2YgdGhlIGZpcnN0IGludGVyc2VjdGlvbiB0YW5nZW50LCB5OiBOb3JtYWwgcmFkaWFuIG9mIHRoZSBzZWNvbmQgaW50ZXJzZWN0aW9uIHRhbmdlbnRdIChJZiBub3Qgc2V0LCB0aGUgbm9ybWFsIHdpbGwgbm90IGNhbGN1bGF0ZWQpXHJcbiAgICAgICAgICogQHJldHVybnMgSW50ZXJzZWN0aW9uIHNpdHVhdGlvbi4gWzE6IERpc2pvaW50IGFuZCBzZWdtZW50cyB3aXRoaW4gdGhlIGJvdW5kaW5nIGJveCwgMDogRGlzam9pbnQsIDE6IEludGVyc2VjdGluZyBhbmQgaGF2aW5nIGEgbm9kYWwgcG9pbnQgYW5kIGVuZGluZyBpbiB0aGUgYm91bmRpbmcgYm94LCAyOiBJbnRlcnNlY3RpbmcgYW5kIGhhdmluZyBhIG5vZGFsIHBvaW50IGFuZCBzdGFydGluZyBhdCB0aGUgYm91bmRpbmcgYm94LCAzOiBJbnRlcnNlY3RpbmcgYW5kIGhhdmluZyB0d28gaW50ZXJzZWN0aW9ucywgTjogSW50ZXJzZWN0aW5nIGFuZCBoYXZpbmcgTiBpbnRlcnNlY3Rpb25zXVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5qOA5p+l54m55a6a57q/5q615piv5ZCm5LiO5o+S5qe955qE6Ieq5a6a5LmJ6L6555WM5qGG55u45Lqk44CCXHJcbiAgICAgICAgICog57q/5q615ZKM5Lqk54K555qE5Z2Q5qCH57O75Z2H5Li66aqo5p625YaF5Z2Q5qCH57O744CCXHJcbiAgICAgICAgICog6Ieq5a6a5LmJ6L6555WM5qGG6ZyA6KaB5ZyoIERyYWdvbkJvbmVzIFBybyDkuK3oh6rlrprkuYnjgIJcclxuICAgICAgICAgKiBAcGFyYW0geEEgLSDnur/mrrXotbfngrnnmoTmsLTlubPlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0geUEgLSDnur/mrrXotbfngrnnmoTlnoLnm7TlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0geEIgLSDnur/mrrXnu4jngrnnmoTmsLTlubPlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0geUIgLSDnur/mrrXnu4jngrnnmoTlnoLnm7TlnZDmoIfjgIJcclxuICAgICAgICAgKiBAcGFyYW0gaW50ZXJzZWN0aW9uUG9pbnRBIC0g57q/5q615LuO6LW354K55Yiw57uI54K55LiO6L6555WM5qGG55u45Lqk55qE56ys5LiA5Liq5Lqk54K544CCIO+8iOWmguaenOacquiuvue9ru+8jOWImeS4jeiuoeeul+S6pOeCue+8iVxyXG4gICAgICAgICAqIEBwYXJhbSBpbnRlcnNlY3Rpb25Qb2ludEIgLSDnur/mrrXku47nu4jngrnliLDotbfngrnkuI7ovrnnlYzmoYbnm7jkuqTnmoTnrKzkuIDkuKrkuqTngrnjgIIg77yI5aaC5p6c5pyq6K6+572u77yM5YiZ5LiN6K6h566X5Lqk54K577yJXHJcbiAgICAgICAgICogQHBhcmFtIG5vcm1hbFJhZGlhbnMgLSDkuqTngrnovrnnlYzmoYbliIfnur/nmoTms5Xnur/lvKfluqbjgIIgW3g6IOesrOS4gOS4quS6pOeCueWIh+e6v+eahOazlee6v+W8p+W6piwgeTog56ys5LqM5Liq5Lqk54K55YiH57q/55qE5rOV57q/5byn5bqmXSDvvIjlpoLmnpzmnKrorr7nva7vvIzliJnkuI3orqHnrpfms5Xnur/vvIlcclxuICAgICAgICAgKiBAcmV0dXJucyDnm7jkuqTnmoTmg4XlhrXjgIIgWy0xOiDkuI3nm7jkuqTkuJTnur/mrrXlnKjljIXlm7Tnm5LlhoUsIDA6IOS4jeebuOS6pCwgMTog55u45Lqk5LiU5pyJ5LiA5Liq5Lqk54K55LiU57uI54K55Zyo5YyF5Zu055uS5YaFLCAyOiDnm7jkuqTkuJTmnInkuIDkuKrkuqTngrnkuJTotbfngrnlnKjljIXlm7Tnm5LlhoUsIDM6IOebuOS6pOS4lOacieS4pOS4quS6pOeCuSwgTjog55u45Lqk5LiU5pyJIE4g5Liq5Lqk54K5XVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNsb3QucHJvdG90eXBlLmludGVyc2VjdHNTZWdtZW50ID0gZnVuY3Rpb24gKHhBLCB5QSwgeEIsIHlCLCBpbnRlcnNlY3Rpb25Qb2ludEEsIGludGVyc2VjdGlvblBvaW50Qiwgbm9ybWFsUmFkaWFucykge1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBID09PSB2b2lkIDApIHsgaW50ZXJzZWN0aW9uUG9pbnRBID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRCID09PSB2b2lkIDApIHsgaW50ZXJzZWN0aW9uUG9pbnRCID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAobm9ybWFsUmFkaWFucyA9PT0gdm9pZCAwKSB7IG5vcm1hbFJhZGlhbnMgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ib3VuZGluZ0JveERhdGEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVHJhbnNmb3JtQW5kTWF0cml4KCk7XHJcbiAgICAgICAgICAgIFNsb3QuX2hlbHBNYXRyaXguY29weUZyb20odGhpcy5nbG9iYWxUcmFuc2Zvcm1NYXRyaXgpO1xyXG4gICAgICAgICAgICBTbG90Ll9oZWxwTWF0cml4LmludmVydCgpO1xyXG4gICAgICAgICAgICBTbG90Ll9oZWxwTWF0cml4LnRyYW5zZm9ybVBvaW50KHhBLCB5QSwgU2xvdC5faGVscFBvaW50KTtcclxuICAgICAgICAgICAgeEEgPSBTbG90Ll9oZWxwUG9pbnQueDtcclxuICAgICAgICAgICAgeUEgPSBTbG90Ll9oZWxwUG9pbnQueTtcclxuICAgICAgICAgICAgU2xvdC5faGVscE1hdHJpeC50cmFuc2Zvcm1Qb2ludCh4QiwgeUIsIFNsb3QuX2hlbHBQb2ludCk7XHJcbiAgICAgICAgICAgIHhCID0gU2xvdC5faGVscFBvaW50Lng7XHJcbiAgICAgICAgICAgIHlCID0gU2xvdC5faGVscFBvaW50Lnk7XHJcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb25Db3VudCA9IHRoaXMuX2JvdW5kaW5nQm94RGF0YS5pbnRlcnNlY3RzU2VnbWVudCh4QSwgeUEsIHhCLCB5QiwgaW50ZXJzZWN0aW9uUG9pbnRBLCBpbnRlcnNlY3Rpb25Qb2ludEIsIG5vcm1hbFJhZGlhbnMpO1xyXG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uQ291bnQgPT09IDEgfHwgaW50ZXJzZWN0aW9uQ291bnQgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnRyYW5zZm9ybVBvaW50KGludGVyc2VjdGlvblBvaW50QS54LCBpbnRlcnNlY3Rpb25Qb2ludEEueSwgaW50ZXJzZWN0aW9uUG9pbnRBKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRCLnggPSBpbnRlcnNlY3Rpb25Qb2ludEEueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdGlvblBvaW50Qi55ID0gaW50ZXJzZWN0aW9uUG9pbnRBLnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW50ZXJzZWN0aW9uUG9pbnRCICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnRyYW5zZm9ybVBvaW50KGludGVyc2VjdGlvblBvaW50Qi54LCBpbnRlcnNlY3Rpb25Qb2ludEIueSwgaW50ZXJzZWN0aW9uUG9pbnRCKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uUG9pbnRBICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsVHJhbnNmb3JtTWF0cml4LnRyYW5zZm9ybVBvaW50KGludGVyc2VjdGlvblBvaW50QS54LCBpbnRlcnNlY3Rpb25Qb2ludEEueSwgaW50ZXJzZWN0aW9uUG9pbnRBKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50QiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeC50cmFuc2Zvcm1Qb2ludChpbnRlcnNlY3Rpb25Qb2ludEIueCwgaW50ZXJzZWN0aW9uUG9pbnRCLnksIGludGVyc2VjdGlvblBvaW50Qik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbFJhZGlhbnMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeC50cmFuc2Zvcm1Qb2ludChNYXRoLmNvcyhub3JtYWxSYWRpYW5zLngpLCBNYXRoLnNpbihub3JtYWxSYWRpYW5zLngpLCBTbG90Ll9oZWxwUG9pbnQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueCA9IE1hdGguYXRhbjIoU2xvdC5faGVscFBvaW50LnksIFNsb3QuX2hlbHBQb2ludC54KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdsb2JhbFRyYW5zZm9ybU1hdHJpeC50cmFuc2Zvcm1Qb2ludChNYXRoLmNvcyhub3JtYWxSYWRpYW5zLnkpLCBNYXRoLnNpbihub3JtYWxSYWRpYW5zLnkpLCBTbG90Ll9oZWxwUG9pbnQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFJhZGlhbnMueSA9IE1hdGguYXRhbjIoU2xvdC5faGVscFBvaW50LnksIFNsb3QuX2hlbHBQb2ludC54KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uQ291bnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEZvcmNlcyB0aGUgc2xvdCB0byB1cGRhdGUgdGhlIHN0YXRlIG9mIHRoZSBkaXNwbGF5IG9iamVjdCBpbiB0aGUgbmV4dCBmcmFtZS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW8uuWItuaPkuanveWcqOS4i+S4gOW4p+abtOaWsOaYvuekuuWvueixoeeahOeKtuaAgeOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNsb3QucHJvdG90eXBlLmludmFsaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJ2aXNpYmxlXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIHZpc2libGUgb2Ygc2xvdCdzIGRpc3BsYXkgb2JqZWN0LlxyXG4gICAgICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuNlxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOaPkuanveeahOaYvuekuuWvueixoeeahOWPr+ingeOAglxyXG4gICAgICAgICAgICAgKiBAZGVmYXVsdCB0cnVlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuNlxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Zpc2libGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmlzaWJsZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVWaXNpYmxlKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJkaXNwbGF5SW5kZXhcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgaW5kZXggb2YgdGhlIGRpc3BsYXkgb2JqZWN0IGRpc3BsYXllZCBpbiB0aGUgZGlzcGxheSBsaXN0LlxyXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAgICAgKiAgICAgbGV0IHNsb3QgPSBhcm1hdHVyZS5nZXRTbG90KFwid2VhcG9uXCIpO1xyXG4gICAgICAgICAgICAgKiAgICAgc2xvdC5kaXNwbGF5SW5kZXggPSAzO1xyXG4gICAgICAgICAgICAgKiAgICAgc2xvdC5kaXNwbGF5Q29udHJvbGxlciA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5q2k5pe25pi+56S655qE5pi+56S65a+56LGh5Zyo5pi+56S65YiX6KGo5Lit55qE57Si5byV44CCXHJcbiAgICAgICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICAgICAqICAgICBsZXQgc2xvdCA9IGFybWF0dXJlLmdldFNsb3QoXCJ3ZWFwb25cIik7XHJcbiAgICAgICAgICAgICAqICAgICBzbG90LmRpc3BsYXlJbmRleCA9IDM7XHJcbiAgICAgICAgICAgICAqICAgICBzbG90LmRpc3BsYXlDb250cm9sbGVyID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXNwbGF5SW5kZXg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2V0RGlzcGxheUluZGV4KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKC0xKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNsb3QucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgc2xvdCBuYW1lLlxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlNsb3REYXRhI25hbWVcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5o+S5qe95ZCN56ew44CCXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdERhdGEjbmFtZVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zbG90RGF0YS5uYW1lO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2xvdC5wcm90b3R5cGUsIFwiZGlzcGxheUxpc3RcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBDb250YWlucyBhIGRpc3BsYXkgbGlzdCBvZiBkaXNwbGF5IG9iamVjdHMgb3IgY2hpbGQgYXJtYXR1cmVzLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDljIXlkKvmmL7npLrlr7nosaHmiJblrZDpqqjmnrbnmoTmmL7npLrliJfooajjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheUxpc3QuY29uY2F0KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmFja3VwRGlzcGxheUxpc3QgPSB0aGlzLl9kaXNwbGF5TGlzdC5jb25jYXQoKTsgLy8gQ29weS5cclxuICAgICAgICAgICAgICAgIHZhciBkaXNwb3NlRGlzcGxheUxpc3QgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zZXREaXNwbGF5TGlzdCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgtMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBSZWxlYXNlIHJlcGxhY2VkIGRpc3BsYXlzLlxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBiYWNrdXBEaXNwbGF5TGlzdF8xID0gYmFja3VwRGlzcGxheUxpc3Q7IF9pIDwgYmFja3VwRGlzcGxheUxpc3RfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWFjaERpc3BsYXkgPSBiYWNrdXBEaXNwbGF5TGlzdF8xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWFjaERpc3BsYXkgIT09IG51bGwgJiYgZWFjaERpc3BsYXkgIT09IHRoaXMuX3Jhd0Rpc3BsYXkgJiYgZWFjaERpc3BsYXkgIT09IHRoaXMuX21lc2hEaXNwbGF5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlMaXN0LmluZGV4T2YoZWFjaERpc3BsYXkpIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NlRGlzcGxheUxpc3QuaW5kZXhPZihlYWNoRGlzcGxheSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VEaXNwbGF5TGlzdC5wdXNoKGVhY2hEaXNwbGF5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGRpc3Bvc2VEaXNwbGF5TGlzdF8yID0gZGlzcG9zZURpc3BsYXlMaXN0OyBfYSA8IGRpc3Bvc2VEaXNwbGF5TGlzdF8yLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlYWNoRGlzcGxheSA9IGRpc3Bvc2VEaXNwbGF5TGlzdF8yW19hXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWFjaERpc3BsYXkgaW5zdGFuY2VvZiBkcmFnb25Cb25lcy5Bcm1hdHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAoZWFjaERpc3BsYXkgYXMgQXJtYXR1cmUpLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VEaXNwbGF5KGVhY2hEaXNwbGF5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJzbG90RGF0YVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBzbG90IGRhdGEuXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdERhdGFcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5o+S5qe95pWw5o2u44CCXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2xvdERhdGFcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2xvdERhdGE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJyYXdEaXNwbGF5RGF0YXNcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd0Rpc3BsYXlEYXRhcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yYXdEaXNwbGF5RGF0YXMgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jhd0Rpc3BsYXlEYXRhcyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jhd0Rpc3BsYXlEYXRhcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlEYXRhcy5sZW5ndGggPSB0aGlzLl9yYXdEaXNwbGF5RGF0YXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fZGlzcGxheURhdGFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3RGlzcGxheURhdGEgPSB0aGlzLl9yYXdEaXNwbGF5RGF0YXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYXdEaXNwbGF5RGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3RGlzcGxheURhdGEgPSB0aGlzLl9nZXREZWZhdWx0UmF3RGlzcGxheURhdGEoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheURhdGFzW2ldID0gcmF3RGlzcGxheURhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheURhdGFzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJkaXNwbGF5RGF0YVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheURhdGE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJib3VuZGluZ0JveERhdGFcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgY3VzdG9tIGJvdW5kaW5nIGJveCBkYXRhIGZvciB0aGUgc2xvdCBhdCBjdXJyZW50IHRpbWUuXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOaPkuanveatpOaXtueahOiHquWumuS5ieWMheWbtOebkuaVsOaNruOAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ib3VuZGluZ0JveERhdGE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJyYXdEaXNwbGF5XCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYXdEaXNwbGF5O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2xvdC5wcm90b3R5cGUsIFwibWVzaERpc3BsYXlcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21lc2hEaXNwbGF5O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2xvdC5wcm90b3R5cGUsIFwiZGlzcGxheVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBkaXNwbGF5IG9iamVjdCB0aGF0IHRoZSBzbG90IGRpc3BsYXlzIGF0IHRoaXMgdGltZS5cclxuICAgICAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgICAgICogPHByZT5cclxuICAgICAgICAgICAgICogICAgIGxldCBzbG90ID0gYXJtYXR1cmUuZ2V0U2xvdChcInRleHRcIik7XHJcbiAgICAgICAgICAgICAqICAgICBzbG90LmRpc3BsYXkgPSBuZXcgeW91ckVuZ2luZS5UZXh0RmllbGQoKTtcclxuICAgICAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOaPkuanveatpOaXtuaYvuekuueahOaYvuekuuWvueixoeOAglxyXG4gICAgICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAgICAgKiAgICAgbGV0IHNsb3QgPSBhcm1hdHVyZS5nZXRTbG90KFwidGV4dFwiKTtcclxuICAgICAgICAgICAgICogICAgIHNsb3QuZGlzcGxheSA9IG5ldyB5b3VyRW5naW5lLlRleHRGaWVsZCgpO1xyXG4gICAgICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGxheTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5ID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5TGlzdExlbmd0aCA9IHRoaXMuX2Rpc3BsYXlMaXN0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXNwbGF5SW5kZXggPCAwICYmIGRpc3BsYXlMaXN0TGVuZ3RoID09PSAwKSB7IC8vIEVtcHJ0eS5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5SW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Rpc3BsYXlJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZURpc3BsYXlMaXN0ID0gdGhpcy5kaXNwbGF5TGlzdDsgLy8gQ29weS5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcGxheUxpc3RMZW5ndGggPD0gdGhpcy5fZGlzcGxheUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEaXNwbGF5TGlzdC5sZW5ndGggPSB0aGlzLl9kaXNwbGF5SW5kZXggKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlRGlzcGxheUxpc3RbdGhpcy5fZGlzcGxheUluZGV4XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheUxpc3QgPSByZXBsYWNlRGlzcGxheUxpc3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTbG90LnByb3RvdHlwZSwgXCJjaGlsZEFybWF0dXJlXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIGNoaWxkIGFybWF0dXJlIHRoYXQgdGhlIHNsb3QgZGlzcGxheWVkIGF0IGN1cnJlbnQgdGltZS5cclxuICAgICAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgICAgICogPHByZT5cclxuICAgICAgICAgICAgICogICAgIGxldCBzbG90ID0gYXJtYXR1cmUuZ2V0U2xvdChcIndlYXBvblwiKTtcclxuICAgICAgICAgICAgICogbGV0IHByZXZDaGlsZEFybWF0dXJlID0gc2xvdC5jaGlsZEFybWF0dXJlO1xyXG4gICAgICAgICAgICAgKiBpZiAocHJldkNoaWxkQXJtYXR1cmUpIHtcclxuICAgICAgICAgICAgICogcHJldkNoaWxkQXJtYXR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgKiAgICAgfVxyXG4gICAgICAgICAgICAgKiAgICAgc2xvdC5jaGlsZEFybWF0dXJlID0gZmFjdG9yeS5idWlsZEFybWF0dXJlKFwid2VhcG9uX2JsYWJsYVwiLCBcIndlYXBvbl9ibGFibGFfcHJvamVjdFwiKTtcclxuICAgICAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOaPkuanveatpOaXtuaYvuekuueahOWtkOmqqOaetuOAglxyXG4gICAgICAgICAgICAgKiDms6jmhI/vvIzooqvmm7/mjaLnmoTlr7nosaHmiJblrZDpqqjmnrblubbkuI3kvJrooqvlm57mlLbvvIzmoLnmja7or63oqIDlkozlvJXmk47nmoTkuI3lkIzvvIzpnIDopoHpop3lpJblpITnkIbjgIJcclxuICAgICAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgICAgICogPHByZT5cclxuICAgICAgICAgICAgICogICAgIGxldCBzbG90ID0gYXJtYXR1cmUuZ2V0U2xvdChcIndlYXBvblwiKTtcclxuICAgICAgICAgICAgICogbGV0IHByZXZDaGlsZEFybWF0dXJlID0gc2xvdC5jaGlsZEFybWF0dXJlO1xyXG4gICAgICAgICAgICAgKiBpZiAocHJldkNoaWxkQXJtYXR1cmUpIHtcclxuICAgICAgICAgICAgICogcHJldkNoaWxkQXJtYXR1cmUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgKiAgICAgfVxyXG4gICAgICAgICAgICAgKiAgICAgc2xvdC5jaGlsZEFybWF0dXJlID0gZmFjdG9yeS5idWlsZEFybWF0dXJlKFwid2VhcG9uX2JsYWJsYVwiLCBcIndlYXBvbl9ibGFibGFfcHJvamVjdFwiKTtcclxuICAgICAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkQXJtYXR1cmU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2hpbGRBcm1hdHVyZSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNsb3QucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBwYXJlbnQgYm9uZSB0byB3aGljaCBpdCBiZWxvbmdzLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmiYDlsZ7nmoTniLbpqqjpqrzjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIERlcHJlY2F0ZWQsIHBsZWFzZSByZWZlciB0byB7QGxpbmsgI2Rpc3BsYXl9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rICNkaXNwbGF5feOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2xvdC5wcm90b3R5cGUuZ2V0RGlzcGxheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIERlcHJlY2F0ZWQsIHBsZWFzZSByZWZlciB0byB7QGxpbmsgI2Rpc3BsYXl9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rICNkaXNwbGF5feOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU2xvdC5wcm90b3R5cGUuc2V0RGlzcGxheSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkgPSB2YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBTbG90O1xyXG4gICAgfShkcmFnb25Cb25lcy5UcmFuc2Zvcm1PYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLlNsb3QgPSBTbG90O1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBDb25zdHJhaW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhDb25zdHJhaW50LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIENvbnN0cmFpbnQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgQ29uc3RyYWludC5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fcm9vdCA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2JvbmUgPSBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cmFpbnQucHJvdG90eXBlLCBcIm5hbWVcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25zdHJhaW50RGF0YS5uYW1lO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBDb25zdHJhaW50Ll9oZWxwTWF0cml4ID0gbmV3IGRyYWdvbkJvbmVzLk1hdHJpeCgpO1xyXG4gICAgICAgIENvbnN0cmFpbnQuX2hlbHBUcmFuc2Zvcm0gPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgQ29uc3RyYWludC5faGVscFBvaW50ID0gbmV3IGRyYWdvbkJvbmVzLlBvaW50KCk7XHJcbiAgICAgICAgcmV0dXJuIENvbnN0cmFpbnQ7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLkNvbnN0cmFpbnQgPSBDb25zdHJhaW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIElLQ29uc3RyYWludCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoSUtDb25zdHJhaW50LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIElLQ29uc3RyYWludCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBJS0NvbnN0cmFpbnQudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5JS0NvbnN0cmFpbnRdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBJS0NvbnN0cmFpbnQucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkNsZWFyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3NjYWxlRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9iZW5kUG9zaXRpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fd2VpZ2h0ID0gMS4wO1xyXG4gICAgICAgICAgICB0aGlzLl9jb25zdHJhaW50RGF0YSA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBJS0NvbnN0cmFpbnQucHJvdG90eXBlLl9jb21wdXRlQSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGlrR2xvYmFsID0gdGhpcy5fdGFyZ2V0Lmdsb2JhbDtcclxuICAgICAgICAgICAgdmFyIGdsb2JhbCA9IHRoaXMuX3Jvb3QuZ2xvYmFsO1xyXG4gICAgICAgICAgICB2YXIgZ2xvYmFsVHJhbnNmb3JtTWF0cml4ID0gdGhpcy5fcm9vdC5nbG9iYWxUcmFuc2Zvcm1NYXRyaXg7XHJcbiAgICAgICAgICAgIHZhciByYWRpYW4gPSBNYXRoLmF0YW4yKGlrR2xvYmFsLnkgLSBnbG9iYWwueSwgaWtHbG9iYWwueCAtIGdsb2JhbC54KTtcclxuICAgICAgICAgICAgaWYgKGdsb2JhbC5zY2FsZVggPCAwLjApIHtcclxuICAgICAgICAgICAgICAgIHJhZGlhbiArPSBNYXRoLlBJO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdsb2JhbC5yb3RhdGlvbiArPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKHJhZGlhbiAtIGdsb2JhbC5yb3RhdGlvbikgKiB0aGlzLl93ZWlnaHQ7XHJcbiAgICAgICAgICAgIGdsb2JhbC50b01hdHJpeChnbG9iYWxUcmFuc2Zvcm1NYXRyaXgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSUtDb25zdHJhaW50LnByb3RvdHlwZS5fY29tcHV0ZUIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBib25lTGVuZ3RoID0gdGhpcy5fYm9uZS5fYm9uZURhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5fcm9vdDtcclxuICAgICAgICAgICAgdmFyIGlrR2xvYmFsID0gdGhpcy5fdGFyZ2V0Lmdsb2JhbDtcclxuICAgICAgICAgICAgdmFyIHBhcmVudEdsb2JhbCA9IHBhcmVudC5nbG9iYWw7XHJcbiAgICAgICAgICAgIHZhciBnbG9iYWwgPSB0aGlzLl9ib25lLmdsb2JhbDtcclxuICAgICAgICAgICAgdmFyIGdsb2JhbFRyYW5zZm9ybU1hdHJpeCA9IHRoaXMuX2JvbmUuZ2xvYmFsVHJhbnNmb3JtTWF0cml4O1xyXG4gICAgICAgICAgICB2YXIgeCA9IGdsb2JhbFRyYW5zZm9ybU1hdHJpeC5hICogYm9uZUxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIHkgPSBnbG9iYWxUcmFuc2Zvcm1NYXRyaXguYiAqIGJvbmVMZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBsTEwgPSB4ICogeCArIHkgKiB5O1xyXG4gICAgICAgICAgICB2YXIgbEwgPSBNYXRoLnNxcnQobExMKTtcclxuICAgICAgICAgICAgdmFyIGRYID0gZ2xvYmFsLnggLSBwYXJlbnRHbG9iYWwueDtcclxuICAgICAgICAgICAgdmFyIGRZID0gZ2xvYmFsLnkgLSBwYXJlbnRHbG9iYWwueTtcclxuICAgICAgICAgICAgdmFyIGxQUCA9IGRYICogZFggKyBkWSAqIGRZO1xyXG4gICAgICAgICAgICB2YXIgbFAgPSBNYXRoLnNxcnQobFBQKTtcclxuICAgICAgICAgICAgdmFyIHJhd1JhZGlhbiA9IGdsb2JhbC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgdmFyIHJhd1BhcmVudFJhZGlhbiA9IHBhcmVudEdsb2JhbC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgdmFyIHJhd1JhZGlhbkEgPSBNYXRoLmF0YW4yKGRZLCBkWCk7XHJcbiAgICAgICAgICAgIGRYID0gaWtHbG9iYWwueCAtIHBhcmVudEdsb2JhbC54O1xyXG4gICAgICAgICAgICBkWSA9IGlrR2xvYmFsLnkgLSBwYXJlbnRHbG9iYWwueTtcclxuICAgICAgICAgICAgdmFyIGxUVCA9IGRYICogZFggKyBkWSAqIGRZO1xyXG4gICAgICAgICAgICB2YXIgbFQgPSBNYXRoLnNxcnQobFRUKTtcclxuICAgICAgICAgICAgdmFyIHJhZGlhbkEgPSAwLjA7XHJcbiAgICAgICAgICAgIGlmIChsTCArIGxQIDw9IGxUIHx8IGxUICsgbEwgPD0gbFAgfHwgbFQgKyBsUCA8PSBsTCkge1xyXG4gICAgICAgICAgICAgICAgcmFkaWFuQSA9IE1hdGguYXRhbjIoaWtHbG9iYWwueSAtIHBhcmVudEdsb2JhbC55LCBpa0dsb2JhbC54IC0gcGFyZW50R2xvYmFsLngpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxMICsgbFAgPD0gbFQpIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxQIDwgbEwpIHtcclxuICAgICAgICAgICAgICAgICAgICByYWRpYW5BICs9IE1hdGguUEk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9IChsUFAgLSBsTEwgKyBsVFQpIC8gKDIuMCAqIGxUVCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IE1hdGguc3FydChsUFAgLSBoICogaCAqIGxUVCkgLyBsVDtcclxuICAgICAgICAgICAgICAgIHZhciBoWCA9IHBhcmVudEdsb2JhbC54ICsgKGRYICogaCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaFkgPSBwYXJlbnRHbG9iYWwueSArIChkWSAqIGgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJYID0gLWRZICogcjtcclxuICAgICAgICAgICAgICAgIHZhciByWSA9IGRYICogcjtcclxuICAgICAgICAgICAgICAgIHZhciBpc1BQUiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudFBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50UGFyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudFBhcmVudE1hdHJpeCA9IHBhcmVudFBhcmVudC5nbG9iYWxUcmFuc2Zvcm1NYXRyaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNQUFIgPSBwYXJlbnRQYXJlbnRNYXRyaXguYSAqIHBhcmVudFBhcmVudE1hdHJpeC5kIC0gcGFyZW50UGFyZW50TWF0cml4LmIgKiBwYXJlbnRQYXJlbnRNYXRyaXguYyA8IDAuMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc1BQUiAhPT0gdGhpcy5fYmVuZFBvc2l0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsLnggPSBoWCAtIHJYO1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC55ID0gaFkgLSByWTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbC54ID0gaFggKyByWDtcclxuICAgICAgICAgICAgICAgICAgICBnbG9iYWwueSA9IGhZICsgclk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByYWRpYW5BID0gTWF0aC5hdGFuMihnbG9iYWwueSAtIHBhcmVudEdsb2JhbC55LCBnbG9iYWwueCAtIHBhcmVudEdsb2JhbC54KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZFIgPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKHJhZGlhbkEgLSByYXdSYWRpYW5BKTtcclxuICAgICAgICAgICAgcGFyZW50R2xvYmFsLnJvdGF0aW9uID0gcmF3UGFyZW50UmFkaWFuICsgZFIgKiB0aGlzLl93ZWlnaHQ7XHJcbiAgICAgICAgICAgIHBhcmVudEdsb2JhbC50b01hdHJpeChwYXJlbnQuZ2xvYmFsVHJhbnNmb3JtTWF0cml4KTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRSYWRpYW5BID0gcmF3UmFkaWFuQSArIGRSICogdGhpcy5fd2VpZ2h0O1xyXG4gICAgICAgICAgICBnbG9iYWwueCA9IHBhcmVudEdsb2JhbC54ICsgTWF0aC5jb3MoY3VycmVudFJhZGlhbkEpICogbFA7XHJcbiAgICAgICAgICAgIGdsb2JhbC55ID0gcGFyZW50R2xvYmFsLnkgKyBNYXRoLnNpbihjdXJyZW50UmFkaWFuQSkgKiBsUDtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdmFyIHJhZGlhbkIgPSBNYXRoLmF0YW4yKGlrR2xvYmFsLnkgLSBnbG9iYWwueSwgaWtHbG9iYWwueCAtIGdsb2JhbC54KTtcclxuICAgICAgICAgICAgaWYgKGdsb2JhbC5zY2FsZVggPCAwLjApIHtcclxuICAgICAgICAgICAgICAgIHJhZGlhbkIgKz0gTWF0aC5QSTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnbG9iYWwucm90YXRpb24gPSBwYXJlbnRHbG9iYWwucm90YXRpb24gKyByYXdSYWRpYW4gLSByYXdQYXJlbnRSYWRpYW4gKyBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKHJhZGlhbkIgLSBkUiAtIHJhd1JhZGlhbikgKiB0aGlzLl93ZWlnaHQ7XHJcbiAgICAgICAgICAgIGdsb2JhbC50b01hdHJpeChnbG9iYWxUcmFuc2Zvcm1NYXRyaXgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSUtDb25zdHJhaW50LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGNvbnN0cmFpbnREYXRhLCBhcm1hdHVyZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29uc3RyYWludERhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jb25zdHJhaW50RGF0YSA9IGNvbnN0cmFpbnREYXRhO1xyXG4gICAgICAgICAgICB0aGlzLl9hcm1hdHVyZSA9IGFybWF0dXJlO1xyXG4gICAgICAgICAgICB0aGlzLl90YXJnZXQgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lKHRoaXMuX2NvbnN0cmFpbnREYXRhLnRhcmdldC5uYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5fcm9vdCA9IHRoaXMuX2FybWF0dXJlLmdldEJvbmUodGhpcy5fY29uc3RyYWludERhdGEucm9vdC5uYW1lKTtcclxuICAgICAgICAgICAgdGhpcy5fYm9uZSA9IHRoaXMuX2NvbnN0cmFpbnREYXRhLmJvbmUgIT09IG51bGwgPyB0aGlzLl9hcm1hdHVyZS5nZXRCb25lKHRoaXMuX2NvbnN0cmFpbnREYXRhLmJvbmUubmFtZSkgOiBudWxsO1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWtDb25zdHJhaW50RGF0YSA9IHRoaXMuX2NvbnN0cmFpbnREYXRhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2NhbGVFbmFibGVkID0gaWtDb25zdHJhaW50RGF0YS5zY2FsZUVuYWJsZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iZW5kUG9zaXRpdmUgPSBpa0NvbnN0cmFpbnREYXRhLmJlbmRQb3NpdGl2ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dlaWdodCA9IGlrQ29uc3RyYWludERhdGEud2VpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QuX2hhc0NvbnN0cmFpbnQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSUtDb25zdHJhaW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QudXBkYXRlQnlDb25zdHJhaW50KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ib25lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ib25lLnVwZGF0ZUJ5Q29uc3RyYWludCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcHV0ZUIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVBKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIElLQ29uc3RyYWludC5wcm90b3R5cGUuaW52YWxpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fcm9vdC5pbnZhbGlkVXBkYXRlKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ib25lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ib25lLmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIElLQ29uc3RyYWludDtcclxuICAgIH0oQ29uc3RyYWludCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuSUtDb25zdHJhaW50ID0gSUtDb25zdHJhaW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIFBhdGhDb25zdHJhaW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhQYXRoQ29uc3RyYWludCwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBQYXRoQ29uc3RyYWludCgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLl9ib25lcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fc3BhY2VzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9wb3NpdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2N1cnZlcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fYm9uZUxlbmd0aHMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX3BhdGhHbG9iYWxWZXJ0aWNlcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fc2VnbWVudHMgPSBbMTBdO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFBhdGhDb25zdHJhaW50LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuUGF0aENvbnN0cmFpbnRdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBQYXRoQ29uc3RyYWludC5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnBhdGhPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLnNwYWNpbmcgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMucm90YXRlT2Zmc2V0ID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZU1peCA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGVNaXggPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhdGhTbG90ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYm9uZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fc3BhY2VzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9ucy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJ2ZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fYm9uZUxlbmd0aHMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fcGF0aEdsb2JhbFZlcnRpY2VzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBQYXRoQ29uc3RyYWludC5wcm90b3R5cGUuX3VwZGF0ZVBhdGhWZXJ0aWNlcyA9IGZ1bmN0aW9uICh2ZXJ0aWNlc0RhdGEpIHtcclxuICAgICAgICAgICAgLy/orqHnrpfmm7Lnur/nmoToioLngrnmlbDmja5cclxuICAgICAgICAgICAgdmFyIGFybWF0dXJlID0gdGhpcy5fYXJtYXR1cmU7XHJcbiAgICAgICAgICAgIHZhciBkcmFnb25Cb25lc0RhdGEgPSBhcm1hdHVyZS5hcm1hdHVyZURhdGEucGFyZW50O1xyXG4gICAgICAgICAgICB2YXIgc2NhbGUgPSBhcm1hdHVyZS5hcm1hdHVyZURhdGEuc2NhbGU7XHJcbiAgICAgICAgICAgIHZhciBpbnRBcnJheSA9IGRyYWdvbkJvbmVzRGF0YS5pbnRBcnJheTtcclxuICAgICAgICAgICAgdmFyIGZsb2F0QXJyYXkgPSBkcmFnb25Cb25lc0RhdGEuZmxvYXRBcnJheTtcclxuICAgICAgICAgICAgdmFyIHBhdGhPZmZzZXQgPSB2ZXJ0aWNlc0RhdGEub2Zmc2V0O1xyXG4gICAgICAgICAgICB2YXIgcGF0aFZlcnRleENvdW50ID0gaW50QXJyYXlbcGF0aE9mZnNldCArIDAgLyogUGF0aFZlcnRleENvdW50ICovXTtcclxuICAgICAgICAgICAgdmFyIHBhdGhWZXJ0ZXhPZmZzZXQgPSBpbnRBcnJheVtwYXRoT2Zmc2V0ICsgMiAvKiBQYXRoRmxvYXRPZmZzZXQgKi9dO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXRoR2xvYmFsVmVydGljZXMubGVuZ3RoID0gcGF0aFZlcnRleENvdW50ICogMjtcclxuICAgICAgICAgICAgdmFyIHdlaWdodERhdGEgPSB2ZXJ0aWNlc0RhdGEud2VpZ2h0O1xyXG4gICAgICAgICAgICAvL+ayoeaciemqqOmqvOe6puadn+aIkSzpgqPoioLngrnlj6rlj5foh6rlt7HnmoRCb25l5o6n5Yi2XHJcbiAgICAgICAgICAgIGlmICh3ZWlnaHREYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50Qm9uZSA9IHRoaXMuX3BhdGhTbG90LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIHBhcmVudEJvbmUudXBkYXRlQnlDb25zdHJhaW50KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gcGFyZW50Qm9uZS5nbG9iYWxUcmFuc2Zvcm1NYXRyaXg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaVZfMSA9IHBhdGhWZXJ0ZXhPZmZzZXQ7IGkgPCBwYXRoVmVydGV4Q291bnQ7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2eCA9IGZsb2F0QXJyYXlbaVZfMSsrXSAqIHNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2eSA9IGZsb2F0QXJyYXlbaVZfMSsrXSAqIHNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gbWF0cml4LmEgKiB2eCArIG1hdHJpeC5jICogdnkgKyBtYXRyaXgudHg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBtYXRyaXguYiAqIHZ4ICsgbWF0cml4LmQgKiB2eSArIG1hdHJpeC50eTtcclxuICAgICAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhdGhHbG9iYWxWZXJ0aWNlc1tpXSA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGF0aEdsb2JhbFZlcnRpY2VzW2kgKyAxXSA9IHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy/mnInpqqjpqrznuqbmnZ/miJEs6YKj5oiR55qE6IqC54K55Y+X6aqo6aq85p2D6YeN5o6n5Yi2XHJcbiAgICAgICAgICAgIHZhciBib25lcyA9IHRoaXMuX3BhdGhTbG90Ll9kZWZvcm1WZXJ0aWNlcy5ib25lcztcclxuICAgICAgICAgICAgdmFyIHdlaWdodEJvbmVDb3VudCA9IHdlaWdodERhdGEuYm9uZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgd2VpZ2h0T2Zmc2V0ID0gd2VpZ2h0RGF0YS5vZmZzZXQ7XHJcbiAgICAgICAgICAgIHZhciBmbG9hdE9mZnNldCA9IGludEFycmF5W3dlaWdodE9mZnNldCArIDEgLyogV2VpZ3RoRmxvYXRPZmZzZXQgKi9dO1xyXG4gICAgICAgICAgICB2YXIgaVYgPSBmbG9hdE9mZnNldDtcclxuICAgICAgICAgICAgdmFyIGlCID0gd2VpZ2h0T2Zmc2V0ICsgMiAvKiBXZWlndGhCb25lSW5kaWNlcyAqLyArIHdlaWdodEJvbmVDb3VudDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlXID0gMDsgaSA8IHBhdGhWZXJ0ZXhDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmVydGV4Qm9uZUNvdW50ID0gaW50QXJyYXlbaUIrK107IC8vXHJcbiAgICAgICAgICAgICAgICB2YXIgeEcgPSAwLjAsIHlHID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaWkgPSAwLCBsbCA9IHZlcnRleEJvbmVDb3VudDsgaWkgPCBsbDsgaWkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lSW5kZXggPSBpbnRBcnJheVtpQisrXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZSA9IGJvbmVzW2JvbmVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvbmUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJvbmUudXBkYXRlQnlDb25zdHJhaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdHJpeCA9IGJvbmUuZ2xvYmFsVHJhbnNmb3JtTWF0cml4O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3ZWlnaHQgPSBmbG9hdEFycmF5W2lWKytdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2eCA9IGZsb2F0QXJyYXlbaVYrK10gKiBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdnkgPSBmbG9hdEFycmF5W2lWKytdICogc2NhbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgeEcgKz0gKG1hdHJpeC5hICogdnggKyBtYXRyaXguYyAqIHZ5ICsgbWF0cml4LnR4KSAqIHdlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB5RyArPSAobWF0cml4LmIgKiB2eCArIG1hdHJpeC5kICogdnkgKyBtYXRyaXgudHkpICogd2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0aEdsb2JhbFZlcnRpY2VzW2lXKytdID0geEc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXRoR2xvYmFsVmVydGljZXNbaVcrK10gPSB5RztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgUGF0aENvbnN0cmFpbnQucHJvdG90eXBlLl9jb21wdXRlVmVydGljZXMgPSBmdW5jdGlvbiAoc3RhcnQsIGNvdW50LCBvZmZzZXQsIG91dCkge1xyXG4gICAgICAgICAgICAvL1RPRE/kvJjljJZcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IG9mZnNldCwgaVcgPSBzdGFydDsgaSA8IGNvdW50OyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgIG91dFtpXSA9IHRoaXMuX3BhdGhHbG9iYWxWZXJ0aWNlc1tpVysrXTtcclxuICAgICAgICAgICAgICAgIG91dFtpICsgMV0gPSB0aGlzLl9wYXRoR2xvYmFsVmVydGljZXNbaVcrK107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFBhdGhDb25zdHJhaW50LnByb3RvdHlwZS5fY29tcHV0ZUJlemllckN1cnZlID0gZnVuY3Rpb24gKHBhdGhEaXNwbGF5RHRhLCBzcGFjZUNvdW50LCB0YW5nZW50cywgcGVyY2VudFBvc2l0aW9uLCBwZXJjZW50U3BhY2luZykge1xyXG4gICAgICAgICAgICAvL+iuoeeul+W9k+WJjeeahOmqqOmqvOWcqOabsue6v+S4iueahOS9jee9rlxyXG4gICAgICAgICAgICB2YXIgYXJtYXR1cmUgPSB0aGlzLl9hcm1hdHVyZTtcclxuICAgICAgICAgICAgdmFyIGludEFycmF5ID0gYXJtYXR1cmUuYXJtYXR1cmVEYXRhLnBhcmVudC5pbnRBcnJheTtcclxuICAgICAgICAgICAgdmFyIHZlcnRleENvdW50ID0gaW50QXJyYXlbcGF0aERpc3BsYXlEdGEudmVydGljZXMub2Zmc2V0ICsgMCAvKiBQYXRoVmVydGV4Q291bnQgKi9dO1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb25zID0gdGhpcy5fcG9zaXRpb25zO1xyXG4gICAgICAgICAgICB2YXIgc3BhY2VzID0gdGhpcy5fc3BhY2VzO1xyXG4gICAgICAgICAgICB2YXIgaXNDbG9zZWQgPSBwYXRoRGlzcGxheUR0YS5jbG9zZWQ7XHJcbiAgICAgICAgICAgIHZhciBjdXJ2ZVZlcnRpY2VzID0gQXJyYXkoKTtcclxuICAgICAgICAgICAgdmFyIHZlcnRpY2VzTGVuZ3RoID0gdmVydGV4Q291bnQgKiAyO1xyXG4gICAgICAgICAgICB2YXIgY3VydmVDb3VudCA9IHZlcnRpY2VzTGVuZ3RoIC8gNjtcclxuICAgICAgICAgICAgdmFyIHByZUN1cnZlID0gLTE7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgICAgIHBvc2l0aW9ucy5sZW5ndGggPSBzcGFjZUNvdW50ICogMyArIDI7XHJcbiAgICAgICAgICAgIHZhciBwYXRoTGVuZ3RoID0gMC4wO1xyXG4gICAgICAgICAgICAvL+S4jemcgOimgeWMgOmAn+i/kOWKqO+8jOaViOeOh+mrmOS6m1xyXG4gICAgICAgICAgICBpZiAoIXBhdGhEaXNwbGF5RHRhLmNvbnN0YW50U3BlZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsZW5naHRzID0gcGF0aERpc3BsYXlEdGEuY3VydmVMZW5ndGhzO1xyXG4gICAgICAgICAgICAgICAgY3VydmVDb3VudCAtPSBpc0Nsb3NlZCA/IDEgOiAyO1xyXG4gICAgICAgICAgICAgICAgcGF0aExlbmd0aCA9IGxlbmdodHNbY3VydmVDb3VudF07XHJcbiAgICAgICAgICAgICAgICBpZiAocGVyY2VudFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gKj0gcGF0aExlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwZXJjZW50U3BhY2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BhY2VDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwYWNlc1tpXSAqPSBwYXRoTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnZlVmVydGljZXMubGVuZ3RoID0gODtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvID0gMCwgY3VydmUgPSAwOyBpIDwgc3BhY2VDb3VudDsgaSsrLCBvICs9IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhY2UgPSBzcGFjZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gKz0gc3BhY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uICU9IHBhdGhMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHBhdGhMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VydmUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwb3NpdGlvbiA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwb3NpdGlvbiA+IHBhdGhMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudCA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDs7IGN1cnZlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxlbmdodHNbY3VydmVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPiBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJ2ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IHBvc2l0aW9uIC8gbGVuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZUxlbiA9IGxlbmdodHNbY3VydmUgLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAocG9zaXRpb24gLSBwcmVMZW4pIC8gKGxlbiAtIHByZUxlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJ2ZSAhPT0gcHJlQ3VydmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlQ3VydmUgPSBjdXJ2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ2xvc2VkICYmIGN1cnZlID09PSBjdXJ2ZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+iuoeeul+absue6v1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29tcHV0ZVZlcnRpY2VzKHZlcnRpY2VzTGVuZ3RoIC0gNCwgNCwgMCwgY3VydmVWZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb21wdXRlVmVydGljZXMoMCwgNCwgNCwgY3VydmVWZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb21wdXRlVmVydGljZXMoY3VydmUgKiA2ICsgMiwgOCwgMCwgY3VydmVWZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEN1cnZlUG9zaXRpb24ocGVyY2VudCwgY3VydmVWZXJ0aWNlc1swXSwgY3VydmVWZXJ0aWNlc1sxXSwgY3VydmVWZXJ0aWNlc1syXSwgY3VydmVWZXJ0aWNlc1szXSwgY3VydmVWZXJ0aWNlc1s0XSwgY3VydmVWZXJ0aWNlc1s1XSwgY3VydmVWZXJ0aWNlc1s2XSwgY3VydmVWZXJ0aWNlc1s3XSwgcG9zaXRpb25zLCBvLCB0YW5nZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy/ljIDpgJ/nmoRcclxuICAgICAgICAgICAgaWYgKGlzQ2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlc0xlbmd0aCArPSAyO1xyXG4gICAgICAgICAgICAgICAgY3VydmVWZXJ0aWNlcy5sZW5ndGggPSB2ZXJ0ZXhDb3VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXB1dGVWZXJ0aWNlcygyLCB2ZXJ0aWNlc0xlbmd0aCAtIDQsIDAsIGN1cnZlVmVydGljZXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcHV0ZVZlcnRpY2VzKDAsIDIsIHZlcnRpY2VzTGVuZ3RoIC0gNCwgY3VydmVWZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZVZlcnRpY2VzW3ZlcnRpY2VzTGVuZ3RoIC0gMl0gPSBjdXJ2ZVZlcnRpY2VzWzBdO1xyXG4gICAgICAgICAgICAgICAgY3VydmVWZXJ0aWNlc1t2ZXJ0aWNlc0xlbmd0aCAtIDFdID0gY3VydmVWZXJ0aWNlc1sxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1cnZlQ291bnQtLTtcclxuICAgICAgICAgICAgICAgIHZlcnRpY2VzTGVuZ3RoIC09IDQ7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZVZlcnRpY2VzLmxlbmd0aCA9IHZlcnRpY2VzTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcHV0ZVZlcnRpY2VzKDIsIHZlcnRpY2VzTGVuZ3RoLCAwLCBjdXJ2ZVZlcnRpY2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB2YXIgY3VydmVzID0gbmV3IEFycmF5KGN1cnZlQ291bnQpO1xyXG4gICAgICAgICAgICBwYXRoTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdmFyIHgxID0gY3VydmVWZXJ0aWNlc1swXSwgeTEgPSBjdXJ2ZVZlcnRpY2VzWzFdLCBjeDEgPSAwLCBjeTEgPSAwLCBjeDIgPSAwLCBjeTIgPSAwLCB4MiA9IDAsIHkyID0gMDtcclxuICAgICAgICAgICAgdmFyIHRtcHgsIHRtcHksIGRkZGZ4LCBkZGRmeSwgZGRmeCwgZGRmeSwgZGZ4LCBkZnk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB3ID0gMjsgaSA8IGN1cnZlQ291bnQ7IGkrKywgdyArPSA2KSB7XHJcbiAgICAgICAgICAgICAgICBjeDEgPSBjdXJ2ZVZlcnRpY2VzW3ddO1xyXG4gICAgICAgICAgICAgICAgY3kxID0gY3VydmVWZXJ0aWNlc1t3ICsgMV07XHJcbiAgICAgICAgICAgICAgICBjeDIgPSBjdXJ2ZVZlcnRpY2VzW3cgKyAyXTtcclxuICAgICAgICAgICAgICAgIGN5MiA9IGN1cnZlVmVydGljZXNbdyArIDNdO1xyXG4gICAgICAgICAgICAgICAgeDIgPSBjdXJ2ZVZlcnRpY2VzW3cgKyA0XTtcclxuICAgICAgICAgICAgICAgIHkyID0gY3VydmVWZXJ0aWNlc1t3ICsgNV07XHJcbiAgICAgICAgICAgICAgICB0bXB4ID0gKHgxIC0gY3gxICogMiArIGN4MikgKiAwLjE4NzU7XHJcbiAgICAgICAgICAgICAgICB0bXB5ID0gKHkxIC0gY3kxICogMiArIGN5MikgKiAwLjE4NzU7XHJcbiAgICAgICAgICAgICAgICBkZGRmeCA9ICgoY3gxIC0gY3gyKSAqIDMgLSB4MSArIHgyKSAqIDAuMDkzNzU7XHJcbiAgICAgICAgICAgICAgICBkZGRmeSA9ICgoY3kxIC0gY3kyKSAqIDMgLSB5MSArIHkyKSAqIDAuMDkzNzU7XHJcbiAgICAgICAgICAgICAgICBkZGZ4ID0gdG1weCAqIDIgKyBkZGRmeDtcclxuICAgICAgICAgICAgICAgIGRkZnkgPSB0bXB5ICogMiArIGRkZGZ5O1xyXG4gICAgICAgICAgICAgICAgZGZ4ID0gKGN4MSAtIHgxKSAqIDAuNzUgKyB0bXB4ICsgZGRkZnggKiAwLjE2NjY2NjY3O1xyXG4gICAgICAgICAgICAgICAgZGZ5ID0gKGN5MSAtIHkxKSAqIDAuNzUgKyB0bXB5ICsgZGRkZnkgKiAwLjE2NjY2NjY3O1xyXG4gICAgICAgICAgICAgICAgcGF0aExlbmd0aCArPSBNYXRoLnNxcnQoZGZ4ICogZGZ4ICsgZGZ5ICogZGZ5KTtcclxuICAgICAgICAgICAgICAgIGRmeCArPSBkZGZ4O1xyXG4gICAgICAgICAgICAgICAgZGZ5ICs9IGRkZnk7XHJcbiAgICAgICAgICAgICAgICBkZGZ4ICs9IGRkZGZ4O1xyXG4gICAgICAgICAgICAgICAgZGRmeSArPSBkZGRmeTtcclxuICAgICAgICAgICAgICAgIHBhdGhMZW5ndGggKz0gTWF0aC5zcXJ0KGRmeCAqIGRmeCArIGRmeSAqIGRmeSk7XHJcbiAgICAgICAgICAgICAgICBkZnggKz0gZGRmeDtcclxuICAgICAgICAgICAgICAgIGRmeSArPSBkZGZ5O1xyXG4gICAgICAgICAgICAgICAgcGF0aExlbmd0aCArPSBNYXRoLnNxcnQoZGZ4ICogZGZ4ICsgZGZ5ICogZGZ5KTtcclxuICAgICAgICAgICAgICAgIGRmeCArPSBkZGZ4ICsgZGRkZng7XHJcbiAgICAgICAgICAgICAgICBkZnkgKz0gZGRmeSArIGRkZGZ5O1xyXG4gICAgICAgICAgICAgICAgcGF0aExlbmd0aCArPSBNYXRoLnNxcnQoZGZ4ICogZGZ4ICsgZGZ5ICogZGZ5KTtcclxuICAgICAgICAgICAgICAgIGN1cnZlc1tpXSA9IHBhdGhMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB4MSA9IHgyO1xyXG4gICAgICAgICAgICAgICAgeTEgPSB5MjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGVyY2VudFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiAqPSBwYXRoTGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwZXJjZW50U3BhY2luZykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFjZUNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBzcGFjZXNbaV0gKj0gcGF0aExlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2VnbWVudHMgPSB0aGlzLl9zZWdtZW50cztcclxuICAgICAgICAgICAgdmFyIGN1cnZlTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG8gPSAwLCBjdXJ2ZSA9IDAsIHNlZ21lbnQgPSAwOyBpIDwgc3BhY2VDb3VudDsgaSsrLCBvICs9IDMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzcGFjZSA9IHNwYWNlc1tpXTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IHNwYWNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSBwb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmIChpc0Nsb3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAgJT0gcGF0aExlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocCA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgKz0gcGF0aExlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBjdXJ2ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocCA+IHBhdGhMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSBjdXJ2ZSBjb250YWluaW5nIHBvc2l0aW9uLlxyXG4gICAgICAgICAgICAgICAgZm9yICg7OyBjdXJ2ZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aF8xID0gY3VydmVzW2N1cnZlXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocCA+IGxlbmd0aF8xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VydmUgPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgLz0gbGVuZ3RoXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2ID0gY3VydmVzW2N1cnZlIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSAocCAtIHByZXYpIC8gKGxlbmd0aF8xIC0gcHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnZlICE9PSBwcmVDdXJ2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZUN1cnZlID0gY3VydmU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlpID0gY3VydmUgKiA2O1xyXG4gICAgICAgICAgICAgICAgICAgIHgxID0gY3VydmVWZXJ0aWNlc1tpaV07XHJcbiAgICAgICAgICAgICAgICAgICAgeTEgPSBjdXJ2ZVZlcnRpY2VzW2lpICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY3gxID0gY3VydmVWZXJ0aWNlc1tpaSArIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGN5MSA9IGN1cnZlVmVydGljZXNbaWkgKyAzXTtcclxuICAgICAgICAgICAgICAgICAgICBjeDIgPSBjdXJ2ZVZlcnRpY2VzW2lpICsgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY3kyID0gY3VydmVWZXJ0aWNlc1tpaSArIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHgyID0gY3VydmVWZXJ0aWNlc1tpaSArIDZdO1xyXG4gICAgICAgICAgICAgICAgICAgIHkyID0gY3VydmVWZXJ0aWNlc1tpaSArIDddO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcHggPSAoeDEgLSBjeDEgKiAyICsgY3gyKSAqIDAuMDM7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1weSA9ICh5MSAtIGN5MSAqIDIgKyBjeTIpICogMC4wMztcclxuICAgICAgICAgICAgICAgICAgICBkZGRmeCA9ICgoY3gxIC0gY3gyKSAqIDMgLSB4MSArIHgyKSAqIDAuMDA2O1xyXG4gICAgICAgICAgICAgICAgICAgIGRkZGZ5ID0gKChjeTEgLSBjeTIpICogMyAtIHkxICsgeTIpICogMC4wMDY7XHJcbiAgICAgICAgICAgICAgICAgICAgZGRmeCA9IHRtcHggKiAyICsgZGRkZng7XHJcbiAgICAgICAgICAgICAgICAgICAgZGRmeSA9IHRtcHkgKiAyICsgZGRkZnk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGZ4ID0gKGN4MSAtIHgxKSAqIDAuMyArIHRtcHggKyBkZGRmeCAqIDAuMTY2NjY2Njc7XHJcbiAgICAgICAgICAgICAgICAgICAgZGZ5ID0gKGN5MSAtIHkxKSAqIDAuMyArIHRtcHkgKyBkZGRmeSAqIDAuMTY2NjY2Njc7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VydmVMZW5ndGggPSBNYXRoLnNxcnQoZGZ4ICogZGZ4ICsgZGZ5ICogZGZ5KTtcclxuICAgICAgICAgICAgICAgICAgICBzZWdtZW50c1swXSA9IGN1cnZlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaWkgPSAxOyBpaSA8IDg7IGlpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGZ4ICs9IGRkZng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRmeSArPSBkZGZ5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZGZ4ICs9IGRkZGZ4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZGZ5ICs9IGRkZGZ5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZUxlbmd0aCArPSBNYXRoLnNxcnQoZGZ4ICogZGZ4ICsgZGZ5ICogZGZ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHNbaWldID0gY3VydmVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRmeCArPSBkZGZ4O1xyXG4gICAgICAgICAgICAgICAgICAgIGRmeSArPSBkZGZ5O1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlTGVuZ3RoICs9IE1hdGguc3FydChkZnggKiBkZnggKyBkZnkgKiBkZnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzWzhdID0gY3VydmVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgZGZ4ICs9IGRkZnggKyBkZGRmeDtcclxuICAgICAgICAgICAgICAgICAgICBkZnkgKz0gZGRmeSArIGRkZGZ5O1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlTGVuZ3RoICs9IE1hdGguc3FydChkZnggKiBkZnggKyBkZnkgKiBkZnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzWzldID0gY3VydmVMZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBXZWlnaHQgYnkgc2VnbWVudCBsZW5ndGguXHJcbiAgICAgICAgICAgICAgICBwICo9IGN1cnZlTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZm9yICg7OyBzZWdtZW50KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoXzIgPSBzZWdtZW50c1tzZWdtZW50XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocCA+IGxlbmd0aF8yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VnbWVudCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcCAvPSBsZW5ndGhfMjtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXYgPSBzZWdtZW50c1tzZWdtZW50IC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBzZWdtZW50ICsgKHAgLSBwcmV2KSAvIChsZW5ndGhfMiAtIHByZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ3VydmVQb3NpdGlvbihwICogMC4xLCB4MSwgeTEsIGN4MSwgY3kxLCBjeDIsIGN5MiwgeDIsIHkyLCBwb3NpdGlvbnMsIG8sIHRhbmdlbnRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy9DYWxjdWxhdGVzIGEgcG9pbnQgb24gdGhlIGN1cnZlLCBmb3IgYSBnaXZlbiB0IHZhbHVlIGJldHdlZW4gMCBhbmQgMS5cclxuICAgICAgICBQYXRoQ29uc3RyYWludC5wcm90b3R5cGUuYWRkQ3VydmVQb3NpdGlvbiA9IGZ1bmN0aW9uICh0LCB4MSwgeTEsIGN4MSwgY3kxLCBjeDIsIGN5MiwgeDIsIHkyLCBvdXQsIG9mZnNldCwgdGFuZ2VudHMpIHtcclxuICAgICAgICAgICAgaWYgKHQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIG91dFtvZmZzZXRdID0geDE7XHJcbiAgICAgICAgICAgICAgICBvdXRbb2Zmc2V0ICsgMV0gPSB5MTtcclxuICAgICAgICAgICAgICAgIG91dFtvZmZzZXQgKyAyXSA9IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIG91dFtvZmZzZXRdID0geDI7XHJcbiAgICAgICAgICAgICAgICBvdXRbb2Zmc2V0ICsgMV0gPSB5MjtcclxuICAgICAgICAgICAgICAgIG91dFtvZmZzZXQgKyAyXSA9IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG10ID0gMSAtIHQ7XHJcbiAgICAgICAgICAgIHZhciBtdDIgPSBtdCAqIG10O1xyXG4gICAgICAgICAgICB2YXIgdDIgPSB0ICogdDtcclxuICAgICAgICAgICAgdmFyIGEgPSBtdDIgKiBtdDtcclxuICAgICAgICAgICAgdmFyIGIgPSBtdDIgKiB0ICogMztcclxuICAgICAgICAgICAgdmFyIGMgPSBtdCAqIHQyICogMztcclxuICAgICAgICAgICAgdmFyIGQgPSB0ICogdDI7XHJcbiAgICAgICAgICAgIHZhciB4ID0gYSAqIHgxICsgYiAqIGN4MSArIGMgKiBjeDIgKyBkICogeDI7XHJcbiAgICAgICAgICAgIHZhciB5ID0gYSAqIHkxICsgYiAqIGN5MSArIGMgKiBjeTIgKyBkICogeTI7XHJcbiAgICAgICAgICAgIG91dFtvZmZzZXRdID0geDtcclxuICAgICAgICAgICAgb3V0W29mZnNldCArIDFdID0geTtcclxuICAgICAgICAgICAgaWYgKHRhbmdlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAvL0NhbGN1bGF0ZXMgdGhlIGN1cnZlIHRhbmdlbnQgYXQgdGhlIHNwZWNpZmllZCB0IHZhbHVlXHJcbiAgICAgICAgICAgICAgICBvdXRbb2Zmc2V0ICsgMl0gPSBNYXRoLmF0YW4yKHkgLSAoYSAqIHkxICsgYiAqIGN5MSArIGMgKiBjeTIpLCB4IC0gKGEgKiB4MSArIGIgKiBjeDEgKyBjICogY3gyKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvdXRbb2Zmc2V0ICsgMl0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBQYXRoQ29uc3RyYWludC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChjb25zdHJhaW50RGF0YSwgYXJtYXR1cmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29uc3RyYWludERhdGEgPSBjb25zdHJhaW50RGF0YTtcclxuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUgPSBhcm1hdHVyZTtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBjb25zdHJhaW50RGF0YTtcclxuICAgICAgICAgICAgdGhpcy5wYXRoT2Zmc2V0ID0gZGF0YS5wYXRoRGlzcGxheURhdGEudmVydGljZXMub2Zmc2V0O1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gZGF0YS5wb3NpdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5zcGFjaW5nID0gZGF0YS5zcGFjaW5nO1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZU9mZnNldCA9IGRhdGEucm90YXRlT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLnJvdGF0ZU1peCA9IGRhdGEucm90YXRlTWl4O1xyXG4gICAgICAgICAgICB0aGlzLnRyYW5zbGF0ZU1peCA9IGRhdGEudHJhbnNsYXRlTWl4O1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5fYXJtYXR1cmUuZ2V0Qm9uZShkYXRhLnJvb3QubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldCA9IHRoaXMuX2FybWF0dXJlLmdldEJvbmUoZGF0YS50YXJnZXQubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhdGhTbG90ID0gdGhpcy5fYXJtYXR1cmUuZ2V0U2xvdChkYXRhLnBhdGhTbG90Lm5hbWUpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEuYm9uZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYm9uZSA9IHRoaXMuX2FybWF0dXJlLmdldEJvbmUoZGF0YS5ib25lc1tpXS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChib25lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9uZXMucHVzaChib25lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YS5yb3RhdGVNb2RlID09PSAyIC8qIENoYWluU2NhbGUgKi8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JvbmVMZW5ndGhzLmxlbmd0aCA9IHRoaXMuX2JvbmVzLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9yb290Ll9oYXNDb25zdHJhaW50ID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFBhdGhDb25zdHJhaW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXRoU2xvdCA9IHRoaXMuX3BhdGhTbG90O1xyXG4gICAgICAgICAgICBpZiAocGF0aFNsb3QuX2RlZm9ybVZlcnRpY2VzID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBwYXRoU2xvdC5fZGVmb3JtVmVydGljZXMudmVydGljZXNEYXRhID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICBwYXRoU2xvdC5fZGVmb3JtVmVydGljZXMudmVydGljZXNEYXRhLm9mZnNldCAhPT0gdGhpcy5wYXRoT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnREYXRhID0gdGhpcy5fY29uc3RyYWludERhdGE7XHJcbiAgICAgICAgICAgIHZhciBwYXRoRGlzcGxheURhdGEgPSBwYXRoU2xvdC5fZGlzcGxheURhdGE7IC8vIFRPRE9cclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgLy/mm7Lnur/oioLngrnmlbDmja7mlLnlj5g654i25LqyYm9uZeaUueWPmO+8jOadg+mHjWJvbmVz5pS55Y+Y77yM5Y+Y5b2i6aG254K55pS55Y+YXHJcbiAgICAgICAgICAgIHZhciBpc1BhdGhWZXJ0aWNlRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGRlZm9ybVZlcnRpY2VzID0gcGF0aFNsb3QuX2RlZm9ybVZlcnRpY2VzO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcm9vdC5fY2hpbGRyZW5UcmFuc2Zvcm1EaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUGF0aFZlcnRpY2VzKHBhdGhEaXNwbGF5RGF0YS52ZXJ0aWNlcyk7XHJcbiAgICAgICAgICAgICAgICBpc1BhdGhWZXJ0aWNlRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRlZm9ybVZlcnRpY2VzICE9PSBudWxsICYmIChkZWZvcm1WZXJ0aWNlcy52ZXJ0aWNlc0RpcnR5IHx8IGRlZm9ybVZlcnRpY2VzLmlzQm9uZXNVcGRhdGUoKSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVBhdGhWZXJ0aWNlcyhwYXRoRGlzcGxheURhdGEudmVydGljZXMpO1xyXG4gICAgICAgICAgICAgICAgZGVmb3JtVmVydGljZXMudmVydGljZXNEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaXNQYXRoVmVydGljZURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWlzUGF0aFZlcnRpY2VEaXJ0eSAmJiAhdGhpcy5kaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbk1vZGUgPSBjb25zdHJhaW50RGF0YS5wb3NpdGlvbk1vZGU7XHJcbiAgICAgICAgICAgIHZhciBzcGFjaW5nTW9kZSA9IGNvbnN0cmFpbnREYXRhLnNwYWNpbmdNb2RlO1xyXG4gICAgICAgICAgICB2YXIgcm90YXRlTW9kZSA9IGNvbnN0cmFpbnREYXRhLnJvdGF0ZU1vZGU7XHJcbiAgICAgICAgICAgIHZhciBib25lcyA9IHRoaXMuX2JvbmVzO1xyXG4gICAgICAgICAgICB2YXIgaXNMZW5ndGhNb2RlID0gc3BhY2luZ01vZGUgPT09IDAgLyogTGVuZ3RoICovO1xyXG4gICAgICAgICAgICB2YXIgaXNDaGFpblNjYWxlTW9kZSA9IHJvdGF0ZU1vZGUgPT09IDIgLyogQ2hhaW5TY2FsZSAqLztcclxuICAgICAgICAgICAgdmFyIGlzVGFuZ2VudE1vZGUgPSByb3RhdGVNb2RlID09PSAwIC8qIFRhbmdlbnQgKi87XHJcbiAgICAgICAgICAgIHZhciBib25lQ291bnQgPSBib25lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBzcGFjZXNDb3VudCA9IGlzVGFuZ2VudE1vZGUgPyBib25lQ291bnQgOiBib25lQ291bnQgKyAxO1xyXG4gICAgICAgICAgICB2YXIgc3BhY2luZyA9IHRoaXMuc3BhY2luZztcclxuICAgICAgICAgICAgdmFyIHNwYWNlcyA9IHRoaXMuX3NwYWNlcztcclxuICAgICAgICAgICAgc3BhY2VzLmxlbmd0aCA9IHNwYWNlc0NvdW50O1xyXG4gICAgICAgICAgICAvL+iuoeabsue6v+mXtOmalOWSjOmVv+W6plxyXG4gICAgICAgICAgICBpZiAoaXNDaGFpblNjYWxlTW9kZSB8fCBpc0xlbmd0aE1vZGUpIHtcclxuICAgICAgICAgICAgICAgIC8vQm9uZeaUueWPmOWSjHNwYWNpbmfmlLnlj5jop6blj5FcclxuICAgICAgICAgICAgICAgIHNwYWNlc1swXSA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHNwYWNlc0NvdW50IC0gMTsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gYm9uZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgYm9uZS51cGRhdGVCeUNvbnN0cmFpbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZUxlbmd0aCA9IGJvbmUuX2JvbmVEYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gYm9uZS5nbG9iYWxUcmFuc2Zvcm1NYXRyaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBib25lTGVuZ3RoICogbWF0cml4LmE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSBib25lTGVuZ3RoICogbWF0cml4LmI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGFpblNjYWxlTW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib25lTGVuZ3Roc1tpXSA9IGxlbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3BhY2VzW2kgKyAxXSA9IChib25lTGVuZ3RoICsgc3BhY2luZykgKiBsZW4gLyBib25lTGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFjZXNDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BhY2VzW2ldID0gc3BhY2luZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlQmV6aWVyQ3VydmUocGF0aERpc3BsYXlEYXRhLCBzcGFjZXNDb3VudCwgaXNUYW5nZW50TW9kZSwgcG9zaXRpb25Nb2RlID09PSAxIC8qIFBlcmNlbnQgKi8sIHNwYWNpbmdNb2RlID09PSAyIC8qIFBlcmNlbnQgKi8pO1xyXG4gICAgICAgICAgICAvL+agueaNruaWsOeahOiKgueCueaVsOaNrumHjeaWsOmHh+agt1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb25zID0gdGhpcy5fcG9zaXRpb25zO1xyXG4gICAgICAgICAgICB2YXIgcm90YXRlT2Zmc2V0ID0gdGhpcy5yb3RhdGVPZmZzZXQ7XHJcbiAgICAgICAgICAgIHZhciBib25lWCA9IHBvc2l0aW9uc1swXSwgYm9uZVkgPSBwb3NpdGlvbnNbMV07XHJcbiAgICAgICAgICAgIHZhciB0aXA7XHJcbiAgICAgICAgICAgIGlmIChyb3RhdGVPZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRpcCA9IHJvdGF0ZU1vZGUgPT09IDEgLyogQ2hhaW4gKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBib25lID0gcGF0aFNsb3QucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gYm9uZS5nbG9iYWxUcmFuc2Zvcm1NYXRyaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgcm90YXRlT2Zmc2V0ICo9IG1hdHJpeC5hICogbWF0cml4LmQgLSBtYXRyaXguYiAqIG1hdHJpeC5jID4gMCA/IGRyYWdvbkJvbmVzLlRyYW5zZm9ybS5ERUdfUkFEIDogLWRyYWdvbkJvbmVzLlRyYW5zZm9ybS5ERUdfUkFEO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHZhciByb3RhdGVNaXggPSB0aGlzLnJvdGF0ZU1peDtcclxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZU1peCA9IHRoaXMudHJhbnNsYXRlTWl4O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IDM7IGkgPCBib25lQ291bnQ7IGkrKywgcCArPSAzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYm9uZSA9IGJvbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgYm9uZS51cGRhdGVCeUNvbnN0cmFpbnQoKTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXRyaXggPSBib25lLmdsb2JhbFRyYW5zZm9ybU1hdHJpeDtcclxuICAgICAgICAgICAgICAgIG1hdHJpeC50eCArPSAoYm9uZVggLSBtYXRyaXgudHgpICogdHJhbnNsYXRlTWl4O1xyXG4gICAgICAgICAgICAgICAgbWF0cml4LnR5ICs9IChib25lWSAtIG1hdHJpeC50eSkgKiB0cmFuc2xhdGVNaXg7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHBvc2l0aW9uc1twXSwgeSA9IHBvc2l0aW9uc1twICsgMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgZHggPSB4IC0gYm9uZVgsIGR5ID0geSAtIGJvbmVZO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2hhaW5TY2FsZU1vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ2h0ID0gdGhpcy5fYm9uZUxlbmd0aHNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAoTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KSAvIGxlbmdodCAtIDEpICogcm90YXRlTWl4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXguYSAqPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeC5iICo9IHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBib25lWCA9IHg7XHJcbiAgICAgICAgICAgICAgICBib25lWSA9IHk7XHJcbiAgICAgICAgICAgICAgICBpZiAocm90YXRlTWl4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gbWF0cml4LmEsIGIgPSBtYXRyaXguYiwgYyA9IG1hdHJpeC5jLCBkID0gbWF0cml4LmQsIHIgPSB2b2lkIDAsIGNvcyA9IHZvaWQgMCwgc2luID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RhbmdlbnRNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBwb3NpdGlvbnNbcCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgciA9IE1hdGguYXRhbjIoZHksIGR4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgciAtPSBNYXRoLmF0YW4yKGIsIGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29zID0gTWF0aC5jb3Mocik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoXzMgPSBib25lLl9ib25lRGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvbmVYICs9IChsZW5ndGhfMyAqIChjb3MgKiBhIC0gc2luICogYikgLSBkeCkgKiByb3RhdGVNaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvbmVZICs9IChsZW5ndGhfMyAqIChzaW4gKiBhICsgY29zICogYikgLSBkeSkgKiByb3RhdGVNaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByICs9IHJvdGF0ZU9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgPiBkcmFnb25Cb25lcy5UcmFuc2Zvcm0uUEkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgciAtPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0uUElfRDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAociA8IC1kcmFnb25Cb25lcy5UcmFuc2Zvcm0uUEkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgciArPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0uUElfRDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgciAqPSByb3RhdGVNaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgY29zID0gTWF0aC5jb3Mocik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2luID0gTWF0aC5zaW4ocik7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4LmEgPSBjb3MgKiBhIC0gc2luICogYjtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXguYiA9IHNpbiAqIGEgKyBjb3MgKiBiO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeC5jID0gY29zICogYyAtIHNpbiAqIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4LmQgPSBzaW4gKiBjICsgY29zICogZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJvbmUuZ2xvYmFsLmZyb21NYXRyaXgobWF0cml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBQYXRoQ29uc3RyYWludC5wcm90b3R5cGUuaW52YWxpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBQYXRoQ29uc3RyYWludDtcclxuICAgIH0oQ29uc3RyYWludCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuUGF0aENvbnN0cmFpbnQgPSBQYXRoQ29uc3RyYWludDtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIC0gV29ybGRjbG9jayBwcm92aWRlcyBjbG9jayBzdXBwb3J0IGZvciBhbmltYXRpb25zLCBhZHZhbmNlIHRpbWUgZm9yIGVhY2ggSUFuaW1hdGFibGUgb2JqZWN0IGFkZGVkIHRvIHRoZSBpbnN0YW5jZS5cclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuSUFuaW1hdGVibGVcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQXJtYXR1cmVcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSBXb3JsZENsb2NrIOWvueWKqOeUu+aPkOS+m+aXtumSn+aUr+aMge+8jOS4uuavj+S4quWKoOWFpeWIsOivpeWunuS+i+eahCBJQW5pbWF0YWJsZSDlr7nosaHmm7TmlrDml7bpl7TjgIJcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuSUFuaW1hdGVibGVcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQXJtYXR1cmVcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBXb3JsZENsb2NrID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ3JlYXRpbmcgYSBXb3JsZGNsb2NrIGluc3RhbmNlLiBUeXBpY2FsbHksIHlvdSBkbyBub3QgbmVlZCB0byBjcmVhdGUgV29ybGRjbG9jayBpbnN0YW5jZS5cclxuICAgICAgICAgKiBXaGVuIG11bHRpcGxlIFdvcmxkY2xvY2sgaW5zdGFuY2VzIGFyZSBydW5uaW5nIGF0IGRpZmZlcmVudCBzcGVlZHMsIGNhbiBhY2hpZXZpbmcgc29tZSBzcGVjaWZpYyBhbmltYXRpb24gZWZmZWN0cywgc3VjaCBhcyBidWxsZXQgdGltZS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOWIm+W7uuS4gOS4qiBXb3JsZENsb2NrIOWunuS+i+OAgumAmuW4uOW5tuS4jemcgOimgeWIm+W7uiBXb3JsZENsb2NrIOWunuS+i+OAglxyXG4gICAgICAgICAqIOW9k+WkmuS4qiBXb3JsZENsb2NrIOWunuS+i+S9v+eUqOS4jeWQjOeahOmAn+W6pui/kOihjOaXtu+8jOWPr+S7peWunueOsOS4gOS6m+eJueauiueahOWKqOeUu+aViOaenO+8jOavlOWmguWtkOW8ueaXtumXtOetieOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZ1bmN0aW9uIFdvcmxkQ2xvY2sodGltZSkge1xyXG4gICAgICAgICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7IHRpbWUgPSAwLjA7IH1cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gQ3VycmVudCB0aW1lLiAoSW4gc2Vjb25kcylcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5b2T5YmN55qE5pe26Ze044CCICjku6Xnp5LkuLrljZXkvY0pXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMudGltZSA9IDAuMDtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIHBsYXkgc3BlZWQsIHVzZWQgdG8gY29udHJvbCBhbmltYXRpb24gc3BlZWQtc2hpZnQgcGxheS5cclxuICAgICAgICAgICAgICogWzA6IFN0b3AgcGxheSwgKDB+MSk6IFNsb3cgcGxheSwgMTogTm9ybWFsIHBsYXksICgxfk4pOiBGYXN0IHBsYXldXHJcbiAgICAgICAgICAgICAqIEBkZWZhdWx0IDEuMFxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmkq3mlL7pgJ/luqbvvIznlKjkuo7mjqfliLbliqjnlLvlj5jpgJ/mkq3mlL7jgIJcclxuICAgICAgICAgICAgICogWzA6IOWBnOatouaSreaUviwgKDB+MSk6IOaFoumAn+aSreaUviwgMTog5q2j5bi45pKt5pS+LCAoMX5OKTog5b+r6YCf5pKt5pS+XVxyXG4gICAgICAgICAgICAgKiBAZGVmYXVsdCAxLjBcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy50aW1lU2NhbGUgPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX3N5c3RlbVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGVibGVzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX2Nsb2NrID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy50aW1lID0gdGltZTtcclxuICAgICAgICAgICAgdGhpcy5fc3lzdGVtVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpICogMC4wMDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQWR2YW5jZSB0aW1lIGZvciBhbGwgSUFuaW1hdGFibGUgaW5zdGFuY2VzLlxyXG4gICAgICAgICAqIEBwYXJhbSBwYXNzZWRUaW1lIC0gUGFzc2VkIHRpbWUuIFstMTogQXV0b21hdGljYWxseSBjYWxjdWxhdGVzIHRoZSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgY3VycmVudCBmcmFtZSBhbmQgdGhlIHByZXZpb3VzIGZyYW1lLCBbMH5OKTogUGFzc2VkIHRpbWVdIChJbiBzZWNvbmRzKVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Li65omA5pyJ55qEIElBbmltYXRhYmxlIOWunuS+i+abtOaWsOaXtumXtOOAglxyXG4gICAgICAgICAqIEBwYXJhbSBwYXNzZWRUaW1lIC0g5YmN6L+b55qE5pe26Ze044CCIFstMTog6Ieq5Yqo6K6h566X5b2T5YmN5bin5LiO5LiK5LiA5bin55qE5pe26Ze05beuLCBbMH5OKTog5YmN6L+b55qE5pe26Ze0XSAo5Lul56eS5Li65Y2V5L2NKVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFdvcmxkQ2xvY2sucHJvdG90eXBlLmFkdmFuY2VUaW1lID0gZnVuY3Rpb24gKHBhc3NlZFRpbWUpIHtcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFRpbWUgIT09IHBhc3NlZFRpbWUpIHtcclxuICAgICAgICAgICAgICAgIHBhc3NlZFRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKSAqIDAuMDAxO1xyXG4gICAgICAgICAgICBpZiAocGFzc2VkVGltZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgcGFzc2VkVGltZSA9IGN1cnJlbnRUaW1lIC0gdGhpcy5fc3lzdGVtVGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9zeXN0ZW1UaW1lID0gY3VycmVudFRpbWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVTY2FsZSAhPT0gMS4wKSB7XHJcbiAgICAgICAgICAgICAgICBwYXNzZWRUaW1lICo9IHRoaXMudGltZVNjYWxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYXNzZWRUaW1lID09PSAwLjApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocGFzc2VkVGltZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lIC09IHBhc3NlZFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWUgKz0gcGFzc2VkVGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaSA9IDAsIHIgPSAwLCBsID0gdGhpcy5fYW5pbWF0ZWJsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGFibGUgPSB0aGlzLl9hbmltYXRlYmxlc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRhYmxlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGVibGVzW2kgLSByXSA9IGFuaW1hdGFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGVibGVzW2ldID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0YWJsZS5hZHZhbmNlVGltZShwYXNzZWRUaW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHIrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAociA+IDApIHtcclxuICAgICAgICAgICAgICAgIGwgPSB0aGlzLl9hbmltYXRlYmxlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRlYmxlID0gdGhpcy5fYW5pbWF0ZWJsZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGVibGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0ZWJsZXNbaSAtIHJdID0gYW5pbWF0ZWJsZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRlYmxlcy5sZW5ndGggLT0gcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBDaGVjayB3aGV0aGVyIGNvbnRhaW5zIGEgc3BlY2lmaWMgaW5zdGFuY2Ugb2YgSUFuaW1hdGFibGUuXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIElBbmltYXRhYmxlIGluc3RhbmNlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5qOA5p+l5piv5ZCm5YyF5ZCr54m55a6a55qEIElBbmltYXRhYmxlIOWunuS+i+OAglxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSAtIElBbmltYXRhYmxlIOWunuS+i+OAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFdvcmxkQ2xvY2sucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZhbHVlO1xyXG4gICAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IgIT09IHRoaXMgJiYgYW5jZXN0b3IgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IuY2xvY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFuY2VzdG9yID09PSB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBBZGQgSUFuaW1hdGFibGUgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIElBbmltYXRhYmxlIGluc3RhbmNlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5re75YqgIElBbmltYXRhYmxlIOWunuS+i+OAglxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSAtIElBbmltYXRhYmxlIOWunuS+i+OAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFdvcmxkQ2xvY2sucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0ZWJsZXMuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRlYmxlcy5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlLmNsb2NrID0gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBSZW1vdmVzIGEgc3BlY2lmaWVkIElBbmltYXRhYmxlIGluc3RhbmNlLlxyXG4gICAgICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBJQW5pbWF0YWJsZSBpbnN0YW5jZS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOenu+mZpOeJueWumueahCBJQW5pbWF0YWJsZSDlrp7kvovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUgLSBJQW5pbWF0YWJsZSDlrp7kvovjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBXb3JsZENsb2NrLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fYW5pbWF0ZWJsZXMuaW5kZXhPZih2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRlYmxlc1tpbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuY2xvY2sgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENsZWFyIGFsbCBJQW5pbWF0YWJsZSBpbnN0YW5jZXMuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmuIXpmaTmiYDmnInnmoQgSUFuaW1hdGFibGUg5a6e5L6L44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgV29ybGRDbG9jay5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9hbmltYXRlYmxlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRhYmxlID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGFibGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRhYmxlLmNsb2NrID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdvcmxkQ2xvY2sucHJvdG90eXBlLCBcImNsb2NrXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBpbmhlcml0RG9jXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jbG9jaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jbG9jayA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2xvY2sgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9jay5yZW1vdmUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbG9jayA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Nsb2NrICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xvY2suYWRkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIERlcHJlY2F0ZWQsIHBsZWFzZSByZWZlciB0byB7QGxpbmsgZHJhZ29uQm9uZXMuQmFzZUZhY3RvcnkjY2xvY2t9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rIGRyYWdvbkJvbmVzLkJhc2VGYWN0b3J5I2Nsb2NrfeOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgV29ybGRDbG9jay5jbG9jayA9IG5ldyBXb3JsZENsb2NrKCk7XHJcbiAgICAgICAgcmV0dXJuIFdvcmxkQ2xvY2s7XHJcbiAgICB9KCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuV29ybGRDbG9jayA9IFdvcmxkQ2xvY2s7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIFRoZSBhbmltYXRpb24gcGxheWVyIGlzIHVzZWQgdG8gcGxheSB0aGUgYW5pbWF0aW9uIGRhdGEgYW5kIG1hbmFnZSB0aGUgYW5pbWF0aW9uIHN0YXRlcy5cclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uRGF0YVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25TdGF0ZVxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOWKqOeUu+aSreaUvuWZqOeUqOadpeaSreaUvuWKqOeUu+aVsOaNruWSjOeuoeeQhuWKqOeUu+eKtuaAgeOAglxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25EYXRhXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvblN0YXRlXHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICovXHJcbiAgICB2YXIgQW5pbWF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhBbmltYXRpb24sIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQW5pbWF0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbk5hbWVzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9hbmltYXRpb25TdGF0ZXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbkNvbmZpZyA9IG51bGw7IC8vIEluaXRpYWwgdmFsdWUuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgQW5pbWF0aW9uLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQW5pbWF0aW9uXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2FuaW1hdGlvblN0YXRlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25TdGF0ZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5fYW5pbWF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2FuaW1hdGlvbnNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvbkNvbmZpZyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudGltZVNjYWxlID0gMS4wO1xyXG4gICAgICAgICAgICB0aGlzLl9sb2NrVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2luaGVyaXRUaW1lU2NhbGUgPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbk5hbWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblN0YXRlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAvL3RoaXMuX2FuaW1hdGlvbnMuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0QW5pbWF0aW9uU3RhdGUgPSBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uLnByb3RvdHlwZS5fZmFkZU91dCA9IGZ1bmN0aW9uIChhbmltYXRpb25Db25maWcpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChhbmltYXRpb25Db25maWcuZmFkZU91dE1vZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBTYW1lTGF5ZXIgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2FuaW1hdGlvblN0YXRlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGUuX3BhcmVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlLmxheWVyID09PSBhbmltYXRpb25Db25maWcubGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLmZhZGVPdXQoYW5pbWF0aW9uQ29uZmlnLmZhZGVPdXRUaW1lLCBhbmltYXRpb25Db25maWcucGF1c2VGYWRlT3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBTYW1lR3JvdXAgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHRoaXMuX2FuaW1hdGlvblN0YXRlczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGUuX3BhcmVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlLmdyb3VwID09PSBhbmltYXRpb25Db25maWcuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLmZhZGVPdXQoYW5pbWF0aW9uQ29uZmlnLmZhZGVPdXRUaW1lLCBhbmltYXRpb25Db25maWcucGF1c2VGYWRlT3V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBTYW1lTGF5ZXJBbmRHcm91cCAqLzpcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIF9lID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzOyBfZCA8IF9lLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uU3RhdGUgPSBfZVtfZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25TdGF0ZS5fcGFyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGUubGF5ZXIgPT09IGFuaW1hdGlvbkNvbmZpZy5sYXllciAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uU3RhdGUuZ3JvdXAgPT09IGFuaW1hdGlvbkNvbmZpZy5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uU3RhdGUuZmFkZU91dChhbmltYXRpb25Db25maWcuZmFkZU91dFRpbWUsIGFuaW1hdGlvbkNvbmZpZy5wYXVzZUZhZGVPdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0IC8qIEFsbCAqLzpcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZiA9IDAsIF9nID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzOyBfZiA8IF9nLmxlbmd0aDsgX2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uU3RhdGUgPSBfZ1tfZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25TdGF0ZS5fcGFyZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25TdGF0ZS5mYWRlT3V0KGFuaW1hdGlvbkNvbmZpZy5mYWRlT3V0VGltZSwgYW5pbWF0aW9uQ29uZmlnLnBhdXNlRmFkZU91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIE5vbmUgKi86XHJcbiAgICAgICAgICAgICAgICBjYXNlIDUgLyogU2luZ2xlICovOlxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGFybWF0dXJlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hcm1hdHVyZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlID0gYXJtYXR1cmU7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZyA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkFuaW1hdGlvbkNvbmZpZyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLmFkdmFuY2VUaW1lID0gZnVuY3Rpb24gKHBhc3NlZFRpbWUpIHtcclxuICAgICAgICAgICAgaWYgKHBhc3NlZFRpbWUgPCAwLjApIHsgLy8gT25seSBhbmltYXRpb25TdGF0ZSBjYW4gcmV2ZXJzZSBwbGF5LlxyXG4gICAgICAgICAgICAgICAgcGFzc2VkVGltZSA9IC1wYXNzZWRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hcm1hdHVyZS5pbmhlcml0QW5pbWF0aW9uICYmIHRoaXMuX2FybWF0dXJlLl9wYXJlbnQgIT09IG51bGwpIHsgLy8gSW5oZXJpdCBwYXJlbnQgYW5pbWF0aW9uIHRpbWVTY2FsZS5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2luaGVyaXRUaW1lU2NhbGUgPSB0aGlzLl9hcm1hdHVyZS5fcGFyZW50Ll9hcm1hdHVyZS5hbmltYXRpb24uX2luaGVyaXRUaW1lU2NhbGUgKiB0aGlzLnRpbWVTY2FsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luaGVyaXRUaW1lU2NhbGUgPSB0aGlzLnRpbWVTY2FsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5faW5oZXJpdFRpbWVTY2FsZSAhPT0gMS4wKSB7XHJcbiAgICAgICAgICAgICAgICBwYXNzZWRUaW1lICo9IHRoaXMuX2luaGVyaXRUaW1lU2NhbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlQ291bnQgPSB0aGlzLl9hbmltYXRpb25TdGF0ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGVDb3VudCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlLl9mYWRlU3RhdGUgPiAwICYmIGFuaW1hdGlvblN0YXRlLl9zdWJGYWRlU3RhdGUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2RyYWdvbkJvbmVzLmJ1ZmZlck9iamVjdChhbmltYXRpb25TdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdEFuaW1hdGlvblN0YXRlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25EYXRhID0gYW5pbWF0aW9uU3RhdGUuX2FuaW1hdGlvbkRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlRnJhbWVSYXRlID0gYW5pbWF0aW9uRGF0YS5jYWNoZUZyYW1lUmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRGlydHkgJiYgY2FjaGVGcmFtZVJhdGUgPiAwLjApIHsgLy8gVXBkYXRlIGNhY2hlZEZyYW1lSW5kaWNlcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2FybWF0dXJlLmdldEJvbmVzKCk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmUuX2NhY2hlZEZyYW1lSW5kaWNlcyA9IGFuaW1hdGlvbkRhdGEuZ2V0Qm9uZUNhY2hlZEZyYW1lSW5kaWNlcyhib25lLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLl9hcm1hdHVyZS5nZXRTbG90cygpOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsb3QgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3RGlzcGxheURhdGFzID0gc2xvdC5yYXdEaXNwbGF5RGF0YXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3RGlzcGxheURhdGFzICE9PSBudWxsICYmIHJhd0Rpc3BsYXlEYXRhcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0RzcGxheURhdGEgPSByYXdEaXNwbGF5RGF0YXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhd0RzcGxheURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhd0RzcGxheURhdGEucGFyZW50ID09PSB0aGlzLl9hcm1hdHVyZS5hcm1hdHVyZURhdGEuZGVmYXVsdFNraW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QuX2NhY2hlZEZyYW1lSW5kaWNlcyA9IGFuaW1hdGlvbkRhdGEuZ2V0U2xvdENhY2hlZEZyYW1lSW5kaWNlcyhzbG90Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG90Ll9jYWNoZWRGcmFtZUluZGljZXMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLmFkdmFuY2VUaW1lKHBhc3NlZFRpbWUsIGNhY2hlRnJhbWVSYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhbmltYXRpb25TdGF0ZUNvdW50ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHIgPSAwOyBpIDwgYW5pbWF0aW9uU3RhdGVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25TdGF0ZS5fZmFkZVN0YXRlID4gMCAmJiBhbmltYXRpb25TdGF0ZS5fc3ViRmFkZVN0YXRlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9kcmFnb25Cb25lcy5idWZmZXJPYmplY3QoYW5pbWF0aW9uU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0QW5pbWF0aW9uU3RhdGUgPT09IGFuaW1hdGlvblN0YXRlKSB7IC8vIFVwZGF0ZSBsYXN0IGFuaW1hdGlvbiBzdGF0ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RBbmltYXRpb25TdGF0ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uU3RhdGVzW2kgLSByXSA9IGFuaW1hdGlvblN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLmFkdmFuY2VUaW1lKHBhc3NlZFRpbWUsIDAuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBhbmltYXRpb25TdGF0ZUNvdW50IC0gMSAmJiByID4gMCkgeyAvLyBNb2RpZnkgYW5pbWF0aW9uIHN0YXRlcyBzaXplLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25TdGF0ZXMubGVuZ3RoIC09IHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0QW5pbWF0aW9uU3RhdGUgPT09IG51bGwgJiYgdGhpcy5fYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RBbmltYXRpb25TdGF0ZSA9IHRoaXMuX2FuaW1hdGlvblN0YXRlc1t0aGlzLl9hbmltYXRpb25TdGF0ZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5fY2FjaGVGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5fY2FjaGVGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ2xlYXIgYWxsIGFuaW1hdGlvbnMgc3RhdGVzLlxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uU3RhdGVcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOa4hemZpOaJgOacieeahOWKqOeUu+eKtuaAgeOAglxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uU3RhdGVcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uU3RhdGUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uRGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblN0YXRlcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0QW5pbWF0aW9uU3RhdGUgPSBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBQYXVzZSBhIHNwZWNpZmljIGFuaW1hdGlvbiBzdGF0ZS5cclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIFRoZSBuYW1lIG9mIGFuaW1hdGlvbiBzdGF0ZS4gKElmIG5vdCBzZXQsIGl0IHdpbGwgcGF1c2UgYWxsIGFuaW1hdGlvbnMpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25TdGF0ZVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5pqC5YGc5oyH5a6a5Yqo55S754q25oCB55qE5pKt5pS+44CCXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSDliqjnlLvnirbmgIHlkI3np7DjgIIg77yI5aaC5p6c5pyq6K6+572u77yM5YiZ5pqC5YGc5omA5pyJ5Yqo55S777yJXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25TdGF0ZVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChhbmltYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25OYW1lID09PSB2b2lkIDApIHsgYW5pbWF0aW9uTmFtZSA9IG51bGw7IH1cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbk5hbWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25TdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoYW5pbWF0aW9uTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25TdGF0ZS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25TdGF0ZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25TdGF0ZS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gUGxheSBhbmltYXRpb24gd2l0aCBhIHNwZWNpZmljIGFuaW1hdGlvbiBjb25maWcuXHJcbiAgICAgICAgICogVGhlIEFQSSBpcyBzdGlsbCBpbiB0aGUgZXhwZXJpbWVudGFsIHBoYXNlIGFuZCBtYXkgZW5jb3VudGVyIGJ1Z3Mgb3Igc3RhYmlsaXR5IG9yIGNvbXBhdGliaWxpdHkgaXNzdWVzIHdoZW4gdXNlZC5cclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uQ29uZmlnIC0gVGhlIGFuaW1hdGlvbiBjb25maWcuXHJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHBsYXlpbmcgYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uQ29uZmlnXHJcbiAgICAgICAgICogQGJldGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOmAmui/h+aMh+WumueahOWKqOeUu+mFjee9ruadpeaSreaUvuWKqOeUu+OAglxyXG4gICAgICAgICAqIOivpSBBUEkg5LuN5Zyo5a6e6aqM6Zi25q6177yM5L2/55So5pe25Y+v6IO96YGt6YGHIGJ1ZyDmiJbnqLPlrprmgKfmiJblhbzlrrnmgKfpl67popjjgIJcclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uQ29uZmlnIC0g5Yqo55S76YWN572u44CCXHJcbiAgICAgICAgICogQHJldHVybnMg5pKt5pS+55qE5Yqo55S754q25oCB44CCXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25Db25maWdcclxuICAgICAgICAgKiBAYmV0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbi5wcm90b3R5cGUucGxheUNvbmZpZyA9IGZ1bmN0aW9uIChhbmltYXRpb25Db25maWcpIHtcclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbk5hbWUgPSBhbmltYXRpb25Db25maWcuYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICBpZiAoIShhbmltYXRpb25OYW1lIGluIHRoaXMuX2FuaW1hdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJOb24tZXhpc3RlbnQgYW5pbWF0aW9uLlxcblwiLCBcIkRyYWdvbkJvbmVzIG5hbWU6IFwiICsgdGhpcy5fYXJtYXR1cmUuYXJtYXR1cmVEYXRhLnBhcmVudC5uYW1lLCBcIkFybWF0dXJlIG5hbWU6IFwiICsgdGhpcy5fYXJtYXR1cmUubmFtZSwgXCJBbmltYXRpb24gbmFtZTogXCIgKyBhbmltYXRpb25OYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25EYXRhID0gdGhpcy5fYW5pbWF0aW9uc1thbmltYXRpb25OYW1lXTtcclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy5mYWRlT3V0TW9kZSA9PT0gNSAvKiBTaW5nbGUgKi8pIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9hbmltYXRpb25TdGF0ZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlXzEgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlXzEuX2FuaW1hdGlvbkRhdGEgPT09IGFuaW1hdGlvbkRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvblN0YXRlXzE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25TdGF0ZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Db25maWcuZmFkZUluVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhbmltYXRpb25Db25maWcuZmFkZUluVGltZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uQ29uZmlnLmZhZGVJblRpbWUgPSBhbmltYXRpb25EYXRhLmZhZGVJblRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy5mYWRlT3V0VGltZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uQ29uZmlnLmZhZGVPdXRUaW1lID0gYW5pbWF0aW9uQ29uZmlnLmZhZGVJblRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy50aW1lU2NhbGUgPD0gLTEwMC4wKSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Db25maWcudGltZVNjYWxlID0gMS4wIC8gYW5pbWF0aW9uRGF0YS5zY2FsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5mcmFtZUNvdW50ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbiA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbiAlPSBhbmltYXRpb25EYXRhLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbiA9IGFuaW1hdGlvbkRhdGEuZHVyYXRpb24gLSBhbmltYXRpb25Db25maWcucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhbmltYXRpb25Db25maWcucG9zaXRpb24gPT09IGFuaW1hdGlvbkRhdGEuZHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25Db25maWcucG9zaXRpb24gLT0gMC4wMDAwMDE7IC8vIFBsYXkgYSBsaXR0bGUgdGltZSBiZWZvcmUgZW5kLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYW5pbWF0aW9uQ29uZmlnLnBvc2l0aW9uID4gYW5pbWF0aW9uRGF0YS5kdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbiAlPSBhbmltYXRpb25EYXRhLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy5kdXJhdGlvbiA+IDAuMCAmJiBhbmltYXRpb25Db25maWcucG9zaXRpb24gKyBhbmltYXRpb25Db25maWcuZHVyYXRpb24gPiBhbmltYXRpb25EYXRhLmR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uQ29uZmlnLmR1cmF0aW9uID0gYW5pbWF0aW9uRGF0YS5kdXJhdGlvbiAtIGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25Db25maWcucGxheVRpbWVzIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy5wbGF5VGltZXMgPSBhbmltYXRpb25EYXRhLnBsYXlUaW1lcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy5wbGF5VGltZXMgPSAxO1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uQ29uZmlnLnBvc2l0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy5kdXJhdGlvbiA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy5kdXJhdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uQ29uZmlnLmR1cmF0aW9uID09PSAwLjApIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbkNvbmZpZy5kdXJhdGlvbiA9IC0xLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZmFkZU91dChhbmltYXRpb25Db25maWcpO1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uU3RhdGUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5BbmltYXRpb25TdGF0ZSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLmluaXQodGhpcy5fYXJtYXR1cmUsIGFuaW1hdGlvbkRhdGEsIGFuaW1hdGlvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2NhY2hlRnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBhZGRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9hbmltYXRpb25TdGF0ZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlLmxheWVyID4gdGhpcy5fYW5pbWF0aW9uU3RhdGVzW2ldLmxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uU3RhdGVzLnNwbGljZShpLCAwLCBhbmltYXRpb25TdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpICE9PSBsIC0gMSAmJiBhbmltYXRpb25TdGF0ZS5sYXllciA+IHRoaXMuX2FuaW1hdGlvblN0YXRlc1tpICsgMV0ubGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25TdGF0ZXMuc3BsaWNlKGkgKyAxLCAwLCBhbmltYXRpb25TdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghYWRkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25TdGF0ZXMucHVzaChhbmltYXRpb25TdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25TdGF0ZXMucHVzaChhbmltYXRpb25TdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gQ2hpbGQgYXJtYXR1cmUgcGxheSBzYW1lIG5hbWUgYW5pbWF0aW9uLlxyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5fYXJtYXR1cmUuZ2V0U2xvdHMoKTsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBzbG90ID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkQXJtYXR1cmUgPSBzbG90LmNoaWxkQXJtYXR1cmU7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRBcm1hdHVyZSAhPT0gbnVsbCAmJiBjaGlsZEFybWF0dXJlLmluaGVyaXRBbmltYXRpb24gJiZcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZEFybWF0dXJlLmFuaW1hdGlvbi5oYXNBbmltYXRpb24oYW5pbWF0aW9uTmFtZSkgJiZcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZEFybWF0dXJlLmFuaW1hdGlvbi5nZXRTdGF0ZShhbmltYXRpb25OYW1lKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkQXJtYXR1cmUuYW5pbWF0aW9uLmZhZGVJbihhbmltYXRpb25OYW1lKTsgLy9cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaXNMb2NrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhbmltYXRpb25EYXRhLmFuaW1hdGlvblRpbWVsaW5lcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9sb2NrVXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNMb2NrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvY2tVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkQW5pbWF0aWlvblN0YXRlID0gdGhpcy5mYWRlSW4oaywgYW5pbWF0aW9uQ29uZmlnLmZhZGVJblRpbWUsIDEsIGFuaW1hdGlvblN0YXRlLmxheWVyLCBudWxsLCAwIC8qIE5vbmUgKi8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkQW5pbWF0aWlvblN0YXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRBbmltYXRpaW9uU3RhdGUucmVzZXRUb1Bvc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZEFuaW1hdGlpb25TdGF0ZS5fcGFyZW50ID0gYW5pbWF0aW9uU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRBbmltYXRpaW9uU3RhdGUuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc0xvY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9ja1VwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fbG9ja1VwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy5mYWRlSW5UaW1lIDw9IDAuMCkgeyAvLyBCbGVuZCBhbmltYXRpb24gc3RhdGUsIHVwZGF0ZSBhcm1hdHVyZS5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5hZHZhbmNlVGltZSgwLjApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdEFuaW1hdGlvblN0YXRlID0gYW5pbWF0aW9uU3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvblN0YXRlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBQbGF5IGEgc3BlY2lmaWMgYW5pbWF0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSBhbmltYXRpb25OYW1lIC0gVGhlIG5hbWUgb2YgYW5pbWF0aW9uIGRhdGEuIChJZiBub3Qgc2V0LCBUaGUgZGVmYXVsdCBhbmltYXRpb24gd2lsbCBiZSBwbGF5ZWQsIG9yIHJlc3VtZSB0aGUgYW5pbWF0aW9uIHBsYXlpbmcgZnJvbSBwYXVzZSBzdGF0dXMsIG9yIHJlcGxheSB0aGUgbGFzdCBwbGF5aW5nIGFuaW1hdGlvbilcclxuICAgICAgICAgKiBAcGFyYW0gcGxheVRpbWVzIC0gUGxheWluZyByZXBlYXQgdGltZXMuIFstMTogVXNlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIGFuaW1hdGlvbiBkYXRhLCAwOiBObyBlbmQgbG9vcCBwbGF5aW5nLCBbMX5OXTogUmVwZWF0IE4gdGltZXNdIChkZWZhdWx0OiAtMSlcclxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgcGxheWluZyBhbmltYXRpb24gc3RhdGUuXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBhcm1hdHVyZS5hbmltYXRpb24ucGxheShcIndhbGtcIik7XHJcbiAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmkq3mlL7mjIflrprliqjnlLvjgIJcclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIOWKqOeUu+aVsOaNruWQjeensOOAgiDvvIjlpoLmnpzmnKrorr7nva7vvIzliJnmkq3mlL7pu5jorqTliqjnlLvvvIzmiJblsIbmmoLlgZznirbmgIHliIfmjaLkuLrmkq3mlL7nirbmgIHvvIzmiJbph43mlrDmkq3mlL7kuYvliY3mkq3mlL7nmoTliqjnlLvvvIlcclxuICAgICAgICAgKiBAcGFyYW0gcGxheVRpbWVzIC0g5b6q546v5pKt5pS+5qyh5pWw44CCIFstMTog5L2/55So5Yqo55S75pWw5o2u6buY6K6k5YC8LCAwOiDml6DpmZDlvqrnjq/mkq3mlL4sIFsxfk5dOiDlvqrnjq/mkq3mlL4gTiDmrKFdIO+8iOm7mOiupDogLTHvvIlcclxuICAgICAgICAgKiBAcmV0dXJucyDmkq3mlL7nmoTliqjnlLvnirbmgIHjgIJcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICogICAgIGFybWF0dXJlLmFuaW1hdGlvbi5wbGF5KFwid2Fsa1wiKTtcclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAoYW5pbWF0aW9uTmFtZSwgcGxheVRpbWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25OYW1lID09PSB2b2lkIDApIHsgYW5pbWF0aW9uTmFtZSA9IG51bGw7IH1cclxuICAgICAgICAgICAgaWYgKHBsYXlUaW1lcyA9PT0gdm9pZCAwKSB7IHBsYXlUaW1lcyA9IC0xOyB9XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcucmVzZXRUb1Bvc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcucGxheVRpbWVzID0gcGxheVRpbWVzO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuZmFkZUluVGltZSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmFuaW1hdGlvbiA9IGFuaW1hdGlvbk5hbWUgIT09IG51bGwgPyBhbmltYXRpb25OYW1lIDogXCJcIjtcclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbk5hbWUgIT09IG51bGwgJiYgYW5pbWF0aW9uTmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlDb25maWcodGhpcy5fYW5pbWF0aW9uQ29uZmlnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9sYXN0QW5pbWF0aW9uU3RhdGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0QW5pbWF0aW9uID0gdGhpcy5fYXJtYXR1cmUuYXJtYXR1cmVEYXRhLmRlZmF1bHRBbmltYXRpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdEFuaW1hdGlvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5hbmltYXRpb24gPSBkZWZhdWx0QW5pbWF0aW9uLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5Q29uZmlnKHRoaXMuX2FuaW1hdGlvbkNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMuX2xhc3RBbmltYXRpb25TdGF0ZS5pc1BsYXlpbmcgJiYgIXRoaXMuX2xhc3RBbmltYXRpb25TdGF0ZS5pc0NvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdEFuaW1hdGlvblN0YXRlLnBsYXkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5hbmltYXRpb24gPSB0aGlzLl9sYXN0QW5pbWF0aW9uU3RhdGUubmFtZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNvbmZpZyh0aGlzLl9hbmltYXRpb25Db25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXN0QW5pbWF0aW9uU3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEZhZGUgaW4gYSBzcGVjaWZpYyBhbmltYXRpb24uXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSBUaGUgbmFtZSBvZiBhbmltYXRpb24gZGF0YS5cclxuICAgICAgICAgKiBAcGFyYW0gZmFkZUluVGltZSAtIFRoZSBmYWRlIGluIHRpbWUuIFstMTogVXNlIHRoZSBkZWZhdWx0IHZhbHVlIG9mIGFuaW1hdGlvbiBkYXRhLCBbMH5OXTogVGhlIGZhZGUgaW4gdGltZSAoSW4gc2Vjb25kcyldIChEZWZhdWx0OiAtMSlcclxuICAgICAgICAgKiBAcGFyYW0gcGxheVRpbWVzIC0gcGxheWluZyByZXBlYXQgdGltZXMuIFstMTogVXNlIHRoZSBkZWZhdWx0IHZhbHVlIG9mIGFuaW1hdGlvbiBkYXRhLCAwOiBObyBlbmQgbG9vcCBwbGF5aW5nLCBbMX5OXTogUmVwZWF0IE4gdGltZXNdIChEZWZhdWx0OiAtMSlcclxuICAgICAgICAgKiBAcGFyYW0gbGF5ZXIgLSBUaGUgYmxlbmRpbmcgbGF5ZXIsIHRoZSBhbmltYXRpb24gc3RhdGVzIGluIGhpZ2ggbGV2ZWwgbGF5ZXIgd2lsbCBnZXQgdGhlIGJsZW5kaW5nIHdlaWdodHMgd2l0aCBoaWdoIHByaW9yaXR5LCB3aGVuIHRoZSB0b3RhbCBibGVuZGluZyB3ZWlnaHRzIGFyZSBtb3JlIHRoYW4gMS4wLCB0aGVyZSB3aWxsIGJlIG5vIG1vcmUgd2VpZ2h0cyBjYW4gYmUgYWxsb2NhdGVkIHRvIHRoZSBvdGhlciBhbmltYXRpb24gc3RhdGVzLiAoRGVmYXVsdDogMClcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXAgLSBUaGUgYmxlbmRpbmcgZ3JvdXAgbmFtZSwgaXQgaXMgdHlwaWNhbGx5IHVzZWQgdG8gc3BlY2lmeSB0aGUgc3Vic3RpdHV0aW9uIG9mIG11bHRpcGxlIGFuaW1hdGlvbiBzdGF0ZXMgYmxlbmRpbmcuIChEZWZhdWx0OiBudWxsKVxyXG4gICAgICAgICAqIEBwYXJhbSBmYWRlT3V0TW9kZSAtIFRoZSBmYWRlIG91dCBtb2RlLCB3aGljaCBpcyB0eXBpY2FsbHkgdXNlZCB0byBzcGVjaWZ5IGFsdGVybmF0ZSBtb2RlIG9mIG11bHRpcGxlIGFuaW1hdGlvbiBzdGF0ZXMgYmxlbmRpbmcuIChEZWZhdWx0OiBBbmltYXRpb25GYWRlT3V0TW9kZS5TYW1lTGF5ZXJBbmRHcm91cClcclxuICAgICAgICAgKiBAcmV0dXJucyBUaGUgcGxheWluZyBhbmltYXRpb24gc3RhdGUuXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBhcm1hdHVyZS5hbmltYXRpb24uZmFkZUluKFwid2Fsa1wiLCAwLjMsIDAsIDAsIFwibm9ybWFsR3JvdXBcIikucmVzZXRUb1Bvc2UgPSBmYWxzZTtcclxuICAgICAgICAgKiAgICAgYXJtYXR1cmUuYW5pbWF0aW9uLmZhZGVJbihcImF0dGFja1wiLCAwLjMsIDEsIDAsIFwiYXR0YWNrR3JvdXBcIikucmVzZXRUb1Bvc2UgPSBmYWxzZTtcclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOa3oeWFpeaSreaUvuaMh+WumueahOWKqOeUu+OAglxyXG4gICAgICAgICAqIEBwYXJhbSBhbmltYXRpb25OYW1lIC0g5Yqo55S75pWw5o2u5ZCN56ew44CCXHJcbiAgICAgICAgICogQHBhcmFtIGZhZGVJblRpbWUgLSDmt6HlhaXml7bpl7TjgIIgWy0xOiDkvb/nlKjliqjnlLvmlbDmja7pu5jorqTlgLwsIFswfk5dOiDmt6HlhaXml7bpl7QgKOS7peenkuS4uuWNleS9jSldIO+8iOm7mOiupDogLTHvvIlcclxuICAgICAgICAgKiBAcGFyYW0gcGxheVRpbWVzIC0g5pKt5pS+5qyh5pWw44CCIFstMTog5L2/55So5Yqo55S75pWw5o2u6buY6K6k5YC8LCAwOiDml6DpmZDlvqrnjq/mkq3mlL4sIFsxfk5dOiDlvqrnjq/mkq3mlL4gTiDmrKFdIO+8iOm7mOiupDogLTHvvIlcclxuICAgICAgICAgKiBAcGFyYW0gbGF5ZXIgLSDmt7flkIjlm77lsYLvvIzlm77lsYLpq5jnmoTliqjnlLvnirbmgIHkvJrkvJjlhYjojrflj5bmt7flkIjmnYPph43vvIzlvZPmt7flkIjmnYPph43liIbphY3mgLvlkozotoXov4cgMS4wIOaXtu+8jOWJqeS9meeahOWKqOeUu+eKtuaAgeWwhuS4jeiDveWGjeiOt+W+l+adg+mHjeWIhumFjeOAgiDvvIjpu5jorqQ6IDDvvIlcclxuICAgICAgICAgKiBAcGFyYW0gZ3JvdXAgLSDmt7flkIjnu4TlkI3np7DvvIzor6XlsZ7mgKfpgJrluLjnlKjmnaXmjIflrprlpJrkuKrliqjnlLvnirbmgIHmt7flkIjml7bnmoTnm7jkupLmm7/mjaLlhbPns7vjgIIg77yI6buY6K6kOiBudWxs77yJXHJcbiAgICAgICAgICogQHBhcmFtIGZhZGVPdXRNb2RlIC0g5reh5Ye65qih5byP77yM6K+l5bGe5oCn6YCa5bi455So5p2l5oyH5a6a5aSa5Liq5Yqo55S754q25oCB5re35ZCI5pe255qE55u45LqS5pu/5o2i5qih5byP44CCIO+8iOm7mOiupDogQW5pbWF0aW9uRmFkZU91dE1vZGUuU2FtZUxheWVyQW5kR3JvdXDvvIlcclxuICAgICAgICAgKiBAcmV0dXJucyDmkq3mlL7nmoTliqjnlLvnirbmgIHjgIJcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICogICAgIGFybWF0dXJlLmFuaW1hdGlvbi5mYWRlSW4oXCJ3YWxrXCIsIDAuMywgMCwgMCwgXCJub3JtYWxHcm91cFwiKS5yZXNldFRvUG9zZSA9IGZhbHNlO1xyXG4gICAgICAgICAqICAgICBhcm1hdHVyZS5hbmltYXRpb24uZmFkZUluKFwiYXR0YWNrXCIsIDAuMywgMSwgMCwgXCJhdHRhY2tHcm91cFwiKS5yZXNldFRvUG9zZSA9IGZhbHNlO1xyXG4gICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuZmFkZUluID0gZnVuY3Rpb24gKGFuaW1hdGlvbk5hbWUsIGZhZGVJblRpbWUsIHBsYXlUaW1lcywgbGF5ZXIsIGdyb3VwLCBmYWRlT3V0TW9kZSkge1xyXG4gICAgICAgICAgICBpZiAoZmFkZUluVGltZSA9PT0gdm9pZCAwKSB7IGZhZGVJblRpbWUgPSAtMS4wOyB9XHJcbiAgICAgICAgICAgIGlmIChwbGF5VGltZXMgPT09IHZvaWQgMCkgeyBwbGF5VGltZXMgPSAtMTsgfVxyXG4gICAgICAgICAgICBpZiAobGF5ZXIgPT09IHZvaWQgMCkgeyBsYXllciA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKGdyb3VwID09PSB2b2lkIDApIHsgZ3JvdXAgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChmYWRlT3V0TW9kZSA9PT0gdm9pZCAwKSB7IGZhZGVPdXRNb2RlID0gMyAvKiBTYW1lTGF5ZXJBbmRHcm91cCAqLzsgfVxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmZhZGVPdXRNb2RlID0gZmFkZU91dE1vZGU7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5wbGF5VGltZXMgPSBwbGF5VGltZXM7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5sYXllciA9IGxheWVyO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuZmFkZUluVGltZSA9IGZhZGVJblRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5hbmltYXRpb24gPSBhbmltYXRpb25OYW1lO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuZ3JvdXAgPSBncm91cCAhPT0gbnVsbCA/IGdyb3VwIDogXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGxheUNvbmZpZyh0aGlzLl9hbmltYXRpb25Db25maWcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBQbGF5IGEgc3BlY2lmaWMgYW5pbWF0aW9uIGZyb20gdGhlIHNwZWNpZmljIHRpbWUuXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSBUaGUgbmFtZSBvZiBhbmltYXRpb24gZGF0YS5cclxuICAgICAgICAgKiBAcGFyYW0gdGltZSAtIFRoZSBzdGFydCB0aW1lIHBvaW50IG9mIHBsYXlpbmcuIChJbiBzZWNvbmRzKVxyXG4gICAgICAgICAqIEBwYXJhbSBwbGF5VGltZXMgLSBQbGF5aW5nIHJlcGVhdCB0aW1lcy4gWy0xOiBVc2UgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYW5pbWF0aW9uIGRhdGEsIDA6IE5vIGVuZCBsb29wIHBsYXlpbmcsIFsxfk5dOiBSZXBlYXQgTiB0aW1lc10gKERlZmF1bHQ6IC0xKVxyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBwbGF5ZWQgYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5LuO5oyH5a6a5pe26Ze05byA5aeL5pKt5pS+5oyH5a6a55qE5Yqo55S744CCXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSDliqjnlLvmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gdGltZSAtIOaSreaUvuW8gOWni+eahOaXtumXtOOAgiAo5Lul56eS5Li65Y2V5L2NKVxyXG4gICAgICAgICAqIEBwYXJhbSBwbGF5VGltZXMgLSDlvqrnjq/mkq3mlL7mrKHmlbDjgIIgWy0xOiDkvb/nlKjliqjnlLvmlbDmja7pu5jorqTlgLwsIDA6IOaXoOmZkOW+queOr+aSreaUviwgWzF+Tl06IOW+queOr+aSreaUviBOIOasoV0g77yI6buY6K6kOiAtMe+8iVxyXG4gICAgICAgICAqIEByZXR1cm5zIOaSreaUvueahOWKqOeUu+eKtuaAgeOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuZ290b0FuZFBsYXlCeVRpbWUgPSBmdW5jdGlvbiAoYW5pbWF0aW9uTmFtZSwgdGltZSwgcGxheVRpbWVzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aW1lID09PSB2b2lkIDApIHsgdGltZSA9IDAuMDsgfVxyXG4gICAgICAgICAgICBpZiAocGxheVRpbWVzID09PSB2b2lkIDApIHsgcGxheVRpbWVzID0gLTE7IH1cclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5yZXNldFRvUG9zZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5wbGF5VGltZXMgPSBwbGF5VGltZXM7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbiA9IHRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5mYWRlSW5UaW1lID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuYW5pbWF0aW9uID0gYW5pbWF0aW9uTmFtZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGxheUNvbmZpZyh0aGlzLl9hbmltYXRpb25Db25maWcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBQbGF5IGEgc3BlY2lmaWMgYW5pbWF0aW9uIGZyb20gdGhlIHNwZWNpZmljIGZyYW1lLlxyXG4gICAgICAgICAqIEBwYXJhbSBhbmltYXRpb25OYW1lIC0gVGhlIG5hbWUgb2YgYW5pbWF0aW9uIGRhdGEuXHJcbiAgICAgICAgICogQHBhcmFtIGZyYW1lIC0gVGhlIHN0YXJ0IGZyYW1lIG9mIHBsYXlpbmcuXHJcbiAgICAgICAgICogQHBhcmFtIHBsYXlUaW1lcyAtIFBsYXlpbmcgcmVwZWF0IHRpbWVzLiBbLTE6IFVzZSB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhbmltYXRpb24gZGF0YSwgMDogTm8gZW5kIGxvb3AgcGxheWluZywgWzF+Tl06IFJlcGVhdCBOIHRpbWVzXSAoRGVmYXVsdDogLTEpXHJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHBsYXllZCBhbmltYXRpb24gc3RhdGUuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDku47mjIflrprluKflvIDlp4vmkq3mlL7mjIflrprnmoTliqjnlLvjgIJcclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIOWKqOeUu+aVsOaNruWQjeensOOAglxyXG4gICAgICAgICAqIEBwYXJhbSBmcmFtZSAtIOaSreaUvuW8gOWni+eahOW4p+aVsOOAglxyXG4gICAgICAgICAqIEBwYXJhbSBwbGF5VGltZXMgLSDmkq3mlL7mrKHmlbDjgIIgWy0xOiDkvb/nlKjliqjnlLvmlbDmja7pu5jorqTlgLwsIDA6IOaXoOmZkOW+queOr+aSreaUviwgWzF+Tl06IOW+queOr+aSreaUviBOIOasoV0g77yI6buY6K6kOiAtMe+8iVxyXG4gICAgICAgICAqIEByZXR1cm5zIOaSreaUvueahOWKqOeUu+eKtuaAgeOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuZ290b0FuZFBsYXlCeUZyYW1lID0gZnVuY3Rpb24gKGFuaW1hdGlvbk5hbWUsIGZyYW1lLCBwbGF5VGltZXMpIHtcclxuICAgICAgICAgICAgaWYgKGZyYW1lID09PSB2b2lkIDApIHsgZnJhbWUgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmIChwbGF5VGltZXMgPT09IHZvaWQgMCkgeyBwbGF5VGltZXMgPSAtMTsgfVxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnJlc2V0VG9Qb3NlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnBsYXlUaW1lcyA9IHBsYXlUaW1lcztcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmZhZGVJblRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5hbmltYXRpb24gPSBhbmltYXRpb25OYW1lO1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uRGF0YSA9IGFuaW1hdGlvbk5hbWUgaW4gdGhpcy5fYW5pbWF0aW9ucyA/IHRoaXMuX2FuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0gOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnBvc2l0aW9uID0gYW5pbWF0aW9uRGF0YS5kdXJhdGlvbiAqIGZyYW1lIC8gYW5pbWF0aW9uRGF0YS5mcmFtZUNvdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBsYXlDb25maWcodGhpcy5fYW5pbWF0aW9uQ29uZmlnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gUGxheSBhIHNwZWNpZmljIGFuaW1hdGlvbiBmcm9tIHRoZSBzcGVjaWZpYyBwcm9ncmVzcy5cclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIFRoZSBuYW1lIG9mIGFuaW1hdGlvbiBkYXRhLlxyXG4gICAgICAgICAqIEBwYXJhbSBwcm9ncmVzcyAtIFRoZSBzdGFydCBwcm9ncmVzcyB2YWx1ZSBvZiBwbGF5aW5nLlxyXG4gICAgICAgICAqIEBwYXJhbSBwbGF5VGltZXMgLSBQbGF5aW5nIHJlcGVhdCB0aW1lcy4gWy0xOiBVc2UgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYW5pbWF0aW9uIGRhdGEsIDA6IE5vIGVuZCBsb29wIHBsYXlpbmcsIFsxfk5dOiBSZXBlYXQgTiB0aW1lc10gKERlZmF1bHQ6IC0xKVxyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBwbGF5ZWQgYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5LuO5oyH5a6a6L+b5bqm5byA5aeL5pKt5pS+5oyH5a6a55qE5Yqo55S744CCXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSDliqjnlLvmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gcHJvZ3Jlc3MgLSDlvIDlp4vmkq3mlL7nmoTov5vluqbjgIJcclxuICAgICAgICAgKiBAcGFyYW0gcGxheVRpbWVzIC0g5pKt5pS+5qyh5pWw44CCIFstMTog5L2/55So5Yqo55S75pWw5o2u6buY6K6k5YC8LCAwOiDml6DpmZDlvqrnjq/mkq3mlL4sIFsxfk5dOiDlvqrnjq/mkq3mlL4gTiDmrKFdIO+8iOm7mOiupDogLTHvvIlcclxuICAgICAgICAgKiBAcmV0dXJucyDmkq3mlL7nmoTliqjnlLvnirbmgIHjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLmdvdG9BbmRQbGF5QnlQcm9ncmVzcyA9IGZ1bmN0aW9uIChhbmltYXRpb25OYW1lLCBwcm9ncmVzcywgcGxheVRpbWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcyA9PT0gdm9pZCAwKSB7IHByb2dyZXNzID0gMC4wOyB9XHJcbiAgICAgICAgICAgIGlmIChwbGF5VGltZXMgPT09IHZvaWQgMCkgeyBwbGF5VGltZXMgPSAtMTsgfVxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuY2xlYXIoKTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnJlc2V0VG9Qb3NlID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnBsYXlUaW1lcyA9IHBsYXlUaW1lcztcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmZhZGVJblRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5hbmltYXRpb24gPSBhbmltYXRpb25OYW1lO1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uRGF0YSA9IGFuaW1hdGlvbk5hbWUgaW4gdGhpcy5fYW5pbWF0aW9ucyA/IHRoaXMuX2FuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV0gOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnBvc2l0aW9uID0gYW5pbWF0aW9uRGF0YS5kdXJhdGlvbiAqIChwcm9ncmVzcyA+IDAuMCA/IHByb2dyZXNzIDogMC4wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wbGF5Q29uZmlnKHRoaXMuX2FuaW1hdGlvbkNvbmZpZyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFN0b3AgYSBzcGVjaWZpYyBhbmltYXRpb24gYXQgdGhlIHNwZWNpZmljIHRpbWUuXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSBUaGUgbmFtZSBvZiBhbmltYXRpb24gZGF0YS5cclxuICAgICAgICAgKiBAcGFyYW0gdGltZSAtIFRoZSBzdG9wIHRpbWUuIChJbiBzZWNvbmRzKVxyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBwbGF5ZWQgYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Zyo5oyH5a6a5pe26Ze05YGc5q2i5oyH5a6a5Yqo55S75pKt5pS+XHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSDliqjnlLvmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gdGltZSAtIOWBnOatoueahOaXtumXtOOAgiAo5Lul56eS5Li65Y2V5L2NKVxyXG4gICAgICAgICAqIEByZXR1cm5zIOaSreaUvueahOWKqOeUu+eKtuaAgeOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuZ290b0FuZFN0b3BCeVRpbWUgPSBmdW5jdGlvbiAoYW5pbWF0aW9uTmFtZSwgdGltZSkge1xyXG4gICAgICAgICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7IHRpbWUgPSAwLjA7IH1cclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gdGhpcy5nb3RvQW5kUGxheUJ5VGltZShhbmltYXRpb25OYW1lLCB0aW1lLCAxKTtcclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25TdGF0ZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvblN0YXRlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBTdG9wIGEgc3BlY2lmaWMgYW5pbWF0aW9uIGF0IHRoZSBzcGVjaWZpYyBmcmFtZS5cclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIFRoZSBuYW1lIG9mIGFuaW1hdGlvbiBkYXRhLlxyXG4gICAgICAgICAqIEBwYXJhbSBmcmFtZSAtIFRoZSBzdG9wIGZyYW1lLlxyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBwbGF5ZWQgYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Zyo5oyH5a6a5bin5YGc5q2i5oyH5a6a5Yqo55S755qE5pKt5pS+XHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSDliqjnlLvmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gZnJhbWUgLSDlgZzmraLnmoTluKfmlbDjgIJcclxuICAgICAgICAgKiBAcmV0dXJucyDmkq3mlL7nmoTliqjnlLvnirbmgIHjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLmdvdG9BbmRTdG9wQnlGcmFtZSA9IGZ1bmN0aW9uIChhbmltYXRpb25OYW1lLCBmcmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoZnJhbWUgPT09IHZvaWQgMCkgeyBmcmFtZSA9IDA7IH1cclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gdGhpcy5nb3RvQW5kUGxheUJ5RnJhbWUoYW5pbWF0aW9uTmFtZSwgZnJhbWUsIDEpO1xyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLnN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uU3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFN0b3AgYSBzcGVjaWZpYyBhbmltYXRpb24gYXQgdGhlIHNwZWNpZmljIHByb2dyZXNzLlxyXG4gICAgICAgICAqIEBwYXJhbSBhbmltYXRpb25OYW1lIC0gVGhlIG5hbWUgb2YgYW5pbWF0aW9uIGRhdGEuXHJcbiAgICAgICAgICogQHBhcmFtIHByb2dyZXNzIC0gVGhlIHN0b3AgcHJvZ3Jlc3MgdmFsdWUuXHJcbiAgICAgICAgICogQHJldHVybnMgVGhlIHBsYXllZCBhbmltYXRpb24gc3RhdGUuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlnKjmjIflrprnmoTov5vluqblgZzmraLmjIflrprnmoTliqjnlLvmkq3mlL7jgIJcclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIOWKqOeUu+aVsOaNruWQjeensOOAglxyXG4gICAgICAgICAqIEBwYXJhbSBwcm9ncmVzcyAtIOWBnOatoui/m+W6puOAglxyXG4gICAgICAgICAqIEByZXR1cm5zIOaSreaUvueahOWKqOeUu+eKtuaAgeOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuZ290b0FuZFN0b3BCeVByb2dyZXNzID0gZnVuY3Rpb24gKGFuaW1hdGlvbk5hbWUsIHByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcyA9PT0gdm9pZCAwKSB7IHByb2dyZXNzID0gMC4wOyB9XHJcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25TdGF0ZSA9IHRoaXMuZ290b0FuZFBsYXlCeVByb2dyZXNzKGFuaW1hdGlvbk5hbWUsIHByb2dyZXNzLCAxKTtcclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25TdGF0ZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvblN0YXRlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBzcGVjaWZpYyBhbmltYXRpb24gc3RhdGUuXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSBUaGUgbmFtZSBvZiBhbmltYXRpb24gc3RhdGUuXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBhcm1hdHVyZS5hbmltYXRpb24ucGxheShcIndhbGtcIik7XHJcbiAgICAgICAgICogICAgIGxldCB3YWxrU3RhdGUgPSBhcm1hdHVyZS5hbmltYXRpb24uZ2V0U3RhdGUoXCJ3YWxrXCIpO1xyXG4gICAgICAgICAqICAgICB3YWxrU3RhdGUudGltZVNjYWxlID0gMC41O1xyXG4gICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g6I635Y+W5oyH5a6a55qE5Yqo55S754q25oCBXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSDliqjnlLvnirbmgIHlkI3np7DjgIJcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICogICAgIGFybWF0dXJlLmFuaW1hdGlvbi5wbGF5KFwid2Fsa1wiKTtcclxuICAgICAgICAgKiAgICAgbGV0IHdhbGtTdGF0ZSA9IGFybWF0dXJlLmFuaW1hdGlvbi5nZXRTdGF0ZShcIndhbGtcIik7XHJcbiAgICAgICAgICogICAgIHdhbGtTdGF0ZS50aW1lU2NhbGUgPSAwLjU7XHJcbiAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChhbmltYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvblN0YXRlLm5hbWUgPT09IGFuaW1hdGlvbk5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uU3RhdGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENoZWNrIHdoZXRoZXIgYSBzcGVjaWZpYyBhbmltYXRpb24gZGF0YSBpcyBpbmNsdWRlZC5cclxuICAgICAgICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSAtIFRoZSBuYW1lIG9mIGFuaW1hdGlvbiBkYXRhLlxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5qOA5p+l5piv5ZCm5YyF5ZCr5oyH5a6a55qE5Yqo55S75pWw5o2uXHJcbiAgICAgICAgICogQHBhcmFtIGFuaW1hdGlvbk5hbWUgLSDliqjnlLvmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvbkRhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLmhhc0FuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhbmltYXRpb25OYW1lIGluIHRoaXMuX2FuaW1hdGlvbnM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEdldCBhbGwgdGhlIGFuaW1hdGlvbiBzdGF0ZXMuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4xXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDojrflj5bmiYDmnInnmoTliqjnlLvnirbmgIFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjFcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLmdldFN0YXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1hdGlvblN0YXRlcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb24ucHJvdG90eXBlLCBcImlzUGxheWluZ1wiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIENoZWNrIHdoZXRoZXIgdGhlcmUgaXMgYW4gYW5pbWF0aW9uIHN0YXRlIGlzIHBsYXlpbmdcclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25TdGF0ZVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmo4Dmn6XmmK/lkKbmnInliqjnlLvnirbmgIHmraPlnKjmkq3mlL5cclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25TdGF0ZVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9hbmltYXRpb25TdGF0ZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25TdGF0ZS5pc1BsYXlpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uLnByb3RvdHlwZSwgXCJpc0NvbXBsZXRlZFwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIENoZWNrIHdoZXRoZXIgYWxsIHRoZSBhbmltYXRpb24gc3RhdGVzJyBwbGF5aW5nIHdlcmUgZmluaXNoZWQuXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uU3RhdGVcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5qOA5p+l5piv5ZCm5omA5pyJ55qE5Yqo55S754q25oCB5Z2H5bey5pKt5pS+5a6M5q+V44CCXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uU3RhdGVcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYW5pbWF0aW9uU3RhdGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25TdGF0ZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWFuaW1hdGlvblN0YXRlLmlzQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uU3RhdGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb24ucHJvdG90eXBlLCBcImxhc3RBbmltYXRpb25OYW1lXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIG5hbWUgb2YgdGhlIGxhc3QgcGxheWluZyBhbmltYXRpb24gc3RhdGUuXHJcbiAgICAgICAgICAgICAqIEBzZWUgI2xhc3RBbmltYXRpb25TdGF0ZVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDkuIrkuIDkuKrmkq3mlL7nmoTliqjnlLvnirbmgIHlkI3np7BcclxuICAgICAgICAgICAgICogQHNlZSAjbGFzdEFuaW1hdGlvblN0YXRlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3RBbmltYXRpb25TdGF0ZSAhPT0gbnVsbCA/IHRoaXMuX2xhc3RBbmltYXRpb25TdGF0ZS5uYW1lIDogXCJcIjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvbi5wcm90b3R5cGUsIFwiYW5pbWF0aW9uTmFtZXNcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgbmFtZSBvZiBhbGwgYW5pbWF0aW9uIGRhdGFcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5omA5pyJ5Yqo55S75pWw5o2u55qE5ZCN56ewXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1hdGlvbk5hbWVzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uLnByb3RvdHlwZSwgXCJhbmltYXRpb25zXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gQWxsIGFuaW1hdGlvbiBkYXRhLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmiYDmnInnmoTliqjnlLvmlbDmja7jgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9ucztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25zID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbk5hbWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX2FuaW1hdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fYW5pbWF0aW9uc1trXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25OYW1lcy5wdXNoKGspO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbnNba10gPSB2YWx1ZVtrXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvbi5wcm90b3R5cGUsIFwiYW5pbWF0aW9uQ29uZmlnXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gQW4gQW5pbWF0aW9uQ29uZmlnIGluc3RhbmNlIHRoYXQgY2FuIGJlIHVzZWQgcXVpY2tseS5cclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25Db25maWdcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5LiA5Liq5Y+v5Lul5b+r6YCf5L2/55So55qE5Yqo55S76YWN572u5a6e5L6L44CCXHJcbiAgICAgICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uQ29uZmlnXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uQ29uZmlnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uLnByb3RvdHlwZSwgXCJsYXN0QW5pbWF0aW9uU3RhdGVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBUaGUgbGFzdCBwbGF5aW5nIGFuaW1hdGlvbiBzdGF0ZVxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvblN0YXRlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOS4iuS4gOS4quaSreaUvueahOWKqOeUu+eKtuaAgVxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvblN0YXRlXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhc3RBbmltYXRpb25TdGF0ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rICNwbGF5KCl9IHtAbGluayAjZmFkZUluKCl9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rICNwbGF5KCl9IHtAbGluayAjZmFkZUluKCl944CCXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLmdvdG9BbmRQbGF5ID0gZnVuY3Rpb24gKGFuaW1hdGlvbk5hbWUsIGZhZGVJblRpbWUsIGR1cmF0aW9uLCBwbGF5VGltZXMsIGxheWVyLCBncm91cCwgZmFkZU91dE1vZGUsIHBhdXNlRmFkZU91dCwgcGF1c2VGYWRlSW4pIHtcclxuICAgICAgICAgICAgaWYgKGZhZGVJblRpbWUgPT09IHZvaWQgMCkgeyBmYWRlSW5UaW1lID0gLTE7IH1cclxuICAgICAgICAgICAgaWYgKGR1cmF0aW9uID09PSB2b2lkIDApIHsgZHVyYXRpb24gPSAtMTsgfVxyXG4gICAgICAgICAgICBpZiAocGxheVRpbWVzID09PSB2b2lkIDApIHsgcGxheVRpbWVzID0gLTE7IH1cclxuICAgICAgICAgICAgaWYgKGxheWVyID09PSB2b2lkIDApIHsgbGF5ZXIgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmIChncm91cCA9PT0gdm9pZCAwKSB7IGdyb3VwID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBpZiAoZmFkZU91dE1vZGUgPT09IHZvaWQgMCkgeyBmYWRlT3V0TW9kZSA9IDMgLyogU2FtZUxheWVyQW5kR3JvdXAgKi87IH1cclxuICAgICAgICAgICAgaWYgKHBhdXNlRmFkZU91dCA9PT0gdm9pZCAwKSB7IHBhdXNlRmFkZU91dCA9IHRydWU7IH1cclxuICAgICAgICAgICAgaWYgKHBhdXNlRmFkZUluID09PSB2b2lkIDApIHsgcGF1c2VGYWRlSW4gPSB0cnVlOyB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkRlcHJlY2F0ZWQuXCIpO1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cclxuICAgICAgICAgICAgcGF1c2VGYWRlT3V0O1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cclxuICAgICAgICAgICAgcGF1c2VGYWRlSW47XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcucmVzZXRUb1Bvc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcuZmFkZU91dE1vZGUgPSBmYWRlT3V0TW9kZTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLnBsYXlUaW1lcyA9IHBsYXlUaW1lcztcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmxheWVyID0gbGF5ZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5mYWRlSW5UaW1lID0gZmFkZUluVGltZTtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uQ29uZmlnLmFuaW1hdGlvbiA9IGFuaW1hdGlvbk5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkNvbmZpZy5ncm91cCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAgOiBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uRGF0YSA9IHRoaXMuX2FuaW1hdGlvbnNbYW5pbWF0aW9uTmFtZV07XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhICYmIGR1cmF0aW9uID4gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25Db25maWcudGltZVNjYWxlID0gYW5pbWF0aW9uRGF0YS5kdXJhdGlvbiAvIGR1cmF0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBsYXlDb25maWcodGhpcy5fYW5pbWF0aW9uQ29uZmlnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayAjZ290b0FuZFN0b3BCeVRpbWUoKX0uXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW3suW6n+W8g++8jOivt+WPguiAgyB7QGxpbmsgI2dvdG9BbmRTdG9wQnlUaW1lKCl944CCXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb24ucHJvdG90eXBlLmdvdG9BbmRTdG9wID0gZnVuY3Rpb24gKGFuaW1hdGlvbk5hbWUsIHRpbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRpbWUgPT09IHZvaWQgMCkgeyB0aW1lID0gMDsgfVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ290b0FuZFN0b3BCeVRpbWUoYW5pbWF0aW9uTmFtZSwgdGltZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uLnByb3RvdHlwZSwgXCJhbmltYXRpb25MaXN0XCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayAjYW5pbWF0aW9uTmFtZXN9LlxyXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOW3suW6n+W8g++8jOivt+WPguiAgyB7QGxpbmsgI2FuaW1hdGlvbk5hbWVzfeOAglxyXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uTmFtZXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb24ucHJvdG90eXBlLCBcImFuaW1hdGlvbkRhdGFMaXN0XCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayAjYW5pbWF0aW9uTmFtZXN9LlxyXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOW3suW6n+W8g++8jOivt+WPguiAgyB7QGxpbmsgI2FuaW1hdGlvbk5hbWVzfeOAglxyXG4gICAgICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9hbmltYXRpb25OYW1lcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0LnB1c2godGhpcy5fYW5pbWF0aW9uc1t0aGlzLl9hbmltYXRpb25OYW1lc1tpXV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb247XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLkFuaW1hdGlvbiA9IEFuaW1hdGlvbjtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIC0gVGhlIGFuaW1hdGlvbiBzdGF0ZSBpcyBnZW5lcmF0ZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGRhdGEgaXMgcGxheWVkLlxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25cclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uRGF0YVxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAqL1xyXG4gICAgLyoqXHJcbiAgICAgKiAtIOWKqOeUu+eKtuaAgeeUseaSreaUvuWKqOeUu+aVsOaNruaXtuS6p+eUn+OAglxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25cclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQW5pbWF0aW9uRGF0YVxyXG4gICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAqL1xyXG4gICAgdmFyIEFuaW1hdGlvblN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhBbmltYXRpb25TdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBBbmltYXRpb25TdGF0ZSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIF90aGlzLl9ibGVuZFN0YXRlID0gbmV3IEJsZW5kU3RhdGUoKTtcclxuICAgICAgICAgICAgX3RoaXMuX2JvbmVNYXNrID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9ib25lVGltZWxpbmVzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9zdXJmYWNlVGltZWxpbmVzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9zbG90VGltZWxpbmVzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9jb25zdHJhaW50VGltZWxpbmVzID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9hbmltYXRpb25UaW1lbGluZXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX3Bvc2VUaW1lbGluZXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2JvbmVQb3NlcyA9IHt9O1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5fYWN0aW9uVGltZWxpbmUgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICBfdGhpcy5fek9yZGVyVGltZWxpbmUgPSBudWxsOyAvLyBJbml0aWFsIHZhbHVlLlxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBfdGhpcy5fcGFyZW50ID0gbnVsbDsgLy8gSW5pdGlhbCB2YWx1ZS5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBbmltYXRpb25TdGF0ZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLkFuaW1hdGlvblN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYm9uZVRpbWVsaW5lczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIHRpbWVsaW5lLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLl9zdXJmYWNlVGltZWxpbmVzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgdGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2QgPSAwLCBfZSA9IHRoaXMuX3Nsb3RUaW1lbGluZXM7IF9kIDwgX2UubGVuZ3RoOyBfZCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfZVtfZF07XHJcbiAgICAgICAgICAgICAgICB0aW1lbGluZS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfZiA9IDAsIF9nID0gdGhpcy5fY29uc3RyYWludFRpbWVsaW5lczsgX2YgPCBfZy5sZW5ndGg7IF9mKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IF9nW19mXTtcclxuICAgICAgICAgICAgICAgIHRpbWVsaW5lLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9oID0gMCwgX2ogPSB0aGlzLl9hbmltYXRpb25UaW1lbGluZXM7IF9oIDwgX2oubGVuZ3RoOyBfaCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfaltfaF07XHJcbiAgICAgICAgICAgICAgICB0aW1lbGluZS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX2JvbmVQb3Nlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYm9uZVBvc2VzW2tdLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2JvbmVQb3Nlc1trXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aW9uVGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvblRpbWVsaW5lLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl96T3JkZXJUaW1lbGluZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fek9yZGVyVGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25FbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkaXRpdmVCbGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDb250cm9sID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRUb1Bvc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5VGltZXMgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyID0gMDtcclxuICAgICAgICAgICAgdGhpcy50aW1lU2NhbGUgPSAxLjA7XHJcbiAgICAgICAgICAgIHRoaXMud2VpZ2h0ID0gMS4wO1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9GYWRlT3V0VGltZSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5mYWRlVG90YWxUaW1lID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVEaXJ0eSA9IDI7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYXloZWFkU3RhdGUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9mYWRlU3RhdGUgPSAtMTtcclxuICAgICAgICAgICAgdGhpcy5fc3ViRmFkZVN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZmFkZVRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhZGVQcm9ncmVzcyA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fd2VpZ2h0UmVzdWx0ID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9ibGVuZFN0YXRlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JvbmVNYXNrLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2JvbmVUaW1lbGluZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fc3VyZmFjZVRpbWVsaW5lcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9zbG90VGltZWxpbmVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnN0cmFpbnRUaW1lbGluZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uVGltZWxpbmVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2VUaW1lbGluZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgLy8gdGhpcy5fYm9uZVBvc2VzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkRhdGEgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9hcm1hdHVyZSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvblRpbWVsaW5lID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fek9yZGVyVGltZWxpbmUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsOyAvL1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLl91cGRhdGVUaW1lbGluZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHsgLy8gVXBkYXRlIGNvbnN0cmFpbnQgdGltZWxpbmVzLlxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2FybWF0dXJlLl9jb25zdHJhaW50czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhcyA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZ2V0Q29uc3RyYWludFRpbWVsaW5lcyhjb25zdHJhaW50Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZURhdGFzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgdGltZWxpbmVEYXRhc18xID0gdGltZWxpbmVEYXRhczsgX2IgPCB0aW1lbGluZURhdGFzXzEubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhID0gdGltZWxpbmVEYXRhc18xW19iXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGltZWxpbmVEYXRhLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMwIC8qIElLQ29uc3RyYWludCAqLzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5JS0NvbnN0cmFpbnRUaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuY29uc3RyYWludCA9IGNvbnN0cmFpbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmluaXQodGhpcy5fYXJtYXR1cmUsIHRoaXMsIHRpbWVsaW5lRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnN0cmFpbnRUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJlc2V0VG9Qb3NlKSB7IC8vIFBvc2UgdGltZWxpbmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLklLQ29uc3RyYWludFRpbWVsaW5lU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5jb25zdHJhaW50ID0gY29uc3RyYWludDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnN0cmFpbnRUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2VUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHsgLy8gVXBkYXRlIGFuaW1hdGlvbiB0aW1lbGluZXMuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYyA9IDAsIF9kID0gdGhpcy5fYXJtYXR1cmUuYW5pbWF0aW9uLmdldFN0YXRlcygpOyBfYyA8IF9kLmxlbmd0aDsgX2MrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25TdGF0ZSA9IF9kW19jXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uU3RhdGUuX3BhcmVudCAhPT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lRGF0YXMgPSB0aGlzLl9hbmltYXRpb25EYXRhLmdldEFuaW1hdGlvblRpbWVsaW5lcyhhbmltYXRpb25TdGF0ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZWxpbmVEYXRhcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UgPSAwLCB0aW1lbGluZURhdGFzXzIgPSB0aW1lbGluZURhdGFzOyBfZSA8IHRpbWVsaW5lRGF0YXNfMi5sZW5ndGg7IF9lKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lRGF0YSA9IHRpbWVsaW5lRGF0YXNfMltfZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGltZWxpbmVEYXRhLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDAgLyogQW5pbWF0aW9uVGltZSAqLzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkFuaW1hdGlvblRpbWVsaW5lU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmFuaW1hdGlvblN0YXRlID0gYW5pbWF0aW9uU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgdGltZWxpbmVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb25UaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUuX3VwZGF0ZUJvbmVBbmRTbG90VGltZWxpbmVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB7IC8vIFVwZGF0ZSBib25lIGFuZCBzdXJmYWNlIHRpbWVsaW5lcy5cclxuICAgICAgICAgICAgICAgIHZhciBib25lVGltZWxpbmVzID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYm9uZVRpbWVsaW5lczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHsgLy8gQ3JlYXRlIGJvbmUgdGltZWxpbmVzIG1hcC5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lTmFtZSA9IHRpbWVsaW5lLmJvbmUubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0aW1lbGluZU5hbWUgaW4gYm9uZVRpbWVsaW5lcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm9uZVRpbWVsaW5lc1t0aW1lbGluZU5hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJvbmVUaW1lbGluZXNbdGltZWxpbmVOYW1lXS5wdXNoKHRpbWVsaW5lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lcygpOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZU5hbWUgPSBib25lLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRhaW5zQm9uZU1hc2sodGltZWxpbmVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVsaW5lTmFtZSBpbiBib25lVGltZWxpbmVzKSB7IC8vIFJlbW92ZSBib25lIHRpbWVsaW5lIGZyb20gbWFwLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYm9uZVRpbWVsaW5lc1t0aW1lbGluZU5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChib25lLl9ib25lRGF0YS50eXBlID09PSAwIC8qIEJvbmUgKi8pIHsgLy8gQ3JlYXRlIG5ldyBib25lIHRpbWVsaW5lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhcyA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZ2V0Qm9uZVRpbWVsaW5lcyh0aW1lbGluZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZVBvc2UgPSB0aW1lbGluZU5hbWUgaW4gdGhpcy5fYm9uZVBvc2VzID8gdGhpcy5fYm9uZVBvc2VzW3RpbWVsaW5lTmFtZV0gOiAodGhpcy5fYm9uZVBvc2VzW3RpbWVsaW5lTmFtZV0gPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChCb25lUG9zZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZWxpbmVEYXRhcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2QgPSAwLCB0aW1lbGluZURhdGFzXzMgPSB0aW1lbGluZURhdGFzOyBfZCA8IHRpbWVsaW5lRGF0YXNfMy5sZW5ndGg7IF9kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhID0gdGltZWxpbmVEYXRhc18zW19kXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRpbWVsaW5lRGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTAgLyogQm9uZUFsbCAqLzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQm9uZUFsbFRpbWVsaW5lU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuYm9uZSA9IGJvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5ib25lUG9zZSA9IGJvbmVQb3NlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgdGltZWxpbmVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvbmVUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExIC8qIEJvbmVUcmFuc2xhdGUgKi86IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkJvbmVUcmFuc2xhdGVUaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmJvbmUgPSBib25lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuYm9uZVBvc2UgPSBib25lUG9zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmluaXQodGhpcy5fYXJtYXR1cmUsIHRoaXMsIHRpbWVsaW5lRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib25lVGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMiAvKiBCb25lUm90YXRlICovOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5Cb25lUm90YXRlVGltZWxpbmVTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5ib25lID0gYm9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmJvbmVQb3NlID0gYm9uZVBvc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5pbml0KHRoaXMuX2FybWF0dXJlLCB0aGlzLCB0aW1lbGluZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9uZVRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTMgLyogQm9uZVNjYWxlICovOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5Cb25lU2NhbGVUaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmJvbmUgPSBib25lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuYm9uZVBvc2UgPSBib25lUG9zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmluaXQodGhpcy5fYXJtYXR1cmUsIHRoaXMsIHRpbWVsaW5lRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib25lVGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJlc2V0VG9Qb3NlKSB7IC8vIFBvc2UgdGltZWxpbmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5Cb25lQWxsVGltZWxpbmVTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5ib25lID0gYm9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmJvbmVQb3NlID0gYm9uZVBvc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5pbml0KHRoaXMuX2FybWF0dXJlLCB0aGlzLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvbmVUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NlVGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJvbmUuX2JvbmVEYXRhLnR5cGUgPT09IDEgLyogU3VyZmFjZSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhcyA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZ2V0U3VyZmFjZVRpbWVsaW5lcyh0aW1lbGluZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZWxpbmVEYXRhcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2UgPSAwLCB0aW1lbGluZURhdGFzXzQgPSB0aW1lbGluZURhdGFzOyBfZSA8IHRpbWVsaW5lRGF0YXNfNC5sZW5ndGg7IF9lKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhID0gdGltZWxpbmVEYXRhc180W19lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRpbWVsaW5lRGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTAgLyogU3VyZmFjZSAqLzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuU3VyZmFjZVRpbWVsaW5lU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuc3VyZmFjZSA9IGJvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5pbml0KHRoaXMuX2FybWF0dXJlLCB0aGlzLCB0aW1lbGluZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3VyZmFjZVRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5yZXNldFRvUG9zZSkgeyAvLyBQb3NlIHRpbWVsaW5lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuU3VyZmFjZVRpbWVsaW5lU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuc3VyZmFjZSA9IGJvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5pbml0KHRoaXMuX2FybWF0dXJlLCB0aGlzLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1cmZhY2VUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NlVGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBib25lVGltZWxpbmVzKSB7IC8vIFJlbW92ZSBib25lIHRpbWVsaW5lcy5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZiA9IDAsIF9nID0gYm9uZVRpbWVsaW5lc1trXTsgX2YgPCBfZy5sZW5ndGg7IF9mKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gX2dbX2ZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib25lVGltZWxpbmVzLnNwbGljZSh0aGlzLl9ib25lVGltZWxpbmVzLmluZGV4T2YodGltZWxpbmUpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHsgLy8gVXBkYXRlIHNsb3QgdGltZWxpbmVzLlxyXG4gICAgICAgICAgICAgICAgdmFyIHNsb3RUaW1lbGluZXMgPSB7fTtcclxuICAgICAgICAgICAgICAgIHZhciBmZmRGbGFncyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2ggPSAwLCBfaiA9IHRoaXMuX3Nsb3RUaW1lbGluZXM7IF9oIDwgX2oubGVuZ3RoOyBfaCsrKSB7IC8vIENyZWF0ZSBzbG90IHRpbWVsaW5lcyBtYXAuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gX2pbX2hdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZU5hbWUgPSB0aW1lbGluZS5zbG90Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodGltZWxpbmVOYW1lIGluIHNsb3RUaW1lbGluZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RUaW1lbGluZXNbdGltZWxpbmVOYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzbG90VGltZWxpbmVzW3RpbWVsaW5lTmFtZV0ucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfayA9IDAsIF9sID0gdGhpcy5fYXJtYXR1cmUuZ2V0U2xvdHMoKTsgX2sgPCBfbC5sZW5ndGg7IF9rKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IF9sW19rXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZU5hbWUgPSBzbG90LnBhcmVudC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250YWluc0JvbmVNYXNrKGJvbmVOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lTmFtZSA9IHNsb3QubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhcyA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZ2V0U2xvdFRpbWVsaW5lcyh0aW1lbGluZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZU5hbWUgaW4gc2xvdFRpbWVsaW5lcykgeyAvLyBSZW1vdmUgc2xvdCB0aW1lbGluZSBmcm9tIG1hcC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNsb3RUaW1lbGluZXNbdGltZWxpbmVOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIENyZWF0ZSBuZXcgc2xvdCB0aW1lbGluZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlJbmRleEZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZmRGbGFncy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZWxpbmVEYXRhcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX20gPSAwLCB0aW1lbGluZURhdGFzXzUgPSB0aW1lbGluZURhdGFzOyBfbSA8IHRpbWVsaW5lRGF0YXNfNS5sZW5ndGg7IF9tKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVEYXRhID0gdGltZWxpbmVEYXRhc181W19tXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRpbWVsaW5lRGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjAgLyogU2xvdERpc3BsYXkgKi86IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLlNsb3REaXNsYXlUaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLnNsb3QgPSBzbG90O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgdGltZWxpbmVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5SW5kZXhGbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjEgLyogU2xvdENvbG9yICovOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5TbG90Q29sb3JUaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLnNsb3QgPSBzbG90O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgdGltZWxpbmVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvckZsYWcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyMiAvKiBTbG90RGVmb3JtICovOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5EZWZvcm1UaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLnNsb3QgPSBzbG90O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgdGltZWxpbmVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZmRGbGFncy5wdXNoKHRpbWVsaW5lLnZlcnRleE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlc2V0VG9Qb3NlKSB7IC8vIFBvc2UgdGltZWxpbmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRpc3BsYXlJbmRleEZsYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5TbG90RGlzbGF5VGltZWxpbmVTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuc2xvdCA9IHNsb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2xvdFRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3NlVGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2xvckZsYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5TbG90Q29sb3JUaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5zbG90ID0gc2xvdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5pbml0KHRoaXMuX2FybWF0dXJlLCB0aGlzLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zbG90VGltZWxpbmVzLnB1c2godGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2VUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2xvdC5yYXdEaXNwbGF5RGF0YXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbyA9IDAsIF9wID0gc2xvdC5yYXdEaXNwbGF5RGF0YXM7IF9vIDwgX3AubGVuZ3RoOyBfbysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5RGF0YSA9IF9wW19vXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3BsYXlEYXRhICE9PSBudWxsICYmIGRpc3BsYXlEYXRhLnR5cGUgPT09IDIgLyogTWVzaCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc2hPZmZzZXQgPSBkaXNwbGF5RGF0YS52ZXJ0aWNlcy5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmZkRmxhZ3MuaW5kZXhPZihtZXNoT2Zmc2V0KSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5EZWZvcm1UaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS52ZXJ0ZXhPZmZzZXQgPSBtZXNoT2Zmc2V0OyAvL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLnNsb3QgPSBzbG90O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmluaXQodGhpcy5fYXJtYXR1cmUsIHRoaXMsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RUaW1lbGluZXMucHVzaCh0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zZVRpbWVsaW5lcy5wdXNoKHRpbWVsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gc2xvdFRpbWVsaW5lcykgeyAvLyBSZW1vdmUgc2xvdCB0aW1lbGluZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3EgPSAwLCBfciA9IHNsb3RUaW1lbGluZXNba107IF9xIDwgX3IubGVuZ3RoOyBfcSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IF9yW19xXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2xvdFRpbWVsaW5lcy5zcGxpY2UodGhpcy5fc2xvdFRpbWVsaW5lcy5pbmRleE9mKHRpbWVsaW5lKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLnJldHVyblRvUG9vbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLl9hZHZhbmNlRmFkZVRpbWUgPSBmdW5jdGlvbiAocGFzc2VkVGltZSkge1xyXG4gICAgICAgICAgICB2YXIgaXNGYWRlT3V0ID0gdGhpcy5fZmFkZVN0YXRlID4gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3N1YkZhZGVTdGF0ZSA8IDApIHsgLy8gRmFkZSBzdGFydCBldmVudC5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3N1YkZhZGVTdGF0ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gaXNGYWRlT3V0ID8gZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuRkFERV9PVVQgOiBkcmFnb25Cb25lcy5FdmVudE9iamVjdC5GQURFX0lOO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FybWF0dXJlLmV2ZW50RGlzcGF0Y2hlci5oYXNEQkV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudE9iamVjdCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudE9iamVjdC50eXBlID0gZXZlbnRUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50T2JqZWN0LmFybWF0dXJlID0gdGhpcy5fYXJtYXR1cmU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRPYmplY3QuYW5pbWF0aW9uU3RhdGUgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9kcmFnb25Cb25lcy5idWZmZXJFdmVudChldmVudE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhc3NlZFRpbWUgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgIHBhc3NlZFRpbWUgPSAtcGFzc2VkVGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9mYWRlVGltZSArPSBwYXNzZWRUaW1lO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmFkZVRpbWUgPj0gdGhpcy5mYWRlVG90YWxUaW1lKSB7IC8vIEZhZGUgY29tcGxldGUuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJGYWRlU3RhdGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZVByb2dyZXNzID0gaXNGYWRlT3V0ID8gMC4wIDogMS4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2ZhZGVUaW1lID4gMC4wKSB7IC8vIEZhZGluZy5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZhZGVQcm9ncmVzcyA9IGlzRmFkZU91dCA/ICgxLjAgLSB0aGlzLl9mYWRlVGltZSAvIHRoaXMuZmFkZVRvdGFsVGltZSkgOiAodGhpcy5fZmFkZVRpbWUgLyB0aGlzLmZhZGVUb3RhbFRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBCZWZvcmUgZmFkZS5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZhZGVQcm9ncmVzcyA9IGlzRmFkZU91dCA/IDEuMCA6IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3ViRmFkZVN0YXRlID4gMCkgeyAvLyBGYWRlIGNvbXBsZXRlIGV2ZW50LlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0ZhZGVPdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wbGF5aGVhZFN0YXRlIHw9IDE7IC8vIHgxXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmFkZVN0YXRlID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSBpc0ZhZGVPdXQgPyBkcmFnb25Cb25lcy5FdmVudE9iamVjdC5GQURFX09VVF9DT01QTEVURSA6IGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkZBREVfSU5fQ09NUExFVEU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXJtYXR1cmUuZXZlbnREaXNwYXRjaGVyLmhhc0RCRXZlbnRMaXN0ZW5lcihldmVudFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50T2JqZWN0ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50T2JqZWN0LnR5cGUgPSBldmVudFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRPYmplY3QuYXJtYXR1cmUgPSB0aGlzLl9hcm1hdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudE9iamVjdC5hbmltYXRpb25TdGF0ZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2RyYWdvbkJvbmVzLmJ1ZmZlckV2ZW50KGV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoYXJtYXR1cmUsIGFuaW1hdGlvbkRhdGEsIGFuaW1hdGlvbkNvbmZpZykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXJtYXR1cmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hcm1hdHVyZSA9IGFybWF0dXJlO1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25EYXRhID0gYW5pbWF0aW9uRGF0YTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5yZXNldFRvUG9zZSA9IGFuaW1hdGlvbkNvbmZpZy5yZXNldFRvUG9zZTtcclxuICAgICAgICAgICAgdGhpcy5hZGRpdGl2ZUJsZW5kaW5nID0gYW5pbWF0aW9uQ29uZmlnLmFkZGl0aXZlQmxlbmRpbmc7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUNvbnRyb2wgPSBhbmltYXRpb25Db25maWcuZGlzcGxheUNvbnRyb2w7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uRW5hYmxlZCA9IGFuaW1hdGlvbkNvbmZpZy5hY3Rpb25FbmFibGVkO1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyID0gYW5pbWF0aW9uQ29uZmlnLmxheWVyO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlUaW1lcyA9IGFuaW1hdGlvbkNvbmZpZy5wbGF5VGltZXM7XHJcbiAgICAgICAgICAgIHRoaXMudGltZVNjYWxlID0gYW5pbWF0aW9uQ29uZmlnLnRpbWVTY2FsZTtcclxuICAgICAgICAgICAgdGhpcy5mYWRlVG90YWxUaW1lID0gYW5pbWF0aW9uQ29uZmlnLmZhZGVJblRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMuYXV0b0ZhZGVPdXRUaW1lID0gYW5pbWF0aW9uQ29uZmlnLmF1dG9GYWRlT3V0VGltZTtcclxuICAgICAgICAgICAgdGhpcy53ZWlnaHQgPSBhbmltYXRpb25Db25maWcud2VpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBhbmltYXRpb25Db25maWcubmFtZS5sZW5ndGggPiAwID8gYW5pbWF0aW9uQ29uZmlnLm5hbWUgOiBhbmltYXRpb25Db25maWcuYW5pbWF0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwID0gYW5pbWF0aW9uQ29uZmlnLmdyb3VwO1xyXG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uQ29uZmlnLnBhdXNlRmFkZUluKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wbGF5aGVhZFN0YXRlID0gMjsgLy8gMTBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BsYXloZWFkU3RhdGUgPSAzOyAvLyAxMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25Db25maWcuZHVyYXRpb24gPCAwLjApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSB0aGlzLl9hbmltYXRpb25EYXRhLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbiAhPT0gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudGltZVNjYWxlID49IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lID0gYW5pbWF0aW9uQ29uZmlnLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZSA9IGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbiAtIHRoaXMuX2R1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IGFuaW1hdGlvbkNvbmZpZy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2R1cmF0aW9uID0gYW5pbWF0aW9uQ29uZmlnLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZSA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lU2NhbGUgPCAwLjAgJiYgdGhpcy5fdGltZSA9PT0gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lID0gLTAuMDAwMDAxOyAvLyBUdXJuIHRvIGVuZC5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5mYWRlVG90YWxUaW1lIDw9IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZVByb2dyZXNzID0gMC45OTk5OTk7IC8vIE1ha2UgZGlmZmVyZW50LlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25Db25maWcuYm9uZU1hc2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYm9uZU1hc2subGVuZ3RoID0gYW5pbWF0aW9uQ29uZmlnLmJvbmVNYXNrLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fYm9uZU1hc2subGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9uZU1hc2tbaV0gPSBhbmltYXRpb25Db25maWcuYm9uZU1hc2tbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYWN0aW9uVGltZWxpbmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5BY3Rpb25UaW1lbGluZVN0YXRlKTtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aW9uVGltZWxpbmUuaW5pdCh0aGlzLl9hcm1hdHVyZSwgdGhpcywgdGhpcy5fYW5pbWF0aW9uRGF0YS5hY3Rpb25UaW1lbGluZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvblRpbWVsaW5lLmN1cnJlbnRUaW1lID0gdGhpcy5fdGltZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGlvblRpbWVsaW5lLmN1cnJlbnRUaW1lIDwgMC4wKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25UaW1lbGluZS5jdXJyZW50VGltZSA9IHRoaXMuX2R1cmF0aW9uIC0gdGhpcy5fYWN0aW9uVGltZWxpbmUuY3VycmVudFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvbkRhdGEuek9yZGVyVGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3pPcmRlclRpbWVsaW5lID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuWk9yZGVyVGltZWxpbmVTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl96T3JkZXJUaW1lbGluZS5pbml0KHRoaXMuX2FybWF0dXJlLCB0aGlzLCB0aGlzLl9hbmltYXRpb25EYXRhLnpPcmRlclRpbWVsaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLmFkdmFuY2VUaW1lID0gZnVuY3Rpb24gKHBhc3NlZFRpbWUsIGNhY2hlRnJhbWVSYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JsZW5kU3RhdGUuZGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gVXBkYXRlIGZhZGUgdGltZS5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ZhZGVTdGF0ZSAhPT0gMCB8fCB0aGlzLl9zdWJGYWRlU3RhdGUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkdmFuY2VGYWRlVGltZShwYXNzZWRUaW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGltZS5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BsYXloZWFkU3RhdGUgPT09IDMpIHsgLy8gMTFcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWVTY2FsZSAhPT0gMS4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFzc2VkVGltZSAqPSB0aGlzLnRpbWVTY2FsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWUgKz0gcGFzc2VkVGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGltZWxpbmUuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZURpcnR5ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEaXJ0eSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVRpbWVsaW5lcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVEaXJ0eSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVCb25lQW5kU2xvdFRpbWVsaW5lcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLndlaWdodCA9PT0gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGlzQ2FjaGVFbmFibGVkID0gdGhpcy5fZmFkZVN0YXRlID09PSAwICYmIGNhY2hlRnJhbWVSYXRlID4gMC4wO1xyXG4gICAgICAgICAgICB2YXIgaXNVcGRhdGVUaW1lbGluZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciBpc1VwZGF0ZUJvbmVUaW1lbGluZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHZhciB0aW1lID0gdGhpcy5fdGltZTtcclxuICAgICAgICAgICAgdGhpcy5fd2VpZ2h0UmVzdWx0ID0gdGhpcy53ZWlnaHQgKiB0aGlzLl9mYWRlUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dlaWdodFJlc3VsdCAqPSB0aGlzLl9wYXJlbnQuX3dlaWdodFJlc3VsdCAvIHRoaXMuX3BhcmVudC5fZmFkZVByb2dyZXNzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb25UaW1lbGluZS5wbGF5U3RhdGUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aW9uVGltZWxpbmUudXBkYXRlKHRpbWUpOyAvLyBVcGRhdGUgbWFpbiB0aW1lbGluZS5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNDYWNoZUVuYWJsZWQpIHsgLy8gQ2FjaGUgdGltZSBpbnRlcm52YWwuXHJcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJudmFsID0gY2FjaGVGcmFtZVJhdGUgKiAyLjA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25UaW1lbGluZS5jdXJyZW50VGltZSA9IE1hdGguZmxvb3IodGhpcy5fYWN0aW9uVGltZWxpbmUuY3VycmVudFRpbWUgKiBpbnRlcm52YWwpIC8gaW50ZXJudmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl96T3JkZXJUaW1lbGluZSAhPT0gbnVsbCAmJiB0aGlzLl96T3JkZXJUaW1lbGluZS5wbGF5U3RhdGUgPD0gMCkgeyAvLyBVcGRhdGUgek9yZGVyIHRpbWVsaW5lLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fek9yZGVyVGltZWxpbmUudXBkYXRlKHRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc0NhY2hlRW5hYmxlZCkgeyAvLyBVcGRhdGUgY2FjaGUuXHJcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVGcmFtZUluZGV4ID0gTWF0aC5mbG9vcih0aGlzLl9hY3Rpb25UaW1lbGluZS5jdXJyZW50VGltZSAqIGNhY2hlRnJhbWVSYXRlKTsgLy8gdWludFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FybWF0dXJlLl9jYWNoZUZyYW1lSW5kZXggPT09IGNhY2hlRnJhbWVJbmRleCkgeyAvLyBTYW1lIGNhY2hlLlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlVGltZWxpbmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpc1VwZGF0ZUJvbmVUaW1lbGluZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2NhY2hlRnJhbWVJbmRleCA9IGNhY2hlRnJhbWVJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRGF0YS5jYWNoZWRGcmFtZXNbY2FjaGVGcmFtZUluZGV4XSkgeyAvLyBDYWNoZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXBkYXRlQm9uZVRpbWVsaW5lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBDYWNoZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uRGF0YS5jYWNoZWRGcmFtZXNbY2FjaGVGcmFtZUluZGV4XSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc1VwZGF0ZVRpbWVsaW5lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNVcGRhdGVCb25lVGltZWxpbmUpIHsgLy8gVXBkYXRlIGJvbmUgdGltZWxpbmVzLlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fYm9uZVRpbWVsaW5lcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gdGhpcy5fYm9uZVRpbWVsaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVsaW5lLnBsYXlTdGF0ZSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS51cGRhdGUodGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGwgLSAxIHx8IHRpbWVsaW5lLmJvbmUgIT09IHRoaXMuX2JvbmVUaW1lbGluZXNbaSArIDFdLmJvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRpbWVsaW5lLmJvbmUuX2JsZW5kU3RhdGUudXBkYXRlKHRoaXMuX3dlaWdodFJlc3VsdCwgdGhpcy5sYXllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5ibGVuZChzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX3N1cmZhY2VUaW1lbGluZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gdGhpcy5fc3VyZmFjZVRpbWVsaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB0aW1lbGluZS5zdXJmYWNlLl9ibGVuZFN0YXRlLnVwZGF0ZSh0aGlzLl93ZWlnaHRSZXN1bHQsIHRoaXMubGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZS5wbGF5U3RhdGUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS51cGRhdGUodGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5ibGVuZChzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGxheUNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX3Nsb3RUaW1lbGluZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IHRoaXMuX3Nsb3RUaW1lbGluZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5Q29udHJvbGxlciA9IHRpbWVsaW5lLnNsb3QuZGlzcGxheUNvbnRyb2xsZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5Q29udHJvbGxlciA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIgPT09IHRoaXMubmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUNvbnRyb2xsZXIgPT09IHRoaXMuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZS5wbGF5U3RhdGUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLnVwZGF0ZSh0aW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fY29uc3RyYWludFRpbWVsaW5lcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSB0aGlzLl9jb25zdHJhaW50VGltZWxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZS5wbGF5U3RhdGUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS51cGRhdGUodGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9hbmltYXRpb25UaW1lbGluZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gdGhpcy5fYW5pbWF0aW9uVGltZWxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRpbWVsaW5lLmFuaW1hdGlvblN0YXRlLl9ibGVuZFN0YXRlLnVwZGF0ZSh0aGlzLl93ZWlnaHRSZXN1bHQsIHRoaXMubGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZS5wbGF5U3RhdGUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS51cGRhdGUodGltZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5ibGVuZChzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9mYWRlU3RhdGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdWJGYWRlU3RhdGUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3ViRmFkZVN0YXRlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcG9zZVRpbWVsaW5lcy5sZW5ndGggPiAwKSB7IC8vIFJlbW92ZSBwb3NlIHRpbWVsaW5lcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX3Bvc2VUaW1lbGluZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGltZWxpbmUgaW5zdGFuY2VvZiBkcmFnb25Cb25lcy5Cb25lVGltZWxpbmVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvbmVUaW1lbGluZXMuc3BsaWNlKHRoaXMuX2JvbmVUaW1lbGluZXMuaW5kZXhPZih0aW1lbGluZSksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGltZWxpbmUgaW5zdGFuY2VvZiBkcmFnb25Cb25lcy5TdXJmYWNlVGltZWxpbmVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1cmZhY2VUaW1lbGluZXMuc3BsaWNlKHRoaXMuX3N1cmZhY2VUaW1lbGluZXMuaW5kZXhPZih0aW1lbGluZSksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGltZWxpbmUgaW5zdGFuY2VvZiBkcmFnb25Cb25lcy5TbG90VGltZWxpbmVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3RUaW1lbGluZXMuc3BsaWNlKHRoaXMuX3Nsb3RUaW1lbGluZXMuaW5kZXhPZih0aW1lbGluZSksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGltZWxpbmUgaW5zdGFuY2VvZiBkcmFnb25Cb25lcy5Db25zdHJhaW50VGltZWxpbmVTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnN0cmFpbnRUaW1lbGluZXMuc3BsaWNlKHRoaXMuX2NvbnN0cmFpbnRUaW1lbGluZXMuaW5kZXhPZih0aW1lbGluZSksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUucmV0dXJuVG9Qb29sKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zZVRpbWVsaW5lcy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb25UaW1lbGluZS5wbGF5U3RhdGUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXV0b0ZhZGVPdXRUaW1lID49IDAuMCkgeyAvLyBBdXRvIGZhZGUgb3V0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhZGVPdXQodGhpcy5hdXRvRmFkZU91dFRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBDb250aW51ZSBwbGF5LlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g57un57ut5pKt5pS+44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BsYXloZWFkU3RhdGUgPSAzOyAvLyAxMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBTdG9wIHBsYXkuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmmoLlgZzmkq3mlL7jgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGxheWhlYWRTdGF0ZSAmPSAxOyAvLyAweFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBGYWRlIG91dCB0aGUgYW5pbWF0aW9uIHN0YXRlLlxyXG4gICAgICAgICAqIEBwYXJhbSBmYWRlT3V0VGltZSAtIFRoZSBmYWRlIG91dCB0aW1lLiAoSW4gc2Vjb25kcylcclxuICAgICAgICAgKiBAcGFyYW0gcGF1c2VQbGF5aGVhZCAtIFdoZXRoZXIgdG8gcGF1c2UgdGhlIGFuaW1hdGlvbiBwbGF5aW5nIHdoZW4gZmFkZSBvdXQuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmt6Hlh7rliqjnlLvnirbmgIHjgIJcclxuICAgICAgICAgKiBAcGFyYW0gZmFkZU91dFRpbWUgLSDmt6Hlh7rml7bpl7TjgIIg77yI5Lul56eS5Li65Y2V5L2N77yJXHJcbiAgICAgICAgICogQHBhcmFtIHBhdXNlUGxheWhlYWQgLSDmt6Hlh7rml7bmmK/lkKbmmoLlgZzmkq3mlL7jgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUuZmFkZU91dCA9IGZ1bmN0aW9uIChmYWRlT3V0VGltZSwgcGF1c2VQbGF5aGVhZCkge1xyXG4gICAgICAgICAgICBpZiAocGF1c2VQbGF5aGVhZCA9PT0gdm9pZCAwKSB7IHBhdXNlUGxheWhlYWQgPSB0cnVlOyB9XHJcbiAgICAgICAgICAgIGlmIChmYWRlT3V0VGltZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgZmFkZU91dFRpbWUgPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhdXNlUGxheWhlYWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BsYXloZWFkU3RhdGUgJj0gMjsgLy8geDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmFkZVN0YXRlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZhZGVPdXRUaW1lID4gdGhpcy5mYWRlVG90YWxUaW1lIC0gdGhpcy5fZmFkZVRpbWUpIHsgLy8gSWYgdGhlIGFuaW1hdGlvbiBpcyBhbHJlYWR5IGluIGZhZGUgb3V0LCB0aGUgbmV3IGZhZGUgb3V0IHdpbGwgYmUgaWdub3JlZC5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mYWRlU3RhdGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3ViRmFkZVN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmFkZU91dFRpbWUgPD0gMC4wIHx8IHRoaXMuX2ZhZGVQcm9ncmVzcyA8PSAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mYWRlUHJvZ3Jlc3MgPSAwLjAwMDAwMTsgLy8gTW9kaWZ5IGZhZGUgcHJvZ3Jlc3MgdG8gZGlmZmVyZW50IHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX2JvbmVUaW1lbGluZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmZhZGVPdXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSB0aGlzLl9zdXJmYWNlVGltZWxpbmVzOyBfYiA8IF9jLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IF9jW19iXTtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZS5mYWRlT3V0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIF9lID0gdGhpcy5fc2xvdFRpbWVsaW5lczsgX2QgPCBfZS5sZW5ndGg7IF9kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfZVtfZF07XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUuZmFkZU91dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2YgPSAwLCBfZyA9IHRoaXMuX2NvbnN0cmFpbnRUaW1lbGluZXM7IF9mIDwgX2cubGVuZ3RoOyBfZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gX2dbX2ZdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmZhZGVPdXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9oID0gMCwgX2ogPSB0aGlzLl9hbmltYXRpb25UaW1lbGluZXM7IF9oIDwgX2oubGVuZ3RoOyBfaCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gX2pbX2hdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmFuaW1hdGlvblN0YXRlLmZhZGVPdXQoZmFkZU91dFRpbWUsIHBhdXNlUGxheWhlYWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lLmZhZGVPdXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlDb250cm9sID0gZmFsc2U7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuZmFkZVRvdGFsVGltZSA9IHRoaXMuX2ZhZGVQcm9ncmVzcyA+IDAuMDAwMDAxID8gZmFkZU91dFRpbWUgLyB0aGlzLl9mYWRlUHJvZ3Jlc3MgOiAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZhZGVUaW1lID0gdGhpcy5mYWRlVG90YWxUaW1lICogKDEuMCAtIHRoaXMuX2ZhZGVQcm9ncmVzcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENoZWNrIGlmIGEgc3BlY2lmaWMgYm9uZSBtYXNrIGlzIGluY2x1ZGVkLlxyXG4gICAgICAgICAqIEBwYXJhbSBib25lTmFtZSAtIFRoZSBib25lIG5hbWUuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmo4Dmn6XmmK/lkKbljIXlkKvnibnlrprpqqjpqrzpga7nvanjgIJcclxuICAgICAgICAgKiBAcGFyYW0gYm9uZU5hbWUgLSDpqqjpqrzlkI3np7DjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUuY29udGFpbnNCb25lTWFzayA9IGZ1bmN0aW9uIChib25lTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYm9uZU1hc2subGVuZ3RoID09PSAwIHx8IHRoaXMuX2JvbmVNYXNrLmluZGV4T2YoYm9uZU5hbWUpID49IDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEFkZCBhIHNwZWNpZmljIGJvbmUgbWFzay5cclxuICAgICAgICAgKiBAcGFyYW0gYm9uZU5hbWUgLSBUaGUgYm9uZSBuYW1lLlxyXG4gICAgICAgICAqIEBwYXJhbSByZWN1cnNpdmUgLSBXaGV0aGVyIG9yIG5vdCB0byBhZGQgYSBtYXNrIHRvIHRoZSBib25lJ3Mgc3ViLWJvbmUuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDmt7vliqDnibnlrprnmoTpqqjpqrzpga7nvanjgIJcclxuICAgICAgICAgKiBAcGFyYW0gYm9uZU5hbWUgLSDpqqjpqrzlkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gcmVjdXJzaXZlIC0g5piv5ZCm5Li66K+l6aqo6aq855qE5a2Q6aqo6aq85re75Yqg6YGu572p44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLmFkZEJvbmVNYXNrID0gZnVuY3Rpb24gKGJvbmVOYW1lLCByZWN1cnNpdmUpIHtcclxuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IHRydWU7IH1cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRCb25lID0gdGhpcy5fYXJtYXR1cmUuZ2V0Qm9uZShib25lTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50Qm9uZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ib25lTWFzay5pbmRleE9mKGJvbmVOYW1lKSA8IDApIHsgLy8gQWRkIG1peGluZ1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYm9uZU1hc2sucHVzaChib25lTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSkgeyAvLyBBZGQgcmVjdXJzaXZlIG1peGluZy5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lcygpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ib25lTWFzay5pbmRleE9mKGJvbmUubmFtZSkgPCAwICYmIGN1cnJlbnRCb25lLmNvbnRhaW5zKGJvbmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvbmVNYXNrLnB1c2goYm9uZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVEaXJ0eSA9IDE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFJlbW92ZSB0aGUgbWFzayBvZiBhIHNwZWNpZmljIGJvbmUuXHJcbiAgICAgICAgICogQHBhcmFtIGJvbmVOYW1lIC0gVGhlIGJvbmUgbmFtZS5cclxuICAgICAgICAgKiBAcGFyYW0gcmVjdXJzaXZlIC0gV2hldGhlciB0byByZW1vdmUgdGhlIGJvbmUncyBzdWItYm9uZSBtYXNrLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Yig6Zmk54m55a6a6aqo6aq855qE6YGu572p44CCXHJcbiAgICAgICAgICogQHBhcmFtIGJvbmVOYW1lIC0g6aqo6aq85ZCN56ew44CCXHJcbiAgICAgICAgICogQHBhcmFtIHJlY3Vyc2l2ZSAtIOaYr+WQpuWIoOmZpOivpemqqOmqvOeahOWtkOmqqOmqvOmBrue9qeOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFuaW1hdGlvblN0YXRlLnByb3RvdHlwZS5yZW1vdmVCb25lTWFzayA9IGZ1bmN0aW9uIChib25lTmFtZSwgcmVjdXJzaXZlKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWN1cnNpdmUgPT09IHZvaWQgMCkgeyByZWN1cnNpdmUgPSB0cnVlOyB9XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2JvbmVNYXNrLmluZGV4T2YoYm9uZU5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkgeyAvLyBSZW1vdmUgbWl4aW5nLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYm9uZU1hc2suc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVjdXJzaXZlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEJvbmUgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lKGJvbmVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Qm9uZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lcyA9IHRoaXMuX2FybWF0dXJlLmdldEJvbmVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2JvbmVNYXNrLmxlbmd0aCA+IDApIHsgLy8gUmVtb3ZlIHJlY3Vyc2l2ZSBtaXhpbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgYm9uZXNfMSA9IGJvbmVzOyBfaSA8IGJvbmVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZSA9IGJvbmVzXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4XzIgPSB0aGlzLl9ib25lTWFzay5pbmRleE9mKGJvbmUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXhfMiA+PSAwICYmIGN1cnJlbnRCb25lLmNvbnRhaW5zKGJvbmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYm9uZU1hc2suc3BsaWNlKGluZGV4XzIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBBZGQgdW5yZWN1cnNpdmUgbWl4aW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIGJvbmVzXzIgPSBib25lczsgX2EgPCBib25lc18yLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvbmUgPSBib25lc18yW19hXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib25lID09PSBjdXJyZW50Qm9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50Qm9uZS5jb250YWlucyhib25lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JvbmVNYXNrLnB1c2goYm9uZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl90aW1lbGluZURpcnR5ID0gMTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gUmVtb3ZlIGFsbCBib25lIG1hc2tzLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Yig6Zmk5omA5pyJ6aqo6aq86YGu572p44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLnJlbW92ZUFsbEJvbmVNYXNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ib25lTWFzay5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lbGluZURpcnR5ID0gMTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUsIFwiaXNGYWRlSW5cIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBXaGV0aGVyIHRoZSBhbmltYXRpb24gc3RhdGUgaXMgZmFkaW5nIGluLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjFcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmmK/lkKbmraPlnKjmt6HlhaXjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4xXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmFkZVN0YXRlIDwgMDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvblN0YXRlLnByb3RvdHlwZSwgXCJpc0ZhZGVPdXRcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBXaGV0aGVyIHRoZSBhbmltYXRpb24gc3RhdGUgaXMgZmFkaW5nIG91dC5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS4xXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5piv5ZCm5q2j5Zyo5reh5Ye644CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZhZGVTdGF0ZSA+IDA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUsIFwiaXNGYWRlQ29tcGxldGVcIiwge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSBXaGV0aGVyIHRoZSBhbmltYXRpb24gc3RhdGUgaXMgZmFkZSBjb21wbGV0ZWQuXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOaYr+WQpua3oeWFpeaIlua3oeWHuuWujOavleOAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjFcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mYWRlU3RhdGUgPT09IDA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUsIFwiaXNQbGF5aW5nXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gV2hldGhlciB0aGUgYW5pbWF0aW9uIHN0YXRlIGlzIHBsYXlpbmcuXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOaYr+WQpuato+WcqOaSreaUvuOAglxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5fcGxheWhlYWRTdGF0ZSAmIDIpICE9PSAwICYmIHRoaXMuX2FjdGlvblRpbWVsaW5lLnBsYXlTdGF0ZSA8PSAwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLCBcImlzQ29tcGxldGVkXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gV2hldGhlciB0aGUgYW5pbWF0aW9uIHN0YXRlIGlzIHBsYXkgY29tcGxldGVkLlxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmmK/lkKbmkq3mlL7lrozmr5XjgIJcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aW9uVGltZWxpbmUucGxheVN0YXRlID4gMDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdGlvblN0YXRlLnByb3RvdHlwZSwgXCJjdXJyZW50UGxheVRpbWVzXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIHRpbWVzIGhhcyBiZWVuIHBsYXllZC5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g5bey57uP5b6q546v5pKt5pS+55qE5qyh5pWw44CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvblRpbWVsaW5lLmN1cnJlbnRQbGF5VGltZXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUsIFwidG90YWxUaW1lXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIHRvdGFsIHRpbWUuIChJbiBzZWNvbmRzKVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDmgLvmkq3mlL7ml7bpl7TjgIIg77yI5Lul56eS5Li65Y2V5L2N77yJXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlLCBcImN1cnJlbnRUaW1lXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gVGhlIHRpbWUgaXMgY3VycmVudGx5IHBsYXlpbmcuIChJbiBzZWNvbmRzKVxyXG4gICAgICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogLSDlvZPliY3mkq3mlL7nmoTml7bpl7TjgIIg77yI5Lul56eS5Li65Y2V5L2N77yJXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGlvblRpbWVsaW5lLmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQbGF5VGltZXMgPSB0aGlzLl9hY3Rpb25UaW1lbGluZS5jdXJyZW50UGxheVRpbWVzIC0gKHRoaXMuX2FjdGlvblRpbWVsaW5lLnBsYXlTdGF0ZSA+IDAgPyAxIDogMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwIHx8IHRoaXMuX2R1cmF0aW9uIDwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSAlIHRoaXMuX2R1cmF0aW9uKSArIGN1cnJlbnRQbGF5VGltZXMgKiB0aGlzLl9kdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IHRoaXMuX2R1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsYXlUaW1lcyA+IDAgJiYgY3VycmVudFBsYXlUaW1lcyA9PT0gdGhpcy5wbGF5VGltZXMgLSAxICYmIHZhbHVlID09PSB0aGlzLl9kdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fZHVyYXRpb24gLSAwLjAwMDAwMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aW1lID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvblRpbWVsaW5lLnNldEN1cnJlbnRUaW1lKHRoaXMuX3RpbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3pPcmRlclRpbWVsaW5lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fek9yZGVyVGltZWxpbmUucGxheVN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fYm9uZVRpbWVsaW5lczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUucGxheVN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gdGhpcy5fc2xvdFRpbWVsaW5lczsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZWxpbmUucGxheVN0YXRlID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb25TdGF0ZS5wcm90b3R5cGUsIFwiYW5pbWF0aW9uRGF0YVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIFRoZSBhbmltYXRpb24gZGF0YS5cclxuICAgICAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5BbmltYXRpb25EYXRhXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiAtIOWKqOeUu+aVsOaNruOAglxyXG4gICAgICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFuaW1hdGlvbkRhdGFcclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW5pbWF0aW9uRGF0YTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIEFuaW1hdGlvblN0YXRlO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5BbmltYXRpb25TdGF0ZSA9IEFuaW1hdGlvblN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJvbmVQb3NlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhCb25lUG9zZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBCb25lUG9zZSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLmN1cnJlbnQgPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIF90aGlzLmRlbHRhID0gbmV3IGRyYWdvbkJvbmVzLlRyYW5zZm9ybSgpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXN1bHQgPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgQm9uZVBvc2UudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5Cb25lUG9zZV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEJvbmVQb3NlLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50LmlkZW50aXR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVsdGEuaWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bHQuaWRlbnRpdHkoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBCb25lUG9zZTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQmFzZU9iamVjdCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQm9uZVBvc2UgPSBCb25lUG9zZTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBCbGVuZFN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEJsZW5kU3RhdGUoKSB7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0xOiBGaXJzdCBibGVuZGluZywgMDogTm8gYmxlbmRpbmcsIDE6IEJsZW5kaW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJsZW5kU3RhdGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh3ZWlnaHQsIHBfbGF5ZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGlydHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnRXZWlnaHQgPiAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXllciAhPT0gcF9sYXllcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXllcldlaWdodCA+PSB0aGlzLmxlZnRXZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdFdlaWdodCA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXllciA9IHBfbGF5ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRXZWlnaHQgLT0gdGhpcy5sYXllcldlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGF5ZXJXZWlnaHQgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHdlaWdodCAqPSB0aGlzLmxlZnRXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxheWVyV2VpZ2h0ICs9IHdlaWdodDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmxlbmRXZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5sYXllciA9IHBfbGF5ZXI7XHJcbiAgICAgICAgICAgIHRoaXMubGF5ZXJXZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMubGVmdFdlaWdodCA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy5ibGVuZFdlaWdodCA9IHdlaWdodDtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCbGVuZFN0YXRlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyID0gMDtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0V2VpZ2h0ID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyV2VpZ2h0ID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLmJsZW5kV2VpZ2h0ID0gMC4wO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEJsZW5kU3RhdGU7XHJcbiAgICB9KCkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQmxlbmRTdGF0ZSA9IEJsZW5kU3RhdGU7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIFRpbWVsaW5lU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFRpbWVsaW5lU3RhdGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5U3RhdGUgPSAtMTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheVRpbWVzID0gLTE7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSAtMS4wO1xyXG4gICAgICAgICAgICB0aGlzLl90d2VlblN0YXRlID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZVJhdGUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZVJhdGVSID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVTY2FsZSA9IDEuMDtcclxuICAgICAgICAgICAgdGhpcy5fdGltZU9mZnNldCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXNEYXRhID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uRGF0YSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lRGF0YSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uU3RhdGUgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25UaW1lbGluZSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVBcnJheSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW5kaWNlcyA9IG51bGw7IC8vXHJcbiAgICAgICAgfTtcclxuICAgICAgICBUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fc2V0Q3VycmVudFRpbWUgPSBmdW5jdGlvbiAocGFzc2VkVGltZSkge1xyXG4gICAgICAgICAgICB2YXIgcHJldlN0YXRlID0gdGhpcy5wbGF5U3RhdGU7XHJcbiAgICAgICAgICAgIHZhciBwcmV2UGxheVRpbWVzID0gdGhpcy5jdXJyZW50UGxheVRpbWVzO1xyXG4gICAgICAgICAgICB2YXIgcHJldlRpbWUgPSB0aGlzLmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aW9uVGltZWxpbmUgIT09IG51bGwgJiYgdGhpcy5fZnJhbWVDb3VudCA8PSAxKSB7IC8vIE5vIGZyYW1lIG9yIG9ubHkgb25lIGZyYW1lLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5U3RhdGUgPSB0aGlzLl9hY3Rpb25UaW1lbGluZS5wbGF5U3RhdGUgPj0gMCA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBsYXlUaW1lcyA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gdGhpcy5fYWN0aW9uVGltZWxpbmUuY3VycmVudFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fYWN0aW9uVGltZWxpbmUgPT09IG51bGwgfHwgdGhpcy5fdGltZVNjYWxlICE9PSAxLjAgfHwgdGhpcy5fdGltZU9mZnNldCAhPT0gMC4wKSB7IC8vIEFjdGlvbiB0aW1lbGluZSBvciBoYXMgc2NhbGUgYW5kIG9mZnNldC5cclxuICAgICAgICAgICAgICAgIHZhciBwbGF5VGltZXMgPSB0aGlzLl9hbmltYXRpb25TdGF0ZS5wbGF5VGltZXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG90YWxUaW1lID0gcGxheVRpbWVzICogdGhpcy5fZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICBwYXNzZWRUaW1lICo9IHRoaXMuX3RpbWVTY2FsZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aW1lT2Zmc2V0ICE9PSAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXNzZWRUaW1lICs9IHRoaXMuX3RpbWVPZmZzZXQgKiB0aGlzLl9hbmltYXRpb25EYXRhLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHBsYXlUaW1lcyA+IDAgJiYgKHBhc3NlZFRpbWUgPj0gdG90YWxUaW1lIHx8IHBhc3NlZFRpbWUgPD0gLXRvdGFsVGltZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5U3RhdGUgPD0gMCAmJiB0aGlzLl9hbmltYXRpb25TdGF0ZS5fcGxheWhlYWRTdGF0ZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXlTdGF0ZSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBsYXlUaW1lcyA9IHBsYXlUaW1lcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFzc2VkVGltZSA8IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IHRoaXMuX2R1cmF0aW9uICsgMC4wMDAwMDE7IC8vIFByZWNpc2lvbiBwcm9ibGVtXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGxheVN0YXRlICE9PSAwICYmIHRoaXMuX2FuaW1hdGlvblN0YXRlLl9wbGF5aGVhZFN0YXRlID09PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheVN0YXRlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhc3NlZFRpbWUgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2VkVGltZSA9IC1wYXNzZWRUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQbGF5VGltZXMgPSBNYXRoLmZsb29yKHBhc3NlZFRpbWUgLyB0aGlzLl9kdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSB0aGlzLl9kdXJhdGlvbiAtIChwYXNzZWRUaW1lICUgdGhpcy5fZHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheVRpbWVzID0gTWF0aC5mbG9vcihwYXNzZWRUaW1lIC8gdGhpcy5fZHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gcGFzc2VkVGltZSAlIHRoaXMuX2R1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFRpbWUgKz0gdGhpcy5fcG9zaXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IC8vIE11bHRpIGZyYW1lcy5cclxuICAgICAgICAgICAgICAgIHRoaXMucGxheVN0YXRlID0gdGhpcy5fYWN0aW9uVGltZWxpbmUucGxheVN0YXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGxheVRpbWVzID0gdGhpcy5fYWN0aW9uVGltZWxpbmUuY3VycmVudFBsYXlUaW1lcztcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSB0aGlzLl9hY3Rpb25UaW1lbGluZS5jdXJyZW50VGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheVRpbWVzID09PSBwcmV2UGxheVRpbWVzICYmIHRoaXMuY3VycmVudFRpbWUgPT09IHByZXZUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gQ2xlYXIgZnJhbWUgZmxhZyB3aGVuIHRpbWVsaW5lIHN0YXJ0IG9yIGxvb3BDb21wbGV0ZS5cclxuICAgICAgICAgICAgaWYgKChwcmV2U3RhdGUgPCAwICYmIHRoaXMucGxheVN0YXRlICE9PSBwcmV2U3RhdGUpIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5wbGF5U3RhdGUgPD0gMCAmJiB0aGlzLmN1cnJlbnRQbGF5VGltZXMgIT09IHByZXZQbGF5VGltZXMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGFybWF0dXJlLCBhbmltYXRpb25TdGF0ZSwgdGltZWxpbmVEYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlID0gYXJtYXR1cmU7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblN0YXRlID0gYW5pbWF0aW9uU3RhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lRGF0YSA9IHRpbWVsaW5lRGF0YTtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aW9uVGltZWxpbmUgPSB0aGlzLl9hbmltYXRpb25TdGF0ZS5fYWN0aW9uVGltZWxpbmU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzID09PSB0aGlzLl9hY3Rpb25UaW1lbGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aW9uVGltZWxpbmUgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkRhdGEgPSB0aGlzLl9hbmltYXRpb25TdGF0ZS5fYW5pbWF0aW9uRGF0YTtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVSYXRlID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5wYXJlbnQuZnJhbWVSYXRlO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZVJhdGVSID0gMS4wIC8gdGhpcy5fZnJhbWVSYXRlO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuX2FuaW1hdGlvblN0YXRlLl9wb3NpdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSB0aGlzLl9hbmltYXRpb25TdGF0ZS5fZHVyYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzRGF0YSA9IHRoaXMuX2FuaW1hdGlvbkRhdGEucGFyZW50LnBhcmVudDsgLy8gTWF5IGJ5IHRoZSBhbmltYXRpb24gZGF0YSBpcyBub3QgYmVsb25lIHRvIHRoaXMgYXJtYXR1cmUgZGF0YS5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVsaW5lRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVJbnRBcnJheSA9IHRoaXMuX2RyYWdvbkJvbmVzRGF0YS5mcmFtZUludEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5ID0gdGhpcy5fZHJhZ29uQm9uZXNEYXRhLmZyYW1lRmxvYXRBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkgPSB0aGlzLl9kcmFnb25Cb25lc0RhdGEuZnJhbWVBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lQXJyYXkgPSB0aGlzLl9kcmFnb25Cb25lc0RhdGEudGltZWxpbmVBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW5kaWNlcyA9IHRoaXMuX2RyYWdvbkJvbmVzRGF0YS5mcmFtZUluZGljZXM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUNvdW50ID0gdGhpcy5fdGltZWxpbmVBcnJheVt0aGlzLl90aW1lbGluZURhdGEub2Zmc2V0ICsgMiAvKiBUaW1lbGluZUtleUZyYW1lQ291bnQgKi9dO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVWYWx1ZU9mZnNldCA9IHRoaXMuX3RpbWVsaW5lQXJyYXlbdGhpcy5fdGltZWxpbmVEYXRhLm9mZnNldCArIDQgLyogVGltZWxpbmVGcmFtZVZhbHVlT2Zmc2V0ICovXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVTY2FsZSA9IDEwMC4wIC8gdGhpcy5fdGltZWxpbmVBcnJheVt0aGlzLl90aW1lbGluZURhdGEub2Zmc2V0ICsgMCAvKiBUaW1lbGluZVNjYWxlICovXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVPZmZzZXQgPSB0aGlzLl90aW1lbGluZUFycmF5W3RoaXMuX3RpbWVsaW5lRGF0YS5vZmZzZXQgKyAxIC8qIFRpbWVsaW5lT2Zmc2V0ICovXSAqIDAuMDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFRpbWVsaW5lU3RhdGUucHJvdG90eXBlLmZhZGVPdXQgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHBhc3NlZFRpbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NldEN1cnJlbnRUaW1lKHBhc3NlZFRpbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWVDb3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVGcmFtZUluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmN1cnJlbnRUaW1lICogdGhpcy5fZnJhbWVSYXRlKTsgLy8gdWludFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZUluZGV4ID0gdGhpcy5fZnJhbWVJbmRpY2VzW3RoaXMuX3RpbWVsaW5lRGF0YS5mcmFtZUluZGljZXNPZmZzZXQgKyB0aW1lbGluZUZyYW1lSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZUluZGV4ICE9PSBmcmFtZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW5kZXggPSBmcmFtZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZU9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVPZmZzZXQgKyB0aGlzLl90aW1lbGluZUFycmF5W3RoaXMuX3RpbWVsaW5lRGF0YS5vZmZzZXQgKyA1IC8qIFRpbWVsaW5lRnJhbWVPZmZzZXQgKi8gKyB0aGlzLl9mcmFtZUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25BcnJpdmVBdEZyYW1lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fZnJhbWVJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEYXRhICE9PSBudWxsKSB7IC8vIE1heSBiZSBwb3NlIHRpbWVsaW5lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZU9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVPZmZzZXQgKyB0aGlzLl90aW1lbGluZUFycmF5W3RoaXMuX3RpbWVsaW5lRGF0YS5vZmZzZXQgKyA1IC8qIFRpbWVsaW5lRnJhbWVPZmZzZXQgKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkFycml2ZUF0RnJhbWUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlICE9PSAwIC8qIE5vbmUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblVwZGF0ZUZyYW1lKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBUaW1lbGluZVN0YXRlO1xyXG4gICAgfShkcmFnb25Cb25lcy5CYXNlT2JqZWN0KSk7XHJcbiAgICBkcmFnb25Cb25lcy5UaW1lbGluZVN0YXRlID0gVGltZWxpbmVTdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBUd2VlblRpbWVsaW5lU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFR3ZWVuVGltZWxpbmVTdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBUd2VlblRpbWVsaW5lU3RhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgVHdlZW5UaW1lbGluZVN0YXRlLl9nZXRFYXNpbmdWYWx1ZSA9IGZ1bmN0aW9uICh0d2VlblR5cGUsIHByb2dyZXNzLCBlYXNpbmcpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gcHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHdlZW5UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDMgLyogUXVhZEluICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5wb3cocHJvZ3Jlc3MsIDIuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQgLyogUXVhZE91dCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDEuMCAtIE1hdGgucG93KDEuMCAtIHByb2dyZXNzLCAyLjApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1IC8qIFF1YWRJbk91dCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IDAuNSAqICgxLjAgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKHZhbHVlIC0gcHJvZ3Jlc3MpICogZWFzaW5nICsgcHJvZ3Jlc3M7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUd2VlblRpbWVsaW5lU3RhdGUuX2dldEVhc2luZ0N1cnZlVmFsdWUgPSBmdW5jdGlvbiAocHJvZ3Jlc3MsIHNhbXBsZXMsIGNvdW50LCBvZmZzZXQpIHtcclxuICAgICAgICAgICAgaWYgKHByb2dyZXNzIDw9IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwcm9ncmVzcyA+PSAxLjApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHNlZ21lbnRDb3VudCA9IGNvdW50ICsgMTsgLy8gKyAyIC0gMVxyXG4gICAgICAgICAgICB2YXIgdmFsdWVJbmRleCA9IE1hdGguZmxvb3IocHJvZ3Jlc3MgKiBzZWdtZW50Q291bnQpO1xyXG4gICAgICAgICAgICB2YXIgZnJvbVZhbHVlID0gdmFsdWVJbmRleCA9PT0gMCA/IDAuMCA6IHNhbXBsZXNbb2Zmc2V0ICsgdmFsdWVJbmRleCAtIDFdO1xyXG4gICAgICAgICAgICB2YXIgdG9WYWx1ZSA9ICh2YWx1ZUluZGV4ID09PSBzZWdtZW50Q291bnQgLSAxKSA/IDEwMDAwLjAgOiBzYW1wbGVzW29mZnNldCArIHZhbHVlSW5kZXhdO1xyXG4gICAgICAgICAgICByZXR1cm4gKGZyb21WYWx1ZSArICh0b1ZhbHVlIC0gZnJvbVZhbHVlKSAqIChwcm9ncmVzcyAqIHNlZ21lbnRDb3VudCAtIHZhbHVlSW5kZXgpKSAqIDAuMDAwMTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFR3ZWVuVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fdHdlZW5UeXBlID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJ2ZUNvdW50ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVQb3NpdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVEdXJhdGlvblIgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX3R3ZWVuUHJvZ3Jlc3MgPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX3R3ZWVuRWFzaW5nID0gMC4wO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHdlZW5UaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25BcnJpdmVBdEZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZnJhbWVDb3VudCA+IDEgJiZcclxuICAgICAgICAgICAgICAgICh0aGlzLl9mcmFtZUluZGV4ICE9PSB0aGlzLl9mcmFtZUNvdW50IC0gMSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblN0YXRlLnBsYXlUaW1lcyA9PT0gMCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblN0YXRlLmN1cnJlbnRQbGF5VGltZXMgPCB0aGlzLl9hbmltYXRpb25TdGF0ZS5wbGF5VGltZXMgLSAxKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHdlZW5UeXBlID0gdGhpcy5fZnJhbWVBcnJheVt0aGlzLl9mcmFtZU9mZnNldCArIDEgLyogRnJhbWVUd2VlblR5cGUgKi9dOyAvLyBUT0RPIHJlY29kZSB0dXJlIHR3ZWVuIHR5cGUuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90d2VlblN0YXRlID0gdGhpcy5fdHdlZW5UeXBlID09PSAwIC8qIE5vbmUgKi8gPyAxIC8qIE9uY2UgKi8gOiAyIC8qIEFsd2F5cyAqLztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblR5cGUgPT09IDIgLyogQ3VydmUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJ2ZUNvdW50ID0gdGhpcy5fZnJhbWVBcnJheVt0aGlzLl9mcmFtZU9mZnNldCArIDIgLyogRnJhbWVUd2VlbkVhc2luZ09yQ3VydmVTYW1wbGVDb3VudCAqL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl90d2VlblR5cGUgIT09IDAgLyogTm9uZSAqLyAmJiB0aGlzLl90d2VlblR5cGUgIT09IDEgLyogTGluZSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3R3ZWVuRWFzaW5nID0gdGhpcy5fZnJhbWVBcnJheVt0aGlzLl9mcmFtZU9mZnNldCArIDIgLyogRnJhbWVUd2VlbkVhc2luZ09yQ3VydmVTYW1wbGVDb3VudCAqL10gKiAwLjAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVQb3NpdGlvbiA9IHRoaXMuX2ZyYW1lQXJyYXlbdGhpcy5fZnJhbWVPZmZzZXRdICogdGhpcy5fZnJhbWVSYXRlUjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZUluZGV4ID09PSB0aGlzLl9mcmFtZUNvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRHVyYXRpb25SID0gMS4wIC8gKHRoaXMuX2FuaW1hdGlvbkRhdGEuZHVyYXRpb24gLSB0aGlzLl9mcmFtZVBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0RnJhbWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lT2Zmc2V0ICsgdGhpcy5fdGltZWxpbmVBcnJheVt0aGlzLl90aW1lbGluZURhdGEub2Zmc2V0ICsgNSAvKiBUaW1lbGluZUZyYW1lT2Zmc2V0ICovICsgdGhpcy5fZnJhbWVJbmRleCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZUR1cmF0aW9uID0gdGhpcy5fZnJhbWVBcnJheVtuZXh0RnJhbWVPZmZzZXRdICogdGhpcy5fZnJhbWVSYXRlUiAtIHRoaXMuX2ZyYW1lUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lRHVyYXRpb24gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRHVyYXRpb25SID0gMS4wIC8gZnJhbWVEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRHVyYXRpb25SID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3R3ZWVuU3RhdGUgPSAxIC8qIE9uY2UgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFR3ZWVuVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uVXBkYXRlRnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlID09PSAyIC8qIEFsd2F5cyAqLykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHdlZW5Qcm9ncmVzcyA9ICh0aGlzLmN1cnJlbnRUaW1lIC0gdGhpcy5fZnJhbWVQb3NpdGlvbikgKiB0aGlzLl9mcmFtZUR1cmF0aW9uUjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblR5cGUgPT09IDIgLyogQ3VydmUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90d2VlblByb2dyZXNzID0gVHdlZW5UaW1lbGluZVN0YXRlLl9nZXRFYXNpbmdDdXJ2ZVZhbHVlKHRoaXMuX3R3ZWVuUHJvZ3Jlc3MsIHRoaXMuX2ZyYW1lQXJyYXksIHRoaXMuX2N1cnZlQ291bnQsIHRoaXMuX2ZyYW1lT2Zmc2V0ICsgMyAvKiBGcmFtZUN1cnZlU2FtcGxlcyAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl90d2VlblR5cGUgIT09IDEgLyogTGluZSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3R3ZWVuUHJvZ3Jlc3MgPSBUd2VlblRpbWVsaW5lU3RhdGUuX2dldEVhc2luZ1ZhbHVlKHRoaXMuX3R3ZWVuVHlwZSwgdGhpcy5fdHdlZW5Qcm9ncmVzcywgdGhpcy5fdHdlZW5FYXNpbmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHdlZW5Qcm9ncmVzcyA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFR3ZWVuVGltZWxpbmVTdGF0ZTtcclxuICAgIH0oVGltZWxpbmVTdGF0ZSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuVHdlZW5UaW1lbGluZVN0YXRlID0gVHdlZW5UaW1lbGluZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJvbmVUaW1lbGluZVN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhCb25lVGltZWxpbmVTdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBCb25lVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBCb25lVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5ib25lID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgdGhpcy5ib25lUG9zZSA9IG51bGw7IC8vXHJcbiAgICAgICAgfTtcclxuICAgICAgICBCb25lVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuYmxlbmQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGJsZW5kV2VpZ2h0ID0gdGhpcy5ib25lLl9ibGVuZFN0YXRlLmJsZW5kV2VpZ2h0O1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uUG9zZSA9IHRoaXMuYm9uZS5hbmltYXRpb25Qb3NlO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5ib25lUG9zZS5yZXN1bHQ7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUG9zZS54ICs9IHJlc3VsdC54ICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Qb3NlLnkgKz0gcmVzdWx0LnkgKiBibGVuZFdlaWdodDtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblBvc2Uucm90YXRpb24gKz0gcmVzdWx0LnJvdGF0aW9uICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Qb3NlLnNrZXcgKz0gcmVzdWx0LnNrZXcgKiBibGVuZFdlaWdodDtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblBvc2Uuc2NhbGVYICs9IChyZXN1bHQuc2NhbGVYIC0gMS4wKSAqIGJsZW5kV2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUG9zZS5zY2FsZVkgKz0gKHJlc3VsdC5zY2FsZVkgLSAxLjApICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYmxlbmRXZWlnaHQgIT09IDEuMCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUG9zZS54ID0gcmVzdWx0LnggKiBibGVuZFdlaWdodDtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblBvc2UueSA9IHJlc3VsdC55ICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Qb3NlLnJvdGF0aW9uID0gcmVzdWx0LnJvdGF0aW9uICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Qb3NlLnNrZXcgPSByZXN1bHQuc2tldyAqIGJsZW5kV2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUG9zZS5zY2FsZVggPSAocmVzdWx0LnNjYWxlWCAtIDEuMCkgKiBibGVuZFdlaWdodCArIDEuMDtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblBvc2Uuc2NhbGVZID0gKHJlc3VsdC5zY2FsZVkgLSAxLjApICogYmxlbmRXZWlnaHQgKyAxLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25Qb3NlLnggPSByZXN1bHQueDtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblBvc2UueSA9IHJlc3VsdC55O1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUG9zZS5yb3RhdGlvbiA9IHJlc3VsdC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblBvc2Uuc2tldyA9IHJlc3VsdC5za2V3O1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUG9zZS5zY2FsZVggPSByZXN1bHQuc2NhbGVYO1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uUG9zZS5zY2FsZVkgPSByZXN1bHQuc2NhbGVZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25TdGF0ZS5fZmFkZVN0YXRlICE9PSAwIHx8IHRoaXMuX2FuaW1hdGlvblN0YXRlLl9zdWJGYWRlU3RhdGUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9uZS5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQm9uZVRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KFR3ZWVuVGltZWxpbmVTdGF0ZSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQm9uZVRpbWVsaW5lU3RhdGUgPSBCb25lVGltZWxpbmVTdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBTbG90VGltZWxpbmVTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoU2xvdFRpbWVsaW5lU3RhdGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU2xvdFRpbWVsaW5lU3RhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgU2xvdFRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkNsZWFyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2xvdCA9IG51bGw7IC8vXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gU2xvdFRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KFR3ZWVuVGltZWxpbmVTdGF0ZSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuU2xvdFRpbWVsaW5lU3RhdGUgPSBTbG90VGltZWxpbmVTdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBDb25zdHJhaW50VGltZWxpbmVTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQ29uc3RyYWludFRpbWVsaW5lU3RhdGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQ29uc3RyYWludFRpbWVsaW5lU3RhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgQ29uc3RyYWludFRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkNsZWFyLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uc3RyYWludCA9IG51bGw7IC8vXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQ29uc3RyYWludFRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KFR3ZWVuVGltZWxpbmVTdGF0ZSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuQ29uc3RyYWludFRpbWVsaW5lU3RhdGUgPSBDb25zdHJhaW50VGltZWxpbmVTdGF0ZTtcclxufSkoZHJhZ29uQm9uZXMgfHwgKGRyYWdvbkJvbmVzID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxOCBEcmFnb25Cb25lcyB0ZWFtIGFuZCBvdGhlciBjb250cmlidXRvcnNcclxuICpcclxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZlxyXG4gKiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXHJcbiAqIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG9cclxuICogdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2ZcclxuICogdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxyXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuICpcclxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXHJcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcbiAqXHJcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1NcclxuICogRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SXHJcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxyXG4gKiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxyXG4gKiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG4gKi9cclxudmFyIGRyYWdvbkJvbmVzO1xyXG4oZnVuY3Rpb24gKGRyYWdvbkJvbmVzKSB7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB2YXIgQWN0aW9uVGltZWxpbmVTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQWN0aW9uVGltZWxpbmVTdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBBY3Rpb25UaW1lbGluZVN0YXRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEFjdGlvblRpbWVsaW5lU3RhdGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5BY3Rpb25UaW1lbGluZVN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQWN0aW9uVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQ3Jvc3NGcmFtZSA9IGZ1bmN0aW9uIChmcmFtZUluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciBldmVudERpc3BhdGNoZXIgPSB0aGlzLl9hcm1hdHVyZS5ldmVudERpc3BhdGNoZXI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25TdGF0ZS5hY3Rpb25FbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lT2Zmc2V0ICsgdGhpcy5fdGltZWxpbmVBcnJheVt0aGlzLl90aW1lbGluZURhdGEub2Zmc2V0ICsgNSAvKiBUaW1lbGluZUZyYW1lT2Zmc2V0ICovICsgZnJhbWVJbmRleF07XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9uQ291bnQgPSB0aGlzLl9mcmFtZUFycmF5W2ZyYW1lT2Zmc2V0ICsgMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuX2FuaW1hdGlvbkRhdGEucGFyZW50LmFjdGlvbnM7IC8vIE1heSBiZSB0aGUgYW5pbWF0b24gZGF0YSBub3QgYmVsb25nIHRvIHRoaXMgYXJtYXR1cmUgZGF0YS5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aW9uQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25JbmRleCA9IHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAyICsgaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGFjdGlvbnNbYWN0aW9uSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gMCAvKiBQbGF5ICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudE9iamVjdCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRPYmplY3QudGltZSA9IHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXRdICogdGhpcy5fZnJhbWVSYXRlUjsgLy8gUHJlY2lzaW9uIHByb2JsZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRPYmplY3QudGltZSA9IHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXRdIC8gdGhpcy5fZnJhbWVSYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudE9iamVjdC5hbmltYXRpb25TdGF0ZSA9IHRoaXMuX2FuaW1hdGlvblN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnb25Cb25lcy5FdmVudE9iamVjdC5hY3Rpb25EYXRhVG9JbnN0YW5jZShhY3Rpb24sIGV2ZW50T2JqZWN0LCB0aGlzLl9hcm1hdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9idWZmZXJBY3Rpb24oZXZlbnRPYmplY3QsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50VHlwZSA9IGFjdGlvbi50eXBlID09PSAxMCAvKiBGcmFtZSAqLyA/IGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkZSQU1FX0VWRU5UIDogZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuU09VTkRfRVZFTlQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gMTEgLyogU291bmQgKi8gfHwgZXZlbnREaXNwYXRjaGVyLmhhc0RCRXZlbnRMaXN0ZW5lcihldmVudFR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRPYmplY3QgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5FdmVudE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBldmVudE9iamVjdC50aW1lID0gdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldF0gKiB0aGlzLl9mcmFtZVJhdGVSOyAvLyBQcmVjaXNpb24gcHJvYmxlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRPYmplY3QudGltZSA9IHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXRdIC8gdGhpcy5fZnJhbWVSYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRPYmplY3QuYW5pbWF0aW9uU3RhdGUgPSB0aGlzLl9hbmltYXRpb25TdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LmFjdGlvbkRhdGFUb0luc3RhbmNlKGFjdGlvbiwgZXZlbnRPYmplY3QsIHRoaXMuX2FybWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9kcmFnb25Cb25lcy5idWZmZXJFdmVudChldmVudE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEFjdGlvblRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgQWN0aW9uVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uVXBkYXRlRnJhbWUgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgQWN0aW9uVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHBhc3NlZFRpbWUpIHtcclxuICAgICAgICAgICAgdmFyIHByZXZTdGF0ZSA9IHRoaXMucGxheVN0YXRlO1xyXG4gICAgICAgICAgICB2YXIgcHJldlBsYXlUaW1lcyA9IHRoaXMuY3VycmVudFBsYXlUaW1lcztcclxuICAgICAgICAgICAgdmFyIHByZXZUaW1lID0gdGhpcy5jdXJyZW50VGltZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NldEN1cnJlbnRUaW1lKHBhc3NlZFRpbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnREaXNwYXRjaGVyID0gdGhpcy5fYXJtYXR1cmUuZXZlbnREaXNwYXRjaGVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZTdGF0ZSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5U3RhdGUgIT09IHByZXZTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uU3RhdGUuZGlzcGxheUNvbnRyb2wgJiYgdGhpcy5fYW5pbWF0aW9uU3RhdGUucmVzZXRUb1Bvc2UpIHsgLy8gUmVzZXQgem9yZGVyIHRvIHBvc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5fc29ydFpPcmRlcihudWxsLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2UGxheVRpbWVzID0gdGhpcy5jdXJyZW50UGxheVRpbWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnREaXNwYXRjaGVyLmhhc0RCRXZlbnRMaXN0ZW5lcihkcmFnb25Cb25lcy5FdmVudE9iamVjdC5TVEFSVCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudE9iamVjdCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50T2JqZWN0LnR5cGUgPSBkcmFnb25Cb25lcy5FdmVudE9iamVjdC5TVEFSVDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50T2JqZWN0LmFybWF0dXJlID0gdGhpcy5fYXJtYXR1cmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudE9iamVjdC5hbmltYXRpb25TdGF0ZSA9IHRoaXMuX2FuaW1hdGlvblN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2RyYWdvbkJvbmVzLmJ1ZmZlckV2ZW50KGV2ZW50T2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBpc1JldmVyc2UgPSB0aGlzLl9hbmltYXRpb25TdGF0ZS50aW1lU2NhbGUgPCAwLjA7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9vcENvbXBsZXRlRXZlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXRlRXZlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBsYXlUaW1lcyAhPT0gcHJldlBsYXlUaW1lcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudERpc3BhdGNoZXIuaGFzREJFdmVudExpc3RlbmVyKGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkxPT1BfQ09NUExFVEUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3BDb21wbGV0ZUV2ZW50ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb29wQ29tcGxldGVFdmVudC50eXBlID0gZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9vcENvbXBsZXRlRXZlbnQuYXJtYXR1cmUgPSB0aGlzLl9hcm1hdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9vcENvbXBsZXRlRXZlbnQuYW5pbWF0aW9uU3RhdGUgPSB0aGlzLl9hbmltYXRpb25TdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGxheVN0YXRlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnREaXNwYXRjaGVyLmhhc0RCRXZlbnRMaXN0ZW5lcihkcmFnb25Cb25lcy5FdmVudE9iamVjdC5DT01QTEVURSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlRXZlbnQgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5FdmVudE9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUV2ZW50LnR5cGUgPSBkcmFnb25Cb25lcy5FdmVudE9iamVjdC5DT01QTEVURTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlRXZlbnQuYXJtYXR1cmUgPSB0aGlzLl9hcm1hdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlRXZlbnQuYW5pbWF0aW9uU3RhdGUgPSB0aGlzLl9hbmltYXRpb25TdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZUNvdW50ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZURhdGEgPSB0aGlzLl90aW1lbGluZURhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lRnJhbWVJbmRleCA9IE1hdGguZmxvb3IodGhpcy5jdXJyZW50VGltZSAqIHRoaXMuX2ZyYW1lUmF0ZSk7IC8vIHVpbnRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJhbWVJbmRleCA9IHRoaXMuX2ZyYW1lSW5kaWNlc1t0aW1lbGluZURhdGEuZnJhbWVJbmRpY2VzT2Zmc2V0ICsgdGltZWxpbmVGcmFtZUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWVJbmRleCAhPT0gZnJhbWVJbmRleCkgeyAvLyBBcnJpdmUgYXQgZnJhbWUuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Jvc3NlZEZyYW1lSW5kZXggPSB0aGlzLl9mcmFtZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUluZGV4ID0gZnJhbWVJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVsaW5lQXJyYXkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZU9mZnNldCArIHRoaXMuX3RpbWVsaW5lQXJyYXlbdGltZWxpbmVEYXRhLm9mZnNldCArIDUgLyogVGltZWxpbmVGcmFtZU9mZnNldCAqLyArIHRoaXMuX2ZyYW1lSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc2VkRnJhbWVJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZGcmFtZUluZGV4ID0gTWF0aC5mbG9vcihwcmV2VGltZSAqIHRoaXMuX2ZyYW1lUmF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZWRGcmFtZUluZGV4ID0gdGhpcy5fZnJhbWVJbmRpY2VzW3RpbWVsaW5lRGF0YS5mcmFtZUluZGljZXNPZmZzZXQgKyBwcmV2RnJhbWVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQbGF5VGltZXMgPT09IHByZXZQbGF5VGltZXMpIHsgLy8gU3RhcnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3Jvc3NlZEZyYW1lSW5kZXggPT09IGZyYW1lSW5kZXgpIHsgLy8gVW5jcm9zc2VkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZWRGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNyb3NzZWRGcmFtZUluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZU9mZnNldCArIHRoaXMuX3RpbWVsaW5lQXJyYXlbdGltZWxpbmVEYXRhLm9mZnNldCArIDUgLyogVGltZWxpbmVGcmFtZU9mZnNldCAqLyArIGNyb3NzZWRGcmFtZUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZnJhbWVQb3NpdGlvbiA9IHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXRdICogdGhpcy5fZnJhbWVSYXRlUjsgLy8gUHJlY2lzaW9uIHByb2JsZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lUG9zaXRpb24gPSB0aGlzLl9mcmFtZUFycmF5W2ZyYW1lT2Zmc2V0XSAvIHRoaXMuX2ZyYW1lUmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Bvc2l0aW9uIDw9IGZyYW1lUG9zaXRpb24gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lUG9zaXRpb24gPD0gdGhpcy5fcG9zaXRpb24gKyB0aGlzLl9kdXJhdGlvbikgeyAvLyBTdXBwb3J0IGludGVydmFsIHBsYXkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNyb3NzRnJhbWUoY3Jvc3NlZEZyYW1lSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb29wQ29tcGxldGVFdmVudCAhPT0gbnVsbCAmJiBjcm9zc2VkRnJhbWVJbmRleCA9PT0gMCkgeyAvLyBBZGQgbG9vcCBjb21wbGV0ZSBldmVudCBhZnRlciBmaXJzdCBmcmFtZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9kcmFnb25Cb25lcy5idWZmZXJFdmVudChsb29wQ29tcGxldGVFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wQ29tcGxldGVFdmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzZWRGcmFtZUluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NlZEZyYW1lSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZWRGcmFtZUluZGV4ID0gdGhpcy5fZnJhbWVDb3VudCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzZWRGcmFtZUluZGV4ID09PSBmcmFtZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc2VkRnJhbWVJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZGcmFtZUluZGV4ID0gTWF0aC5mbG9vcihwcmV2VGltZSAqIHRoaXMuX2ZyYW1lUmF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZWRGcmFtZUluZGV4ID0gdGhpcy5fZnJhbWVJbmRpY2VzW3RpbWVsaW5lRGF0YS5mcmFtZUluZGljZXNPZmZzZXQgKyBwcmV2RnJhbWVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZU9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVPZmZzZXQgKyB0aGlzLl90aW1lbGluZUFycmF5W3RpbWVsaW5lRGF0YS5vZmZzZXQgKyA1IC8qIFRpbWVsaW5lRnJhbWVPZmZzZXQgKi8gKyBjcm9zc2VkRnJhbWVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGZyYW1lUG9zaXRpb24gPSB0aGlzLl9mcmFtZUFycmF5W2ZyYW1lT2Zmc2V0XSAqIHRoaXMuX2ZyYW1lUmF0ZVI7IC8vIFByZWNpc2lvbiBwcm9ibGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZVBvc2l0aW9uID0gdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldF0gLyB0aGlzLl9mcmFtZVJhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQbGF5VGltZXMgPT09IHByZXZQbGF5VGltZXMpIHsgLy8gU3RhcnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldlRpbWUgPD0gZnJhbWVQb3NpdGlvbikgeyAvLyBDcm9zc2VkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc2VkRnJhbWVJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NlZEZyYW1lSW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZWRGcmFtZUluZGV4ID0gdGhpcy5fZnJhbWVDb3VudCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY3Jvc3NlZEZyYW1lSW5kZXggPT09IGZyYW1lSW5kZXgpIHsgLy8gVW5jcm9zc2VkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZWRGcmFtZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNyb3NzZWRGcmFtZUluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzZWRGcmFtZUluZGV4IDwgdGhpcy5fZnJhbWVDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzZWRGcmFtZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcm9zc2VkRnJhbWVJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZU9mZnNldCArIHRoaXMuX3RpbWVsaW5lQXJyYXlbdGltZWxpbmVEYXRhLm9mZnNldCArIDUgLyogVGltZWxpbmVGcmFtZU9mZnNldCAqLyArIGNyb3NzZWRGcmFtZUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZnJhbWVQb3NpdGlvbiA9IHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXRdICogdGhpcy5fZnJhbWVSYXRlUjsgLy8gUHJlY2lzaW9uIHByb2JsZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lUG9zaXRpb24gPSB0aGlzLl9mcmFtZUFycmF5W2ZyYW1lT2Zmc2V0XSAvIHRoaXMuX2ZyYW1lUmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Bvc2l0aW9uIDw9IGZyYW1lUG9zaXRpb24gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lUG9zaXRpb24gPD0gdGhpcy5fcG9zaXRpb24gKyB0aGlzLl9kdXJhdGlvbikgeyAvLyBTdXBwb3J0IGludGVydmFsIHBsYXkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNyb3NzRnJhbWUoY3Jvc3NlZEZyYW1lSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb29wQ29tcGxldGVFdmVudCAhPT0gbnVsbCAmJiBjcm9zc2VkRnJhbWVJbmRleCA9PT0gMCkgeyAvLyBBZGQgbG9vcCBjb21wbGV0ZSBldmVudCBiZWZvcmUgZmlyc3QgZnJhbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5fZHJhZ29uQm9uZXMuYnVmZmVyRXZlbnQobG9vcENvbXBsZXRlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcENvbXBsZXRlRXZlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc2VkRnJhbWVJbmRleCA9PT0gZnJhbWVJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9mcmFtZUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lT2Zmc2V0ICsgdGhpcy5fdGltZWxpbmVBcnJheVt0aGlzLl90aW1lbGluZURhdGEub2Zmc2V0ICsgNSAvKiBUaW1lbGluZUZyYW1lT2Zmc2V0ICovXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXJyaXZlIGF0IGZyYW1lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJhbWVQb3NpdGlvbiA9IHRoaXMuX2ZyYW1lQXJyYXlbdGhpcy5fZnJhbWVPZmZzZXRdIC8gdGhpcy5fZnJhbWVSYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGxheVRpbWVzID09PSBwcmV2UGxheVRpbWVzKSB7IC8vIFN0YXJ0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZUaW1lIDw9IGZyYW1lUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNyb3NzRnJhbWUodGhpcy5fZnJhbWVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fcG9zaXRpb24gPD0gZnJhbWVQb3NpdGlvbikgeyAvLyBMb29wIGNvbXBsZXRlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JldmVyc2UgJiYgbG9vcENvbXBsZXRlRXZlbnQgIT09IG51bGwpIHsgLy8gQWRkIGxvb3AgY29tcGxldGUgZXZlbnQgYmVmb3JlIGZpcnN0IGZyYW1lLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9kcmFnb25Cb25lcy5idWZmZXJFdmVudChsb29wQ29tcGxldGVFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcENvbXBsZXRlRXZlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25Dcm9zc0ZyYW1lKHRoaXMuX2ZyYW1lSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxvb3BDb21wbGV0ZUV2ZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2RyYWdvbkJvbmVzLmJ1ZmZlckV2ZW50KGxvb3BDb21wbGV0ZUV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZUV2ZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuX2RyYWdvbkJvbmVzLmJ1ZmZlckV2ZW50KGNvbXBsZXRlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBY3Rpb25UaW1lbGluZVN0YXRlLnByb3RvdHlwZS5zZXRDdXJyZW50VGltZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRDdXJyZW50VGltZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW5kZXggPSAtMTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBBY3Rpb25UaW1lbGluZVN0YXRlO1xyXG4gICAgfShkcmFnb25Cb25lcy5UaW1lbGluZVN0YXRlKSk7XHJcbiAgICBkcmFnb25Cb25lcy5BY3Rpb25UaW1lbGluZVN0YXRlID0gQWN0aW9uVGltZWxpbmVTdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBaT3JkZXJUaW1lbGluZVN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhaT3JkZXJUaW1lbGluZVN0YXRlLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFpPcmRlclRpbWVsaW5lU3RhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgWk9yZGVyVGltZWxpbmVTdGF0ZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLlpPcmRlclRpbWVsaW5lU3RhdGVdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBaT3JkZXJUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25BcnJpdmVBdEZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5U3RhdGUgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5fZnJhbWVBcnJheVt0aGlzLl9mcmFtZU9mZnNldCArIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FybWF0dXJlLl9zb3J0Wk9yZGVyKHRoaXMuX2ZyYW1lQXJyYXksIHRoaXMuX2ZyYW1lT2Zmc2V0ICsgMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcm1hdHVyZS5fc29ydFpPcmRlcihudWxsLCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgWk9yZGVyVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uVXBkYXRlRnJhbWUgPSBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICAgICAgcmV0dXJuIFpPcmRlclRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLlRpbWVsaW5lU3RhdGUpKTtcclxuICAgIGRyYWdvbkJvbmVzLlpPcmRlclRpbWVsaW5lU3RhdGUgPSBaT3JkZXJUaW1lbGluZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJvbmVBbGxUaW1lbGluZVN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhCb25lQWxsVGltZWxpbmVTdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBCb25lQWxsVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBCb25lQWxsVGltZWxpbmVTdGF0ZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLkJvbmVBbGxUaW1lbGluZVN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQm9uZUFsbFRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lRmxvYXRPZmZzZXQgKyB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0ICsgdGhpcy5fZnJhbWVJbmRleCAqIDY7IC8vIC4uLih0aW1lbGluZSB2YWx1ZSBvZmZzZXQpfHh4eHh4eHx4eHh4eHh8KFZhbHVlIG9mZnNldCl4eHh4eHwoTmV4dCBvZmZzZXQpeHh4eHh8eHh4eHh4fHh4eHh4eHwuLi5cclxuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IHRoaXMuX2FybWF0dXJlLl9hcm1hdHVyZURhdGEuc2NhbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVGbG9hdEFycmF5ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmJvbmVQb3NlLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmJvbmVQb3NlLmRlbHRhO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC54ID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdICogc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnkgPSBmcmFtZUZsb2F0QXJyYXlbdmFsdWVPZmZzZXQrK10gKiBzY2FsZTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQucm90YXRpb24gPSBmcmFtZUZsb2F0QXJyYXlbdmFsdWVPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNrZXcgPSBmcmFtZUZsb2F0QXJyYXlbdmFsdWVPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNjYWxlWCA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQuc2NhbGVZID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgPT09IDIgLyogQWx3YXlzICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZyYW1lSW5kZXggPT09IHRoaXMuX2ZyYW1lQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUZsb2F0T2Zmc2V0ICsgdGhpcy5fZnJhbWVWYWx1ZU9mZnNldDsgLy8gKyAwICogNlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS54ID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdICogc2NhbGUgLSBjdXJyZW50Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEueSA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXSAqIHNjYWxlIC0gY3VycmVudC55O1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnJvdGF0aW9uID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdIC0gY3VycmVudC5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS5za2V3ID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdIC0gY3VycmVudC5za2V3O1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnNjYWxlWCA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXSAtIGN1cnJlbnQuc2NhbGVYO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnNjYWxlWSA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXSAtIGN1cnJlbnQuc2NhbGVZO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEueCA9IDAuMDtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS55ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnJvdGF0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnNrZXcgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEuc2NhbGVYID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnNjYWxlWSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgLy8gUG9zZS5cclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5ib25lUG9zZS5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5ib25lUG9zZS5kZWx0YTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQueCA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQueSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQucm90YXRpb24gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNrZXcgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNjYWxlWCA9IDEuMDtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQuc2NhbGVZID0gMS4wO1xyXG4gICAgICAgICAgICAgICAgZGVsdGEueCA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGRlbHRhLnkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YS5yb3RhdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGRlbHRhLnNrZXcgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YS5zY2FsZVggPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YS5zY2FsZVkgPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEJvbmVBbGxUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuYm9uZVBvc2UuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5ib25lUG9zZS5kZWx0YTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuYm9uZVBvc2UucmVzdWx0O1xyXG4gICAgICAgICAgICB0aGlzLmJvbmUuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgIT09IDIgLyogQWx3YXlzICovKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90d2VlblN0YXRlID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC54ID0gY3VycmVudC54ICsgZGVsdGEueCAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHJlc3VsdC55ID0gY3VycmVudC55ICsgZGVsdGEueSAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHJlc3VsdC5yb3RhdGlvbiA9IGN1cnJlbnQucm90YXRpb24gKyBkZWx0YS5yb3RhdGlvbiAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHJlc3VsdC5za2V3ID0gY3VycmVudC5za2V3ICsgZGVsdGEuc2tldyAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zY2FsZVggPSBjdXJyZW50LnNjYWxlWCArIGRlbHRhLnNjYWxlWCAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zY2FsZVkgPSBjdXJyZW50LnNjYWxlWSArIGRlbHRhLnNjYWxlWSAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCb25lQWxsVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuZmFkZU91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuYm9uZVBvc2UucmVzdWx0O1xyXG4gICAgICAgICAgICByZXN1bHQucm90YXRpb24gPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKHJlc3VsdC5yb3RhdGlvbik7XHJcbiAgICAgICAgICAgIHJlc3VsdC5za2V3ID0gZHJhZ29uQm9uZXMuVHJhbnNmb3JtLm5vcm1hbGl6ZVJhZGlhbihyZXN1bHQuc2tldyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQm9uZUFsbFRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJvbmVUaW1lbGluZVN0YXRlKSk7XHJcbiAgICBkcmFnb25Cb25lcy5Cb25lQWxsVGltZWxpbmVTdGF0ZSA9IEJvbmVBbGxUaW1lbGluZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJvbmVUcmFuc2xhdGVUaW1lbGluZVN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhCb25lVHJhbnNsYXRlVGltZWxpbmVTdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBCb25lVHJhbnNsYXRlVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBCb25lVHJhbnNsYXRlVGltZWxpbmVTdGF0ZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLkJvbmVUcmFuc2xhdGVUaW1lbGluZVN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQm9uZVRyYW5zbGF0ZVRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lRmxvYXRPZmZzZXQgKyB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0ICsgdGhpcy5fZnJhbWVJbmRleCAqIDI7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSB0aGlzLl9hcm1hdHVyZS5fYXJtYXR1cmVEYXRhLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lRmxvYXRBcnJheSA9IHRoaXMuX2ZyYW1lRmxvYXRBcnJheTtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5ib25lUG9zZS5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5ib25lUG9zZS5kZWx0YTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQueCA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXSAqIHNjYWxlO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC55ID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdICogc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHdlZW5TdGF0ZSA9PT0gMiAvKiBBbHdheXMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWVJbmRleCA9PT0gdGhpcy5fZnJhbWVDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lRmxvYXRPZmZzZXQgKyB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0OyAvLyArIDAgKiAyXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnggPSBmcmFtZUZsb2F0QXJyYXlbdmFsdWVPZmZzZXQrK10gKiBzY2FsZSAtIGN1cnJlbnQueDtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS55ID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdICogc2NhbGUgLSBjdXJyZW50Lnk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS54ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7IC8vIFBvc2UuXHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuYm9uZVBvc2UuY3VycmVudDtcclxuICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IHRoaXMuYm9uZVBvc2UuZGVsdGE7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnggPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YS54ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgZGVsdGEueSA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQm9uZVRyYW5zbGF0ZVRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vblVwZGF0ZUZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vblVwZGF0ZUZyYW1lLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5ib25lUG9zZS5jdXJyZW50O1xyXG4gICAgICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmJvbmVQb3NlLmRlbHRhO1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5ib25lUG9zZS5yZXN1bHQ7XHJcbiAgICAgICAgICAgIHRoaXMuYm9uZS5fdHJhbnNmb3JtRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHdlZW5TdGF0ZSAhPT0gMiAvKiBBbHdheXMgKi8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3R3ZWVuU3RhdGUgPSAwIC8qIE5vbmUgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0LnggPSAoY3VycmVudC54ICsgZGVsdGEueCAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICByZXN1bHQueSA9IChjdXJyZW50LnkgKyBkZWx0YS55ICogdGhpcy5fdHdlZW5Qcm9ncmVzcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQm9uZVRyYW5zbGF0ZVRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJvbmVUaW1lbGluZVN0YXRlKSk7XHJcbiAgICBkcmFnb25Cb25lcy5Cb25lVHJhbnNsYXRlVGltZWxpbmVTdGF0ZSA9IEJvbmVUcmFuc2xhdGVUaW1lbGluZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJvbmVSb3RhdGVUaW1lbGluZVN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhCb25lUm90YXRlVGltZWxpbmVTdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBCb25lUm90YXRlVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBCb25lUm90YXRlVGltZWxpbmVTdGF0ZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLkJvbmVSb3RhdGVUaW1lbGluZVN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQm9uZVJvdGF0ZVRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lRmxvYXRPZmZzZXQgKyB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0ICsgdGhpcy5fZnJhbWVJbmRleCAqIDI7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVGbG9hdEFycmF5ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmJvbmVQb3NlLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmJvbmVQb3NlLmRlbHRhO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5yb3RhdGlvbiA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQuc2tldyA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlID09PSAyIC8qIEFsd2F5cyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZUluZGV4ID09PSB0aGlzLl9mcmFtZUNvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZU9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVGbG9hdE9mZnNldCArIHRoaXMuX2ZyYW1lVmFsdWVPZmZzZXQ7IC8vICsgMCAqIDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEucm90YXRpb24gPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXSAtIGN1cnJlbnQucm90YXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEucm90YXRpb24gPSBmcmFtZUZsb2F0QXJyYXlbdmFsdWVPZmZzZXQrK10gLSBjdXJyZW50LnJvdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS5za2V3ID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdIC0gY3VycmVudC5za2V3O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEucm90YXRpb24gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEuc2tldyA9IDAuMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHsgLy8gUG9zZS5cclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5ib25lUG9zZS5jdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5ib25lUG9zZS5kZWx0YTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQucm90YXRpb24gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNrZXcgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YS5yb3RhdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGRlbHRhLnNrZXcgPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEJvbmVSb3RhdGVUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuYm9uZVBvc2UuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyIGRlbHRhID0gdGhpcy5ib25lUG9zZS5kZWx0YTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuYm9uZVBvc2UucmVzdWx0O1xyXG4gICAgICAgICAgICB0aGlzLmJvbmUuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgIT09IDIgLyogQWx3YXlzICovKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90d2VlblN0YXRlID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdC5yb3RhdGlvbiA9IGN1cnJlbnQucm90YXRpb24gKyBkZWx0YS5yb3RhdGlvbiAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHJlc3VsdC5za2V3ID0gY3VycmVudC5za2V3ICsgZGVsdGEuc2tldyAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCb25lUm90YXRlVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuZmFkZU91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuYm9uZVBvc2UucmVzdWx0O1xyXG4gICAgICAgICAgICByZXN1bHQucm90YXRpb24gPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKHJlc3VsdC5yb3RhdGlvbik7XHJcbiAgICAgICAgICAgIHJlc3VsdC5za2V3ID0gZHJhZ29uQm9uZXMuVHJhbnNmb3JtLm5vcm1hbGl6ZVJhZGlhbihyZXN1bHQuc2tldyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQm9uZVJvdGF0ZVRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJvbmVUaW1lbGluZVN0YXRlKSk7XHJcbiAgICBkcmFnb25Cb25lcy5Cb25lUm90YXRlVGltZWxpbmVTdGF0ZSA9IEJvbmVSb3RhdGVUaW1lbGluZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJvbmVTY2FsZVRpbWVsaW5lU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEJvbmVTY2FsZVRpbWVsaW5lU3RhdGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQm9uZVNjYWxlVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBCb25lU2NhbGVUaW1lbGluZVN0YXRlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuQm9uZVNjYWxlVGltZWxpbmVTdGF0ZV1cIjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEJvbmVTY2FsZVRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lRmxvYXRPZmZzZXQgKyB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0ICsgdGhpcy5fZnJhbWVJbmRleCAqIDI7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVGbG9hdEFycmF5ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmJvbmVQb3NlLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmJvbmVQb3NlLmRlbHRhO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5zY2FsZVggPSBmcmFtZUZsb2F0QXJyYXlbdmFsdWVPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNjYWxlWSA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCsrXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlID09PSAyIC8qIEFsd2F5cyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZUluZGV4ID09PSB0aGlzLl9mcmFtZUNvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZU9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVGbG9hdE9mZnNldCArIHRoaXMuX2ZyYW1lVmFsdWVPZmZzZXQ7IC8vICsgMCAqIDJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEuc2NhbGVYID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdIC0gY3VycmVudC5zY2FsZVg7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEuc2NhbGVZID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0KytdIC0gY3VycmVudC5zY2FsZVk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS5zY2FsZVggPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGEuc2NhbGVZID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBQb3NlLlxyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmJvbmVQb3NlLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSB0aGlzLmJvbmVQb3NlLmRlbHRhO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5zY2FsZVggPSAxLjA7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNjYWxlWSA9IDEuMDtcclxuICAgICAgICAgICAgICAgIGRlbHRhLnNjYWxlWCA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGRlbHRhLnNjYWxlWSA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQm9uZVNjYWxlVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uVXBkYXRlRnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uVXBkYXRlRnJhbWUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmJvbmVQb3NlLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IHRoaXMuYm9uZVBvc2UuZGVsdGE7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmJvbmVQb3NlLnJlc3VsdDtcclxuICAgICAgICAgICAgdGhpcy5ib25lLl90cmFuc2Zvcm1EaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlICE9PSAyIC8qIEFsd2F5cyAqLykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHdlZW5TdGF0ZSA9IDAgLyogTm9uZSAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQuc2NhbGVYID0gY3VycmVudC5zY2FsZVggKyBkZWx0YS5zY2FsZVggKiB0aGlzLl90d2VlblByb2dyZXNzO1xyXG4gICAgICAgICAgICByZXN1bHQuc2NhbGVZID0gY3VycmVudC5zY2FsZVkgKyBkZWx0YS5zY2FsZVkgKiB0aGlzLl90d2VlblByb2dyZXNzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEJvbmVTY2FsZVRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJvbmVUaW1lbGluZVN0YXRlKSk7XHJcbiAgICBkcmFnb25Cb25lcy5Cb25lU2NhbGVUaW1lbGluZVN0YXRlID0gQm9uZVNjYWxlVGltZWxpbmVTdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBTdXJmYWNlVGltZWxpbmVTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoU3VyZmFjZVRpbWVsaW5lU3RhdGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU3VyZmFjZVRpbWVsaW5lU3RhdGUoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy5fY3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGVsdGEgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX3Jlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFN1cmZhY2VUaW1lbGluZVN0YXRlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuU3VyZmFjZVRpbWVsaW5lU3RhdGVdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTdXJmYWNlVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5zdXJmYWNlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdE9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZvcm1Db3VudCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudC5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9kZWx0YS5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9yZXN1bHQubGVuZ3RoID0gMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFN1cmZhY2VUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25BcnJpdmVBdEZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVsaW5lRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUZsb2F0T2Zmc2V0ICsgdGhpcy5fZnJhbWVWYWx1ZU9mZnNldCArIHRoaXMuX2ZyYW1lSW5kZXggKiB0aGlzLl92YWx1ZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5fYXJtYXR1cmUuX2FybWF0dXJlRGF0YS5zY2FsZTtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFtZUZsb2F0QXJyYXkgPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHdlZW5TdGF0ZSA9PT0gMiAvKiBBbHdheXMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFZhbHVlT2Zmc2V0ID0gdmFsdWVPZmZzZXQgKyB0aGlzLl92YWx1ZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZUluZGV4ID09PSB0aGlzLl9mcmFtZUNvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0VmFsdWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lRmxvYXRPZmZzZXQgKyB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3ZhbHVlQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWx0YVtpXSA9IGZyYW1lRmxvYXRBcnJheVtuZXh0VmFsdWVPZmZzZXQgKyBpXSAqIHNjYWxlIC0gKHRoaXMuX2N1cnJlbnRbaV0gPSBmcmFtZUZsb2F0QXJyYXlbdmFsdWVPZmZzZXQgKyBpXSAqIHNjYWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3ZhbHVlQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50W2ldID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0ICsgaV0gKiBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3ZhbHVlQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRbaV0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFN1cmZhY2VUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnN1cmZhY2UuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgIT09IDIgLyogQWx3YXlzICovKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90d2VlblN0YXRlID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fdmFsdWVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSB0aGlzLl9jdXJyZW50W2ldICsgdGhpcy5fZGVsdGFbaV0gKiB0aGlzLl90d2VlblByb2dyZXNzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTdXJmYWNlVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChhcm1hdHVyZSwgYW5pbWF0aW9uU3RhdGUsIHRpbWVsaW5lRGF0YSkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzLCBhcm1hdHVyZSwgYW5pbWF0aW9uU3RhdGUsIHRpbWVsaW5lRGF0YSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFtZUludE9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVJbnRPZmZzZXQgKyB0aGlzLl90aW1lbGluZUFycmF5W3RoaXMuX3RpbWVsaW5lRGF0YS5vZmZzZXQgKyAzIC8qIFRpbWVsaW5lRnJhbWVWYWx1ZUNvdW50ICovXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZm9ybUNvdW50ID0gdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDEgLyogRGVmb3JtQ291bnQgKi9dO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVDb3VudCA9IHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQgKyAyIC8qIERlZm9ybVZhbHVlQ291bnQgKi9dO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVPZmZzZXQgPSB0aGlzLl9mcmFtZUludEFycmF5W2ZyYW1lSW50T2Zmc2V0ICsgMyAvKiBEZWZvcm1WYWx1ZU9mZnNldCAqL107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0T2Zmc2V0ID0gdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDQgLyogRGVmb3JtRmxvYXRPZmZzZXQgKi9dICsgdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUZsb2F0T2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmb3JtQ291bnQgPSB0aGlzLnN1cmZhY2UuX2RlZm9ybVZlcnRpY2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlQ291bnQgPSB0aGlzLl9kZWZvcm1Db3VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQubGVuZ3RoID0gdGhpcy5fdmFsdWVDb3VudDtcclxuICAgICAgICAgICAgdGhpcy5fZGVsdGEubGVuZ3RoID0gdGhpcy5fdmFsdWVDb3VudDtcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0Lmxlbmd0aCA9IHRoaXMuX3ZhbHVlQ291bnQ7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fdmFsdWVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWx0YVtpXSA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU3VyZmFjZVRpbWVsaW5lU3RhdGUucHJvdG90eXBlLmJsZW5kID0gZnVuY3Rpb24gKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIHZhciBibGVuZFdlaWdodCA9IHRoaXMuc3VyZmFjZS5fYmxlbmRTdGF0ZS5ibGVuZFdlaWdodDtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuc3VyZmFjZS5fZGVmb3JtVmVydGljZXM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZGVmb3JtQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCB0aGlzLl92YWx1ZU9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5W3RoaXMuX2ZyYW1lRmxvYXRPZmZzZXQgKyBpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPCB0aGlzLl92YWx1ZU9mZnNldCArIHRoaXMuX3ZhbHVlQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3Jlc3VsdFtpIC0gdGhpcy5fdmFsdWVPZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXlbdGhpcy5fZnJhbWVGbG9hdE9mZnNldCArIGkgLSB0aGlzLl92YWx1ZUNvdW50XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSArPSB2YWx1ZSAqIGJsZW5kV2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYmxlbmRXZWlnaHQgIT09IDEuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHZhbHVlICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uU3RhdGUuX2ZhZGVTdGF0ZSAhPT0gMCB8fCB0aGlzLl9hbmltYXRpb25TdGF0ZS5fc3ViRmFkZVN0YXRlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1cmZhY2UuX3RyYW5zZm9ybURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFN1cmZhY2VUaW1lbGluZVN0YXRlO1xyXG4gICAgfShkcmFnb25Cb25lcy5Ud2VlblRpbWVsaW5lU3RhdGUpKTtcclxuICAgIGRyYWdvbkJvbmVzLlN1cmZhY2VUaW1lbGluZVN0YXRlID0gU3VyZmFjZVRpbWVsaW5lU3RhdGU7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB2YXIgU2xvdERpc2xheVRpbWVsaW5lU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFNsb3REaXNsYXlUaW1lbGluZVN0YXRlLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFNsb3REaXNsYXlUaW1lbGluZVN0YXRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFNsb3REaXNsYXlUaW1lbGluZVN0YXRlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuU2xvdERpc2xheVRpbWVsaW5lU3RhdGVdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTbG90RGlzbGF5VGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGxheVN0YXRlID49IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5SW5kZXggPSB0aGlzLl90aW1lbGluZURhdGEgIT09IG51bGwgPyB0aGlzLl9mcmFtZUFycmF5W3RoaXMuX2ZyYW1lT2Zmc2V0ICsgMV0gOiB0aGlzLnNsb3QuX3Nsb3REYXRhLmRpc3BsYXlJbmRleDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNsb3QuZGlzcGxheUluZGV4ICE9PSBkaXNwbGF5SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNsb3QuX3NldERpc3BsYXlJbmRleChkaXNwbGF5SW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gU2xvdERpc2xheVRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLlNsb3RUaW1lbGluZVN0YXRlKSk7XHJcbiAgICBkcmFnb25Cb25lcy5TbG90RGlzbGF5VGltZWxpbmVTdGF0ZSA9IFNsb3REaXNsYXlUaW1lbGluZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIFNsb3RDb2xvclRpbWVsaW5lU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFNsb3RDb2xvclRpbWVsaW5lU3RhdGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU2xvdENvbG9yVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLl9jdXJyZW50ID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGVsdGEgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF07XHJcbiAgICAgICAgICAgIF90aGlzLl9yZXN1bHQgPSBbMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjBdO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFNsb3RDb2xvclRpbWVsaW5lU3RhdGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5TbG90Q29sb3JUaW1lbGluZVN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2xvdENvbG9yVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNsb3RDb2xvclRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW50QXJyYXkgPSB0aGlzLl9kcmFnb25Cb25lc0RhdGEuaW50QXJyYXk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVJbnRBcnJheSA9IHRoaXMuX2ZyYW1lSW50QXJyYXk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVPZmZzZXQgPSB0aGlzLl9hbmltYXRpb25EYXRhLmZyYW1lSW50T2Zmc2V0ICsgdGhpcy5fZnJhbWVWYWx1ZU9mZnNldCArIHRoaXMuX2ZyYW1lSW5kZXggKiAxOyAvLyAuLi4odGltZWxpbmUgdmFsdWUgb2Zmc2V0KXx4fHh8KFZhbHVlIG9mZnNldCl8KE5leHQgb2Zmc2V0KXx4fHh8Li4uXHJcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JPZmZzZXQgPSBmcmFtZUludEFycmF5W3ZhbHVlT2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2xvck9mZnNldCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvck9mZnNldCArPSA2NTUzNjsgLy8gRml4ZWQgb3V0IG9mIGJvdWRzIGJ1Zy4gXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzBdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzFdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzJdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzNdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzRdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzVdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzZdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzddID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK107XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHdlZW5TdGF0ZSA9PT0gMiAvKiBBbHdheXMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWVJbmRleCA9PT0gdGhpcy5fZnJhbWVDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JPZmZzZXQgPSBmcmFtZUludEFycmF5W3RoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVJbnRPZmZzZXQgKyB0aGlzLl9mcmFtZVZhbHVlT2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yT2Zmc2V0ID0gZnJhbWVJbnRBcnJheVt2YWx1ZU9mZnNldCArIDEgKiAxXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbG9yT2Zmc2V0IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvck9mZnNldCArPSA2NTUzNjsgLy8gRml4ZWQgb3V0IG9mIGJvdWRzIGJ1Zy4gXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzBdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzFdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzJdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzNdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzRdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzVdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzZdID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzZdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhWzddID0gaW50QXJyYXlbY29sb3JPZmZzZXQrK10gLSB0aGlzLl9jdXJyZW50WzddO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBQb3NlLlxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gdGhpcy5zbG90Ll9zbG90RGF0YS5jb2xvcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRbMF0gPSBjb2xvci5hbHBoYU11bHRpcGxpZXIgKiAxMDAuMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRbMV0gPSBjb2xvci5yZWRNdWx0aXBsaWVyICogMTAwLjA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzJdID0gY29sb3IuZ3JlZW5NdWx0aXBsaWVyICogMTAwLjA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzNdID0gY29sb3IuYmx1ZU11bHRpcGxpZXIgKiAxMDAuMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRbNF0gPSBjb2xvci5hbHBoYU9mZnNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRbNV0gPSBjb2xvci5yZWRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzZdID0gY29sb3IuZ3JlZW5PZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50WzddID0gY29sb3IuYmx1ZU9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2xvdENvbG9yVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uVXBkYXRlRnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uVXBkYXRlRnJhbWUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHdlZW5TdGF0ZSAhPT0gMiAvKiBBbHdheXMgKi8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3R3ZWVuU3RhdGUgPSAwIC8qIE5vbmUgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzBdID0gKHRoaXMuX2N1cnJlbnRbMF0gKyB0aGlzLl9kZWx0YVswXSAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3MpICogMC4wMTtcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzFdID0gKHRoaXMuX2N1cnJlbnRbMV0gKyB0aGlzLl9kZWx0YVsxXSAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3MpICogMC4wMTtcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzJdID0gKHRoaXMuX2N1cnJlbnRbMl0gKyB0aGlzLl9kZWx0YVsyXSAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3MpICogMC4wMTtcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzNdID0gKHRoaXMuX2N1cnJlbnRbM10gKyB0aGlzLl9kZWx0YVszXSAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3MpICogMC4wMTtcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzRdID0gdGhpcy5fY3VycmVudFs0XSArIHRoaXMuX2RlbHRhWzRdICogdGhpcy5fdHdlZW5Qcm9ncmVzcztcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzVdID0gdGhpcy5fY3VycmVudFs1XSArIHRoaXMuX2RlbHRhWzVdICogdGhpcy5fdHdlZW5Qcm9ncmVzcztcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzZdID0gdGhpcy5fY3VycmVudFs2XSArIHRoaXMuX2RlbHRhWzZdICogdGhpcy5fdHdlZW5Qcm9ncmVzcztcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0WzddID0gdGhpcy5fY3VycmVudFs3XSArIHRoaXMuX2RlbHRhWzddICogdGhpcy5fdHdlZW5Qcm9ncmVzcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNsb3RDb2xvclRpbWVsaW5lU3RhdGUucHJvdG90eXBlLmZhZGVPdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3R3ZWVuU3RhdGUgPSAwIC8qIE5vbmUgKi87XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTbG90Q29sb3JUaW1lbGluZVN0YXRlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAocGFzc2VkVGltZSkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIHBhc3NlZFRpbWUpO1xyXG4gICAgICAgICAgICAvLyBGYWRlIGFuaW1hdGlvbi5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgIT09IDAgLyogTm9uZSAqLyB8fCB0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuc2xvdC5fY29sb3JUcmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uU3RhdGUuX2ZhZGVTdGF0ZSAhPT0gMCB8fCB0aGlzLl9hbmltYXRpb25TdGF0ZS5fc3ViRmFkZVN0YXRlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5hbHBoYU11bHRpcGxpZXIgIT09IHRoaXMuX3Jlc3VsdFswXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVkTXVsdGlwbGllciAhPT0gdGhpcy5fcmVzdWx0WzFdIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ncmVlbk11bHRpcGxpZXIgIT09IHRoaXMuX3Jlc3VsdFsyXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYmx1ZU11bHRpcGxpZXIgIT09IHRoaXMuX3Jlc3VsdFszXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYWxwaGFPZmZzZXQgIT09IHRoaXMuX3Jlc3VsdFs0XSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVkT2Zmc2V0ICE9PSB0aGlzLl9yZXN1bHRbNV0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmdyZWVuT2Zmc2V0ICE9PSB0aGlzLl9yZXN1bHRbNl0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmJsdWVPZmZzZXQgIT09IHRoaXMuX3Jlc3VsdFs3XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmFkZVByb2dyZXNzID0gTWF0aC5wb3codGhpcy5fYW5pbWF0aW9uU3RhdGUuX2ZhZGVQcm9ncmVzcywgNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5hbHBoYU11bHRpcGxpZXIgKz0gKHRoaXMuX3Jlc3VsdFswXSAtIHJlc3VsdC5hbHBoYU11bHRpcGxpZXIpICogZmFkZVByb2dyZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVkTXVsdGlwbGllciArPSAodGhpcy5fcmVzdWx0WzFdIC0gcmVzdWx0LnJlZE11bHRpcGxpZXIpICogZmFkZVByb2dyZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZ3JlZW5NdWx0aXBsaWVyICs9ICh0aGlzLl9yZXN1bHRbMl0gLSByZXN1bHQuZ3JlZW5NdWx0aXBsaWVyKSAqIGZhZGVQcm9ncmVzcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmJsdWVNdWx0aXBsaWVyICs9ICh0aGlzLl9yZXN1bHRbM10gLSByZXN1bHQuYmx1ZU11bHRpcGxpZXIpICogZmFkZVByb2dyZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuYWxwaGFPZmZzZXQgKz0gKHRoaXMuX3Jlc3VsdFs0XSAtIHJlc3VsdC5hbHBoYU9mZnNldCkgKiBmYWRlUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZWRPZmZzZXQgKz0gKHRoaXMuX3Jlc3VsdFs1XSAtIHJlc3VsdC5yZWRPZmZzZXQpICogZmFkZVByb2dyZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZ3JlZW5PZmZzZXQgKz0gKHRoaXMuX3Jlc3VsdFs2XSAtIHJlc3VsdC5ncmVlbk9mZnNldCkgKiBmYWRlUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ibHVlT2Zmc2V0ICs9ICh0aGlzLl9yZXN1bHRbN10gLSByZXN1bHQuYmx1ZU9mZnNldCkgKiBmYWRlUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2xvdC5fY29sb3JEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fZGlydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuYWxwaGFNdWx0aXBsaWVyICE9PSB0aGlzLl9yZXN1bHRbMF0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJlZE11bHRpcGxpZXIgIT09IHRoaXMuX3Jlc3VsdFsxXSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZ3JlZW5NdWx0aXBsaWVyICE9PSB0aGlzLl9yZXN1bHRbMl0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmJsdWVNdWx0aXBsaWVyICE9PSB0aGlzLl9yZXN1bHRbM10gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFscGhhT2Zmc2V0ICE9PSB0aGlzLl9yZXN1bHRbNF0gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJlZE9mZnNldCAhPT0gdGhpcy5fcmVzdWx0WzVdIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ncmVlbk9mZnNldCAhPT0gdGhpcy5fcmVzdWx0WzZdIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ibHVlT2Zmc2V0ICE9PSB0aGlzLl9yZXN1bHRbN10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFscGhhTXVsdGlwbGllciA9IHRoaXMuX3Jlc3VsdFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnJlZE11bHRpcGxpZXIgPSB0aGlzLl9yZXN1bHRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ncmVlbk11bHRpcGxpZXIgPSB0aGlzLl9yZXN1bHRbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ibHVlTXVsdGlwbGllciA9IHRoaXMuX3Jlc3VsdFszXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFscGhhT2Zmc2V0ID0gdGhpcy5fcmVzdWx0WzRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVkT2Zmc2V0ID0gdGhpcy5fcmVzdWx0WzVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZ3JlZW5PZmZzZXQgPSB0aGlzLl9yZXN1bHRbNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ibHVlT2Zmc2V0ID0gdGhpcy5fcmVzdWx0WzddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNsb3QuX2NvbG9yRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFNsb3RDb2xvclRpbWVsaW5lU3RhdGU7XHJcbiAgICB9KGRyYWdvbkJvbmVzLlNsb3RUaW1lbGluZVN0YXRlKSk7XHJcbiAgICBkcmFnb25Cb25lcy5TbG90Q29sb3JUaW1lbGluZVN0YXRlID0gU2xvdENvbG9yVGltZWxpbmVTdGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBEZWZvcm1UaW1lbGluZVN0YXRlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhEZWZvcm1UaW1lbGluZVN0YXRlLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIERlZm9ybVRpbWVsaW5lU3RhdGUoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy5fY3VycmVudCA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fZGVsdGEgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX3Jlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIERlZm9ybVRpbWVsaW5lU3RhdGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5EZWZvcm1UaW1lbGluZVN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRGVmb3JtVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy52ZXJ0ZXhPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0T2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlZm9ybUNvdW50ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWVPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc3VsdC5sZW5ndGggPSAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRGVmb3JtVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25BcnJpdmVBdEZyYW1lLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZU9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVGbG9hdE9mZnNldCArIHRoaXMuX2ZyYW1lVmFsdWVPZmZzZXQgKyB0aGlzLl9mcmFtZUluZGV4ICogdGhpcy5fdmFsdWVDb3VudDtcclxuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IHRoaXMuX2FybWF0dXJlLl9hcm1hdHVyZURhdGEuc2NhbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVGbG9hdEFycmF5ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgPT09IDIgLyogQWx3YXlzICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRWYWx1ZU9mZnNldCA9IHZhbHVlT2Zmc2V0ICsgdGhpcy5fdmFsdWVDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fZnJhbWVJbmRleCA9PT0gdGhpcy5fZnJhbWVDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFZhbHVlT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUZsb2F0T2Zmc2V0ICsgdGhpcy5fZnJhbWVWYWx1ZU9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl92YWx1ZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsdGFbaV0gPSBmcmFtZUZsb2F0QXJyYXlbbmV4dFZhbHVlT2Zmc2V0ICsgaV0gKiBzY2FsZSAtICh0aGlzLl9jdXJyZW50W2ldID0gZnJhbWVGbG9hdEFycmF5W3ZhbHVlT2Zmc2V0ICsgaV0gKiBzY2FsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl92YWx1ZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFtpXSA9IGZyYW1lRmxvYXRBcnJheVt2YWx1ZU9mZnNldCArIGldICogc2NhbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl92YWx1ZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50W2ldID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEZWZvcm1UaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25VcGRhdGVGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlICE9PSAyIC8qIEFsd2F5cyAqLykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHdlZW5TdGF0ZSA9IDAgLyogTm9uZSAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3ZhbHVlQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdGhpcy5fY3VycmVudFtpXSArIHRoaXMuX2RlbHRhW2ldICogdGhpcy5fdHdlZW5Qcm9ncmVzcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRGVmb3JtVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChhcm1hdHVyZSwgYW5pbWF0aW9uU3RhdGUsIHRpbWVsaW5lRGF0YSkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzLCBhcm1hdHVyZSwgYW5pbWF0aW9uU3RhdGUsIHRpbWVsaW5lRGF0YSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90aW1lbGluZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFtZUludE9mZnNldCA9IHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVJbnRPZmZzZXQgKyB0aGlzLl90aW1lbGluZUFycmF5W3RoaXMuX3RpbWVsaW5lRGF0YS5vZmZzZXQgKyAzIC8qIFRpbWVsaW5lRnJhbWVWYWx1ZUNvdW50ICovXTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVydGV4T2Zmc2V0ID0gdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDAgLyogRGVmb3JtVmVydGV4T2Zmc2V0ICovXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZlcnRleE9mZnNldCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZlcnRleE9mZnNldCArPSA2NTUzNjsgLy8gRml4ZWQgb3V0IG9mIGJvdWRzIGJ1Zy4gXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWZvcm1Db3VudCA9IHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQgKyAxIC8qIERlZm9ybUNvdW50ICovXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlQ291bnQgPSB0aGlzLl9mcmFtZUludEFycmF5W2ZyYW1lSW50T2Zmc2V0ICsgMiAvKiBEZWZvcm1WYWx1ZUNvdW50ICovXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlT2Zmc2V0ID0gdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDMgLyogRGVmb3JtVmFsdWVPZmZzZXQgKi9dO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdE9mZnNldCA9IHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQgKyA0IC8qIERlZm9ybUZsb2F0T2Zmc2V0ICovXSArIHRoaXMuX2FuaW1hdGlvbkRhdGEuZnJhbWVGbG9hdE9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZWZvcm1WZXJ0aWNlcyA9IHRoaXMuc2xvdC5fZGVmb3JtVmVydGljZXM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWZvcm1Db3VudCA9IGRlZm9ybVZlcnRpY2VzICE9PSBudWxsID8gZGVmb3JtVmVydGljZXMudmVydGljZXMubGVuZ3RoIDogMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlQ291bnQgPSB0aGlzLl9kZWZvcm1Db3VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQubGVuZ3RoID0gdGhpcy5fdmFsdWVDb3VudDtcclxuICAgICAgICAgICAgdGhpcy5fZGVsdGEubGVuZ3RoID0gdGhpcy5fdmFsdWVDb3VudDtcclxuICAgICAgICAgICAgdGhpcy5fcmVzdWx0Lmxlbmd0aCA9IHRoaXMuX3ZhbHVlQ291bnQ7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fdmFsdWVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWx0YVtpXSA9IDAuMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRGVmb3JtVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuZmFkZU91dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHdlZW5TdGF0ZSA9IDAgLyogTm9uZSAqLztcclxuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSBmYWxzZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIERlZm9ybVRpbWVsaW5lU3RhdGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChwYXNzZWRUaW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWZvcm1WZXJ0aWNlcyA9IHRoaXMuc2xvdC5fZGVmb3JtVmVydGljZXM7XHJcbiAgICAgICAgICAgIGlmIChkZWZvcm1WZXJ0aWNlcyA9PT0gbnVsbCB8fCBkZWZvcm1WZXJ0aWNlcy52ZXJ0aWNlc0RhdGEgPT09IG51bGwgfHwgZGVmb3JtVmVydGljZXMudmVydGljZXNEYXRhLm9mZnNldCAhPT0gdGhpcy52ZXJ0ZXhPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMsIHBhc3NlZFRpbWUpO1xyXG4gICAgICAgICAgICAvLyBGYWRlIGFuaW1hdGlvbi5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgIT09IDAgLyogTm9uZSAqLyB8fCB0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGRlZm9ybVZlcnRpY2VzLnZlcnRpY2VzO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblN0YXRlLl9mYWRlU3RhdGUgIT09IDAgfHwgdGhpcy5fYW5pbWF0aW9uU3RhdGUuX3N1YkZhZGVTdGF0ZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmYWRlUHJvZ3Jlc3MgPSBNYXRoLnBvdyh0aGlzLl9hbmltYXRpb25TdGF0ZS5fZmFkZVByb2dyZXNzLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2RlZm9ybUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCB0aGlzLl92YWx1ZU9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldICs9ICh0aGlzLl9mcmFtZUZsb2F0QXJyYXlbdGhpcy5fZnJhbWVGbG9hdE9mZnNldCArIGldIC0gcmVzdWx0W2ldKSAqIGZhZGVQcm9ncmVzcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpIDwgdGhpcy5fdmFsdWVPZmZzZXQgKyB0aGlzLl92YWx1ZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gKz0gKHRoaXMuX3Jlc3VsdFtpIC0gdGhpcy5fdmFsdWVPZmZzZXRdIC0gcmVzdWx0W2ldKSAqIGZhZGVQcm9ncmVzcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSArPSAodGhpcy5fZnJhbWVGbG9hdEFycmF5W3RoaXMuX2ZyYW1lRmxvYXRPZmZzZXQgKyBpIC0gdGhpcy5fdmFsdWVDb3VudF0gLSByZXN1bHRbaV0pICogZmFkZVByb2dyZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZm9ybVZlcnRpY2VzLnZlcnRpY2VzRGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fZGlydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZGVmb3JtQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IHRoaXMuX3ZhbHVlT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXlbdGhpcy5fZnJhbWVGbG9hdE9mZnNldCArIGldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPCB0aGlzLl92YWx1ZU9mZnNldCArIHRoaXMuX3ZhbHVlQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHRoaXMuX3Jlc3VsdFtpIC0gdGhpcy5fdmFsdWVPZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5W3RoaXMuX2ZyYW1lRmxvYXRPZmZzZXQgKyBpIC0gdGhpcy5fdmFsdWVDb3VudF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmb3JtVmVydGljZXMudmVydGljZXNEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBEZWZvcm1UaW1lbGluZVN0YXRlO1xyXG4gICAgfShkcmFnb25Cb25lcy5TbG90VGltZWxpbmVTdGF0ZSkpO1xyXG4gICAgZHJhZ29uQm9uZXMuRGVmb3JtVGltZWxpbmVTdGF0ZSA9IERlZm9ybVRpbWVsaW5lU3RhdGU7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB2YXIgSUtDb25zdHJhaW50VGltZWxpbmVTdGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoSUtDb25zdHJhaW50VGltZWxpbmVTdGF0ZSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBJS0NvbnN0cmFpbnRUaW1lbGluZVN0YXRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIElLQ29uc3RyYWludFRpbWVsaW5lU3RhdGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltjbGFzcyBkcmFnb25Cb25lcy5JS0NvbnN0cmFpbnRUaW1lbGluZVN0YXRlXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgSUtDb25zdHJhaW50VGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQ2xlYXIuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZGVsdGEgPSAwLjA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBJS0NvbnN0cmFpbnRUaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25BcnJpdmVBdEZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdmFyIGlrQ29uc3RyYWludCA9IHRoaXMuY29uc3RyYWludDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVsaW5lRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUludE9mZnNldCArIHRoaXMuX2ZyYW1lVmFsdWVPZmZzZXQgKyB0aGlzLl9mcmFtZUluZGV4ICogMjtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFtZUludEFycmF5ID0gdGhpcy5fZnJhbWVJbnRBcnJheTtcclxuICAgICAgICAgICAgICAgIHZhciBiZW5kUG9zaXRpdmUgPSBmcmFtZUludEFycmF5W3ZhbHVlT2Zmc2V0KytdICE9PSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudCA9IGZyYW1lSW50QXJyYXlbdmFsdWVPZmZzZXQrK10gKiAwLjAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R3ZWVuU3RhdGUgPT09IDIgLyogQWx3YXlzICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZyYW1lSW5kZXggPT09IHRoaXMuX2ZyYW1lQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUludE9mZnNldCArIHRoaXMuX2ZyYW1lVmFsdWVPZmZzZXQ7IC8vICsgMCAqIDJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsdGEgPSBmcmFtZUludEFycmF5W3ZhbHVlT2Zmc2V0ICsgMV0gKiAwLjAxIC0gdGhpcy5fY3VycmVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbHRhID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWtDb25zdHJhaW50Ll9iZW5kUG9zaXRpdmUgPSBiZW5kUG9zaXRpdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWtDb25zdHJhaW50RGF0YSA9IGlrQ29uc3RyYWludC5fY29uc3RyYWludERhdGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50ID0gaWtDb25zdHJhaW50RGF0YS53ZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWx0YSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGlrQ29uc3RyYWludC5fYmVuZFBvc2l0aXZlID0gaWtDb25zdHJhaW50RGF0YS5iZW5kUG9zaXRpdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWtDb25zdHJhaW50LmludmFsaWRVcGRhdGUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIElLQ29uc3RyYWludFRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vblVwZGF0ZUZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vblVwZGF0ZUZyYW1lLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlICE9PSAyIC8qIEFsd2F5cyAqLykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHdlZW5TdGF0ZSA9IDAgLyogTm9uZSAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaWtDb25zdHJhaW50ID0gdGhpcy5jb25zdHJhaW50O1xyXG4gICAgICAgICAgICBpa0NvbnN0cmFpbnQuX3dlaWdodCA9IHRoaXMuX2N1cnJlbnQgKyB0aGlzLl9kZWx0YSAqIHRoaXMuX3R3ZWVuUHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIGlrQ29uc3RyYWludC5pbnZhbGlkVXBkYXRlKCk7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gZmFkZSB1cGRhdGUuXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gSUtDb25zdHJhaW50VGltZWxpbmVTdGF0ZTtcclxuICAgIH0oZHJhZ29uQm9uZXMuQ29uc3RyYWludFRpbWVsaW5lU3RhdGUpKTtcclxuICAgIGRyYWdvbkJvbmVzLklLQ29uc3RyYWludFRpbWVsaW5lU3RhdGUgPSBJS0NvbnN0cmFpbnRUaW1lbGluZVN0YXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEFuaW1hdGlvblRpbWVsaW5lU3RhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEFuaW1hdGlvblRpbWVsaW5lU3RhdGUsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQW5pbWF0aW9uVGltZWxpbmVTdGF0ZSgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XHJcbiAgICAgICAgICAgIF90aGlzLl9mbG9hdHMgPSBbMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMF07XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgQW5pbWF0aW9uVGltZWxpbmVTdGF0ZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW2NsYXNzIGRyYWdvbkJvbmVzLkFuaW1hdGlvblRpbWVsaW5lU3RhdGVdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25UaW1lbGluZVN0YXRlLnByb3RvdHlwZS5fb25DbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5fb25DbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblN0YXRlID0gbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFuaW1hdGlvblRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vbkFycml2ZUF0RnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuX29uQXJyaXZlQXRGcmFtZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZWxpbmVEYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUludE9mZnNldCArIHRoaXMuX2ZyYW1lVmFsdWVPZmZzZXQgKyB0aGlzLl9mcmFtZUluZGV4ICogMjtcclxuICAgICAgICAgICAgdmFyIGZyYW1lUmF0ZVIgPSAxLjAgLyB0aGlzLmFuaW1hdGlvblN0YXRlLl9hbmltYXRpb25EYXRhLnBhcmVudC5mcmFtZVJhdGU7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZUludEFycmF5ID0gdGhpcy5fZnJhbWVJbnRBcnJheTtcclxuICAgICAgICAgICAgdGhpcy5fZmxvYXRzWzBdID0gZnJhbWVJbnRBcnJheVt2YWx1ZU9mZnNldCsrXSAqIGZyYW1lUmF0ZVI7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zsb2F0c1szXSA9IGZyYW1lSW50QXJyYXlbdmFsdWVPZmZzZXQrK10gKiAwLjAxO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHdlZW5TdGF0ZSA9PT0gMiAvKiBBbHdheXMgKi8pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZUluZGV4ID09PSB0aGlzLl9mcmFtZUNvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlT2Zmc2V0ID0gdGhpcy5fYW5pbWF0aW9uRGF0YS5mcmFtZUludE9mZnNldCArIHRoaXMuX2ZyYW1lVmFsdWVPZmZzZXQ7IC8vICsgMCAqIDJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb2F0c1sxXSA9IGZyYW1lSW50QXJyYXlbdmFsdWVPZmZzZXQrK10gKiBmcmFtZVJhdGVSIC0gdGhpcy5fZmxvYXRzWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvYXRzWzRdID0gZnJhbWVJbnRBcnJheVt2YWx1ZU9mZnNldCsrXSAqIDAuMDEgLSB0aGlzLl9mbG9hdHNbM107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG9hdHNbMV0gPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG9hdHNbNF0gPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEFuaW1hdGlvblRpbWVsaW5lU3RhdGUucHJvdG90eXBlLl9vblVwZGF0ZUZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLl9vblVwZGF0ZUZyYW1lLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90d2VlblN0YXRlICE9PSAyIC8qIEFsd2F5cyAqLykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHdlZW5TdGF0ZSA9IDAgLyogTm9uZSAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmxvYXRzWzBdID49IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvYXRzWzJdID0gdGhpcy5fZmxvYXRzWzBdICsgdGhpcy5fZmxvYXRzWzFdICogdGhpcy5fdHdlZW5Qcm9ncmVzcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9mbG9hdHNbNV0gPSB0aGlzLl9mbG9hdHNbM10gKyB0aGlzLl9mbG9hdHNbNF0gKiB0aGlzLl90d2VlblByb2dyZXNzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuYmxlbmQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvblN0YXRlID0gdGhpcy5hbmltYXRpb25TdGF0ZTtcclxuICAgICAgICAgICAgdmFyIGJsZW5kV2VpZ2h0ID0gYW5pbWF0aW9uU3RhdGUuX2JsZW5kU3RhdGUuYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uU3RhdGUud2VpZ2h0ICs9IHRoaXMuX2Zsb2F0c1s1XSAqIGJsZW5kV2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uU3RhdGUuY3VycmVudFRpbWUgKz0gdGhpcy5fZmxvYXRzWzJdICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb25TdGF0ZS53ZWlnaHQgPSB0aGlzLl9mbG9hdHNbNV0gKiBibGVuZFdlaWdodDtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblN0YXRlLmN1cnJlbnRUaW1lID0gdGhpcy5fZmxvYXRzWzJdICogYmxlbmRXZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb25UaW1lbGluZVN0YXRlO1xyXG4gICAgfShkcmFnb25Cb25lcy5Ud2VlblRpbWVsaW5lU3RhdGUpKTtcclxuICAgIGRyYWdvbkJvbmVzLkFuaW1hdGlvblRpbWVsaW5lU3RhdGUgPSBBbmltYXRpb25UaW1lbGluZVN0YXRlO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogLSBUaGUgcHJvcGVydGllcyBvZiB0aGUgb2JqZWN0IGNhcnJ5IGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGFuIGV2ZW50LFxyXG4gICAgICogd2hpY2ggYXJlIHBhc3NlZCBhcyBwYXJhbWV0ZXIgb3IgcGFyYW1ldGVyJ3MgcGFyYW1ldGVyIHRvIGV2ZW50IGxpc3RlbmVycyB3aGVuIGFuIGV2ZW50IG9jY3Vycy5cclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgKi9cclxuICAgIC8qKlxyXG4gICAgICogLSDkuovku7blr7nosaHvvIzljIXlkKvmnInlhbPkuovku7bnmoTln7rmnKzkv6Hmga/vvIzlvZPlj5HnlJ/kuovku7bml7bvvIzor6Xlrp7kvovlsIbkvZzkuLrlj4LmlbDmiJblj4LmlbDnmoTlj4LmlbDkvKDpgJLnu5nkuovku7bkvqblkKzlmajjgIJcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBFdmVudE9iamVjdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoRXZlbnRPYmplY3QsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gRXZlbnRPYmplY3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBFdmVudE9iamVjdC5hY3Rpb25EYXRhVG9JbnN0YW5jZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnN0YW5jZSwgYXJtYXR1cmUpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gMCAvKiBQbGF5ICovKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS50eXBlID0gRXZlbnRPYmplY3QuRlJBTUVfRVZFTlQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS50eXBlID0gZGF0YS50eXBlID09PSAxMCAvKiBGcmFtZSAqLyA/IEV2ZW50T2JqZWN0LkZSQU1FX0VWRU5UIDogRXZlbnRPYmplY3QuU09VTkRfRVZFTlQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zdGFuY2UubmFtZSA9IGRhdGEubmFtZTtcclxuICAgICAgICAgICAgaW5zdGFuY2UuYXJtYXR1cmUgPSBhcm1hdHVyZTtcclxuICAgICAgICAgICAgaW5zdGFuY2UuYWN0aW9uRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmRhdGEgPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmJvbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmJvbmUgPSBhcm1hdHVyZS5nZXRCb25lKGRhdGEuYm9uZS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YS5zbG90ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5zbG90ID0gYXJtYXR1cmUuZ2V0U2xvdChkYXRhLnNsb3QubmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEV2ZW50T2JqZWN0LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbY2xhc3MgZHJhZ29uQm9uZXMuRXZlbnRPYmplY3RdXCI7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBFdmVudE9iamVjdC5wcm90b3R5cGUuX29uQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5hcm1hdHVyZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuYm9uZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuc2xvdCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhdGUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbkRhdGEgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBBbmltYXRpb24gc3RhcnQgcGxheS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOWKqOeUu+W8gOWni+aSreaUvuOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEV2ZW50T2JqZWN0LlNUQVJUID0gXCJzdGFydFwiO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQW5pbWF0aW9uIGxvb3AgcGxheSBjb21wbGV0ZSBvbmNlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Yqo55S75b6q546v5pKt5pS+5a6M5oiQ5LiA5qyh44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRXZlbnRPYmplY3QuTE9PUF9DT01QTEVURSA9IFwibG9vcENvbXBsZXRlXCI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBBbmltYXRpb24gcGxheSBjb21wbGV0ZS5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOWKqOeUu+aSreaUvuWujOaIkOOAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEV2ZW50T2JqZWN0LkNPTVBMRVRFID0gXCJjb21wbGV0ZVwiO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQW5pbWF0aW9uIGZhZGUgaW4gc3RhcnQuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDliqjnlLvmt6HlhaXlvIDlp4vjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBFdmVudE9iamVjdC5GQURFX0lOID0gXCJmYWRlSW5cIjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEFuaW1hdGlvbiBmYWRlIGluIGNvbXBsZXRlLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Yqo55S75reh5YWl5a6M5oiQ44CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRXZlbnRPYmplY3QuRkFERV9JTl9DT01QTEVURSA9IFwiZmFkZUluQ29tcGxldGVcIjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIEFuaW1hdGlvbiBmYWRlIG91dCBzdGFydC5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOWKqOeUu+a3oeWHuuW8gOWni+OAglxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEV2ZW50T2JqZWN0LkZBREVfT1VUID0gXCJmYWRlT3V0XCI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBBbmltYXRpb24gZmFkZSBvdXQgY29tcGxldGUuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDliqjnlLvmt6Hlh7rlrozmiJDjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBFdmVudE9iamVjdC5GQURFX09VVF9DT01QTEVURSA9IFwiZmFkZU91dENvbXBsZXRlXCI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBBbmltYXRpb24gZnJhbWUgZXZlbnQuXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDliqjnlLvluKfkuovku7bjgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBFdmVudE9iamVjdC5GUkFNRV9FVkVOVCA9IFwiZnJhbWVFdmVudFwiO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQW5pbWF0aW9uIGZyYW1lIHNvdW5kIGV2ZW50LlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5Yqo55S75bin5aOw6Z+z5LqL5Lu244CCXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRXZlbnRPYmplY3QuU09VTkRfRVZFTlQgPSBcInNvdW5kRXZlbnRcIjtcclxuICAgICAgICByZXR1cm4gRXZlbnRPYmplY3Q7XHJcbiAgICB9KGRyYWdvbkJvbmVzLkJhc2VPYmplY3QpKTtcclxuICAgIGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0ID0gRXZlbnRPYmplY3Q7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTggRHJhZ29uQm9uZXMgdGVhbSBhbmQgb3RoZXIgY29udHJpYnV0b3JzXHJcbiAqXHJcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2ZcclxuICogdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpblxyXG4gKiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXHJcbiAqIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mXHJcbiAqIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcclxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcbiAqXHJcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxyXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG4gKlxyXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXHJcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUlxyXG4gKiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVJcclxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cclxuICogQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuICovXHJcbnZhciBkcmFnb25Cb25lcztcclxuKGZ1bmN0aW9uIChkcmFnb25Cb25lcykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIERhdGFQYXJzZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gRGF0YVBhcnNlcigpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgRGF0YVBhcnNlci5fZ2V0QXJtYXR1cmVUeXBlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodmFsdWUudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInN0YWdlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIgLyogU3RhZ2UgKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiYXJtYXR1cmVcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBBcm1hdHVyZSAqLztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3ZpZWNsaXBcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBNb3ZpZUNsaXAgKi87XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIEFybWF0dXJlICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEYXRhUGFyc2VyLl9nZXRCb25lVHlwZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJib25lXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogQm9uZSAqLztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdXJmYWNlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogU3VyZmFjZSAqLztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogQm9uZSAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRGF0YVBhcnNlci5fZ2V0RGlzcGxheVR5cGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiaW1hZ2VcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBJbWFnZSAqLztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIgLyogTWVzaCAqLztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJhcm1hdHVyZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIEFybWF0dXJlICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJvdW5kaW5nYm94XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDMgLyogQm91bmRpbmdCb3ggKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicGF0aFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA0IC8qIFBhdGggKi87XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIEltYWdlICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEYXRhUGFyc2VyLl9nZXRCb3VuZGluZ0JveFR5cGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVjdGFuZ2xlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogUmVjdGFuZ2xlICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImVsbGlwc2VcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBFbGxpcHNlICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInBvbHlnb25cIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMiAvKiBQb2x5Z29uICovO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBSZWN0YW5nbGUgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIERhdGFQYXJzZXIuX2dldEFjdGlvblR5cGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicGxheVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIFBsYXkgKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZnJhbWVcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTAgLyogRnJhbWUgKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic291bmRcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTEgLyogU291bmQgKi87XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIFBsYXkgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIERhdGFQYXJzZXIuX2dldEJsZW5kTW9kZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBOb3JtYWwgKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiYWRkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogQWRkICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImFscGhhXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDIgLyogQWxwaGEgKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZGFya2VuXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDMgLyogRGFya2VuICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRpZmZlcmVuY2VcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gNCAvKiBEaWZmZXJlbmNlICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImVyYXNlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUgLyogRXJhc2UgKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiaGFyZGxpZ2h0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDYgLyogSGFyZExpZ2h0ICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImludmVydFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA3IC8qIEludmVydCAqLztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJsYXllclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA4IC8qIExheWVyICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImxpZ2h0ZW5cIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gOSAvKiBMaWdodGVuICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm11bHRpcGx5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEwIC8qIE11bHRpcGx5ICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm92ZXJsYXlcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTEgLyogT3ZlcmxheSAqLztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JlZW5cIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTIgLyogU2NyZWVuICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInN1YnRyYWN0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEzIC8qIFN1YnRyYWN0ICovO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBOb3JtYWwgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIERhdGFQYXJzZXIuX2dldFBvc2l0aW9uTW9kZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLnRvTG9jYWxlTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJwZXJjZW50XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogUGVyY2VudCAqLztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJmaXhlZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIEZpeGVkICovO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBQZXJjZW50ICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEYXRhUGFyc2VyLl9nZXRTcGFjaW5nTW9kZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLnRvTG9jYWxlTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJsZW5ndGhcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBMZW5ndGggKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicGVyY2VudFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyIC8qIFBlcmNlbnQgKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZml4ZWRcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBGaXhlZCAqLztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogTGVuZ3RoICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEYXRhUGFyc2VyLl9nZXRSb3RhdGVNb2RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodmFsdWUudG9Mb2NhbGVMb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInRhbmdlbnRcIjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBUYW5nZW50ICovO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNoYWluXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogQ2hhaW4gKi87XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2hhaW5zY2FsZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAyIC8qIENoYWluU2NhbGUgKi87XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIFRhbmdlbnQgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayBkcmFnb25Cb25lcy5CYXNlRmFjdG9yeSNwYXJzZXRUZXh0dXJlQXRsYXNEYXRhKCl9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rIGRyYWdvbkJvbmVzLkJhc2VGYWN0b3J5I3BhcnNldFRleHR1cmVBdGxhc0RhdGEoKX3jgIJcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIERhdGFQYXJzZXIucGFyc2VEcmFnb25Cb25lc0RhdGEgPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEZXByZWNhdGVkLlwiKTtcclxuICAgICAgICAgICAgaWYgKHJhd0RhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyYWdvbkJvbmVzLkJpbmFyeURhdGFQYXJzZXIuZ2V0SW5zdGFuY2UoKS5wYXJzZURyYWdvbkJvbmVzRGF0YShyYXdEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkcmFnb25Cb25lcy5PYmplY3REYXRhUGFyc2VyLmdldEluc3RhbmNlKCkucGFyc2VEcmFnb25Cb25lc0RhdGEocmF3RGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gRGVwcmVjYXRlZCwgcGxlYXNlIHJlZmVyIHRvIHtAbGluayBkcmFnb25Cb25lcy5CYXNlRmFjdG9yeSNwYXJzZXRUZXh0dXJlQXRsYXNEYXRhKCl9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rIGRyYWdvbkJvbmVzLkJhc2VGYWN0b3J5I3BhcnNldFRleHR1cmVBdGxhc0RhdGEoKX3jgIJcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIERhdGFQYXJzZXIucGFyc2VUZXh0dXJlQXRsYXNEYXRhID0gZnVuY3Rpb24gKHJhd0RhdGEsIHNjYWxlKSB7XHJcbiAgICAgICAgICAgIGlmIChzY2FsZSA9PT0gdm9pZCAwKSB7IHNjYWxlID0gMTsgfVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLlt7Llup/lvINcIik7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0dXJlQXRsYXNEYXRhID0ge307XHJcbiAgICAgICAgICAgIHZhciBzdWJUZXh0dXJlTGlzdCA9IHJhd0RhdGFbRGF0YVBhcnNlci5TVUJfVEVYVFVSRV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdWJUZXh0dXJlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YlRleHR1cmVPYmplY3QgPSBzdWJUZXh0dXJlTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIHZhciBzdWJUZXh0dXJlTmFtZSA9IHN1YlRleHR1cmVPYmplY3RbRGF0YVBhcnNlci5OQU1FXTtcclxuICAgICAgICAgICAgICAgIHZhciBzdWJUZXh0dXJlUmVnaW9uID0gbmV3IGRyYWdvbkJvbmVzLlJlY3RhbmdsZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YlRleHR1cmVGcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBzdWJUZXh0dXJlUmVnaW9uLnggPSBzdWJUZXh0dXJlT2JqZWN0W0RhdGFQYXJzZXIuWF0gLyBzY2FsZTtcclxuICAgICAgICAgICAgICAgIHN1YlRleHR1cmVSZWdpb24ueSA9IHN1YlRleHR1cmVPYmplY3RbRGF0YVBhcnNlci5ZXSAvIHNjYWxlO1xyXG4gICAgICAgICAgICAgICAgc3ViVGV4dHVyZVJlZ2lvbi53aWR0aCA9IHN1YlRleHR1cmVPYmplY3RbRGF0YVBhcnNlci5XSURUSF0gLyBzY2FsZTtcclxuICAgICAgICAgICAgICAgIHN1YlRleHR1cmVSZWdpb24uaGVpZ2h0ID0gc3ViVGV4dHVyZU9iamVjdFtEYXRhUGFyc2VyLkhFSUdIVF0gLyBzY2FsZTtcclxuICAgICAgICAgICAgICAgIGlmIChEYXRhUGFyc2VyLkZSQU1FX1dJRFRIIGluIHN1YlRleHR1cmVPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJUZXh0dXJlRnJhbWUgPSBuZXcgZHJhZ29uQm9uZXMuUmVjdGFuZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViVGV4dHVyZUZyYW1lLnggPSBzdWJUZXh0dXJlT2JqZWN0W0RhdGFQYXJzZXIuRlJBTUVfWF0gLyBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICBzdWJUZXh0dXJlRnJhbWUueSA9IHN1YlRleHR1cmVPYmplY3RbRGF0YVBhcnNlci5GUkFNRV9ZXSAvIHNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YlRleHR1cmVGcmFtZS53aWR0aCA9IHN1YlRleHR1cmVPYmplY3RbRGF0YVBhcnNlci5GUkFNRV9XSURUSF0gLyBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICBzdWJUZXh0dXJlRnJhbWUuaGVpZ2h0ID0gc3ViVGV4dHVyZU9iamVjdFtEYXRhUGFyc2VyLkZSQU1FX0hFSUdIVF0gLyBzY2FsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRleHR1cmVBdGxhc0RhdGFbc3ViVGV4dHVyZU5hbWVdID0geyByZWdpb246IHN1YlRleHR1cmVSZWdpb24sIGZyYW1lOiBzdWJUZXh0dXJlRnJhbWUsIHJvdGF0ZWQ6IGZhbHNlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVBdGxhc0RhdGE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEYXRhUGFyc2VyLkRBVEFfVkVSU0lPTl8yXzMgPSBcIjIuM1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuREFUQV9WRVJTSU9OXzNfMCA9IFwiMy4wXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5EQVRBX1ZFUlNJT05fNF8wID0gXCI0LjBcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkRBVEFfVkVSU0lPTl80XzUgPSBcIjQuNVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuREFUQV9WRVJTSU9OXzVfMCA9IFwiNS4wXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5EQVRBX1ZFUlNJT05fNV81ID0gXCI1LjVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkRBVEFfVkVSU0lPTiA9IERhdGFQYXJzZXIuREFUQV9WRVJTSU9OXzVfNTtcclxuICAgICAgICBEYXRhUGFyc2VyLkRBVEFfVkVSU0lPTlMgPSBbXHJcbiAgICAgICAgICAgIERhdGFQYXJzZXIuREFUQV9WRVJTSU9OXzRfMCxcclxuICAgICAgICAgICAgRGF0YVBhcnNlci5EQVRBX1ZFUlNJT05fNF81LFxyXG4gICAgICAgICAgICBEYXRhUGFyc2VyLkRBVEFfVkVSU0lPTl81XzAsXHJcbiAgICAgICAgICAgIERhdGFQYXJzZXIuREFUQV9WRVJTSU9OXzVfNVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgRGF0YVBhcnNlci5URVhUVVJFX0FUTEFTID0gXCJ0ZXh0dXJlQXRsYXNcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlNVQl9URVhUVVJFID0gXCJTdWJUZXh0dXJlXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5GT1JNQVQgPSBcImZvcm1hdFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuSU1BR0VfUEFUSCA9IFwiaW1hZ2VQYXRoXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5XSURUSCA9IFwid2lkdGhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkhFSUdIVCA9IFwiaGVpZ2h0XCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5ST1RBVEVEID0gXCJyb3RhdGVkXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5GUkFNRV9YID0gXCJmcmFtZVhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkZSQU1FX1kgPSBcImZyYW1lWVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuRlJBTUVfV0lEVEggPSBcImZyYW1lV2lkdGhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkZSQU1FX0hFSUdIVCA9IFwiZnJhbWVIZWlnaHRcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkRSQURPTl9CT05FUyA9IFwiZHJhZ29uQm9uZXNcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlVTRVJfREFUQSA9IFwidXNlckRhdGFcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkFSTUFUVVJFID0gXCJhcm1hdHVyZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuQk9ORSA9IFwiYm9uZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuU1VSRkFDRSA9IFwic3VyZmFjZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuU0xPVCA9IFwic2xvdFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuQ09OU1RSQUlOVCA9IFwiY29uc3RyYWludFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuSUsgPSBcImlrXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5QQVRIX0NPTlNUUkFJTlQgPSBcInBhdGhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlNLSU4gPSBcInNraW5cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkRJU1BMQVkgPSBcImRpc3BsYXlcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkFOSU1BVElPTiA9IFwiYW5pbWF0aW9uXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5aX09SREVSID0gXCJ6T3JkZXJcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkZGRCA9IFwiZmZkXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5GUkFNRSA9IFwiZnJhbWVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlRSQU5TTEFURV9GUkFNRSA9IFwidHJhbnNsYXRlRnJhbWVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlJPVEFURV9GUkFNRSA9IFwicm90YXRlRnJhbWVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlNDQUxFX0ZSQU1FID0gXCJzY2FsZUZyYW1lXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5ESVNQTEFZX0ZSQU1FID0gXCJkaXNwbGF5RnJhbWVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkNPTE9SX0ZSQU1FID0gXCJjb2xvckZyYW1lXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5ERUZBVUxUX0FDVElPTlMgPSBcImRlZmF1bHRBY3Rpb25zXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5BQ1RJT05TID0gXCJhY3Rpb25zXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5FVkVOVFMgPSBcImV2ZW50c1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuSU5UUyA9IFwiaW50c1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuRkxPQVRTID0gXCJmbG9hdHNcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlNUUklOR1MgPSBcInN0cmluZ3NcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkNBTlZBUyA9IFwiY2FudmFzXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5UUkFOU0ZPUk0gPSBcInRyYW5zZm9ybVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuUElWT1QgPSBcInBpdm90XCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5BQUJCID0gXCJhYWJiXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5DT0xPUiA9IFwiY29sb3JcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlZFUlNJT04gPSBcInZlcnNpb25cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkNPTVBBVElCTEVfVkVSU0lPTiA9IFwiY29tcGF0aWJsZVZlcnNpb25cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkZSQU1FX1JBVEUgPSBcImZyYW1lUmF0ZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuVFlQRSA9IFwidHlwZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuU1VCX1RZUEUgPSBcInN1YlR5cGVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLk5BTUUgPSBcIm5hbWVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlBBUkVOVCA9IFwicGFyZW50XCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5UQVJHRVQgPSBcInRhcmdldFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuU1RBR0UgPSBcInN0YWdlXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TSEFSRSA9IFwic2hhcmVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlBBVEggPSBcInBhdGhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkxFTkdUSCA9IFwibGVuZ3RoXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5ESVNQTEFZX0lOREVYID0gXCJkaXNwbGF5SW5kZXhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkJMRU5EX01PREUgPSBcImJsZW5kTW9kZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuSU5IRVJJVF9UUkFOU0xBVElPTiA9IFwiaW5oZXJpdFRyYW5zbGF0aW9uXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5JTkhFUklUX1JPVEFUSU9OID0gXCJpbmhlcml0Um90YXRpb25cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLklOSEVSSVRfU0NBTEUgPSBcImluaGVyaXRTY2FsZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuSU5IRVJJVF9SRUZMRUNUSU9OID0gXCJpbmhlcml0UmVmbGVjdGlvblwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuSU5IRVJJVF9BTklNQVRJT04gPSBcImluaGVyaXRBbmltYXRpb25cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLklOSEVSSVRfREVGT1JNID0gXCJpbmhlcml0RGVmb3JtXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TRUdNRU5UX1ggPSBcInNlZ21lbnRYXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TRUdNRU5UX1kgPSBcInNlZ21lbnRZXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5CRU5EX1BPU0lUSVZFID0gXCJiZW5kUG9zaXRpdmVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkNIQUlOID0gXCJjaGFpblwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuV0VJR0hUID0gXCJ3ZWlnaHRcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkZBREVfSU5fVElNRSA9IFwiZmFkZUluVGltZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuUExBWV9USU1FUyA9IFwicGxheVRpbWVzXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TQ0FMRSA9IFwic2NhbGVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLk9GRlNFVCA9IFwib2Zmc2V0XCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5QT1NJVElPTiA9IFwicG9zaXRpb25cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkRVUkFUSU9OID0gXCJkdXJhdGlvblwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuVFdFRU5fRUFTSU5HID0gXCJ0d2VlbkVhc2luZ1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuVFdFRU5fUk9UQVRFID0gXCJ0d2VlblJvdGF0ZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuVFdFRU5fU0NBTEUgPSBcInR3ZWVuU2NhbGVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkNMT0NLX1dJU0UgPSBcImNsb2Nrd2lzZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuQ1VSVkUgPSBcImN1cnZlXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TT1VORCA9IFwic291bmRcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkVWRU5UID0gXCJldmVudFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuQUNUSU9OID0gXCJhY3Rpb25cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlggPSBcInhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlkgPSBcInlcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlNLRVdfWCA9IFwic2tYXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TS0VXX1kgPSBcInNrWVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuU0NBTEVfWCA9IFwic2NYXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TQ0FMRV9ZID0gXCJzY1lcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlZBTFVFID0gXCJ2YWx1ZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuUk9UQVRFID0gXCJyb3RhdGVcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlNLRVcgPSBcInNrZXdcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkFMUEhBX09GRlNFVCA9IFwiYU9cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlJFRF9PRkZTRVQgPSBcInJPXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5HUkVFTl9PRkZTRVQgPSBcImdPXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5CTFVFX09GRlNFVCA9IFwiYk9cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkFMUEhBX01VTFRJUExJRVIgPSBcImFNXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5SRURfTVVMVElQTElFUiA9IFwick1cIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkdSRUVOX01VTFRJUExJRVIgPSBcImdNXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5CTFVFX01VTFRJUExJRVIgPSBcImJNXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5VVlMgPSBcInV2c1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuVkVSVElDRVMgPSBcInZlcnRpY2VzXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5UUklBTkdMRVMgPSBcInRyaWFuZ2xlc1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuV0VJR0hUUyA9IFwid2VpZ2h0c1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuU0xPVF9QT1NFID0gXCJzbG90UG9zZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuQk9ORV9QT1NFID0gXCJib25lUG9zZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuR0xVRV9XRUlHSFRTID0gXCJnbHVlV2VpZ2h0c1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuR0xVRV9NRVNIRVMgPSBcImdsdWVNZXNoZXNcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkJPTkVTID0gXCJib25lc1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuUE9TSVRJT05fTU9ERSA9IFwicG9zaXRpb25Nb2RlXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5TUEFDSU5HX01PREUgPSBcInNwYWNpbmdNb2RlXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5ST1RBVEVfTU9ERSA9IFwicm90YXRlTW9kZVwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuU1BBQ0lORyA9IFwic3BhY2luZ1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuUk9UQVRFX09GRlNFVCA9IFwicm90YXRlT2Zmc2V0XCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5ST1RBVEVfTUlYID0gXCJyb3RhdGVNaXhcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLlRSQU5TTEFURV9NSVggPSBcInRyYW5zbGF0ZU1peFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuVEFSR0VUX0RJU1BMQVkgPSBcInRhcmdldERpc3BsYXlcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkNMT1NFRCA9IFwiY2xvc2VkXCI7XHJcbiAgICAgICAgRGF0YVBhcnNlci5DT05TVEFOVF9TUEVFRCA9IFwiY29uc3RhbnRTcGVlZFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuVkVSVEVYX0NPVU5UID0gXCJ2ZXJ0ZXhDb3VudFwiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuTEVOR1RIUyA9IFwibGVuZ3Roc1wiO1xyXG4gICAgICAgIERhdGFQYXJzZXIuR09UT19BTkRfUExBWSA9IFwiZ290b0FuZFBsYXlcIjtcclxuICAgICAgICBEYXRhUGFyc2VyLkRFRkFVTFRfTkFNRSA9IFwiZGVmYXVsdFwiO1xyXG4gICAgICAgIHJldHVybiBEYXRhUGFyc2VyO1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIgPSBEYXRhUGFyc2VyO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBPYmplY3REYXRhUGFyc2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhPYmplY3REYXRhUGFyc2VyLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIE9iamVjdERhdGFQYXJzZXIoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBfdGhpcy5fcmF3VGV4dHVyZUF0bGFzSW5kZXggPSAwO1xyXG4gICAgICAgICAgICBfdGhpcy5fcmF3Qm9uZXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2RhdGEgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICBfdGhpcy5fYXJtYXR1cmUgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICBfdGhpcy5fYm9uZSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIF90aGlzLl9zdXJmYWNlID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgX3RoaXMuX3Nsb3QgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICBfdGhpcy5fc2tpbiA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIF90aGlzLl9tZXNoID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbiA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIF90aGlzLl90aW1lbGluZSA9IG51bGw7IC8vXHJcbiAgICAgICAgICAgIF90aGlzLl9yYXdUZXh0dXJlQXRsYXNlcyA9IG51bGw7XHJcbiAgICAgICAgICAgIF90aGlzLl9kZWZhdWx0Q29sb3JPZmZzZXQgPSAtMTtcclxuICAgICAgICAgICAgX3RoaXMuX3ByZXZDbG9ja3dpc2UgPSAwO1xyXG4gICAgICAgICAgICBfdGhpcy5fcHJldlJvdGF0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICBfdGhpcy5faGVscE1hdHJpeEEgPSBuZXcgZHJhZ29uQm9uZXMuTWF0cml4KCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9oZWxwTWF0cml4QiA9IG5ldyBkcmFnb25Cb25lcy5NYXRyaXgoKTtcclxuICAgICAgICAgICAgX3RoaXMuX2hlbHBUcmFuc2Zvcm0gPSBuZXcgZHJhZ29uQm9uZXMuVHJhbnNmb3JtKCk7XHJcbiAgICAgICAgICAgIF90aGlzLl9oZWxwQ29sb3JUcmFuc2Zvcm0gPSBuZXcgZHJhZ29uQm9uZXMuQ29sb3JUcmFuc2Zvcm0oKTtcclxuICAgICAgICAgICAgX3RoaXMuX2hlbHBQb2ludCA9IG5ldyBkcmFnb25Cb25lcy5Qb2ludCgpO1xyXG4gICAgICAgICAgICBfdGhpcy5faGVscEFycmF5ID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9pbnRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fZmxvYXRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fZnJhbWVJbnRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fZnJhbWVGbG9hdEFycmF5ID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9mcmFtZUFycmF5ID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl90aW1lbGluZUFycmF5ID0gW107XHJcbiAgICAgICAgICAgIF90aGlzLl9jYWNoZVJhd01lc2hlcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fY2FjaGVNZXNoZXMgPSBbXTtcclxuICAgICAgICAgICAgX3RoaXMuX2FjdGlvbkZyYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5fd2VpZ2h0U2xvdFBvc2UgPSB7fTtcclxuICAgICAgICAgICAgX3RoaXMuX3dlaWdodEJvbmVQb3NlcyA9IHt9O1xyXG4gICAgICAgICAgICBfdGhpcy5fY2FjaGVCb25lcyA9IHt9O1xyXG4gICAgICAgICAgICBfdGhpcy5fc2xvdENoaWxkQWN0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIuX2dldEJvb2xlYW4gPSBmdW5jdGlvbiAocmF3RGF0YSwga2V5LCBkZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByYXdEYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJOYU5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZmFsc2VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVuZGVmaW5lZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlciA9IGZ1bmN0aW9uIChyYXdEYXRhLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5IGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJhd0RhdGFba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gXCJOYU5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gK3ZhbHVlIHx8IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyA9IGZ1bmN0aW9uIChyYXdEYXRhLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5IGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJhd0RhdGFba2V5XTtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KGkpID4gMjU1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9nZXRDdXJ2ZVBvaW50ID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMsIHg0LCB5NCwgdCwgcmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHZhciBsX3QgPSAxLjAgLSB0O1xyXG4gICAgICAgICAgICB2YXIgcG93QSA9IGxfdCAqIGxfdDtcclxuICAgICAgICAgICAgdmFyIHBvd0IgPSB0ICogdDtcclxuICAgICAgICAgICAgdmFyIGtBID0gbF90ICogcG93QTtcclxuICAgICAgICAgICAgdmFyIGtCID0gMy4wICogdCAqIHBvd0E7XHJcbiAgICAgICAgICAgIHZhciBrQyA9IDMuMCAqIGxfdCAqIHBvd0I7XHJcbiAgICAgICAgICAgIHZhciBrRCA9IHQgKiBwb3dCO1xyXG4gICAgICAgICAgICByZXN1bHQueCA9IGtBICogeDEgKyBrQiAqIHgyICsga0MgKiB4MyArIGtEICogeDQ7XHJcbiAgICAgICAgICAgIHJlc3VsdC55ID0ga0EgKiB5MSArIGtCICogeTIgKyBrQyAqIHkzICsga0QgKiB5NDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9zYW1wbGluZ0Vhc2luZ0N1cnZlID0gZnVuY3Rpb24gKGN1cnZlLCBzYW1wbGVzKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJ2ZUNvdW50ID0gY3VydmUubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgc3RlcEluZGV4ID0gLTI7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gc2FtcGxlcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ID0gKGkgKyAxKSAvIChsICsgMSk7IC8vIGZsb2F0XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKHN0ZXBJbmRleCArIDYgPCBjdXJ2ZUNvdW50ID8gY3VydmVbc3RlcEluZGV4ICsgNl0gOiAxKSA8IHQpIHsgLy8gc3RlcEluZGV4ICsgMyAqIDJcclxuICAgICAgICAgICAgICAgICAgICBzdGVwSW5kZXggKz0gNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBpc0luQ3VydmUgPSBzdGVwSW5kZXggPj0gMCAmJiBzdGVwSW5kZXggKyA2IDwgY3VydmVDb3VudDtcclxuICAgICAgICAgICAgICAgIHZhciB4MSA9IGlzSW5DdXJ2ZSA/IGN1cnZlW3N0ZXBJbmRleF0gOiAwLjA7XHJcbiAgICAgICAgICAgICAgICB2YXIgeTEgPSBpc0luQ3VydmUgPyBjdXJ2ZVtzdGVwSW5kZXggKyAxXSA6IDAuMDtcclxuICAgICAgICAgICAgICAgIHZhciB4MiA9IGN1cnZlW3N0ZXBJbmRleCArIDJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHkyID0gY3VydmVbc3RlcEluZGV4ICsgM107XHJcbiAgICAgICAgICAgICAgICB2YXIgeDMgPSBjdXJ2ZVtzdGVwSW5kZXggKyA0XTtcclxuICAgICAgICAgICAgICAgIHZhciB5MyA9IGN1cnZlW3N0ZXBJbmRleCArIDVdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHg0ID0gaXNJbkN1cnZlID8gY3VydmVbc3RlcEluZGV4ICsgNl0gOiAxLjA7XHJcbiAgICAgICAgICAgICAgICB2YXIgeTQgPSBpc0luQ3VydmUgPyBjdXJ2ZVtzdGVwSW5kZXggKyA3XSA6IDEuMDtcclxuICAgICAgICAgICAgICAgIHZhciBsb3dlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgIHZhciBoaWdoZXIgPSAxLjA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaGlnaGVyIC0gbG93ZXIgPiAwLjAwMDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudGFnZSA9IChoaWdoZXIgKyBsb3dlcikgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2V0Q3VydmVQb2ludCh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQsIHBlcmNlbnRhZ2UsIHRoaXMuX2hlbHBQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgLSB0aGlzLl9oZWxwUG9pbnQueCA+IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlciA9IHBlcmNlbnRhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWdoZXIgPSBwZXJjZW50YWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNhbXBsZXNbaV0gPSB0aGlzLl9oZWxwUG9pbnQueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlQWN0aW9uRGF0YUluRnJhbWUgPSBmdW5jdGlvbiAocmF3RGF0YSwgZnJhbWVTdGFydCwgYm9uZSwgc2xvdCkge1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5FVkVOVCBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXJnZUFjdGlvbkZyYW1lKHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5FVkVOVF0sIGZyYW1lU3RhcnQsIDEwIC8qIEZyYW1lICovLCBib25lLCBzbG90KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TT1VORCBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tZXJnZUFjdGlvbkZyYW1lKHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TT1VORF0sIGZyYW1lU3RhcnQsIDExIC8qIFNvdW5kICovLCBib25lLCBzbG90KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BQ1RJT04gaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVyZ2VBY3Rpb25GcmFtZShyYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQUNUSU9OXSwgZnJhbWVTdGFydCwgMCAvKiBQbGF5ICovLCBib25lLCBzbG90KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5FVkVOVFMgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVyZ2VBY3Rpb25GcmFtZShyYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRVZFTlRTXSwgZnJhbWVTdGFydCwgMTAgLyogRnJhbWUgKi8sIGJvbmUsIHNsb3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFDVElPTlMgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWVyZ2VBY3Rpb25GcmFtZShyYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQUNUSU9OU10sIGZyYW1lU3RhcnQsIDAgLyogUGxheSAqLywgYm9uZSwgc2xvdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9tZXJnZUFjdGlvbkZyYW1lID0gZnVuY3Rpb24gKHJhd0RhdGEsIGZyYW1lU3RhcnQsIHR5cGUsIGJvbmUsIHNsb3QpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGlvbk9mZnNldCA9IGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5ID8gdGhpcy5fYXJtYXR1cmUuYWN0aW9ucy5zaXplKCkgOiB0aGlzLl9hcm1hdHVyZS5hY3Rpb25zLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLl9wYXJzZUFjdGlvbkRhdGEocmF3RGF0YSwgdHlwZSwgYm9uZSwgc2xvdCk7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZUluZGV4ID0gMDtcclxuICAgICAgICAgICAgdmFyIGZyYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhY3Rpb25zXzIgPSBhY3Rpb25zOyBfaSA8IGFjdGlvbnNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhY3Rpb25zXzJbX2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUuYWRkQWN0aW9uKGFjdGlvbiwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb25GcmFtZXMubGVuZ3RoID09PSAwKSB7IC8vIEZpcnN0IGZyYW1lLlxyXG4gICAgICAgICAgICAgICAgZnJhbWUgPSBuZXcgQWN0aW9uRnJhbWUoKTtcclxuICAgICAgICAgICAgICAgIGZyYW1lLmZyYW1lU3RhcnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aW9uRnJhbWVzLnB1c2goZnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgZnJhbWUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgX2IgPSB0aGlzLl9hY3Rpb25GcmFtZXM7IF9hIDwgX2IubGVuZ3RoOyBfYSsrKSB7IC8vIEdldCBzYW1lIGZyYW1lLlxyXG4gICAgICAgICAgICAgICAgdmFyIGVhY2hGcmFtZSA9IF9iW19hXTtcclxuICAgICAgICAgICAgICAgIGlmIChlYWNoRnJhbWUuZnJhbWVTdGFydCA9PT0gZnJhbWVTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lID0gZWFjaEZyYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZWFjaEZyYW1lLmZyYW1lU3RhcnQgPiBmcmFtZVN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmcmFtZUluZGV4Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGZyYW1lID09PSBudWxsKSB7IC8vIENyZWF0ZSBhbmQgY2FjaGUgZnJhbWUuXHJcbiAgICAgICAgICAgICAgICBmcmFtZSA9IG5ldyBBY3Rpb25GcmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgZnJhbWUuZnJhbWVTdGFydCA9IGZyYW1lU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25GcmFtZXMuc3BsaWNlKGZyYW1lSW5kZXggKyAxLCAwLCBmcmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY3Rpb25zLmxlbmd0aDsgKytpKSB7IC8vIENhY2hlIGFjdGlvbiBvZmZzZXRzLlxyXG4gICAgICAgICAgICAgICAgZnJhbWUuYWN0aW9ucy5wdXNoKGFjdGlvbk9mZnNldCArIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VBcm1hdHVyZSA9IGZ1bmN0aW9uIChyYXdEYXRhLCBzY2FsZSkge1xyXG4gICAgICAgICAgICB2YXIgYXJtYXR1cmUgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGEpO1xyXG4gICAgICAgICAgICBhcm1hdHVyZS5uYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuTkFNRSwgXCJcIik7XHJcbiAgICAgICAgICAgIGFybWF0dXJlLmZyYW1lUmF0ZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FX1JBVEUsIHRoaXMuX2RhdGEuZnJhbWVSYXRlKTtcclxuICAgICAgICAgICAgYXJtYXR1cmUuc2NhbGUgPSBzY2FsZTtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFlQRSBpbiByYXdEYXRhICYmIHR5cGVvZiByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFlQRV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIGFybWF0dXJlLnR5cGUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLl9nZXRBcm1hdHVyZVR5cGUocmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRZUEVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFybWF0dXJlLnR5cGUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UWVBFLCAwIC8qIEFybWF0dXJlICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYXJtYXR1cmUuZnJhbWVSYXRlID09PSAwKSB7IC8vIERhdGEgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICBhcm1hdHVyZS5mcmFtZVJhdGUgPSAyNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hcm1hdHVyZSA9IGFybWF0dXJlO1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5DQU5WQVMgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd0NhbnZhcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5DQU5WQVNdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkNhbnZhc0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ09MT1IgaW4gcmF3Q2FudmFzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhhc0JhY2tncm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhhc0JhY2tncm91bmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbnZhcy5jb2xvciA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdDYW52YXMsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ09MT1IsIDApO1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLnggPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3Q2FudmFzLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlgsIDApICogYXJtYXR1cmUuc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjYW52YXMueSA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdDYW52YXMsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuWSwgMCkgKiBhcm1hdHVyZS5zY2FsZTtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdDYW52YXMsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuV0lEVEgsIDApICogYXJtYXR1cmUuc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0NhbnZhcywgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5IRUlHSFQsIDApICogYXJtYXR1cmUuc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBhcm1hdHVyZS5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQUFCQiBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3QUFCQiA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BQUJCXTtcclxuICAgICAgICAgICAgICAgIGFybWF0dXJlLmFhYmIueCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdBQUJCLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlgsIDAuMCkgKiBhcm1hdHVyZS5zY2FsZTtcclxuICAgICAgICAgICAgICAgIGFybWF0dXJlLmFhYmIueSA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdBQUJCLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlksIDAuMCkgKiBhcm1hdHVyZS5zY2FsZTtcclxuICAgICAgICAgICAgICAgIGFybWF0dXJlLmFhYmIud2lkdGggPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3QUFCQiwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5XSURUSCwgMC4wKSAqIGFybWF0dXJlLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgYXJtYXR1cmUuYWFiYi5oZWlnaHQgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3QUFCQiwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5IRUlHSFQsIDAuMCkgKiBhcm1hdHVyZS5zY2FsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CT05FIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdCb25lcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CT05FXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgcmF3Qm9uZXNfMSA9IHJhd0JvbmVzOyBfaSA8IHJhd0JvbmVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0JvbmUgPSByYXdCb25lc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50TmFtZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdCb25lLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlBBUkVOVCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvbmUgPSB0aGlzLl9wYXJzZUJvbmUocmF3Qm9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudE5hbWUubGVuZ3RoID4gMCkgeyAvLyBHZXQgYm9uZSBwYXJlbnQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IGFybWF0dXJlLmdldEJvbmUocGFyZW50TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRfMSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZS5wYXJlbnQgPSBwYXJlbnRfMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsgLy8gQ2FjaGUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwYXJlbnROYW1lIGluIHRoaXMuX2NhY2hlQm9uZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVCb25lc1twYXJlbnROYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVCb25lc1twYXJlbnROYW1lXS5wdXNoKGJvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChib25lLm5hbWUgaW4gdGhpcy5fY2FjaGVCb25lcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIF9iID0gdGhpcy5fY2FjaGVCb25lc1tib25lLm5hbWVdOyBfYSA8IF9iLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gX2JbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQucGFyZW50ID0gYm9uZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FjaGVCb25lc1tib25lLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZS5hZGRCb25lKGJvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jhd0JvbmVzLnB1c2goYm9uZSk7IC8vIENhY2hlIHJhdyBib25lcyBzb3J0LlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLklLIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdJS1MgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuSUtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCByYXdJS1NfMSA9IHJhd0lLUzsgX2MgPCByYXdJS1NfMS5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3SUsgPSByYXdJS1NfMVtfY107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSB0aGlzLl9wYXJzZUlLQ29uc3RyYWludChyYXdJSyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJtYXR1cmUuYWRkQ29uc3RyYWludChjb25zdHJhaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXJtYXR1cmUuc29ydEJvbmVzKCk7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNMT1QgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHpPcmRlciA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3U2xvdHMgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0xPVF07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIHJhd1Nsb3RzXzEgPSByYXdTbG90czsgX2QgPCByYXdTbG90c18xLmxlbmd0aDsgX2QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdTbG90ID0gcmF3U2xvdHNfMVtfZF07XHJcbiAgICAgICAgICAgICAgICAgICAgYXJtYXR1cmUuYWRkU2xvdCh0aGlzLl9wYXJzZVNsb3QocmF3U2xvdCwgek9yZGVyKyspKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TS0lOIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdTa2lucyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TS0lOXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9lID0gMCwgcmF3U2tpbnNfMSA9IHJhd1NraW5zOyBfZSA8IHJhd1NraW5zXzEubGVuZ3RoOyBfZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1NraW4gPSByYXdTa2luc18xW19lXTtcclxuICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZS5hZGRTa2luKHRoaXMuX3BhcnNlU2tpbihyYXdTa2luKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUEFUSF9DT05TVFJBSU5UIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdQYXRocyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5QQVRIX0NPTlNUUkFJTlRdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2YgPSAwLCByYXdQYXRoc18xID0gcmF3UGF0aHM7IF9mIDwgcmF3UGF0aHNfMS5sZW5ndGg7IF9mKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3UGF0aCA9IHJhd1BhdGhzXzFbX2ZdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25zdHJhaW50ID0gdGhpcy5fcGFyc2VQYXRoQ29uc3RyYWludChyYXdQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZS5hZGRDb25zdHJhaW50KGNvbnN0cmFpbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX2NhY2hlUmF3TWVzaGVzLmxlbmd0aDsgaSA8IGw7ICsraSkgeyAvLyBMaW5rIGdsdWUgbWVzaC5cclxuICAgICAgICAgICAgICAgIHZhciByYXdNZXNoRGF0YSA9IHRoaXMuX2NhY2hlUmF3TWVzaGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5HTFVFX1dFSUdIVFMgaW4gcmF3TWVzaERhdGEpIHx8ICEoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5HTFVFX01FU0hFUyBpbiByYXdNZXNoRGF0YSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlTWVzaEdsdWUocmF3TWVzaERhdGEsIHRoaXMuX2NhY2hlTWVzaGVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMuX2NhY2hlUmF3TWVzaGVzLmxlbmd0aDsgaSA8IGw7ICsraSkgeyAvLyBMaW5rIG1lc2guXHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3RGF0YV8xID0gdGhpcy5fY2FjaGVSYXdNZXNoZXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgc2hhcmVOYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGFfMSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TSEFSRSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcmVOYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHNraW5OYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGFfMSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TS0lOLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkRFRkFVTFRfTkFNRSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2tpbk5hbWUubGVuZ3RoID09PSAwKSB7IC8vIFxyXG4gICAgICAgICAgICAgICAgICAgIHNraW5OYW1lID0gZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ERUZBVUxUX05BTUU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgc2hhcmVNZXNoID0gYXJtYXR1cmUuZ2V0TWVzaChza2luTmFtZSwgXCJcIiwgc2hhcmVOYW1lKTsgLy8gVE9ETyBzbG90O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXJlTWVzaCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBFcnJvci5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtZXNoID0gdGhpcy5fY2FjaGVNZXNoZXNbaV07XHJcbiAgICAgICAgICAgICAgICBtZXNoLnZlcnRpY2VzLnNoYXJlRnJvbShzaGFyZU1lc2gudmVydGljZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFOSU1BVElPTiBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3QW5pbWF0aW9ucyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BTklNQVRJT05dO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2cgPSAwLCByYXdBbmltYXRpb25zXzEgPSByYXdBbmltYXRpb25zOyBfZyA8IHJhd0FuaW1hdGlvbnNfMS5sZW5ndGg7IF9nKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3QW5pbWF0aW9uID0gcmF3QW5pbWF0aW9uc18xW19nXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gdGhpcy5fcGFyc2VBbmltYXRpb24ocmF3QW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZS5hZGRBbmltYXRpb24oYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ERUZBVUxUX0FDVElPTlMgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLl9wYXJzZUFjdGlvbkRhdGEocmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkRFRkFVTFRfQUNUSU9OU10sIDAgLyogUGxheSAqLywgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaCA9IDAsIGFjdGlvbnNfMyA9IGFjdGlvbnM7IF9oIDwgYWN0aW9uc18zLmxlbmd0aDsgX2grKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBhY3Rpb25zXzNbX2hdO1xyXG4gICAgICAgICAgICAgICAgICAgIGFybWF0dXJlLmFkZEFjdGlvbihhY3Rpb24sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gMCAvKiBQbGF5ICovKSB7IC8vIFNldCBkZWZhdWx0IGFuaW1hdGlvbiBmcm9tIGRlZmF1bHQgYWN0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gYXJtYXR1cmUuZ2V0QW5pbWF0aW9uKGFjdGlvbi5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJtYXR1cmUuZGVmYXVsdEFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BQ1RJT05TIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5fcGFyc2VBY3Rpb25EYXRhKHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BQ1RJT05TXSwgMCAvKiBQbGF5ICovLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9qID0gMCwgYWN0aW9uc180ID0gYWN0aW9uczsgX2ogPCBhY3Rpb25zXzQubGVuZ3RoOyBfaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGFjdGlvbnNfNFtfal07XHJcbiAgICAgICAgICAgICAgICAgICAgYXJtYXR1cmUuYWRkQWN0aW9uKGFjdGlvbiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIENsZWFyIGhlbHBlci5cclxuICAgICAgICAgICAgdGhpcy5fcmF3Qm9uZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fY2FjaGVSYXdNZXNoZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fY2FjaGVNZXNoZXMubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fYXJtYXR1cmUgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX3dlaWdodFNsb3RQb3NlKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fd2VpZ2h0U2xvdFBvc2Vba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl93ZWlnaHRCb25lUG9zZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl93ZWlnaHRCb25lUG9zZXNba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl9jYWNoZUJvbmVzKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FjaGVCb25lc1trXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX3Nsb3RDaGlsZEFjdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zbG90Q2hpbGRBY3Rpb25zW2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhcm1hdHVyZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZUJvbmUgPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IDAgLyogQm9uZSAqLztcclxuICAgICAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5fYXJtYXR1cmUuc2NhbGU7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRZUEUgaW4gcmF3RGF0YSAmJiB0eXBlb2YgcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRZUEVdID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5fZ2V0Qm9uZVR5cGUocmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRZUEVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UWVBFLCAwIC8qIEJvbmUgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAwIC8qIEJvbmUgKi8pIHtcclxuICAgICAgICAgICAgICAgIHZhciBib25lID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQm9uZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgYm9uZS5pbmhlcml0VHJhbnNsYXRpb24gPSBPYmplY3REYXRhUGFyc2VyLl9nZXRCb29sZWFuKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuSU5IRVJJVF9UUkFOU0xBVElPTiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBib25lLmluaGVyaXRSb3RhdGlvbiA9IE9iamVjdERhdGFQYXJzZXIuX2dldEJvb2xlYW4ocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5JTkhFUklUX1JPVEFUSU9OLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGJvbmUuaW5oZXJpdFNjYWxlID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0Qm9vbGVhbihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLklOSEVSSVRfU0NBTEUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgYm9uZS5pbmhlcml0UmVmbGVjdGlvbiA9IE9iamVjdERhdGFQYXJzZXIuX2dldEJvb2xlYW4ocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5JTkhFUklUX1JFRkxFQ1RJT04sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgYm9uZS5sZW5ndGggPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5MRU5HVEgsIDApICogc2NhbGU7XHJcbiAgICAgICAgICAgICAgICBib25lLm5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRSQU5TRk9STSBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VUcmFuc2Zvcm0ocmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRSQU5TRk9STV0sIGJvbmUudHJhbnNmb3JtLCBzY2FsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9uZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc3VyZmFjZSA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLlN1cmZhY2VEYXRhKTtcclxuICAgICAgICAgICAgc3VyZmFjZS5uYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuTkFNRSwgXCJcIik7XHJcbiAgICAgICAgICAgIHN1cmZhY2Uuc2VnbWVudFggPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TRUdNRU5UX1gsIDApO1xyXG4gICAgICAgICAgICBzdXJmYWNlLnNlZ21lbnRZID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0VHTUVOVF9ZLCAwKTtcclxuICAgICAgICAgICAgc3VyZmFjZS52ZXJ0aWNlcy5sZW5ndGggPSAoc3VyZmFjZS5zZWdtZW50WCArIDEpICogKHN1cmZhY2Uuc2VnbWVudFkgKyAxKSAqIDI7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlZFUlRJQ0VTIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdWZXJ0aWNlcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5WRVJUSUNFU107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN1cmZhY2UudmVydGljZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCByYXdWZXJ0aWNlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VyZmFjZS52ZXJ0aWNlc1tpXSA9IHJhd1ZlcnRpY2VzW2ldICogc2NhbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdXJmYWNlLnZlcnRpY2VzW2ldID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc3VyZmFjZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZUlLQ29uc3RyYWludCA9IGZ1bmN0aW9uIChyYXdEYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBib25lID0gdGhpcy5fYXJtYXR1cmUuZ2V0Qm9uZShPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CT05FLCBcIlwiKSk7XHJcbiAgICAgICAgICAgIGlmIChib25lID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fYXJtYXR1cmUuZ2V0Qm9uZShPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UQVJHRVQsIFwiXCIpKTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5JS0NvbnN0cmFpbnREYXRhKTtcclxuICAgICAgICAgICAgY29uc3RyYWludC5zY2FsZUVuYWJsZWQgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRCb29sZWFuKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0NBTEUsIGZhbHNlKTtcclxuICAgICAgICAgICAgY29uc3RyYWludC5iZW5kUG9zaXRpdmUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRCb29sZWFuKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQkVORF9QT1NJVElWRSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQud2VpZ2h0ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuV0VJR0hULCAxLjApO1xyXG4gICAgICAgICAgICBjb25zdHJhaW50Lm5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgY29uc3RyYWludC50eXBlID0gMCAvKiBJSyAqLztcclxuICAgICAgICAgICAgY29uc3RyYWludC50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgIHZhciBjaGFpbiA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkNIQUlOLCAwKTtcclxuICAgICAgICAgICAgaWYgKGNoYWluID4gMCAmJiBib25lLnBhcmVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3RyYWludC5yb290ID0gYm9uZS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50LmJvbmUgPSBib25lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3RyYWludC5yb290ID0gYm9uZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQuYm9uZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cmFpbnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VQYXRoQ29uc3RyYWludCA9IGZ1bmN0aW9uIChyYXdEYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl9hcm1hdHVyZS5nZXRTbG90KE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRBUkdFVCwgXCJcIikpO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdFNraW4gPSB0aGlzLl9hcm1hdHVyZS5kZWZhdWx0U2tpbjtcclxuICAgICAgICAgICAgaWYgKGRlZmF1bHRTa2luID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL1RPRE9cclxuICAgICAgICAgICAgdmFyIHRhcmdldERpc3BsYXkgPSBkZWZhdWx0U2tpbi5nZXREaXNwbGF5KHRhcmdldC5uYW1lLCBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UQVJHRVRfRElTUExBWSwgdGFyZ2V0Lm5hbWUpKTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldERpc3BsYXkgPT09IG51bGwgfHwgISh0YXJnZXREaXNwbGF5IGluc3RhbmNlb2YgZHJhZ29uQm9uZXMuUGF0aERpc3BsYXlEYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGJvbmVzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkJPTkVTXTtcclxuICAgICAgICAgICAgaWYgKGJvbmVzID09PSBudWxsIHx8IGJvbmVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5QYXRoQ29uc3RyYWludERhdGEpO1xyXG4gICAgICAgICAgICBjb25zdHJhaW50Lm5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgY29uc3RyYWludC50eXBlID0gMSAvKiBQYXRoICovO1xyXG4gICAgICAgICAgICBjb25zdHJhaW50LnBhdGhTbG90ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICBjb25zdHJhaW50LnBhdGhEaXNwbGF5RGF0YSA9IHRhcmdldERpc3BsYXk7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQudGFyZ2V0ID0gdGFyZ2V0LnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3RyYWludC5wb3NpdGlvbk1vZGUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLl9nZXRQb3NpdGlvbk1vZGUoT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUE9TSVRJT05fTU9ERSwgXCJcIikpO1xyXG4gICAgICAgICAgICBjb25zdHJhaW50LnNwYWNpbmdNb2RlID0gZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5fZ2V0U3BhY2luZ01vZGUoT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU1BBQ0lOR19NT0RFLCBcIlwiKSk7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucm90YXRlTW9kZSA9IGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuX2dldFJvdGF0ZU1vZGUoT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUk9UQVRFX01PREUsIFwiXCIpKTtcclxuICAgICAgICAgICAgY29uc3RyYWludC5wb3NpdGlvbiA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlBPU0lUSU9OLCAwKTtcclxuICAgICAgICAgICAgY29uc3RyYWludC5zcGFjaW5nID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU1BBQ0lORywgMCk7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucm90YXRlT2Zmc2V0ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUk9UQVRFX09GRlNFVCwgMCk7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucm90YXRlTWl4ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUk9UQVRFX01JWCwgMSk7XHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnQudHJhbnNsYXRlTWl4ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFJBTlNMQVRFX01JWCwgMSk7XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgYm9uZXNfMyA9IGJvbmVzOyBfaSA8IGJvbmVzXzMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYm9uZU5hbWUgPSBib25lc18zW19pXTtcclxuICAgICAgICAgICAgICAgIHZhciBib25lID0gdGhpcy5fYXJtYXR1cmUuZ2V0Qm9uZShib25lTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9uZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQuQWRkQm9uZShib25lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludC5yb290ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQucm9vdCA9IGJvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb25zdHJhaW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlU2xvdCA9IGZ1bmN0aW9uIChyYXdEYXRhLCB6T3JkZXIpIHtcclxuICAgICAgICAgICAgdmFyIHNsb3QgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5TbG90RGF0YSk7XHJcbiAgICAgICAgICAgIHNsb3QuZGlzcGxheUluZGV4ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRElTUExBWV9JTkRFWCwgMCk7XHJcbiAgICAgICAgICAgIHNsb3Quek9yZGVyID0gek9yZGVyO1xyXG4gICAgICAgICAgICBzbG90Lm5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgc2xvdC5wYXJlbnQgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lKE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlBBUkVOVCwgXCJcIikpOyAvL1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CTEVORF9NT0RFIGluIHJhd0RhdGEgJiYgdHlwZW9mIHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CTEVORF9NT0RFXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc2xvdC5ibGVuZE1vZGUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLl9nZXRCbGVuZE1vZGUocmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkJMRU5EX01PREVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNsb3QuYmxlbmRNb2RlID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQkxFTkRfTU9ERSwgMCAvKiBOb3JtYWwgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkNPTE9SIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHNsb3QuY29sb3IgPSBkcmFnb25Cb25lcy5TbG90RGF0YS5jcmVhdGVDb2xvcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VDb2xvclRyYW5zZm9ybShyYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ09MT1JdLCBzbG90LmNvbG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNsb3QuY29sb3IgPSBkcmFnb25Cb25lcy5TbG90RGF0YS5ERUZBVUxUX0NPTE9SO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFDVElPTlMgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2xvdENoaWxkQWN0aW9uc1tzbG90Lm5hbWVdID0gdGhpcy5fcGFyc2VBY3Rpb25EYXRhKHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BQ1RJT05TXSwgMCAvKiBQbGF5ICovLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2xvdDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZVNraW4gPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgc2tpbiA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLlNraW5EYXRhKTtcclxuICAgICAgICAgICAgc2tpbi5uYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuTkFNRSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ERUZBVUxUX05BTUUpO1xyXG4gICAgICAgICAgICBpZiAoc2tpbi5uYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgc2tpbi5uYW1lID0gZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ERUZBVUxUX05BTUU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0xPVCBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3U2xvdHMgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0xPVF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9za2luID0gc2tpbjtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgcmF3U2xvdHNfMiA9IHJhd1Nsb3RzOyBfaSA8IHJhd1Nsb3RzXzIubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1Nsb3QgPSByYXdTbG90c18yW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdE5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3U2xvdCwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IHRoaXMuX2FybWF0dXJlLmdldFNsb3Qoc2xvdE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzbG90ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nsb3QgPSBzbG90O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ESVNQTEFZIGluIHJhd1Nsb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdEaXNwbGF5cyA9IHJhd1Nsb3RbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ESVNQTEFZXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcmF3RGlzcGxheXNfMSA9IHJhd0Rpc3BsYXlzOyBfYSA8IHJhd0Rpc3BsYXlzXzEubGVuZ3RoOyBfYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0Rpc3BsYXkgPSByYXdEaXNwbGF5c18xW19hXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3RGlzcGxheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2luLmFkZERpc3BsYXkoc2xvdE5hbWUsIHRoaXMuX3BhcnNlRGlzcGxheShyYXdEaXNwbGF5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2luLmFkZERpc3BsYXkoc2xvdE5hbWUsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zbG90ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9za2luID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2tpbjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZURpc3BsYXkgPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLk5BTUUsIFwiXCIpO1xyXG4gICAgICAgICAgICB2YXIgcGF0aCA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlBBVEgsIFwiXCIpO1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IDAgLyogSW1hZ2UgKi87XHJcbiAgICAgICAgICAgIHZhciBkaXNwbGF5ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFlQRSBpbiByYXdEYXRhICYmIHR5cGVvZiByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFlQRV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLl9nZXREaXNwbGF5VHlwZShyYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFlQRV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRZUEUsIHR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIEltYWdlICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZURpc3BsYXkgPSBkaXNwbGF5ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuSW1hZ2VEaXNwbGF5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VEaXNwbGF5Lm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlRGlzcGxheS5wYXRoID0gcGF0aC5sZW5ndGggPiAwID8gcGF0aCA6IG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VQaXZvdChyYXdEYXRhLCBpbWFnZURpc3BsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIEFybWF0dXJlICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhcm1hdHVyZURpc3BsYXkgPSBkaXNwbGF5ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJtYXR1cmVEaXNwbGF5Lm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGFybWF0dXJlRGlzcGxheS5wYXRoID0gcGF0aC5sZW5ndGggPiAwID8gcGF0aCA6IG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJtYXR1cmVEaXNwbGF5LmluaGVyaXRBbmltYXRpb24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFDVElPTlMgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuX3BhcnNlQWN0aW9uRGF0YShyYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQUNUSU9OU10sIDAgLyogUGxheSAqLywgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgYWN0aW9uc181ID0gYWN0aW9uczsgX2kgPCBhY3Rpb25zXzUubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9uc181W19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybWF0dXJlRGlzcGxheS5hZGRBY3Rpb24oYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zbG90Lm5hbWUgaW4gdGhpcy5fc2xvdENoaWxkQWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheXMgPSB0aGlzLl9za2luLmdldERpc3BsYXlzKHRoaXMuX3Nsb3QubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5cyA9PT0gbnVsbCA/IHRoaXMuX3Nsb3QuZGlzcGxheUluZGV4ID09PSAwIDogdGhpcy5fc2xvdC5kaXNwbGF5SW5kZXggPT09IGRpc3BsYXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBfYiA9IHRoaXMuX3Nsb3RDaGlsZEFjdGlvbnNbdGhpcy5fc2xvdC5uYW1lXTsgX2EgPCBfYi5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gX2JbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybWF0dXJlRGlzcGxheS5hZGRBY3Rpb24oYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zbG90Q2hpbGRBY3Rpb25zW3RoaXMuX3Nsb3QubmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDIgLyogTWVzaCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWVzaERpc3BsYXkgPSBkaXNwbGF5ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuTWVzaERpc3BsYXlEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBtZXNoRGlzcGxheS52ZXJ0aWNlcy5pbmhlcml0RGVmb3JtID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0Qm9vbGVhbihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLklOSEVSSVRfREVGT1JNLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBtZXNoRGlzcGxheS5uYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBtZXNoRGlzcGxheS5wYXRoID0gcGF0aC5sZW5ndGggPiAwID8gcGF0aCA6IG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzaERpc3BsYXkudmVydGljZXMuZGF0YSA9IHRoaXMuX2RhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0hBUkUgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVJhd01lc2hlcy5wdXNoKHJhd0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZU1lc2hlcy5wdXNoKG1lc2hEaXNwbGF5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlTWVzaChyYXdEYXRhLCBtZXNoRGlzcGxheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5HTFVFX1dFSUdIVFMgaW4gcmF3RGF0YSkgJiYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuR0xVRV9NRVNIRVMgaW4gcmF3RGF0YSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVSYXdNZXNoZXMucHVzaChyYXdEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVNZXNoZXMucHVzaChtZXNoRGlzcGxheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzIC8qIEJvdW5kaW5nQm94ICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib3VuZGluZ0JveCA9IHRoaXMuX3BhcnNlQm91bmRpbmdCb3gocmF3RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvdW5kaW5nQm94ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib3VuZGluZ0JveERpc3BsYXkgPSBkaXNwbGF5ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQm91bmRpbmdCb3hEaXNwbGF5RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94RGlzcGxheS5uYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRpbmdCb3hEaXNwbGF5LnBhdGggPSBwYXRoLmxlbmd0aCA+IDAgPyBwYXRoIDogbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRpbmdCb3hEaXNwbGF5LmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3g7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0IC8qIFBhdGggKi86XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0N1cnZlTGVuZ3RocyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5MRU5HVEhTXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aERpc3BsYXkgPSBkaXNwbGF5ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuUGF0aERpc3BsYXlEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGlzcGxheS5jbG9zZWQgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRCb29sZWFuKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ0xPU0VELCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERpc3BsYXkuY29uc3RhbnRTcGVlZCA9IE9iamVjdERhdGFQYXJzZXIuX2dldEJvb2xlYW4ocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5DT05TVEFOVF9TUEVFRCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEaXNwbGF5Lm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEaXNwbGF5LnBhdGggPSBwYXRoLmxlbmd0aCA+IDAgPyBwYXRoIDogbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGlzcGxheS52ZXJ0aWNlcy5kYXRhID0gdGhpcy5fZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGlzcGxheS5jdXJ2ZUxlbmd0aHMubGVuZ3RoID0gcmF3Q3VydmVMZW5ndGhzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJhd0N1cnZlTGVuZ3Rocy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aERpc3BsYXkuY3VydmVMZW5ndGhzW2ldID0gcmF3Q3VydmVMZW5ndGhzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZVBhdGgocmF3RGF0YSwgcGF0aERpc3BsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXNwbGF5ICE9PSBudWxsICYmIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFJBTlNGT1JNIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlVHJhbnNmb3JtKHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UUkFOU0ZPUk1dLCBkaXNwbGF5LnRyYW5zZm9ybSwgdGhpcy5fYXJtYXR1cmUuc2NhbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkaXNwbGF5O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlUGF0aCA9IGZ1bmN0aW9uIChyYXdEYXRhLCBkaXNwbGF5KSB7XHJcbiAgICAgICAgICAgIHZhciByYXdWZXJ0aWNlcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5WRVJUSUNFU107XHJcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhDb3VudCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlZFUlRFWF9DT1VOVCwgMCk7IC8vIHVpbnRcclxuICAgICAgICAgICAgdmFyIHZlcnRleE9mZnNldCA9IHRoaXMuX2Zsb2F0QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgcGF0aE9mZnNldCA9IHRoaXMuX2ludEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgZGlzcGxheS52ZXJ0aWNlcy5vZmZzZXQgPSBwYXRoT2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRBcnJheS5sZW5ndGggKz0gMSArIDE7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W3BhdGhPZmZzZXQgKyAwIC8qIFBhdGhWZXJ0ZXhDb3VudCAqL10gPSB2ZXJ0ZXhDb3VudDtcclxuICAgICAgICAgICAgdGhpcy5faW50QXJyYXlbcGF0aE9mZnNldCArIDIgLyogUGF0aEZsb2F0T2Zmc2V0ICovXSA9IHZlcnRleE9mZnNldDtcclxuICAgICAgICAgICAgaWYgKCEoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5XRUlHSFRTIGluIHJhd0RhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG9hdEFycmF5Lmxlbmd0aCArPSByYXdWZXJ0aWNlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJhd1ZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb2F0QXJyYXlbdmVydGV4T2Zmc2V0ICsgaV0gPSByYXdWZXJ0aWNlc1tpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdXZWlnaHRzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLldFSUdIVFNdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd0JvbmVzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkJPTkVTXTtcclxuICAgICAgICAgICAgICAgIHZhciB3ZWlnaHRCb25lQ291bnQgPSByYXdCb25lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0Q291bnQgPSBNYXRoLmZsb29yKHJhd1dlaWdodHMubGVuZ3RoIC0gdmVydGV4Q291bnQpIC8gMjsgLy8gdWludFxyXG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodE9mZnNldCA9IHRoaXMuX2ludEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciBmbG9hdE9mZnNldCA9IHRoaXMuX2Zsb2F0QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNvcnRlZEJvbmVzID0gdGhpcy5fYXJtYXR1cmUuc29ydGVkQm9uZXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuV2VpZ2h0RGF0YSk7XHJcbiAgICAgICAgICAgICAgICB3ZWlnaHQuY291bnQgPSB3ZWlnaHRDb3VudDtcclxuICAgICAgICAgICAgICAgIHdlaWdodC5vZmZzZXQgPSB3ZWlnaHRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheS5sZW5ndGggKz0gMSArIDEgKyB3ZWlnaHRCb25lQ291bnQgKyB2ZXJ0ZXhDb3VudCArIHdlaWdodENvdW50O1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W3dlaWdodE9mZnNldCArIDAgLyogV2VpZ3RoQm9uZUNvdW50ICovXSA9IHdlaWdodEJvbmVDb3VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W3dlaWdodE9mZnNldCArIDEgLyogV2VpZ3RoRmxvYXRPZmZzZXQgKi9dID0gZmxvYXRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdlaWdodEJvbmVDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0JvbmVJbmRleCA9IHJhd0JvbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gdGhpcy5fcmF3Qm9uZXNbcmF3Qm9uZUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICB3ZWlnaHQuYWRkQm9uZShib25lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVt3ZWlnaHRPZmZzZXQgKyAyIC8qIFdlaWd0aEJvbmVJbmRpY2VzICovICsgaV0gPSBzb3J0ZWRCb25lcy5pbmRleE9mKGJvbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvYXRBcnJheS5sZW5ndGggKz0gd2VpZ2h0Q291bnQgKiAzO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlXID0gMCwgaVYgPSAwLCBpQiA9IHdlaWdodE9mZnNldCArIDIgLyogV2VpZ3RoQm9uZUluZGljZXMgKi8gKyB3ZWlnaHRCb25lQ291bnQsIGlGID0gZmxvYXRPZmZzZXQ7IGkgPCB3ZWlnaHRDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvbmVDb3VudCA9IHJhd1dlaWdodHNbaVcrK107XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXlbaUIrK10gPSBib25lQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBib25lQ291bnQ7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZUluZGV4ID0gcmF3V2VpZ2h0c1tpVysrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvbmVXZWlnaHQgPSByYXdXZWlnaHRzW2lXKytdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHJhd1ZlcnRpY2VzW2lWKytdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHJhd1ZlcnRpY2VzW2lWKytdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtpQisrXSA9IHJhd0JvbmVzLmluZGV4T2YoYm9uZUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvYXRBcnJheVtpRisrXSA9IGJvbmVXZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb2F0QXJyYXlbaUYrK10gPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG9hdEFycmF5W2lGKytdID0geTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5LnZlcnRpY2VzLndlaWdodCA9IHdlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlUGl2b3QgPSBmdW5jdGlvbiAocmF3RGF0YSwgZGlzcGxheSkge1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5QSVZPVCBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3UGl2b3QgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUElWT1RdO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheS5waXZvdC54ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd1Bpdm90LCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlgsIDAuMCk7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5LnBpdm90LnkgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3UGl2b3QsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuWSwgMC4wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXkucGl2b3QueCA9IDAuNTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXkucGl2b3QueSA9IDAuNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlTWVzaCA9IGZ1bmN0aW9uIChyYXdEYXRhLCBtZXNoKSB7XHJcbiAgICAgICAgICAgIHZhciByYXdWZXJ0aWNlcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5WRVJUSUNFU107XHJcbiAgICAgICAgICAgIHZhciByYXdVVnMgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVVZTXTtcclxuICAgICAgICAgICAgdmFyIHJhd1RyaWFuZ2xlcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UUklBTkdMRVNdO1xyXG4gICAgICAgICAgICB2YXIgdmVydGV4Q291bnQgPSBNYXRoLmZsb29yKHJhd1ZlcnRpY2VzLmxlbmd0aCAvIDIpOyAvLyB1aW50XHJcbiAgICAgICAgICAgIHZhciB0cmlhbmdsZUNvdW50ID0gTWF0aC5mbG9vcihyYXdUcmlhbmdsZXMubGVuZ3RoIC8gMyk7IC8vIHVpbnRcclxuICAgICAgICAgICAgdmFyIHZlcnRleE9mZnNldCA9IHRoaXMuX2Zsb2F0QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgdXZPZmZzZXQgPSB2ZXJ0ZXhPZmZzZXQgKyB2ZXJ0ZXhDb3VudCAqIDI7XHJcbiAgICAgICAgICAgIHZhciBtZXNoT2Zmc2V0ID0gdGhpcy5faW50QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgbWVzaE5hbWUgPSB0aGlzLl9za2luLm5hbWUgKyBcIl9cIiArIHRoaXMuX3Nsb3QubmFtZSArIFwiX1wiICsgbWVzaC5uYW1lOyAvLyBDYWNoZSBwb3NlIGRhdGEuXHJcbiAgICAgICAgICAgIG1lc2gudmVydGljZXMub2Zmc2V0ID0gbWVzaE9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5faW50QXJyYXkubGVuZ3RoICs9IDEgKyAxICsgMSArIDEgKyB0cmlhbmdsZUNvdW50ICogMztcclxuICAgICAgICAgICAgdGhpcy5faW50QXJyYXlbbWVzaE9mZnNldCArIDAgLyogTWVzaFZlcnRleENvdW50ICovXSA9IHZlcnRleENvdW50O1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRBcnJheVttZXNoT2Zmc2V0ICsgMSAvKiBNZXNoVHJpYW5nbGVDb3VudCAqL10gPSB0cmlhbmdsZUNvdW50O1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRBcnJheVttZXNoT2Zmc2V0ICsgMiAvKiBNZXNoRmxvYXRPZmZzZXQgKi9dID0gdmVydGV4T2Zmc2V0O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRyaWFuZ2xlQ291bnQgKiAzOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVttZXNoT2Zmc2V0ICsgNCAvKiBNZXNoVmVydGV4SW5kaWNlcyAqLyArIGldID0gcmF3VHJpYW5nbGVzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2Zsb2F0QXJyYXkubGVuZ3RoICs9IHZlcnRleENvdW50ICogMiArIHZlcnRleENvdW50ICogMjtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2ZXJ0ZXhDb3VudCAqIDI7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb2F0QXJyYXlbdmVydGV4T2Zmc2V0ICsgaV0gPSByYXdWZXJ0aWNlc1tpXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb2F0QXJyYXlbdXZPZmZzZXQgKyBpXSA9IHJhd1VWc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5XRUlHSFRTIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdXZWlnaHRzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLldFSUdIVFNdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1Nsb3RQb3NlID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNMT1RfUE9TRV07XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3Qm9uZVBvc2VzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkJPTkVfUE9TRV07XHJcbiAgICAgICAgICAgICAgICB2YXIgc29ydGVkQm9uZXMgPSB0aGlzLl9hcm1hdHVyZS5zb3J0ZWRCb25lcztcclxuICAgICAgICAgICAgICAgIHZhciB3ZWlnaHRCb25lSW5kaWNlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodEJvbmVDb3VudCA9IE1hdGguZmxvb3IocmF3Qm9uZVBvc2VzLmxlbmd0aCAvIDcpOyAvLyB1aW50XHJcbiAgICAgICAgICAgICAgICB2YXIgZmxvYXRPZmZzZXQgPSB0aGlzLl9mbG9hdEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciB3ZWlnaHRDb3VudCA9IE1hdGguZmxvb3IocmF3V2VpZ2h0cy5sZW5ndGggLSB2ZXJ0ZXhDb3VudCkgLyAyOyAvLyB1aW50XHJcbiAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0T2Zmc2V0ID0gdGhpcy5faW50QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLldlaWdodERhdGEpO1xyXG4gICAgICAgICAgICAgICAgd2VpZ2h0LmNvdW50ID0gd2VpZ2h0Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB3ZWlnaHQub2Zmc2V0ID0gd2VpZ2h0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgd2VpZ2h0Qm9uZUluZGljZXMubGVuZ3RoID0gd2VpZ2h0Qm9uZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXkubGVuZ3RoICs9IDEgKyAxICsgd2VpZ2h0Qm9uZUNvdW50ICsgdmVydGV4Q291bnQgKyB3ZWlnaHRDb3VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W3dlaWdodE9mZnNldCArIDEgLyogV2VpZ3RoRmxvYXRPZmZzZXQgKi9dID0gZmxvYXRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdlaWdodEJvbmVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0JvbmVJbmRleCA9IHJhd0JvbmVQb3Nlc1tpICogN107IC8vIHVpbnRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZSA9IHRoaXMuX3Jhd0JvbmVzW3Jhd0JvbmVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0LmFkZEJvbmUoYm9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2VpZ2h0Qm9uZUluZGljZXNbaV0gPSByYXdCb25lSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXlbd2VpZ2h0T2Zmc2V0ICsgMiAvKiBXZWlndGhCb25lSW5kaWNlcyAqLyArIGldID0gc29ydGVkQm9uZXMuaW5kZXhPZihib25lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb2F0QXJyYXkubGVuZ3RoICs9IHdlaWdodENvdW50ICogMztcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBNYXRyaXhBLmNvcHlGcm9tQXJyYXkocmF3U2xvdFBvc2UsIDApO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlXID0gMCwgaUIgPSB3ZWlnaHRPZmZzZXQgKyAyIC8qIFdlaWd0aEJvbmVJbmRpY2VzICovICsgd2VpZ2h0Qm9uZUNvdW50LCBpViA9IGZsb2F0T2Zmc2V0OyBpIDwgdmVydGV4Q291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpRCA9IGkgKiAyO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0ZXhCb25lQ291bnQgPSB0aGlzLl9pbnRBcnJheVtpQisrXSA9IHJhd1dlaWdodHNbaVcrK107IC8vIHVpbnRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHRoaXMuX2Zsb2F0QXJyYXlbdmVydGV4T2Zmc2V0ICsgaURdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5ID0gdGhpcy5fZmxvYXRBcnJheVt2ZXJ0ZXhPZmZzZXQgKyBpRCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBNYXRyaXhBLnRyYW5zZm9ybVBvaW50KHgsIHksIHRoaXMuX2hlbHBQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMuX2hlbHBQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgICAgIHkgPSB0aGlzLl9oZWxwUG9pbnQueTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZlcnRleEJvbmVDb3VudDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdCb25lSW5kZXggPSByYXdXZWlnaHRzW2lXKytdOyAvLyB1aW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lSW5kZXggPSB3ZWlnaHRCb25lSW5kaWNlcy5pbmRleE9mKHJhd0JvbmVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBNYXRyaXhCLmNvcHlGcm9tQXJyYXkocmF3Qm9uZVBvc2VzLCBib25lSW5kZXggKiA3ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBNYXRyaXhCLmludmVydCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oZWxwTWF0cml4Qi50cmFuc2Zvcm1Qb2ludCh4LCB5LCB0aGlzLl9oZWxwUG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtpQisrXSA9IGJvbmVJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvYXRBcnJheVtpVisrXSA9IHJhd1dlaWdodHNbaVcrK107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb2F0QXJyYXlbaVYrK10gPSB0aGlzLl9oZWxwUG9pbnQueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvYXRBcnJheVtpVisrXSA9IHRoaXMuX2hlbHBQb2ludC55O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1lc2gudmVydGljZXMud2VpZ2h0ID0gd2VpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2VpZ2h0U2xvdFBvc2VbbWVzaE5hbWVdID0gcmF3U2xvdFBvc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWlnaHRCb25lUG9zZXNbbWVzaE5hbWVdID0gcmF3Qm9uZVBvc2VzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VNZXNoR2x1ZSA9IGZ1bmN0aW9uIChyYXdEYXRhLCBtZXNoKSB7XHJcbiAgICAgICAgICAgIHJhd0RhdGE7XHJcbiAgICAgICAgICAgIG1lc2g7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHJhd1dlaWdodHMgPSByYXdEYXRhW0RhdGFQYXJzZXIuR0xVRV9XRUlHSFRTXSBhcyBBcnJheTxudW1iZXI+O1xyXG4gICAgICAgICAgICAvLyBjb25zdCByYXdNZXNoZXMgPSByYXdEYXRhW0RhdGFQYXJzZXIuR0xVRV9NRVNIRVNdIGFzIEFycmF5PHN0cmluZz47XHJcbiAgICAgICAgICAgIC8vIG1lc2guZ2x1ZSA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KEdsdWVEYXRhKTtcclxuICAgICAgICAgICAgLy8gbWVzaC5nbHVlLndlaWdodHMubGVuZ3RoID0gcmF3V2VpZ2h0cy5sZW5ndGg7XHJcbiAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwLCBsID0gcmF3V2VpZ2h0cy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgLy8gICAgIG1lc2guZ2x1ZS53ZWlnaHRzW2ldID0gcmF3V2VpZ2h0c1tpXTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMCwgbCA9IHJhd01lc2hlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDMpIHtcclxuICAgICAgICAgICAgLy8gICAgIGNvbnN0IGdsdWVNZXNoID0gdGhpcy5fYXJtYXR1cmUuZ2V0TWVzaChyYXdNZXNoZXNbaV0sIHJhd01lc2hlc1tpICsgMV0sIHJhd01lc2hlc1tpICsgMl0pO1xyXG4gICAgICAgICAgICAvLyAgICAgbWVzaC5nbHVlLmFkZE1lc2goZ2x1ZU1lc2gpO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VCb3VuZGluZ0JveCA9IGZ1bmN0aW9uIChyYXdEYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBib3VuZGluZ0JveCA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gMCAvKiBSZWN0YW5nbGUgKi87XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNVQl9UWVBFIGluIHJhd0RhdGEgJiYgdHlwZW9mIHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TVUJfVFlQRV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLl9nZXRCb3VuZGluZ0JveFR5cGUocmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNVQl9UWVBFXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU1VCX1RZUEUsIHR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIFJlY3RhbmdsZSAqLzpcclxuICAgICAgICAgICAgICAgICAgICBib3VuZGluZ0JveCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLlJlY3RhbmdsZUJvdW5kaW5nQm94RGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDEgLyogRWxsaXBzZSAqLzpcclxuICAgICAgICAgICAgICAgICAgICBib3VuZGluZ0JveCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkVsbGlwc2VCb3VuZGluZ0JveERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyIC8qIFBvbHlnb24gKi86XHJcbiAgICAgICAgICAgICAgICAgICAgYm91bmRpbmdCb3ggPSB0aGlzLl9wYXJzZVBvbHlnb25Cb3VuZGluZ0JveChyYXdEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYm91bmRpbmdCb3ggIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94LmNvbG9yID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ09MT1IsIDB4MDAwMDAwKTtcclxuICAgICAgICAgICAgICAgIGlmIChib3VuZGluZ0JveC50eXBlID09PSAwIC8qIFJlY3RhbmdsZSAqLyB8fCBib3VuZGluZ0JveC50eXBlID09PSAxIC8qIEVsbGlwc2UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBib3VuZGluZ0JveC53aWR0aCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLldJRFRILCAwLjApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kaW5nQm94LmhlaWdodCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkhFSUdIVCwgMC4wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYm91bmRpbmdCb3g7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VQb2x5Z29uQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgcG9seWdvbkJvdW5kaW5nQm94ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuUG9seWdvbkJvdW5kaW5nQm94RGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlZFUlRJQ0VTIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzY2FsZSA9IHRoaXMuX2FybWF0dXJlLnNjYWxlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1ZlcnRpY2VzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlZFUlRJQ0VTXTtcclxuICAgICAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IHBvbHlnb25Cb3VuZGluZ0JveC52ZXJ0aWNlcztcclxuICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnJlc2l6ZShyYXdWZXJ0aWNlcy5sZW5ndGgsIDAuMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcy5sZW5ndGggPSByYXdWZXJ0aWNlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJhd1ZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gcmF3VmVydGljZXNbaV0gKiBzY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHJhd1ZlcnRpY2VzW2kgKyAxXSAqIHNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcy5zZXQoaSwgeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzLnNldChpICsgMSwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXSA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzW2kgKyAxXSA9IHk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFBQkIuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbkJvdW5kaW5nQm94LnggPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2x5Z29uQm91bmRpbmdCb3gueSA9IHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb25Cb3VuZGluZ0JveC53aWR0aCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb25Cb3VuZGluZ0JveC5oZWlnaHQgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggPCBwb2x5Z29uQm91bmRpbmdCb3gueCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbkJvdW5kaW5nQm94LnggPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHggPiBwb2x5Z29uQm91bmRpbmdCb3gud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb25Cb3VuZGluZ0JveC53aWR0aCA9IHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkgPCBwb2x5Z29uQm91bmRpbmdCb3gueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbkJvdW5kaW5nQm94LnkgPSB5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHkgPiBwb2x5Z29uQm91bmRpbmdCb3guaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2x5Z29uQm91bmRpbmdCb3guaGVpZ2h0ID0geTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBvbHlnb25Cb3VuZGluZ0JveC53aWR0aCAtPSBwb2x5Z29uQm91bmRpbmdCb3gueDtcclxuICAgICAgICAgICAgICAgIHBvbHlnb25Cb3VuZGluZ0JveC5oZWlnaHQgLT0gcG9seWdvbkJvdW5kaW5nQm94Lnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJEYXRhIGVycm9yLlxcbiBQbGVhc2UgcmVleHBvcnQgRHJhZ29uQm9uZXMgRGF0YSB0byBmaXhlZCB0aGUgYnVnLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcG9seWdvbkJvdW5kaW5nQm94O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlQW5pbWF0aW9uID0gZnVuY3Rpb24gKHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkFuaW1hdGlvbkRhdGEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24uZnJhbWVDb3VudCA9IE1hdGgubWF4KE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkRVUkFUSU9OLCAxKSwgMSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5wbGF5VGltZXMgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5QTEFZX1RJTUVTLCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLmR1cmF0aW9uID0gYW5pbWF0aW9uLmZyYW1lQ291bnQgLyB0aGlzLl9hcm1hdHVyZS5mcmFtZVJhdGU7IC8vIGZsb2F0XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5mYWRlSW5UaW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRkFERV9JTl9USU1FLCAwLjApO1xyXG4gICAgICAgICAgICBhbmltYXRpb24uc2NhbGUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TQ0FMRSwgMS4wKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLm5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkRFRkFVTFRfTkFNRSk7XHJcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24ubmFtZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5uYW1lID0gZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ERUZBVUxUX05BTUU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYW5pbWF0aW9uLmZyYW1lSW50T2Zmc2V0ID0gdGhpcy5fZnJhbWVJbnRBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5mcmFtZUZsb2F0T2Zmc2V0ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLmZyYW1lT2Zmc2V0ID0gdGhpcy5fZnJhbWVBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IGFuaW1hdGlvbjtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRlJBTUUgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd0ZyYW1lcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GUkFNRV07XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5RnJhbWVDb3VudCA9IHJhd0ZyYW1lcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5RnJhbWVDb3VudCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZnJhbWVTdGFydCA9IDA7IGkgPCBrZXlGcmFtZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0ZyYW1lID0gcmF3RnJhbWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZUFjdGlvbkRhdGFJbkZyYW1lKHJhd0ZyYW1lLCBmcmFtZVN0YXJ0LCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVTdGFydCArPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RnJhbWUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRFVSQVRJT04sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5aX09SREVSIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi56T3JkZXJUaW1lbGluZSA9IHRoaXMuX3BhcnNlVGltZWxpbmUocmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlpfT1JERVJdLCBudWxsLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FLCAxIC8qIFpPcmRlciAqLywgZmFsc2UsIGZhbHNlLCAwLCB0aGlzLl9wYXJzZVpPcmRlckZyYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CT05FIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdUaW1lbGluZXMgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQk9ORV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHJhd1RpbWVsaW5lc18xID0gcmF3VGltZWxpbmVzOyBfaSA8IHJhd1RpbWVsaW5lc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdUaW1lbGluZSA9IHJhd1RpbWVsaW5lc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZUJvbmVUaW1lbGluZShyYXdUaW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU1VSRkFDRSBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmVzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNVUkZBQ0VdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCByYXdUaW1lbGluZXNfMiA9IHJhd1RpbWVsaW5lczsgX2EgPCByYXdUaW1lbGluZXNfMi5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmUgPSByYXdUaW1lbGluZXNfMltfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1cmZhY2VOYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd1RpbWVsaW5lLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLk5BTUUsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1cmZhY2UgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lKHN1cmZhY2VOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3VyZmFjZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gdGhpcy5fcGFyc2VUaW1lbGluZShyYXdUaW1lbGluZSwgbnVsbCwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GUkFNRSwgNTAgLyogU3VyZmFjZSAqLywgZmFsc2UsIHRydWUsIDAsIHRoaXMuX3BhcnNlU3VyZmFjZUZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uLmFkZFN1cmZhY2VUaW1lbGluZSh0aGlzLl9zdXJmYWNlLCB0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1cmZhY2UgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNMT1QgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1RpbWVsaW5lcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TTE9UXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgcmF3VGltZWxpbmVzXzMgPSByYXdUaW1lbGluZXM7IF9iIDwgcmF3VGltZWxpbmVzXzMubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1RpbWVsaW5lID0gcmF3VGltZWxpbmVzXzNbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlU2xvdFRpbWVsaW5lKHJhd1RpbWVsaW5lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GRkQgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1RpbWVsaW5lcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GRkRdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCByYXdUaW1lbGluZXNfNCA9IHJhd1RpbWVsaW5lczsgX2MgPCByYXdUaW1lbGluZXNfNC5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmUgPSByYXdUaW1lbGluZXNfNFtfY107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNraW5OYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd1RpbWVsaW5lLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNLSU4sIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuREVGQVVMVF9OQU1FKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdE5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3VGltZWxpbmUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0xPVCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlOYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd1RpbWVsaW5lLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLk5BTUUsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChza2luTmFtZS5sZW5ndGggPT09IDApIHsgLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpbk5hbWUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkRFRkFVTFRfTkFNRTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2xvdCA9IHRoaXMuX2FybWF0dXJlLmdldFNsb3Qoc2xvdE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lc2ggPSB0aGlzLl9hcm1hdHVyZS5nZXRNZXNoKHNraW5OYW1lLCBzbG90TmFtZSwgZGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zbG90ID09PSBudWxsIHx8IHRoaXMuX21lc2ggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IHRoaXMuX3BhcnNlVGltZWxpbmUocmF3VGltZWxpbmUsIG51bGwsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRlJBTUUsIDIyIC8qIFNsb3REZWZvcm0gKi8sIGZhbHNlLCB0cnVlLCAwLCB0aGlzLl9wYXJzZVNsb3RGRkRGcmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVsaW5lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRTbG90VGltZWxpbmUodGhpcy5fc2xvdCwgdGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zbG90ID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXNoID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5JSyBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmVzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLklLXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gMCwgcmF3VGltZWxpbmVzXzUgPSByYXdUaW1lbGluZXM7IF9kIDwgcmF3VGltZWxpbmVzXzUubGVuZ3RoOyBfZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1RpbWVsaW5lID0gcmF3VGltZWxpbmVzXzVbX2RdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25zdHJhaW50TmFtZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdUaW1lbGluZSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IHRoaXMuX2FybWF0dXJlLmdldENvbnN0cmFpbnQoY29uc3RyYWludE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSB0aGlzLl9wYXJzZVRpbWVsaW5lKHJhd1RpbWVsaW5lLCBudWxsLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FLCAzMCAvKiBJS0NvbnN0cmFpbnQgKi8sIHRydWUsIGZhbHNlLCAyLCB0aGlzLl9wYXJzZUlLQ29uc3RyYWludEZyYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uLmFkZENvbnN0cmFpbnRUaW1lbGluZShjb25zdHJhaW50LCB0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFOSU1BVElPTiBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmVzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFOSU1BVElPTl07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZSA9IDAsIHJhd1RpbWVsaW5lc182ID0gcmF3VGltZWxpbmVzOyBfZSA8IHJhd1RpbWVsaW5lc182Lmxlbmd0aDsgX2UrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdUaW1lbGluZSA9IHJhd1RpbWVsaW5lc182W19lXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uTmFtZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdUaW1lbGluZSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSB0aGlzLl9wYXJzZVRpbWVsaW5lKHJhd1RpbWVsaW5lLCBudWxsLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FLCA0MCAvKiBBbmltYXRpb25UaW1lICovLCB0cnVlLCBmYWxzZSwgMiwgdGhpcy5fcGFyc2VBbmltYXRpb25GcmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVsaW5lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRBbmltYXRpb25UaW1lbGluZShhbmltYXRpb25OYW1lLCB0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3Rpb25GcmFtZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uLmFjdGlvblRpbWVsaW5lID0gdGhpcy5fcGFyc2VUaW1lbGluZShudWxsLCB0aGlzLl9hY3Rpb25GcmFtZXMsIFwiXCIsIDAgLyogQWN0aW9uICovLCBmYWxzZSwgZmFsc2UsIDAsIHRoaXMuX3BhcnNlQWN0aW9uRnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aW9uRnJhbWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uID0gbnVsbDsgLy9cclxuICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZVRpbWVsaW5lID0gZnVuY3Rpb24gKHJhd0RhdGEsIHJhd0ZyYW1lcywgZnJhbWVzS2V5LCB0eXBlLCBhZGRJbnRPZmZzZXQsIGFkZEZsb2F0T2Zmc2V0LCBmcmFtZVZhbHVlQ291bnQsIGZyYW1lUGFyc2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChyYXdEYXRhICE9PSBudWxsICYmIGZyYW1lc0tleS5sZW5ndGggPiAwICYmIGZyYW1lc0tleSBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICByYXdGcmFtZXMgPSByYXdEYXRhW2ZyYW1lc0tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJhd0ZyYW1lcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGtleUZyYW1lQ291bnQgPSByYXdGcmFtZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAoa2V5RnJhbWVDb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGZyYW1lSW50QXJyYXlMZW5ndGggPSB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGZyYW1lRmxvYXRBcnJheUxlbmd0aCA9IHRoaXMuX2ZyYW1lRmxvYXRBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLlRpbWVsaW5lRGF0YSk7XHJcbiAgICAgICAgICAgIHZhciB0aW1lbGluZU9mZnNldCA9IHRoaXMuX3RpbWVsaW5lQXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5Lmxlbmd0aCArPSAxICsgMSArIDEgKyAxICsgMSArIGtleUZyYW1lQ291bnQ7XHJcbiAgICAgICAgICAgIGlmIChyYXdEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5W3RpbWVsaW5lT2Zmc2V0ICsgMCAvKiBUaW1lbGluZVNjYWxlICovXSA9IE1hdGgucm91bmQoT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0NBTEUsIDEuMCkgKiAxMDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVBcnJheVt0aW1lbGluZU9mZnNldCArIDEgLyogVGltZWxpbmVPZmZzZXQgKi9dID0gTWF0aC5yb3VuZChPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5PRkZTRVQsIDAuMCkgKiAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVBcnJheVt0aW1lbGluZU9mZnNldCArIDAgLyogVGltZWxpbmVTY2FsZSAqL10gPSAxMDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5W3RpbWVsaW5lT2Zmc2V0ICsgMSAvKiBUaW1lbGluZU9mZnNldCAqL10gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lQXJyYXlbdGltZWxpbmVPZmZzZXQgKyAyIC8qIFRpbWVsaW5lS2V5RnJhbWVDb3VudCAqL10gPSBrZXlGcmFtZUNvdW50O1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5W3RpbWVsaW5lT2Zmc2V0ICsgMyAvKiBUaW1lbGluZUZyYW1lVmFsdWVDb3VudCAqL10gPSBmcmFtZVZhbHVlQ291bnQ7XHJcbiAgICAgICAgICAgIGlmIChhZGRJbnRPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lQXJyYXlbdGltZWxpbmVPZmZzZXQgKyA0IC8qIFRpbWVsaW5lRnJhbWVWYWx1ZU9mZnNldCAqL10gPSBmcmFtZUludEFycmF5TGVuZ3RoIC0gdGhpcy5fYW5pbWF0aW9uLmZyYW1lSW50T2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFkZEZsb2F0T2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5W3RpbWVsaW5lT2Zmc2V0ICsgNCAvKiBUaW1lbGluZUZyYW1lVmFsdWVPZmZzZXQgKi9dID0gZnJhbWVGbG9hdEFycmF5TGVuZ3RoIC0gdGhpcy5fYW5pbWF0aW9uLmZyYW1lRmxvYXRPZmZzZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5W3RpbWVsaW5lT2Zmc2V0ICsgNCAvKiBUaW1lbGluZUZyYW1lVmFsdWVPZmZzZXQgKi9dID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl90aW1lbGluZSA9IHRpbWVsaW5lO1xyXG4gICAgICAgICAgICB0aW1lbGluZS50eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgdGltZWxpbmUub2Zmc2V0ID0gdGltZWxpbmVPZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmIChrZXlGcmFtZUNvdW50ID09PSAxKSB7IC8vIE9ubHkgb25lIGZyYW1lLlxyXG4gICAgICAgICAgICAgICAgdGltZWxpbmUuZnJhbWVJbmRpY2VzT2Zmc2V0ID0gLTE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5W3RpbWVsaW5lT2Zmc2V0ICsgNSAvKiBUaW1lbGluZUZyYW1lT2Zmc2V0ICovICsgMF0gPSBmcmFtZVBhcnNlci5jYWxsKHRoaXMsIHJhd0ZyYW1lc1swXSwgMCwgMCkgLSB0aGlzLl9hbmltYXRpb24uZnJhbWVPZmZzZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG90YWxGcmFtZUNvdW50ID0gdGhpcy5fYW5pbWF0aW9uLmZyYW1lQ291bnQgKyAxOyAvLyBPbmUgbW9yZSBmcmFtZSB0aGFuIGFuaW1hdGlvbi5cclxuICAgICAgICAgICAgICAgIHZhciBmcmFtZUluZGljZXMgPSB0aGlzLl9kYXRhLmZyYW1lSW5kaWNlcztcclxuICAgICAgICAgICAgICAgIHZhciBmcmFtZUluZGljZXNPZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVJbmRpY2VzT2Zmc2V0ID0gZnJhbWVJbmRpY2VzLnNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZUluZGljZXMucmVzaXplKGZyYW1lSW5kaWNlc09mZnNldCArIHRvdGFsRnJhbWVDb3VudCwgMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZUluZGljZXNPZmZzZXQgPSBmcmFtZUluZGljZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lSW5kaWNlcy5sZW5ndGggKz0gdG90YWxGcmFtZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGltZWxpbmUuZnJhbWVJbmRpY2VzT2Zmc2V0ID0gZnJhbWVJbmRpY2VzT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlLID0gMCwgZnJhbWVTdGFydCA9IDAsIGZyYW1lQ291bnQgPSAwOyBpIDwgdG90YWxGcmFtZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWVTdGFydCArIGZyYW1lQ291bnQgPD0gaSAmJiBpSyA8IGtleUZyYW1lQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0ZyYW1lID0gcmF3RnJhbWVzW2lLXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVTdGFydCA9IGk7IC8vIGZyYW1lLmZyYW1lU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpSyA9PT0ga2V5RnJhbWVDb3VudCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lQ291bnQgPSB0aGlzLl9hbmltYXRpb24uZnJhbWVDb3VudCAtIGZyYW1lU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3RnJhbWUgaW5zdGFuY2VvZiBBY3Rpb25GcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lQ291bnQgPSB0aGlzLl9hY3Rpb25GcmFtZXNbaUsgKyAxXS5mcmFtZVN0YXJ0IC0gZnJhbWVTdGFydDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lQ291bnQgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RnJhbWUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRFVSQVRJT04sIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lQXJyYXlbdGltZWxpbmVPZmZzZXQgKyA1IC8qIFRpbWVsaW5lRnJhbWVPZmZzZXQgKi8gKyBpS10gPSBmcmFtZVBhcnNlci5jYWxsKHRoaXMsIHJhd0ZyYW1lLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KSAtIHRoaXMuX2FuaW1hdGlvbi5mcmFtZU9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaUsrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSW5kaWNlcy5zZXQoZnJhbWVJbmRpY2VzT2Zmc2V0ICsgaSwgaUsgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSW5kaWNlc1tmcmFtZUluZGljZXNPZmZzZXQgKyBpXSA9IGlLIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fdGltZWxpbmUgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZWxpbmU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VCb25lVGltZWxpbmUgPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgYm9uZSA9IHRoaXMuX2FybWF0dXJlLmdldEJvbmUoT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuTkFNRSwgXCJcIikpO1xyXG4gICAgICAgICAgICBpZiAoYm9uZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2JvbmUgPSBib25lO1xyXG4gICAgICAgICAgICB0aGlzLl9zbG90ID0gdGhpcy5fYXJtYXR1cmUuZ2V0U2xvdCh0aGlzLl9ib25lLm5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UUkFOU0xBVEVfRlJBTUUgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gdGhpcy5fcGFyc2VUaW1lbGluZShyYXdEYXRhLCBudWxsLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRSQU5TTEFURV9GUkFNRSwgMTEgLyogQm9uZVRyYW5zbGF0ZSAqLywgZmFsc2UsIHRydWUsIDIsIHRoaXMuX3BhcnNlQm9uZVRyYW5zbGF0ZUZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRCb25lVGltZWxpbmUoYm9uZSwgdGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlJPVEFURV9GUkFNRSBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSB0aGlzLl9wYXJzZVRpbWVsaW5lKHJhd0RhdGEsIG51bGwsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUk9UQVRFX0ZSQU1FLCAxMiAvKiBCb25lUm90YXRlICovLCBmYWxzZSwgdHJ1ZSwgMiwgdGhpcy5fcGFyc2VCb25lUm90YXRlRnJhbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVsaW5lICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uLmFkZEJvbmVUaW1lbGluZShib25lLCB0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0NBTEVfRlJBTUUgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gdGhpcy5fcGFyc2VUaW1lbGluZShyYXdEYXRhLCBudWxsLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNDQUxFX0ZSQU1FLCAxMyAvKiBCb25lU2NhbGUgKi8sIGZhbHNlLCB0cnVlLCAyLCB0aGlzLl9wYXJzZUJvbmVTY2FsZUZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRCb25lVGltZWxpbmUoYm9uZSwgdGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IHRoaXMuX3BhcnNlVGltZWxpbmUocmF3RGF0YSwgbnVsbCwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GUkFNRSwgMTAgLyogQm9uZUFsbCAqLywgZmFsc2UsIHRydWUsIDYsIHRoaXMuX3BhcnNlQm9uZUFsbEZyYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aW1lbGluZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRCb25lVGltZWxpbmUoYm9uZSwgdGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2JvbmUgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICB0aGlzLl9zbG90ID0gbnVsbDsgLy9cclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZVNsb3RUaW1lbGluZSA9IGZ1bmN0aW9uIChyYXdEYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBzbG90ID0gdGhpcy5fYXJtYXR1cmUuZ2V0U2xvdChPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKSk7XHJcbiAgICAgICAgICAgIGlmIChzbG90ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fc2xvdCA9IHNsb3Q7XHJcbiAgICAgICAgICAgIC8vIERpc3BsYXkgdGltZWxpbmUuXHJcbiAgICAgICAgICAgIHZhciBkaXNwbGF5VGltZWxpbmUgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ESVNQTEFZX0ZSQU1FIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlUaW1lbGluZSA9IHRoaXMuX3BhcnNlVGltZWxpbmUocmF3RGF0YSwgbnVsbCwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ESVNQTEFZX0ZSQU1FLCAyMCAvKiBTbG90RGlzcGxheSAqLywgZmFsc2UsIGZhbHNlLCAwLCB0aGlzLl9wYXJzZVNsb3REaXNwbGF5RnJhbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheVRpbWVsaW5lID0gdGhpcy5fcGFyc2VUaW1lbGluZShyYXdEYXRhLCBudWxsLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FLCAyMCAvKiBTbG90RGlzcGxheSAqLywgZmFsc2UsIGZhbHNlLCAwLCB0aGlzLl9wYXJzZVNsb3REaXNwbGF5RnJhbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXNwbGF5VGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRTbG90VGltZWxpbmUoc2xvdCwgZGlzcGxheVRpbWVsaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgY29sb3JUaW1lbGluZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkNPTE9SX0ZSQU1FIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIGNvbG9yVGltZWxpbmUgPSB0aGlzLl9wYXJzZVRpbWVsaW5lKHJhd0RhdGEsIG51bGwsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ09MT1JfRlJBTUUsIDIxIC8qIFNsb3RDb2xvciAqLywgdHJ1ZSwgZmFsc2UsIDEsIHRoaXMuX3BhcnNlU2xvdENvbG9yRnJhbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29sb3JUaW1lbGluZSA9IHRoaXMuX3BhcnNlVGltZWxpbmUocmF3RGF0YSwgbnVsbCwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GUkFNRSwgMjEgLyogU2xvdENvbG9yICovLCB0cnVlLCBmYWxzZSwgMSwgdGhpcy5fcGFyc2VTbG90Q29sb3JGcmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbG9yVGltZWxpbmUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRTbG90VGltZWxpbmUoc2xvdCwgY29sb3JUaW1lbGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fc2xvdCA9IG51bGw7IC8vXHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VGcmFtZSA9IGZ1bmN0aW9uIChyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxyXG4gICAgICAgICAgICByYXdEYXRhO1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cclxuICAgICAgICAgICAgZnJhbWVDb3VudDtcclxuICAgICAgICAgICAgdmFyIGZyYW1lT2Zmc2V0ID0gdGhpcy5fZnJhbWVBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkubGVuZ3RoICs9IDE7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAwIC8qIEZyYW1lUG9zaXRpb24gKi9dID0gZnJhbWVTdGFydDtcclxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lT2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlVHdlZW5GcmFtZSA9IGZ1bmN0aW9uIChyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZU9mZnNldCA9IHRoaXMuX3BhcnNlRnJhbWUocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgIGlmIChmcmFtZUNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ1VSVkUgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzYW1wbGVDb3VudCA9IGZyYW1lQ291bnQgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBBcnJheS5sZW5ndGggPSBzYW1wbGVDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYW1wbGluZ0Vhc2luZ0N1cnZlKHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5DVVJWRV0sIHRoaXMuX2hlbHBBcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKz0gMSArIDEgKyB0aGlzLl9oZWxwQXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAxIC8qIEZyYW1lVHdlZW5UeXBlICovXSA9IDIgLyogQ3VydmUgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDIgLyogRnJhbWVUd2VlbkVhc2luZ09yQ3VydmVTYW1wbGVDb3VudCAqL10gPSBzYW1wbGVDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNhbXBsZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDMgLyogRnJhbWVDdXJ2ZVNhbXBsZXMgKi8gKyBpXSA9IE1hdGgucm91bmQodGhpcy5faGVscEFycmF5W2ldICogMTAwMDAuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vVHdlZW4gPSAtMi4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0d2VlbkVhc2luZyA9IG5vVHdlZW47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFdFRU5fRUFTSU5HIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHdlZW5FYXNpbmcgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UV0VFTl9FQVNJTkcsIG5vVHdlZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHdlZW5FYXNpbmcgPT09IG5vVHdlZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDEgLyogRnJhbWVUd2VlblR5cGUgKi9dID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0d2VlbkVhc2luZyA9PT0gMC4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkubGVuZ3RoICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAxIC8qIEZyYW1lVHdlZW5UeXBlICovXSA9IDEgLyogTGluZSAqLztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHdlZW5FYXNpbmcgPCAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKz0gMSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAxIC8qIEZyYW1lVHdlZW5UeXBlICovXSA9IDMgLyogUXVhZEluICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUFycmF5W2ZyYW1lT2Zmc2V0ICsgMiAvKiBGcmFtZVR3ZWVuRWFzaW5nT3JDdXJ2ZVNhbXBsZUNvdW50ICovXSA9IE1hdGgucm91bmQoLXR3ZWVuRWFzaW5nICogMTAwLjApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0d2VlbkVhc2luZyA8PSAxLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKz0gMSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAxIC8qIEZyYW1lVHdlZW5UeXBlICovXSA9IDQgLyogUXVhZE91dCAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDIgLyogRnJhbWVUd2VlbkVhc2luZ09yQ3VydmVTYW1wbGVDb3VudCAqL10gPSBNYXRoLnJvdW5kKHR3ZWVuRWFzaW5nICogMTAwLjApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKz0gMSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAxIC8qIEZyYW1lVHdlZW5UeXBlICovXSA9IDUgLyogUXVhZEluT3V0ICovO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUFycmF5W2ZyYW1lT2Zmc2V0ICsgMiAvKiBGcmFtZVR3ZWVuRWFzaW5nT3JDdXJ2ZVNhbXBsZUNvdW50ICovXSA9IE1hdGgucm91bmQodHdlZW5FYXNpbmcgKiAxMDAuMCAtIDEwMC4wKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUFycmF5Lmxlbmd0aCArPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDEgLyogRnJhbWVUd2VlblR5cGUgKi9dID0gMCAvKiBOb25lICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmcmFtZU9mZnNldDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZUFjdGlvbkZyYW1lID0gZnVuY3Rpb24gKGZyYW1lLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxyXG4gICAgICAgICAgICBmcmFtZUNvdW50O1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9mcmFtZUFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGFjdGlvbkNvdW50ID0gZnJhbWUuYWN0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkubGVuZ3RoICs9IDEgKyAxICsgYWN0aW9uQ291bnQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAwIC8qIEZyYW1lUG9zaXRpb24gKi9dID0gZnJhbWVTdGFydDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDAgLyogRnJhbWVQb3NpdGlvbiAqLyArIDFdID0gYWN0aW9uQ291bnQ7IC8vIEFjdGlvbiBjb3VudC5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY3Rpb25Db3VudDsgKytpKSB7IC8vIEFjdGlvbiBvZmZzZXRzLlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDAgLyogRnJhbWVQb3NpdGlvbiAqLyArIDIgKyBpXSA9IGZyYW1lLmFjdGlvbnNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lT2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlWk9yZGVyRnJhbWUgPSBmdW5jdGlvbiAocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9wYXJzZUZyYW1lKHJhd0RhdGEsIGZyYW1lU3RhcnQsIGZyYW1lQ291bnQpO1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5aX09SREVSIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdaT3JkZXIgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuWl9PUkRFUl07XHJcbiAgICAgICAgICAgICAgICBpZiAocmF3Wk9yZGVyLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdENvdW50ID0gdGhpcy5fYXJtYXR1cmUuc29ydGVkU2xvdHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bmNoYW5nZWQgPSBuZXcgQXJyYXkoc2xvdENvdW50IC0gcmF3Wk9yZGVyLmxlbmd0aCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB6T3JkZXJzID0gbmV3IEFycmF5KHNsb3RDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaV8xID0gMDsgaV8xIDwgdW5jaGFuZ2VkLmxlbmd0aDsgKytpXzEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5jaGFuZ2VkW2lfMV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpXzIgPSAwOyBpXzIgPCBzbG90Q291bnQ7ICsraV8yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpPcmRlcnNbaV8yXSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuY2hhbmdlZEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpXzMgPSAwLCBsID0gcmF3Wk9yZGVyLmxlbmd0aDsgaV8zIDwgbDsgaV8zICs9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNsb3RJbmRleCA9IHJhd1pPcmRlcltpXzNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgek9yZGVyT2Zmc2V0ID0gcmF3Wk9yZGVyW2lfMyArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAob3JpZ2luYWxJbmRleCAhPT0gc2xvdEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmNoYW5nZWRbdW5jaGFuZ2VkSW5kZXgrK10gPSBvcmlnaW5hbEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gb3JpZ2luYWxJbmRleCArIHpPcmRlck9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgek9yZGVyc1tpbmRleF0gPSBvcmlnaW5hbEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvcmlnaW5hbEluZGV4IDwgc2xvdENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuY2hhbmdlZFt1bmNoYW5nZWRJbmRleCsrXSA9IG9yaWdpbmFsSW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKz0gMSArIHNsb3RDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUFycmF5W2ZyYW1lT2Zmc2V0ICsgMV0gPSBzbG90Q291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBzbG90Q291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoek9yZGVyc1tpXSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAyICsgaV0gPSB1bmNoYW5nZWRbLS11bmNoYW5nZWRJbmRleF0gfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAyICsgaV0gPSB6T3JkZXJzW2ldIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1lT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkubGVuZ3RoICs9IDE7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlbZnJhbWVPZmZzZXQgKyAxXSA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBmcmFtZU9mZnNldDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZUJvbmVBbGxGcmFtZSA9IGZ1bmN0aW9uIChyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlbHBUcmFuc2Zvcm0uaWRlbnRpdHkoKTtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVFJBTlNGT1JNIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlVHJhbnNmb3JtKHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UUkFOU0ZPUk1dLCB0aGlzLl9oZWxwVHJhbnNmb3JtLCAxLjApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIE1vZGlmeSByb3RhdGlvbi5cclxuICAgICAgICAgICAgdmFyIHJvdGF0aW9uID0gdGhpcy5faGVscFRyYW5zZm9ybS5yb3RhdGlvbjtcclxuICAgICAgICAgICAgaWYgKGZyYW1lU3RhcnQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2Q2xvY2t3aXNlID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb24gPSB0aGlzLl9wcmV2Um90YXRpb24gKyBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKHJvdGF0aW9uIC0gdGhpcy5fcHJldlJvdGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2Q2xvY2t3aXNlID4gMCA/IHJvdGF0aW9uID49IHRoaXMuX3ByZXZSb3RhdGlvbiA6IHJvdGF0aW9uIDw9IHRoaXMuX3ByZXZSb3RhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmV2Q2xvY2t3aXNlID0gdGhpcy5fcHJldkNsb2Nrd2lzZSA+IDAgPyB0aGlzLl9wcmV2Q2xvY2t3aXNlIC0gMSA6IHRoaXMuX3ByZXZDbG9ja3dpc2UgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHRoaXMuX3ByZXZSb3RhdGlvbiArIHJvdGF0aW9uIC0gdGhpcy5fcHJldlJvdGF0aW9uICsgZHJhZ29uQm9uZXMuVHJhbnNmb3JtLlBJX0QgKiB0aGlzLl9wcmV2Q2xvY2t3aXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXZDbG9ja3dpc2UgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UV0VFTl9ST1RBVEUsIDAuMCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXZSb3RhdGlvbiA9IHJvdGF0aW9uO1xyXG4gICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9wYXJzZVR3ZWVuRnJhbWUocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZUZsb2F0T2Zmc2V0ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCArPSA2O1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0QXJyYXlbZnJhbWVGbG9hdE9mZnNldCsrXSA9IHRoaXMuX2hlbHBUcmFuc2Zvcm0ueDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5W2ZyYW1lRmxvYXRPZmZzZXQrK10gPSB0aGlzLl9oZWxwVHJhbnNmb3JtLnk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0KytdID0gcm90YXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0KytdID0gdGhpcy5faGVscFRyYW5zZm9ybS5za2V3O1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0QXJyYXlbZnJhbWVGbG9hdE9mZnNldCsrXSA9IHRoaXMuX2hlbHBUcmFuc2Zvcm0uc2NhbGVYO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0QXJyYXlbZnJhbWVGbG9hdE9mZnNldCsrXSA9IHRoaXMuX2hlbHBUcmFuc2Zvcm0uc2NhbGVZO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUFjdGlvbkRhdGFJbkZyYW1lKHJhd0RhdGEsIGZyYW1lU3RhcnQsIHRoaXMuX2JvbmUsIHRoaXMuX3Nsb3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gZnJhbWVPZmZzZXQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VCb25lVHJhbnNsYXRlRnJhbWUgPSBmdW5jdGlvbiAocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9wYXJzZVR3ZWVuRnJhbWUocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZUZsb2F0T2Zmc2V0ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCArPSAyO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0QXJyYXlbZnJhbWVGbG9hdE9mZnNldCsrXSA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlgsIDAuMCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0KytdID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuWSwgMC4wKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lT2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlQm9uZVJvdGF0ZUZyYW1lID0gZnVuY3Rpb24gKHJhd0RhdGEsIGZyYW1lU3RhcnQsIGZyYW1lQ291bnQpIHtcclxuICAgICAgICAgICAgLy8gTW9kaWZ5IHJvdGF0aW9uLlxyXG4gICAgICAgICAgICB2YXIgcm90YXRpb24gPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ST1RBVEUsIDAuMCkgKiBkcmFnb25Cb25lcy5UcmFuc2Zvcm0uREVHX1JBRDtcclxuICAgICAgICAgICAgaWYgKGZyYW1lU3RhcnQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2Q2xvY2t3aXNlID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb24gPSB0aGlzLl9wcmV2Um90YXRpb24gKyBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKHJvdGF0aW9uIC0gdGhpcy5fcHJldlJvdGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2Q2xvY2t3aXNlID4gMCA/IHJvdGF0aW9uID49IHRoaXMuX3ByZXZSb3RhdGlvbiA6IHJvdGF0aW9uIDw9IHRoaXMuX3ByZXZSb3RhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmV2Q2xvY2t3aXNlID0gdGhpcy5fcHJldkNsb2Nrd2lzZSA+IDAgPyB0aGlzLl9wcmV2Q2xvY2t3aXNlIC0gMSA6IHRoaXMuX3ByZXZDbG9ja3dpc2UgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHRoaXMuX3ByZXZSb3RhdGlvbiArIHJvdGF0aW9uIC0gdGhpcy5fcHJldlJvdGF0aW9uICsgZHJhZ29uQm9uZXMuVHJhbnNmb3JtLlBJX0QgKiB0aGlzLl9wcmV2Q2xvY2t3aXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXZDbG9ja3dpc2UgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5DTE9DS19XSVNFLCAwKTtcclxuICAgICAgICAgICAgdGhpcy5fcHJldlJvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgIHZhciBmcmFtZU9mZnNldCA9IHRoaXMuX3BhcnNlVHdlZW5GcmFtZShyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KTtcclxuICAgICAgICAgICAgdmFyIGZyYW1lRmxvYXRPZmZzZXQgPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0QXJyYXkubGVuZ3RoICs9IDI7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0KytdID0gcm90YXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0KytdID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0tFVywgMC4wKSAqIGRyYWdvbkJvbmVzLlRyYW5zZm9ybS5ERUdfUkFEO1xyXG4gICAgICAgICAgICByZXR1cm4gZnJhbWVPZmZzZXQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VCb25lU2NhbGVGcmFtZSA9IGZ1bmN0aW9uIChyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZU9mZnNldCA9IHRoaXMuX3BhcnNlVHdlZW5GcmFtZShyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KTtcclxuICAgICAgICAgICAgdmFyIGZyYW1lRmxvYXRPZmZzZXQgPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUZsb2F0QXJyYXkubGVuZ3RoICs9IDI7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0KytdID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuWCwgMS4wKTtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5W2ZyYW1lRmxvYXRPZmZzZXQrK10gPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ZLCAxLjApO1xyXG4gICAgICAgICAgICByZXR1cm4gZnJhbWVPZmZzZXQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VTdXJmYWNlRnJhbWUgPSBmdW5jdGlvbiAocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVGbG9hdE9mZnNldCA9IHRoaXMuX2ZyYW1lRmxvYXRBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZU9mZnNldCA9IHRoaXMuX3BhcnNlVHdlZW5GcmFtZShyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KTtcclxuICAgICAgICAgICAgdmFyIHJhd1ZlcnRpY2VzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlZFUlRJQ0VTXTtcclxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLk9GRlNFVCwgMCk7IC8vIHVpbnRcclxuICAgICAgICAgICAgdmFyIHZlcnRleENvdW50ID0gdGhpcy5fc3VyZmFjZS52ZXJ0aWNlcy5sZW5ndGggLyAyOyAvLyB1aW50XHJcbiAgICAgICAgICAgIHZhciB4ID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgeSA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCArPSB2ZXJ0ZXhDb3VudCAqIDI7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGV4Q291bnQgKiAyOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgb2Zmc2V0IHx8IGkgLSBvZmZzZXQgPj0gcmF3VmVydGljZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IDAuMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHggPSByYXdWZXJ0aWNlc1tpIC0gb2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpICsgMSA8IG9mZnNldCB8fCBpICsgMSAtIG9mZnNldCA+PSByYXdWZXJ0aWNlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB5ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeSA9IHJhd1ZlcnRpY2VzW2kgKyAxIC0gb2Zmc2V0XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0ICsgaV0gPSB4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5W2ZyYW1lRmxvYXRPZmZzZXQgKyBpICsgMV0gPSB5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmcmFtZVN0YXJ0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVJbnRPZmZzZXQgPSB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXkubGVuZ3RoICs9IDEgKyAxICsgMSArIDEgKyAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDAgLyogRGVmb3JtVmVydGV4T2Zmc2V0ICovXSA9IDA7IC8vIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDEgLyogRGVmb3JtQ291bnQgKi9dID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCAtIGZyYW1lRmxvYXRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5W2ZyYW1lSW50T2Zmc2V0ICsgMiAvKiBEZWZvcm1WYWx1ZUNvdW50ICovXSA9IHRoaXMuX2ZyYW1lRmxvYXRBcnJheS5sZW5ndGggLSBmcmFtZUZsb2F0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDMgLyogRGVmb3JtVmFsdWVPZmZzZXQgKi9dID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQgKyA0IC8qIERlZm9ybUZsb2F0T2Zmc2V0ICovXSA9IGZyYW1lRmxvYXRPZmZzZXQgLSB0aGlzLl9hbmltYXRpb24uZnJhbWVGbG9hdE9mZnNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVsaW5lQXJyYXlbdGhpcy5fdGltZWxpbmUub2Zmc2V0ICsgMyAvKiBUaW1lbGluZUZyYW1lVmFsdWVDb3VudCAqL10gPSBmcmFtZUludE9mZnNldCAtIHRoaXMuX2FuaW1hdGlvbi5mcmFtZUludE9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZnJhbWVPZmZzZXQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VTbG90RGlzcGxheUZyYW1lID0gZnVuY3Rpb24gKHJhd0RhdGEsIGZyYW1lU3RhcnQsIGZyYW1lQ291bnQpIHtcclxuICAgICAgICAgICAgdmFyIGZyYW1lT2Zmc2V0ID0gdGhpcy5fcGFyc2VGcmFtZShyYXdEYXRhLCBmcmFtZVN0YXJ0LCBmcmFtZUNvdW50KTtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKz0gMTtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVkFMVUUgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDFdID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVkFMVUUsIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVBcnJheVtmcmFtZU9mZnNldCArIDFdID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRElTUExBWV9JTkRFWCwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fcGFyc2VBY3Rpb25EYXRhSW5GcmFtZShyYXdEYXRhLCBmcmFtZVN0YXJ0LCB0aGlzLl9zbG90LnBhcmVudCwgdGhpcy5fc2xvdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmcmFtZU9mZnNldDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZVNsb3RDb2xvckZyYW1lID0gZnVuY3Rpb24gKHJhd0RhdGEsIGZyYW1lU3RhcnQsIGZyYW1lQ291bnQpIHtcclxuICAgICAgICAgICAgdmFyIGZyYW1lT2Zmc2V0ID0gdGhpcy5fcGFyc2VUd2VlbkZyYW1lKHJhd0RhdGEsIGZyYW1lU3RhcnQsIGZyYW1lQ291bnQpO1xyXG4gICAgICAgICAgICB2YXIgY29sb3JPZmZzZXQgPSAtMTtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVkFMVUUgaW4gcmF3RGF0YSB8fCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkNPTE9SIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdDb2xvciA9IGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVkFMVUUgaW4gcmF3RGF0YSA/IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5WQUxVRV0gOiByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ09MT1JdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiByYXdDb2xvcikgeyAvLyBEZXRlY3RzIHRoZSBwcmVzZW5jZSBvZiBjb2xvci5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW51c2VkLWV4cHJlc3Npb25cclxuICAgICAgICAgICAgICAgICAgICBrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlQ29sb3JUcmFuc2Zvcm0ocmF3Q29sb3IsIHRoaXMuX2hlbHBDb2xvclRyYW5zZm9ybSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JPZmZzZXQgPSB0aGlzLl9pbnRBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXkubGVuZ3RoICs9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXlbY29sb3JPZmZzZXQrK10gPSBNYXRoLnJvdW5kKHRoaXMuX2hlbHBDb2xvclRyYW5zZm9ybS5hbHBoYU11bHRpcGxpZXIgKiAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W2NvbG9yT2Zmc2V0KytdID0gTWF0aC5yb3VuZCh0aGlzLl9oZWxwQ29sb3JUcmFuc2Zvcm0ucmVkTXVsdGlwbGllciAqIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXlbY29sb3JPZmZzZXQrK10gPSBNYXRoLnJvdW5kKHRoaXMuX2hlbHBDb2xvclRyYW5zZm9ybS5ncmVlbk11bHRpcGxpZXIgKiAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W2NvbG9yT2Zmc2V0KytdID0gTWF0aC5yb3VuZCh0aGlzLl9oZWxwQ29sb3JUcmFuc2Zvcm0uYmx1ZU11bHRpcGxpZXIgKiAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W2NvbG9yT2Zmc2V0KytdID0gTWF0aC5yb3VuZCh0aGlzLl9oZWxwQ29sb3JUcmFuc2Zvcm0uYWxwaGFPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W2NvbG9yT2Zmc2V0KytdID0gTWF0aC5yb3VuZCh0aGlzLl9oZWxwQ29sb3JUcmFuc2Zvcm0ucmVkT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IE1hdGgucm91bmQodGhpcy5faGVscENvbG9yVHJhbnNmb3JtLmdyZWVuT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IE1hdGgucm91bmQodGhpcy5faGVscENvbG9yVHJhbnNmb3JtLmJsdWVPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yT2Zmc2V0IC09IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbG9yT2Zmc2V0IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RlZmF1bHRDb2xvck9mZnNldCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0Q29sb3JPZmZzZXQgPSBjb2xvck9mZnNldCA9IHRoaXMuX2ludEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheS5sZW5ndGggKz0gODtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXlbY29sb3JPZmZzZXQrK10gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ludEFycmF5W2NvbG9yT2Zmc2V0KytdID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheVtjb2xvck9mZnNldCsrXSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb2xvck9mZnNldCA9IHRoaXMuX2RlZmF1bHRDb2xvck9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZnJhbWVJbnRPZmZzZXQgPSB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVJbnRBcnJheS5sZW5ndGggKz0gMTtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldF0gPSBjb2xvck9mZnNldDtcclxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lT2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlU2xvdEZGREZyYW1lID0gZnVuY3Rpb24gKHJhd0RhdGEsIGZyYW1lU3RhcnQsIGZyYW1lQ291bnQpIHtcclxuICAgICAgICAgICAgdmFyIGZyYW1lRmxvYXRPZmZzZXQgPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9wYXJzZVR3ZWVuRnJhbWUocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgIHZhciByYXdWZXJ0aWNlcyA9IGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVkVSVElDRVMgaW4gcmF3RGF0YSA/IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5WRVJUSUNFU10gOiBudWxsO1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuT0ZGU0VULCAwKTsgLy8gdWludFxyXG4gICAgICAgICAgICB2YXIgdmVydGV4Q291bnQgPSB0aGlzLl9pbnRBcnJheVt0aGlzLl9tZXNoLnZlcnRpY2VzLm9mZnNldCArIDAgLyogTWVzaFZlcnRleENvdW50ICovXTtcclxuICAgICAgICAgICAgdmFyIG1lc2hOYW1lID0gdGhpcy5fbWVzaC5wYXJlbnQubmFtZSArIFwiX1wiICsgdGhpcy5fc2xvdC5uYW1lICsgXCJfXCIgKyB0aGlzLl9tZXNoLm5hbWU7XHJcbiAgICAgICAgICAgIHZhciB3ZWlnaHQgPSB0aGlzLl9tZXNoLnZlcnRpY2VzLndlaWdodDtcclxuICAgICAgICAgICAgdmFyIHggPSAwLjA7XHJcbiAgICAgICAgICAgIHZhciB5ID0gMC4wO1xyXG4gICAgICAgICAgICB2YXIgaUIgPSAwO1xyXG4gICAgICAgICAgICB2YXIgaVYgPSAwO1xyXG4gICAgICAgICAgICBpZiAod2VpZ2h0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3U2xvdFBvc2UgPSB0aGlzLl93ZWlnaHRTbG90UG9zZVttZXNoTmFtZV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oZWxwTWF0cml4QS5jb3B5RnJvbUFycmF5KHJhd1Nsb3RQb3NlLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheS5sZW5ndGggKz0gd2VpZ2h0LmNvdW50ICogMjtcclxuICAgICAgICAgICAgICAgIGlCID0gd2VpZ2h0Lm9mZnNldCArIDIgLyogV2VpZ3RoQm9uZUluZGljZXMgKi8gKyB3ZWlnaHQuYm9uZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCArPSB2ZXJ0ZXhDb3VudCAqIDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0ZXhDb3VudCAqIDI7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJhd1ZlcnRpY2VzID09PSBudWxsKSB7IC8vIEZpbGwgMC5cclxuICAgICAgICAgICAgICAgICAgICB4ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IG9mZnNldCB8fCBpIC0gb2Zmc2V0ID49IHJhd1ZlcnRpY2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IHJhd1ZlcnRpY2VzW2kgLSBvZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSArIDEgPCBvZmZzZXQgfHwgaSArIDEgLSBvZmZzZXQgPj0gcmF3VmVydGljZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gcmF3VmVydGljZXNbaSArIDEgLSBvZmZzZXRdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh3ZWlnaHQgIT09IG51bGwpIHsgLy8gSWYgbWVzaCBpcyBza2lubmVkLCB0cmFuc2Zvcm0gcG9pbnQgYnkgYm9uZSBiaW5kIHBvc2UuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd0JvbmVQb3NlcyA9IHRoaXMuX3dlaWdodEJvbmVQb3Nlc1ttZXNoTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlcnRleEJvbmVDb3VudCA9IHRoaXMuX2ludEFycmF5W2lCKytdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBNYXRyaXhBLnRyYW5zZm9ybVBvaW50KHgsIHksIHRoaXMuX2hlbHBQb2ludCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMuX2hlbHBQb2ludC54O1xyXG4gICAgICAgICAgICAgICAgICAgIHkgPSB0aGlzLl9oZWxwUG9pbnQueTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZlcnRleEJvbmVDb3VudDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lSW5kZXggPSB0aGlzLl9pbnRBcnJheVtpQisrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVscE1hdHJpeEIuY29weUZyb21BcnJheShyYXdCb25lUG9zZXMsIGJvbmVJbmRleCAqIDcgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVscE1hdHJpeEIuaW52ZXJ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hlbHBNYXRyaXhCLnRyYW5zZm9ybVBvaW50KHgsIHksIHRoaXMuX2hlbHBQb2ludCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0ICsgaVYrK10gPSB0aGlzLl9oZWxwUG9pbnQueDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5W2ZyYW1lRmxvYXRPZmZzZXQgKyBpVisrXSA9IHRoaXMuX2hlbHBQb2ludC55O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0ICsgaV0gPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtmcmFtZUZsb2F0T2Zmc2V0ICsgaSArIDFdID0geTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZnJhbWVTdGFydCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lSW50T2Zmc2V0ID0gdGhpcy5fZnJhbWVJbnRBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aCArPSAxICsgMSArIDEgKyAxICsgMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQgKyAwIC8qIERlZm9ybVZlcnRleE9mZnNldCAqL10gPSB0aGlzLl9tZXNoLnZlcnRpY2VzLm9mZnNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQgKyAxIC8qIERlZm9ybUNvdW50ICovXSA9IHRoaXMuX2ZyYW1lRmxvYXRBcnJheS5sZW5ndGggLSBmcmFtZUZsb2F0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVJbnRBcnJheVtmcmFtZUludE9mZnNldCArIDIgLyogRGVmb3JtVmFsdWVDb3VudCAqL10gPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXkubGVuZ3RoIC0gZnJhbWVGbG9hdE9mZnNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQgKyAzIC8qIERlZm9ybVZhbHVlT2Zmc2V0ICovXSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5W2ZyYW1lSW50T2Zmc2V0ICsgNCAvKiBEZWZvcm1GbG9hdE9mZnNldCAqL10gPSBmcmFtZUZsb2F0T2Zmc2V0IC0gdGhpcy5fYW5pbWF0aW9uLmZyYW1lRmxvYXRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5W3RoaXMuX3RpbWVsaW5lLm9mZnNldCArIDMgLyogVGltZWxpbmVGcmFtZVZhbHVlQ291bnQgKi9dID0gZnJhbWVJbnRPZmZzZXQgLSB0aGlzLl9hbmltYXRpb24uZnJhbWVJbnRPZmZzZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lT2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlSUtDb25zdHJhaW50RnJhbWUgPSBmdW5jdGlvbiAocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9wYXJzZVR3ZWVuRnJhbWUocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZUludE9mZnNldCA9IHRoaXMuX2ZyYW1lSW50QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aCArPSAyO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5W2ZyYW1lSW50T2Zmc2V0KytdID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0Qm9vbGVhbihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkJFTkRfUE9TSVRJVkUsIHRydWUpID8gMSA6IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXlbZnJhbWVJbnRPZmZzZXQrK10gPSBNYXRoLnJvdW5kKE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLldFSUdIVCwgMS4wKSAqIDEwMC4wKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZyYW1lT2Zmc2V0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCkge1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVPZmZzZXQgPSB0aGlzLl9wYXJzZVR3ZWVuRnJhbWUocmF3RGF0YSwgZnJhbWVTdGFydCwgZnJhbWVDb3VudCk7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZUludE9mZnNldCA9IHRoaXMuX2ZyYW1lSW50QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aCArPSAyO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5W2ZyYW1lSW50T2Zmc2V0KytdID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuVkFMVUUsIDApO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5W2ZyYW1lSW50T2Zmc2V0KytdID0gTWF0aC5yb3VuZChPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5XRUlHSFQsIDEuMCkgKiAxMDAuMCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmcmFtZU9mZnNldDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZUFjdGlvbkRhdGEgPSBmdW5jdGlvbiAocmF3RGF0YSwgdHlwZSwgYm9uZSwgc2xvdCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0aW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJhd0RhdGEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY3Rpb24gPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5BY3Rpb25EYXRhKTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi50eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5uYW1lID0gcmF3RGF0YTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5ib25lID0gYm9uZTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5zbG90ID0gc2xvdDtcclxuICAgICAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHJhd0RhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByYXdEYXRhXzIgPSByYXdEYXRhOyBfaSA8IHJhd0RhdGFfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3QWN0aW9uID0gcmF3RGF0YV8yW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQWN0aW9uRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuR09UT19BTkRfUExBWSBpbiByYXdBY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnR5cGUgPSAwIC8qIFBsYXkgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5uYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0FjdGlvbiwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5HT1RPX0FORF9QTEFZLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRZUEUgaW4gcmF3QWN0aW9uICYmIHR5cGVvZiByYXdBY3Rpb25bZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UWVBFXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnR5cGUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLl9nZXRBY3Rpb25UeXBlKHJhd0FjdGlvbltkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlRZUEVdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi50eXBlID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0FjdGlvbiwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5UWVBFLCB0eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubmFtZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdBY3Rpb24sIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuTkFNRSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkJPTkUgaW4gcmF3QWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBib25lTmFtZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdBY3Rpb24sIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQk9ORSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5ib25lID0gdGhpcy5fYXJtYXR1cmUuZ2V0Qm9uZShib25lTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uYm9uZSA9IGJvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNMT1QgaW4gcmF3QWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzbG90TmFtZSA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdBY3Rpb24sIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0xPVCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5zbG90ID0gdGhpcy5fYXJtYXR1cmUuZ2V0U2xvdChzbG90TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uc2xvdCA9IHNsb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VyRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuSU5UUyBpbiByYXdBY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJEYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YSA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLlVzZXJEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmF3SW50cyA9IHJhd0FjdGlvbltkcmFnb25Cb25lcy5EYXRhUGFyc2VyLklOVFNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHJhd0ludHNfMSA9IHJhd0ludHM7IF9hIDwgcmF3SW50c18xLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1ZhbHVlID0gcmF3SW50c18xW19hXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhLmFkZEludChyYXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRkxPQVRTIGluIHJhd0FjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlckRhdGEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJEYXRhID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuVXNlckRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdGbG9hdHMgPSByYXdBY3Rpb25bZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GTE9BVFNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIHJhd0Zsb2F0c18xID0gcmF3RmxvYXRzOyBfYiA8IHJhd0Zsb2F0c18xLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1ZhbHVlID0gcmF3RmxvYXRzXzFbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEuYWRkRmxvYXQocmF3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNUUklOR1MgaW4gcmF3QWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyRGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlckRhdGEgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5Vc2VyRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1N0cmluZ3MgPSByYXdBY3Rpb25bZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TVFJJTkdTXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCByYXdTdHJpbmdzXzEgPSByYXdTdHJpbmdzOyBfYyA8IHJhd1N0cmluZ3NfMS5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdWYWx1ZSA9IHJhd1N0cmluZ3NfMVtfY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyRGF0YS5hZGRTdHJpbmcocmF3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5kYXRhID0gdXNlckRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbnM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiAocmF3RGF0YSwgdHJhbnNmb3JtLCBzY2FsZSkge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0ueCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlgsIDAuMCkgKiBzY2FsZTtcclxuICAgICAgICAgICAgdHJhbnNmb3JtLnkgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5ZLCAwLjApICogc2NhbGU7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlJPVEFURSBpbiByYXdEYXRhIHx8IGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0tFVyBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0ucm90YXRpb24gPSBkcmFnb25Cb25lcy5UcmFuc2Zvcm0ubm9ybWFsaXplUmFkaWFuKE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlJPVEFURSwgMC4wKSAqIGRyYWdvbkJvbmVzLlRyYW5zZm9ybS5ERUdfUkFEKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybS5za2V3ID0gZHJhZ29uQm9uZXMuVHJhbnNmb3JtLm5vcm1hbGl6ZVJhZGlhbihPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TS0VXLCAwLjApICogZHJhZ29uQm9uZXMuVHJhbnNmb3JtLkRFR19SQUQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0tFV19YIGluIHJhd0RhdGEgfHwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TS0VXX1kgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtLnJvdGF0aW9uID0gZHJhZ29uQm9uZXMuVHJhbnNmb3JtLm5vcm1hbGl6ZVJhZGlhbihPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TS0VXX1ksIDAuMCkgKiBkcmFnb25Cb25lcy5UcmFuc2Zvcm0uREVHX1JBRCk7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0uc2tldyA9IGRyYWdvbkJvbmVzLlRyYW5zZm9ybS5ub3JtYWxpemVSYWRpYW4oT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0tFV19YLCAwLjApICogZHJhZ29uQm9uZXMuVHJhbnNmb3JtLkRFR19SQUQpIC0gdHJhbnNmb3JtLnJvdGF0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS5zY2FsZVggPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TQ0FMRV9YLCAxLjApO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm0uc2NhbGVZID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0NBTEVfWSwgMS4wKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdERhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZUNvbG9yVHJhbnNmb3JtID0gZnVuY3Rpb24gKHJhd0RhdGEsIGNvbG9yKSB7XHJcbiAgICAgICAgICAgIGNvbG9yLmFscGhhTXVsdGlwbGllciA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFMUEhBX01VTFRJUExJRVIsIDEwMCkgKiAwLjAxO1xyXG4gICAgICAgICAgICBjb2xvci5yZWRNdWx0aXBsaWVyID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuUkVEX01VTFRJUExJRVIsIDEwMCkgKiAwLjAxO1xyXG4gICAgICAgICAgICBjb2xvci5ncmVlbk11bHRpcGxpZXIgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5HUkVFTl9NVUxUSVBMSUVSLCAxMDApICogMC4wMTtcclxuICAgICAgICAgICAgY29sb3IuYmx1ZU11bHRpcGxpZXIgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CTFVFX01VTFRJUExJRVIsIDEwMCkgKiAwLjAxO1xyXG4gICAgICAgICAgICBjb2xvci5hbHBoYU9mZnNldCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFMUEhBX09GRlNFVCwgMCk7XHJcbiAgICAgICAgICAgIGNvbG9yLnJlZE9mZnNldCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlJFRF9PRkZTRVQsIDApO1xyXG4gICAgICAgICAgICBjb2xvci5ncmVlbk9mZnNldCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkdSRUVOX09GRlNFVCwgMCk7XHJcbiAgICAgICAgICAgIGNvbG9yLmJsdWVPZmZzZXQgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CTFVFX09GRlNFVCwgMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VBcnJheSA9IGZ1bmN0aW9uIChyYXdEYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxyXG4gICAgICAgICAgICByYXdEYXRhO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRBcnJheS5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9mbG9hdEFycmF5Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXkubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVBcnJheS5sZW5ndGggPSAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUuX21vZGlmeUFycmF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBBbGlnbi5cclxuICAgICAgICAgICAgaWYgKCh0aGlzLl9pbnRBcnJheS5sZW5ndGggJSBJbnQxNkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW50QXJyYXkucHVzaCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHRoaXMuX2ZyYW1lSW50QXJyYXkubGVuZ3RoICUgSW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVCkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSW50QXJyYXkucHVzaCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHRoaXMuX2ZyYW1lQXJyYXkubGVuZ3RoICUgSW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVCkgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXkucHVzaCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHRoaXMuX3RpbWVsaW5lQXJyYXkubGVuZ3RoICUgVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lbGluZUFycmF5LnB1c2goMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGwxID0gdGhpcy5faW50QXJyYXkubGVuZ3RoICogSW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcclxuICAgICAgICAgICAgdmFyIGwyID0gdGhpcy5fZmxvYXRBcnJheS5sZW5ndGggKiBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XHJcbiAgICAgICAgICAgIHZhciBsMyA9IHRoaXMuX2ZyYW1lSW50QXJyYXkubGVuZ3RoICogSW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcclxuICAgICAgICAgICAgdmFyIGw0ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCAqIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcclxuICAgICAgICAgICAgdmFyIGw1ID0gdGhpcy5fZnJhbWVBcnJheS5sZW5ndGggKiBJbnQxNkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xyXG4gICAgICAgICAgICB2YXIgbDYgPSB0aGlzLl90aW1lbGluZUFycmF5Lmxlbmd0aCAqIFVpbnQxNkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UO1xyXG4gICAgICAgICAgICB2YXIgbFRvdGFsID0gbDEgKyBsMiArIGwzICsgbDQgKyBsNSArIGw2O1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzaGFyZUJ1ZmZlciA9IGRyYWdvbkJvbmVzLndlYkFzc2VtYmx5TW9kdWxlLkhFQVAxNi5idWZmZXI7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyUG9pbnRlciA9IGRyYWdvbkJvbmVzLndlYkFzc2VtYmx5TW9kdWxlLl9tYWxsb2MobFRvdGFsKTtcclxuICAgICAgICAgICAgICAgIHZhciBpbnRBcnJheSA9IG5ldyBJbnQxNkFycmF5KHNoYXJlQnVmZmVyLCBidWZmZXJQb2ludGVyLCB0aGlzLl9pbnRBcnJheS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZsb2F0QXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KHNoYXJlQnVmZmVyLCBidWZmZXJQb2ludGVyICsgbDEsIHRoaXMuX2Zsb2F0QXJyYXkubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHZhciBmcmFtZUludEFycmF5ID0gbmV3IEludDE2QXJyYXkoc2hhcmVCdWZmZXIsIGJ1ZmZlclBvaW50ZXIgKyBsMSArIGwyLCB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVGbG9hdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShzaGFyZUJ1ZmZlciwgYnVmZmVyUG9pbnRlciArIGwxICsgbDIgKyBsMywgdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVBcnJheSA9IG5ldyBJbnQxNkFycmF5KHNoYXJlQnVmZmVyLCBidWZmZXJQb2ludGVyICsgbDEgKyBsMiArIGwzICsgbDQsIHRoaXMuX2ZyYW1lQXJyYXkubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZUFycmF5ID0gbmV3IFVpbnQxNkFycmF5KHNoYXJlQnVmZmVyLCBidWZmZXJQb2ludGVyICsgbDEgKyBsMiArIGwzICsgbDQgKyBsNSwgdGhpcy5fdGltZWxpbmVBcnJheS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9pbnRBcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnRBcnJheVtpXSA9IHRoaXMuX2ludEFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9mbG9hdEFycmF5Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZsb2F0QXJyYXlbaV0gPSB0aGlzLl9mbG9hdEFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9mcmFtZUludEFycmF5Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lSW50QXJyYXlbaV0gPSB0aGlzLl9mcmFtZUludEFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9mcmFtZUZsb2F0QXJyYXkubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVGbG9hdEFycmF5W2ldID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9mcmFtZUFycmF5Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lQXJyYXlbaV0gPSB0aGlzLl9mcmFtZUFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl90aW1lbGluZUFycmF5Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVsaW5lQXJyYXlbaV0gPSB0aGlzLl90aW1lbGluZUFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZHJhZ29uQm9uZXMud2ViQXNzZW1ibHlNb2R1bGUuc2V0RGF0YUJpbmFyeSh0aGlzLl9kYXRhLCBidWZmZXJQb2ludGVyLCBsMSwgbDIsIGwzLCBsNCwgbDUsIGw2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBiaW5hcnkgPSBuZXcgQXJyYXlCdWZmZXIobFRvdGFsKTtcclxuICAgICAgICAgICAgICAgIHZhciBpbnRBcnJheSA9IG5ldyBJbnQxNkFycmF5KGJpbmFyeSwgMCwgdGhpcy5faW50QXJyYXkubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHZhciBmbG9hdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShiaW5hcnksIGwxLCB0aGlzLl9mbG9hdEFycmF5Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVJbnRBcnJheSA9IG5ldyBJbnQxNkFycmF5KGJpbmFyeSwgbDEgKyBsMiwgdGhpcy5fZnJhbWVJbnRBcnJheS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lRmxvYXRBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoYmluYXJ5LCBsMSArIGwyICsgbDMsIHRoaXMuX2ZyYW1lRmxvYXRBcnJheS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lQXJyYXkgPSBuZXcgSW50MTZBcnJheShiaW5hcnksIGwxICsgbDIgKyBsMyArIGw0LCB0aGlzLl9mcmFtZUFycmF5Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVBcnJheSA9IG5ldyBVaW50MTZBcnJheShiaW5hcnksIGwxICsgbDIgKyBsMyArIGw0ICsgbDUsIHRoaXMuX3RpbWVsaW5lQXJyYXkubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5faW50QXJyYXkubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW50QXJyYXlbaV0gPSB0aGlzLl9pbnRBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fZmxvYXRBcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBmbG9hdEFycmF5W2ldID0gdGhpcy5fZmxvYXRBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fZnJhbWVJbnRBcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZUludEFycmF5W2ldID0gdGhpcy5fZnJhbWVJbnRBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lRmxvYXRBcnJheVtpXSA9IHRoaXMuX2ZyYW1lRmxvYXRBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fZnJhbWVBcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZUFycmF5W2ldID0gdGhpcy5fZnJhbWVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5fdGltZWxpbmVBcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZUFycmF5W2ldID0gdGhpcy5fdGltZWxpbmVBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuYmluYXJ5ID0gYmluYXJ5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5pbnRBcnJheSA9IGludEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5mbG9hdEFycmF5ID0gZmxvYXRBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuZnJhbWVJbnRBcnJheSA9IGZyYW1lSW50QXJyYXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhLmZyYW1lRmxvYXRBcnJheSA9IGZyYW1lRmxvYXRBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuZnJhbWVBcnJheSA9IGZyYW1lQXJyYXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhLnRpbWVsaW5lQXJyYXkgPSB0aW1lbGluZUFycmF5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRDb2xvck9mZnNldCA9IC0xO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUucGFyc2VEcmFnb25Cb25lc0RhdGEgPSBmdW5jdGlvbiAocmF3RGF0YSwgc2NhbGUpIHtcclxuICAgICAgICAgICAgaWYgKHNjYWxlID09PSB2b2lkIDApIHsgc2NhbGUgPSAxOyB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJhd0RhdGEgIT09IG51bGwgJiYgcmF3RGF0YSAhPT0gdW5kZWZpbmVkLCBcIkRhdGEgZXJyb3IuXCIpO1xyXG4gICAgICAgICAgICB2YXIgdmVyc2lvbiA9IE9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlZFUlNJT04sIFwiXCIpO1xyXG4gICAgICAgICAgICB2YXIgY29tcGF0aWJsZVZlcnNpb24gPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5DT01QQVRJQkxFX1ZFUlNJT04sIFwiXCIpO1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5EQVRBX1ZFUlNJT05TLmluZGV4T2YodmVyc2lvbikgPj0gMCB8fFxyXG4gICAgICAgICAgICAgICAgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5EQVRBX1ZFUlNJT05TLmluZGV4T2YoY29tcGF0aWJsZVZlcnNpb24pID49IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXNEYXRhKTtcclxuICAgICAgICAgICAgICAgIGRhdGEudmVyc2lvbiA9IHZlcnNpb247XHJcbiAgICAgICAgICAgICAgICBkYXRhLm5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIGRhdGEuZnJhbWVSYXRlID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRlJBTUVfUkFURSwgMjQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZnJhbWVSYXRlID09PSAwKSB7IC8vIERhdGEgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5mcmFtZVJhdGUgPSAyNDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkFSTUFUVVJFIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZUFycmF5KHJhd0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdBcm1hdHVyZXMgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQVJNQVRVUkVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgcmF3QXJtYXR1cmVzXzEgPSByYXdBcm1hdHVyZXM7IF9pIDwgcmF3QXJtYXR1cmVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXdBcm1hdHVyZSA9IHJhd0FybWF0dXJlc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hZGRBcm1hdHVyZSh0aGlzLl9wYXJzZUFybWF0dXJlKHJhd0FybWF0dXJlLCBzY2FsZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RhdGEuYmluYXJ5KSB7IC8vIERyYWdvbkJvbmVzLndlYkFzc2VtYmx5ID8gMCA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGlmeUFycmF5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNUQUdFIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGFnZSA9IGRhdGEuZ2V0QXJtYXR1cmUoT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU1RBR0UsIFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS5hcm1hdHVyZU5hbWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGFnZSA9IGRhdGEuZ2V0QXJtYXR1cmUoZGF0YS5hcm1hdHVyZU5hbWVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5URVhUVVJFX0FUTEFTIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYXdUZXh0dXJlQXRsYXNlcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5URVhUVVJFX0FUTEFTXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoZmFsc2UsIFwiTm9uc3VwcG9ydCBkYXRhIHZlcnNpb246IFwiICsgdmVyc2lvbiArIFwiXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiUGxlYXNlIGNvbnZlcnQgRHJhZ29uQm9uZXMgZGF0YSB0byBzdXBwb3J0IHZlcnNpb24uXFxuXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiUmVhZCBtb3JlOiBodHRwczovL2dpdGh1Yi5jb20vRHJhZ29uQm9uZXMvVG9vbHMvXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0RGF0YVBhcnNlci5wcm90b3R5cGUucGFyc2VUZXh0dXJlQXRsYXNEYXRhID0gZnVuY3Rpb24gKHJhd0RhdGEsIHRleHR1cmVBdGxhc0RhdGEsIHNjYWxlKSB7XHJcbiAgICAgICAgICAgIGlmIChzY2FsZSA9PT0gdm9pZCAwKSB7IHNjYWxlID0gMS4wOyB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJhd0RhdGEgIT09IHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIGlmIChyYXdEYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmF3VGV4dHVyZUF0bGFzZXMgPT09IG51bGwgfHwgdGhpcy5fcmF3VGV4dHVyZUF0bGFzZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1RleHR1cmVBdGxhcyA9IHRoaXMuX3Jhd1RleHR1cmVBdGxhc2VzW3RoaXMuX3Jhd1RleHR1cmVBdGxhc0luZGV4KytdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZVRleHR1cmVBdGxhc0RhdGEocmF3VGV4dHVyZUF0bGFzLCB0ZXh0dXJlQXRsYXNEYXRhLCBzY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmF3VGV4dHVyZUF0bGFzSW5kZXggPj0gdGhpcy5fcmF3VGV4dHVyZUF0bGFzZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmF3VGV4dHVyZUF0bGFzSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jhd1RleHR1cmVBdGxhc2VzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFRleHR1cmUgZm9ybWF0LlxyXG4gICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhLndpZHRoID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuV0lEVEgsIDApO1xyXG4gICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhLmhlaWdodCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkhFSUdIVCwgMCk7XHJcbiAgICAgICAgICAgIHRleHR1cmVBdGxhc0RhdGEuc2NhbGUgPSBzY2FsZSA9PT0gMS4wID8gKDEuMCAvIE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNDQUxFLCAxLjApKSA6IHNjYWxlO1xyXG4gICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhLm5hbWUgPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5OQU1FLCBcIlwiKTtcclxuICAgICAgICAgICAgdGV4dHVyZUF0bGFzRGF0YS5pbWFnZVBhdGggPSBPYmplY3REYXRhUGFyc2VyLl9nZXRTdHJpbmcocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5JTUFHRV9QQVRILCBcIlwiKTtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU1VCX1RFWFRVUkUgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1RleHR1cmVzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNVQl9URVhUVVJFXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmF3VGV4dHVyZXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1RleHR1cmUgPSByYXdUZXh0dXJlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZURhdGEgPSB0ZXh0dXJlQXRsYXNEYXRhLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlRGF0YS5yb3RhdGVkID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0Qm9vbGVhbihyYXdUZXh0dXJlLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlJPVEFURUQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlRGF0YS5uYW1lID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0U3RyaW5nKHJhd1RleHR1cmUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuTkFNRSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZURhdGEucmVnaW9uLnggPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3VGV4dHVyZSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5YLCAwLjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVEYXRhLnJlZ2lvbi55ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd1RleHR1cmUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuWSwgMC4wKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlRGF0YS5yZWdpb24ud2lkdGggPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3VGV4dHVyZSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5XSURUSCwgMC4wKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlRGF0YS5yZWdpb24uaGVpZ2h0ID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd1RleHR1cmUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuSEVJR0hULCAwLjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZVdpZHRoID0gT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd1RleHR1cmUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRlJBTUVfV0lEVEgsIC0xLjApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZUhlaWdodCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdUZXh0dXJlLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FX0hFSUdIVCwgLTEuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYW1lV2lkdGggPiAwLjAgJiYgZnJhbWVIZWlnaHQgPiAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZURhdGEuZnJhbWUgPSBkcmFnb25Cb25lcy5UZXh0dXJlRGF0YS5jcmVhdGVSZWN0YW5nbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZURhdGEuZnJhbWUueCA9IE9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdUZXh0dXJlLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkZSQU1FX1gsIDAuMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmVEYXRhLmZyYW1lLnkgPSBPYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3VGV4dHVyZSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GUkFNRV9ZLCAwLjApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlRGF0YS5mcmFtZS53aWR0aCA9IGZyYW1lV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmVEYXRhLmZyYW1lLmhlaWdodCA9IGZyYW1lSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhLmFkZFRleHR1cmUodGV4dHVyZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rIGRyYWdvbkJvbmVzLkJhc2VGYWN0b3J5I3BhcnNlRHJhZ29uQm9uZXNEYXRhKCl9LlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlt7Llup/lvIPvvIzor7flj4LogIMge0BsaW5rIGRyYWdvbkJvbmVzLkJhc2VGYWN0b3J5I3BhcnNlRHJhZ29uQm9uZXNEYXRhKCl944CCXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0RGF0YVBhcnNlci5fb2JqZWN0RGF0YVBhcnNlckluc3RhbmNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3REYXRhUGFyc2VyLl9vYmplY3REYXRhUGFyc2VySW5zdGFuY2UgPSBuZXcgT2JqZWN0RGF0YVBhcnNlcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3REYXRhUGFyc2VyLl9vYmplY3REYXRhUGFyc2VySW5zdGFuY2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3REYXRhUGFyc2VyLl9vYmplY3REYXRhUGFyc2VySW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBPYmplY3REYXRhUGFyc2VyO1xyXG4gICAgfShkcmFnb25Cb25lcy5EYXRhUGFyc2VyKSk7XHJcbiAgICBkcmFnb25Cb25lcy5PYmplY3REYXRhUGFyc2VyID0gT2JqZWN0RGF0YVBhcnNlcjtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBBY3Rpb25GcmFtZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBBY3Rpb25GcmFtZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5mcmFtZVN0YXJ0ID0gMDtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBBY3Rpb25GcmFtZTtcclxuICAgIH0oKSk7XHJcbiAgICBkcmFnb25Cb25lcy5BY3Rpb25GcmFtZSA9IEFjdGlvbkZyYW1lO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHZhciBCaW5hcnlEYXRhUGFyc2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhCaW5hcnlEYXRhUGFyc2VyLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEJpbmFyeURhdGFQYXJzZXIoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgQmluYXJ5RGF0YVBhcnNlci5wcm90b3R5cGUuX2luUmFuZ2UgPSBmdW5jdGlvbiAoYSwgbWluLCBtYXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1pbiA8PSBhICYmIGEgPD0gbWF4O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQmluYXJ5RGF0YVBhcnNlci5wcm90b3R5cGUuX2RlY29kZVVURjggPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgRU9GX2J5dGUgPSAtMTtcclxuICAgICAgICAgICAgdmFyIEVPRl9jb2RlX3BvaW50ID0gLTE7XHJcbiAgICAgICAgICAgIHZhciBGQVRBTF9QT0lOVCA9IDB4RkZGRDtcclxuICAgICAgICAgICAgdmFyIHBvcyA9IDA7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgY29kZV9wb2ludDtcclxuICAgICAgICAgICAgdmFyIHV0ZjhfY29kZV9wb2ludCA9IDA7XHJcbiAgICAgICAgICAgIHZhciB1dGY4X2J5dGVzX25lZWRlZCA9IDA7XHJcbiAgICAgICAgICAgIHZhciB1dGY4X2J5dGVzX3NlZW4gPSAwO1xyXG4gICAgICAgICAgICB2YXIgdXRmOF9sb3dlcl9ib3VuZGFyeSA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlIChkYXRhLmxlbmd0aCA+IHBvcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9ieXRlID0gZGF0YVtwb3MrK107XHJcbiAgICAgICAgICAgICAgICBpZiAoX2J5dGUgPT09IEVPRl9ieXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0ZjhfYnl0ZXNfbmVlZGVkICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVfcG9pbnQgPSBGQVRBTF9QT0lOVDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVfcG9pbnQgPSBFT0ZfY29kZV9wb2ludDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXRmOF9ieXRlc19uZWVkZWQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luUmFuZ2UoX2J5dGUsIDB4MDAsIDB4N0YpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlX3BvaW50ID0gX2J5dGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5SYW5nZShfYnl0ZSwgMHhDMiwgMHhERikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGY4X2J5dGVzX25lZWRlZCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmOF9sb3dlcl9ib3VuZGFyeSA9IDB4ODA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmOF9jb2RlX3BvaW50ID0gX2J5dGUgLSAweEMwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5faW5SYW5nZShfYnl0ZSwgMHhFMCwgMHhFRikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGY4X2J5dGVzX25lZWRlZCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmOF9sb3dlcl9ib3VuZGFyeSA9IDB4ODAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhfY29kZV9wb2ludCA9IF9ieXRlIC0gMHhFMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2luUmFuZ2UoX2J5dGUsIDB4RjAsIDB4RjQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmOF9ieXRlc19uZWVkZWQgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhfbG93ZXJfYm91bmRhcnkgPSAweDEwMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhfY29kZV9wb2ludCA9IF9ieXRlIC0gMHhGMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmOF9jb2RlX3BvaW50ID0gdXRmOF9jb2RlX3BvaW50ICogTWF0aC5wb3coNjQsIHV0ZjhfYnl0ZXNfbmVlZGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVfcG9pbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLl9pblJhbmdlKF9ieXRlLCAweDgwLCAweEJGKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGY4X2NvZGVfcG9pbnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGY4X2J5dGVzX25lZWRlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhfYnl0ZXNfc2VlbiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhfbG93ZXJfYm91bmRhcnkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZV9wb2ludCA9IF9ieXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRmOF9ieXRlc19zZWVuICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhfY29kZV9wb2ludCA9IHV0ZjhfY29kZV9wb2ludCArIChfYnl0ZSAtIDB4ODApICogTWF0aC5wb3coNjQsIHV0ZjhfYnl0ZXNfbmVlZGVkIC0gdXRmOF9ieXRlc19zZWVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHV0ZjhfYnl0ZXNfc2VlbiAhPT0gdXRmOF9ieXRlc19uZWVkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVfcG9pbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNwID0gdXRmOF9jb2RlX3BvaW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvd2VyX2JvdW5kYXJ5ID0gdXRmOF9sb3dlcl9ib3VuZGFyeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0ZjhfY29kZV9wb2ludCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGY4X2J5dGVzX25lZWRlZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGY4X2J5dGVzX3NlZW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRmOF9sb3dlcl9ib3VuZGFyeSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5SYW5nZShjcCwgbG93ZXJfYm91bmRhcnksIDB4MTBGRkZGKSAmJiAhdGhpcy5faW5SYW5nZShjcCwgMHhEODAwLCAweERGRkYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZV9wb2ludCA9IGNwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZV9wb2ludCA9IF9ieXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9EZWNvZGUgc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBpZiAoY29kZV9wb2ludCAhPT0gbnVsbCAmJiBjb2RlX3BvaW50ICE9PSBFT0ZfY29kZV9wb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlX3BvaW50IDw9IDB4RkZGRikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZV9wb2ludCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlX3BvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVfcG9pbnQgLT0gMHgxMDAwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwICsgKChjb2RlX3BvaW50ID4+IDEwKSAmIDB4M2ZmKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4REMwMCArIChjb2RlX3BvaW50ICYgMHgzZmYpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEJpbmFyeURhdGFQYXJzZXIucHJvdG90eXBlLl9nZXRVVEYxNktleSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmNoYXJDb2RlQXQoaSkgPiAyNTUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCaW5hcnlEYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VCaW5hcnlUaW1lbGluZSA9IGZ1bmN0aW9uICh0eXBlLCBvZmZzZXQsIHRpbWVsaW5lRGF0YSkge1xyXG4gICAgICAgICAgICBpZiAodGltZWxpbmVEYXRhID09PSB2b2lkIDApIHsgdGltZWxpbmVEYXRhID0gbnVsbDsgfVxyXG4gICAgICAgICAgICB2YXIgdGltZWxpbmUgPSB0aW1lbGluZURhdGEgIT09IG51bGwgPyB0aW1lbGluZURhdGEgOiBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5UaW1lbGluZURhdGEpO1xyXG4gICAgICAgICAgICB0aW1lbGluZS50eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgdGltZWxpbmUub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lbGluZSA9IHRpbWVsaW5lO1xyXG4gICAgICAgICAgICB2YXIga2V5RnJhbWVDb3VudCA9IHRoaXMuX3RpbWVsaW5lQXJyYXlCdWZmZXJbdGltZWxpbmUub2Zmc2V0ICsgMiAvKiBUaW1lbGluZUtleUZyYW1lQ291bnQgKi9dO1xyXG4gICAgICAgICAgICBpZiAoa2V5RnJhbWVDb3VudCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGltZWxpbmUuZnJhbWVJbmRpY2VzT2Zmc2V0ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWVJbmRpY2VzT2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciB0b3RhbEZyYW1lQ291bnQgPSB0aGlzLl9hbmltYXRpb24uZnJhbWVDb3VudCArIDE7IC8vIE9uZSBtb3JlIGZyYW1lIHRoYW4gYW5pbWF0aW9uLlxyXG4gICAgICAgICAgICAgICAgdmFyIGZyYW1lSW5kaWNlcyA9IHRoaXMuX2RhdGEuZnJhbWVJbmRpY2VzO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJhbWVJbmRpY2VzT2Zmc2V0ID0gZnJhbWVJbmRpY2VzLnNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZUluZGljZXMucmVzaXplKGZyYW1lSW5kaWNlc09mZnNldCArIHRvdGFsRnJhbWVDb3VudCwgMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFtZUluZGljZXNPZmZzZXQgPSBmcmFtZUluZGljZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZyYW1lSW5kaWNlcy5sZW5ndGggKz0gdG90YWxGcmFtZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGltZWxpbmUuZnJhbWVJbmRpY2VzT2Zmc2V0ID0gZnJhbWVJbmRpY2VzT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlLID0gMCwgZnJhbWVTdGFydCA9IDAsIGZyYW1lQ291bnQgPSAwOyBpIDwgdG90YWxGcmFtZUNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJhbWVTdGFydCArIGZyYW1lQ291bnQgPD0gaSAmJiBpSyA8IGtleUZyYW1lQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVTdGFydCA9IHRoaXMuX2ZyYW1lQXJyYXlCdWZmZXJbdGhpcy5fYW5pbWF0aW9uLmZyYW1lT2Zmc2V0ICsgdGhpcy5fdGltZWxpbmVBcnJheUJ1ZmZlclt0aW1lbGluZS5vZmZzZXQgKyA1IC8qIFRpbWVsaW5lRnJhbWVPZmZzZXQgKi8gKyBpS11dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaUsgPT09IGtleUZyYW1lQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUNvdW50ID0gdGhpcy5fYW5pbWF0aW9uLmZyYW1lQ291bnQgLSBmcmFtZVN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVDb3VudCA9IHRoaXMuX2ZyYW1lQXJyYXlCdWZmZXJbdGhpcy5fYW5pbWF0aW9uLmZyYW1lT2Zmc2V0ICsgdGhpcy5fdGltZWxpbmVBcnJheUJ1ZmZlclt0aW1lbGluZS5vZmZzZXQgKyA1IC8qIFRpbWVsaW5lRnJhbWVPZmZzZXQgKi8gKyBpSyArIDFdXSAtIGZyYW1lU3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaUsrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSW5kaWNlcy5zZXQoZnJhbWVJbmRpY2VzT2Zmc2V0ICsgaSwgaUsgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSW5kaWNlc1tmcmFtZUluZGljZXNPZmZzZXQgKyBpXSA9IGlLIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fdGltZWxpbmUgPSBudWxsOyAvL1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZWxpbmU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCaW5hcnlEYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VWZXJ0aWNlcyA9IGZ1bmN0aW9uIChyYXdEYXRhLCB2ZXJ0aWNlcykge1xyXG4gICAgICAgICAgICB2ZXJ0aWNlcy5vZmZzZXQgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuT0ZGU0VUXTtcclxuICAgICAgICAgICAgdmFyIHdlaWdodE9mZnNldCA9IHRoaXMuX2ludEFycmF5QnVmZmVyW3ZlcnRpY2VzLm9mZnNldCArIDMgLyogTWVzaFdlaWdodE9mZnNldCAqL107XHJcbiAgICAgICAgICAgIGlmICh3ZWlnaHRPZmZzZXQgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLldlaWdodERhdGEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZlcnRleENvdW50ID0gdGhpcy5faW50QXJyYXlCdWZmZXJbdmVydGljZXMub2Zmc2V0ICsgMCAvKiBNZXNoVmVydGV4Q291bnQgKi9dO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvbmVDb3VudCA9IHRoaXMuX2ludEFycmF5QnVmZmVyW3dlaWdodE9mZnNldCArIDAgLyogV2VpZ3RoQm9uZUNvdW50ICovXTtcclxuICAgICAgICAgICAgICAgIHdlaWdodC5vZmZzZXQgPSB3ZWlnaHRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvbmVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvbmVJbmRleCA9IHRoaXMuX2ludEFycmF5QnVmZmVyW3dlaWdodE9mZnNldCArIDIgLyogV2VpZ3RoQm9uZUluZGljZXMgKi8gKyBpXTtcclxuICAgICAgICAgICAgICAgICAgICB3ZWlnaHQuYWRkQm9uZSh0aGlzLl9yYXdCb25lc1tib25lSW5kZXhdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBib25lSW5kaWNlc09mZnNldCA9IHdlaWdodE9mZnNldCArIDIgLyogV2VpZ3RoQm9uZUluZGljZXMgKi8gKyBib25lQ291bnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0Q291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2ZXJ0ZXhDb3VudDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0ZXhCb25lQ291bnQgPSB0aGlzLl9pbnRBcnJheUJ1ZmZlcltib25lSW5kaWNlc09mZnNldCsrXTtcclxuICAgICAgICAgICAgICAgICAgICB3ZWlnaHRDb3VudCArPSB2ZXJ0ZXhCb25lQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9uZUluZGljZXNPZmZzZXQgKz0gdmVydGV4Qm9uZUNvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2VpZ2h0LmNvdW50ID0gd2VpZ2h0Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlcy53ZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEJpbmFyeURhdGFQYXJzZXIucHJvdG90eXBlLl9wYXJzZU1lc2ggPSBmdW5jdGlvbiAocmF3RGF0YSwgbWVzaCkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZVZlcnRpY2VzKHJhd0RhdGEsIG1lc2gudmVydGljZXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQmluYXJ5RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlUGF0aCA9IGZ1bmN0aW9uIChyYXdEYXRhLCBwYXRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlVmVydGljZXMocmF3RGF0YSwgcGF0aC52ZXJ0aWNlcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCaW5hcnlEYXRhUGFyc2VyLnByb3RvdHlwZS5fcGFyc2VBbmltYXRpb24gPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQW5pbWF0aW9uRGF0YSk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5mcmFtZUNvdW50ID0gTWF0aC5tYXgoZHJhZ29uQm9uZXMuT2JqZWN0RGF0YVBhcnNlci5fZ2V0TnVtYmVyKHJhd0RhdGEsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuRFVSQVRJT04sIDEpLCAxKTtcclxuICAgICAgICAgICAgYW5pbWF0aW9uLnBsYXlUaW1lcyA9IGRyYWdvbkJvbmVzLk9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlBMQVlfVElNRVMsIDEpO1xyXG4gICAgICAgICAgICBhbmltYXRpb24uZHVyYXRpb24gPSBhbmltYXRpb24uZnJhbWVDb3VudCAvIHRoaXMuX2FybWF0dXJlLmZyYW1lUmF0ZTsgLy8gZmxvYXRcclxuICAgICAgICAgICAgYW5pbWF0aW9uLmZhZGVJblRpbWUgPSBkcmFnb25Cb25lcy5PYmplY3REYXRhUGFyc2VyLl9nZXROdW1iZXIocmF3RGF0YSwgZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5GQURFX0lOX1RJTUUsIDAuMCk7XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5zY2FsZSA9IGRyYWdvbkJvbmVzLk9iamVjdERhdGFQYXJzZXIuX2dldE51bWJlcihyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNDQUxFLCAxLjApO1xyXG4gICAgICAgICAgICBhbmltYXRpb24ubmFtZSA9IGRyYWdvbkJvbmVzLk9iamVjdERhdGFQYXJzZXIuX2dldFN0cmluZyhyYXdEYXRhLCBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLk5BTUUsIGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuREVGQVVMVF9OQU1FKTtcclxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5uYW1lLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLm5hbWUgPSBkcmFnb25Cb25lcy5EYXRhUGFyc2VyLkRFRkFVTFRfTkFNRTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBPZmZzZXRzLlxyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0cyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5PRkZTRVRdO1xyXG4gICAgICAgICAgICBhbmltYXRpb24uZnJhbWVJbnRPZmZzZXQgPSBvZmZzZXRzWzBdO1xyXG4gICAgICAgICAgICBhbmltYXRpb24uZnJhbWVGbG9hdE9mZnNldCA9IG9mZnNldHNbMV07XHJcbiAgICAgICAgICAgIGFuaW1hdGlvbi5mcmFtZU9mZnNldCA9IG9mZnNldHNbMl07XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IGFuaW1hdGlvbjtcclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQUNUSU9OIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5hY3Rpb25UaW1lbGluZSA9IHRoaXMuX3BhcnNlQmluYXJ5VGltZWxpbmUoMCAvKiBBY3Rpb24gKi8sIHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BQ1RJT05dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5aX09SREVSIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi56T3JkZXJUaW1lbGluZSA9IHRoaXMuX3BhcnNlQmluYXJ5VGltZWxpbmUoMSAvKiBaT3JkZXIgKi8sIHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5aX09SREVSXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQk9ORSBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmVzcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5CT05FXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gcmF3VGltZWxpbmVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdUaW1lbGluZXMgPSByYXdUaW1lbGluZXNzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gdGhpcy5fZ2V0VVRGMTZLZXkoayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBib25lID0gdGhpcy5fYXJtYXR1cmUuZ2V0Qm9uZShrKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9uZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByYXdUaW1lbGluZXMubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZVR5cGUgPSByYXdUaW1lbGluZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZU9mZnNldCA9IHJhd1RpbWVsaW5lc1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IHRoaXMuX3BhcnNlQmluYXJ5VGltZWxpbmUodGltZWxpbmVUeXBlLCB0aW1lbGluZU9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRCb25lVGltZWxpbmUoYm9uZSwgdGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5TVVJGQUNFIGluIHJhd0RhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdUaW1lbGluZXNzID0gcmF3RGF0YVtkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNVUkZBQ0VdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiByYXdUaW1lbGluZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1RpbWVsaW5lcyA9IHJhd1RpbWVsaW5lc3Nba107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSB0aGlzLl9nZXRVVEYxNktleShrKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSB0aGlzLl9hcm1hdHVyZS5nZXRCb25lKGspO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXJmYWNlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJhd1RpbWVsaW5lcy5sZW5ndGg7IGkgPCBsOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lVHlwZSA9IHJhd1RpbWVsaW5lc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lT2Zmc2V0ID0gcmF3VGltZWxpbmVzW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWVsaW5lID0gdGhpcy5fcGFyc2VCaW5hcnlUaW1lbGluZSh0aW1lbGluZVR5cGUsIHRpbWVsaW5lT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uLmFkZFN1cmZhY2VUaW1lbGluZShzdXJmYWNlLCB0aW1lbGluZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EYXRhUGFyc2VyLlNMT1QgaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1RpbWVsaW5lc3MgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuU0xPVF07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHJhd1RpbWVsaW5lc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmVzID0gcmF3VGltZWxpbmVzc1trXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgayA9IHRoaXMuX2dldFVURjE2S2V5KGspO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2xvdCA9IHRoaXMuX2FybWF0dXJlLmdldFNsb3Qoayk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsb3QgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmF3VGltZWxpbmVzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVUeXBlID0gcmF3VGltZWxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVPZmZzZXQgPSByYXdUaW1lbGluZXNbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSB0aGlzLl9wYXJzZUJpbmFyeVRpbWVsaW5lKHRpbWVsaW5lVHlwZSwgdGltZWxpbmVPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb24uYWRkU2xvdFRpbWVsaW5lKHNsb3QsIHRpbWVsaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQ09OU1RSQUlOVCBpbiByYXdEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3VGltZWxpbmVzcyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5DT05TVFJBSU5UXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gcmF3VGltZWxpbmVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdUaW1lbGluZXMgPSByYXdUaW1lbGluZXNzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gdGhpcy5fZ2V0VVRGMTZLZXkoayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb25zdHJhaW50ID0gdGhpcy5fYXJtYXR1cmUuZ2V0Q29uc3RyYWludChrKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByYXdUaW1lbGluZXMubGVuZ3RoOyBpIDwgbDsgaSArPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZVR5cGUgPSByYXdUaW1lbGluZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZU9mZnNldCA9IHJhd1RpbWVsaW5lc1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lbGluZSA9IHRoaXMuX3BhcnNlQmluYXJ5VGltZWxpbmUodGltZWxpbmVUeXBlLCB0aW1lbGluZU9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5hZGRDb25zdHJhaW50VGltZWxpbmUoY29uc3RyYWludCwgdGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5BTklNQVRJT04gaW4gcmF3RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhd1RpbWVsaW5lc3MgPSByYXdEYXRhW2RyYWdvbkJvbmVzLkRhdGFQYXJzZXIuQU5JTUFUSU9OXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gcmF3VGltZWxpbmVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYXdUaW1lbGluZXMgPSByYXdUaW1lbGluZXNzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrID0gdGhpcy5fZ2V0VVRGMTZLZXkoayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcmF3VGltZWxpbmVzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVUeXBlID0gcmF3VGltZWxpbmVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmVPZmZzZXQgPSByYXdUaW1lbGluZXNbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZWxpbmUgPSB0aGlzLl9wYXJzZUJpbmFyeVRpbWVsaW5lKHRpbWVsaW5lVHlwZSwgdGltZWxpbmVPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbmltYXRpb24uYWRkQW5pbWF0aW9uVGltZWxpbmUoaywgdGltZWxpbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQmluYXJ5RGF0YVBhcnNlci5wcm90b3R5cGUuX3BhcnNlQXJyYXkgPSBmdW5jdGlvbiAocmF3RGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0cyA9IHJhd0RhdGFbZHJhZ29uQm9uZXMuRGF0YVBhcnNlci5PRkZTRVRdO1xyXG4gICAgICAgICAgICB2YXIgbDEgPSBvZmZzZXRzWzFdO1xyXG4gICAgICAgICAgICB2YXIgbDIgPSBvZmZzZXRzWzNdO1xyXG4gICAgICAgICAgICB2YXIgbDMgPSBvZmZzZXRzWzVdO1xyXG4gICAgICAgICAgICB2YXIgbDQgPSBvZmZzZXRzWzddO1xyXG4gICAgICAgICAgICB2YXIgbDUgPSBvZmZzZXRzWzldO1xyXG4gICAgICAgICAgICB2YXIgbDYgPSBvZmZzZXRzWzExXTtcclxuICAgICAgICAgICAgdmFyIGludEFycmF5ID0gbmV3IEludDE2QXJyYXkodGhpcy5fYmluYXJ5LCB0aGlzLl9iaW5hcnlPZmZzZXQgKyBvZmZzZXRzWzBdLCBsMSAvIEludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgICAgICB2YXIgZmxvYXRBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5fYmluYXJ5LCB0aGlzLl9iaW5hcnlPZmZzZXQgKyBvZmZzZXRzWzJdLCBsMiAvIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCk7XHJcbiAgICAgICAgICAgIHZhciBmcmFtZUludEFycmF5ID0gbmV3IEludDE2QXJyYXkodGhpcy5fYmluYXJ5LCB0aGlzLl9iaW5hcnlPZmZzZXQgKyBvZmZzZXRzWzRdLCBsMyAvIEludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgICAgICB2YXIgZnJhbWVGbG9hdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLl9iaW5hcnksIHRoaXMuX2JpbmFyeU9mZnNldCArIG9mZnNldHNbNl0sIGw0IC8gRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcclxuICAgICAgICAgICAgdmFyIGZyYW1lQXJyYXkgPSBuZXcgSW50MTZBcnJheSh0aGlzLl9iaW5hcnksIHRoaXMuX2JpbmFyeU9mZnNldCArIG9mZnNldHNbOF0sIGw1IC8gSW50MTZBcnJheS5CWVRFU19QRVJfRUxFTUVOVCk7XHJcbiAgICAgICAgICAgIHZhciB0aW1lbGluZUFycmF5ID0gbmV3IFVpbnQxNkFycmF5KHRoaXMuX2JpbmFyeSwgdGhpcy5fYmluYXJ5T2Zmc2V0ICsgb2Zmc2V0c1sxMF0sIGw2IC8gVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsVG90YWwgPSBsMSArIGwyICsgbDMgKyBsNCArIGw1ICsgbDY7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyUG9pbnRlciA9IGRyYWdvbkJvbmVzLndlYkFzc2VtYmx5TW9kdWxlLl9tYWxsb2MobFRvdGFsKTtcclxuICAgICAgICAgICAgICAgIHZhciByYXdBcnJheSA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2JpbmFyeSwgdGhpcy5fYmluYXJ5T2Zmc2V0LCBsVG90YWwgLyBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UKTtcclxuICAgICAgICAgICAgICAgIHZhciBjb3B5QXJyYXkgPSBuZXcgVWludDhBcnJheShkcmFnb25Cb25lcy53ZWJBc3NlbWJseU1vZHVsZS5IRUFQMTYuYnVmZmVyLCBidWZmZXJQb2ludGVyLCByYXdBcnJheS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByYXdBcnJheS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3B5QXJyYXlbaV0gPSByYXdBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRyYWdvbkJvbmVzLndlYkFzc2VtYmx5TW9kdWxlLnNldERhdGFCaW5hcnkodGhpcy5fZGF0YSwgYnVmZmVyUG9pbnRlciwgbDEsIGwyLCBsMywgbDQsIGw1LCBsNik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnRBcnJheUJ1ZmZlciA9IGludEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvYXRBcnJheUJ1ZmZlciA9IGZsb2F0QXJyYXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZUludEFycmF5QnVmZmVyID0gZnJhbWVJbnRBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lRmxvYXRBcnJheUJ1ZmZlciA9IGZyYW1lRmxvYXRBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lQXJyYXlCdWZmZXIgPSBmcmFtZUFycmF5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZWxpbmVBcnJheUJ1ZmZlciA9IHRpbWVsaW5lQXJyYXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhLmJpbmFyeSA9IHRoaXMuX2JpbmFyeTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuaW50QXJyYXkgPSB0aGlzLl9pbnRBcnJheUJ1ZmZlciA9IGludEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5mbG9hdEFycmF5ID0gdGhpcy5fZmxvYXRBcnJheUJ1ZmZlciA9IGZsb2F0QXJyYXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhLmZyYW1lSW50QXJyYXkgPSB0aGlzLl9mcmFtZUludEFycmF5QnVmZmVyID0gZnJhbWVJbnRBcnJheTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEuZnJhbWVGbG9hdEFycmF5ID0gdGhpcy5fZnJhbWVGbG9hdEFycmF5QnVmZmVyID0gZnJhbWVGbG9hdEFycmF5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5mcmFtZUFycmF5ID0gdGhpcy5fZnJhbWVBcnJheUJ1ZmZlciA9IGZyYW1lQXJyYXk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhLnRpbWVsaW5lQXJyYXkgPSB0aGlzLl90aW1lbGluZUFycmF5QnVmZmVyID0gdGltZWxpbmVBcnJheTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQmluYXJ5RGF0YVBhcnNlci5wcm90b3R5cGUucGFyc2VEcmFnb25Cb25lc0RhdGEgPSBmdW5jdGlvbiAocmF3RGF0YSwgc2NhbGUpIHtcclxuICAgICAgICAgICAgaWYgKHNjYWxlID09PSB2b2lkIDApIHsgc2NhbGUgPSAxOyB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KHJhd0RhdGEgIT09IG51bGwgJiYgcmF3RGF0YSAhPT0gdW5kZWZpbmVkICYmIHJhd0RhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciwgXCJEYXRhIGVycm9yLlwiKTtcclxuICAgICAgICAgICAgdmFyIHRhZyA9IG5ldyBVaW50OEFycmF5KHJhd0RhdGEsIDAsIDgpO1xyXG4gICAgICAgICAgICBpZiAodGFnWzBdICE9PSBcIkRcIi5jaGFyQ29kZUF0KDApIHx8XHJcbiAgICAgICAgICAgICAgICB0YWdbMV0gIT09IFwiQlwiLmNoYXJDb2RlQXQoMCkgfHxcclxuICAgICAgICAgICAgICAgIHRhZ1syXSAhPT0gXCJEXCIuY2hhckNvZGVBdCgwKSB8fFxyXG4gICAgICAgICAgICAgICAgdGFnWzNdICE9PSBcIlRcIi5jaGFyQ29kZUF0KDApKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmFzc2VydChmYWxzZSwgXCJOb25zdXBwb3J0IGRhdGEuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGhlYWRlckxlbmd0aCA9IG5ldyBVaW50MzJBcnJheShyYXdEYXRhLCA4LCAxKVswXTtcclxuICAgICAgICAgICAgdmFyIGhlYWRlckJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkocmF3RGF0YSwgOCArIDQsIGhlYWRlckxlbmd0aCk7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJTdHJpbmcgPSB0aGlzLl9kZWNvZGVVVEY4KGhlYWRlckJ5dGVzKTtcclxuICAgICAgICAgICAgdmFyIGhlYWRlciA9IEpTT04ucGFyc2UoaGVhZGVyU3RyaW5nKTtcclxuICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgdGhpcy5fYmluYXJ5T2Zmc2V0ID0gOCArIDQgKyBoZWFkZXJMZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmFyeSA9IHJhd0RhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLnBhcnNlRHJhZ29uQm9uZXNEYXRhLmNhbGwodGhpcywgaGVhZGVyLCBzY2FsZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIERlcHJlY2F0ZWQsIHBsZWFzZSByZWZlciB0byB7QGxpbmsgZHJhZ29uQm9uZXMuQmFzZUZhY3RvcnkjcGFyc2VEcmFnb25Cb25lc0RhdGEoKX0uXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW3suW6n+W8g++8jOivt+WPguiAgyB7QGxpbmsgZHJhZ29uQm9uZXMuQmFzZUZhY3RvcnkjcGFyc2VEcmFnb25Cb25lc0RhdGEoKX3jgIJcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJpbmFyeURhdGFQYXJzZXIuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChCaW5hcnlEYXRhUGFyc2VyLl9iaW5hcnlEYXRhUGFyc2VySW5zdGFuY2UgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIEJpbmFyeURhdGFQYXJzZXIuX2JpbmFyeURhdGFQYXJzZXJJbnN0YW5jZSA9IG5ldyBCaW5hcnlEYXRhUGFyc2VyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEJpbmFyeURhdGFQYXJzZXIuX2JpbmFyeURhdGFQYXJzZXJJbnN0YW5jZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEJpbmFyeURhdGFQYXJzZXIuX2JpbmFyeURhdGFQYXJzZXJJbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIEJpbmFyeURhdGFQYXJzZXI7XHJcbiAgICB9KGRyYWdvbkJvbmVzLk9iamVjdERhdGFQYXJzZXIpKTtcclxuICAgIGRyYWdvbkJvbmVzLkJpbmFyeURhdGFQYXJzZXIgPSBCaW5hcnlEYXRhUGFyc2VyO1xyXG59KShkcmFnb25Cb25lcyB8fCAoZHJhZ29uQm9uZXMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE4IERyYWdvbkJvbmVzIHRlYW0gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xyXG4gKlxyXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXHJcbiAqIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW5cclxuICogdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0b1xyXG4gKiB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZlxyXG4gKiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXHJcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG4gKlxyXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcclxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuICpcclxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTU1xyXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcclxuICogQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSXHJcbiAqIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXHJcbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG52YXIgZHJhZ29uQm9uZXM7XHJcbihmdW5jdGlvbiAoZHJhZ29uQm9uZXMpIHtcclxuICAgIC8qKlxyXG4gICAgICogLSBCYXNlIGNsYXNzIGZvciB0aGUgZmFjdG9yeSB0aGF0IGNyZWF0ZSB0aGUgYXJtYXR1cmVzLiAoVHlwaWNhbGx5IG9ubHkgb25lIGdsb2JhbCBmYWN0b3J5IGluc3RhbmNlIGlzIHJlcXVpcmVkKVxyXG4gICAgICogVGhlIGZhY3RvcnkgaW5zdGFuY2UgY3JlYXRlIGFybWF0dXJlcyBieSBwYXJzZWQgYW5kIGFkZGVkIERyYWdvbkJvbmVzRGF0YSBpbnN0YW5jZXMgYW5kIFRleHR1cmVBdGxhc0RhdGEgaW5zdGFuY2VzLlxyXG4gICAgICogT25jZSB0aGUgZGF0YSBoYXMgYmVlbiBwYXJzZWQsIGl0IGhhcyBiZWVuIGNhY2hlZCBpbiB0aGUgZmFjdG9yeSBpbnN0YW5jZSBhbmQgZG9lcyBub3QgbmVlZCB0byBiZSBwYXJzZWQgYWdhaW4gdW50aWwgaXQgaXMgY2xlYXJlZCBieSB0aGUgZmFjdG9yeSBpbnN0YW5jZS5cclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXNEYXRhXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlRleHR1cmVBdGxhc0RhdGFcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQXJtYXR1cmVEYXRhXHJcbiAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlXHJcbiAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICovXHJcbiAgICAvKipcclxuICAgICAqIC0g5Yib5bu66aqo5p6255qE5bel5Y6C5Z+657G744CCIO+8iOmAmuW4uOWPqumcgOimgeS4gOS4quWFqOWxgOW3peWOguWunuS+i++8iVxyXG4gICAgICog5bel5Y6C6YCa6L+H6Kej5p6Q5bm25re75Yqg55qEIERyYWdvbkJvbmVzRGF0YSDlrp7kvovlkowgVGV4dHVyZUF0bGFzRGF0YSDlrp7kvovmnaXliJvlu7rpqqjmnrbjgIJcclxuICAgICAqIOW9k+aVsOaNruiiq+ino+aekOi/h+S5i+WQju+8jOW3sue7j+a3u+WKoOWIsOW3peWOguS4re+8jOWcqOayoeacieiiq+W3peWOgua4heeQhuS5i+WJje+8jOS4jemcgOimgeWGjeasoeino+aekOOAglxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5EcmFnb25Cb25lc0RhdGFcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuVGV4dHVyZUF0bGFzRGF0YVxyXG4gICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQXJtYXR1cmVcclxuICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgKi9cclxuICAgIHZhciBCYXNlRmFjdG9yeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENyZWF0ZSBhIGZhY3RvcnkgaW5zdGFuY2UuICh0eXBpY2FsbHkgb25seSBvbmUgZ2xvYmFsIGZhY3RvcnkgaW5zdGFuY2UgaXMgcmVxdWlyZWQpXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDliJvlu7rkuIDkuKrlt6XljoLlrp7kvovjgIIg77yI6YCa5bi45Y+q6ZyA6KaB5LiA5Liq5YWo5bGA5bel5Y6C5a6e5L6L77yJXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVuY3Rpb24gQmFzZUZhY3RvcnkoZGF0YVBhcnNlcikge1xyXG4gICAgICAgICAgICBpZiAoZGF0YVBhcnNlciA9PT0gdm9pZCAwKSB7IGRhdGFQYXJzZXIgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5hdXRvU2VhcmNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcCA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlQXRsYXNEYXRhTWFwID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YVBhcnNlciA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChCYXNlRmFjdG9yeS5fb2JqZWN0UGFyc2VyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBCYXNlRmFjdG9yeS5fb2JqZWN0UGFyc2VyID0gbmV3IGRyYWdvbkJvbmVzLk9iamVjdERhdGFQYXJzZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoQmFzZUZhY3RvcnkuX2JpbmFyeVBhcnNlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgQmFzZUZhY3RvcnkuX2JpbmFyeVBhcnNlciA9IG5ldyBkcmFnb25Cb25lcy5CaW5hcnlEYXRhUGFyc2VyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZGF0YVBhcnNlciA9IGRhdGFQYXJzZXIgIT09IG51bGwgPyBkYXRhUGFyc2VyIDogQmFzZUZhY3RvcnkuX29iamVjdFBhcnNlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLl9pc1N1cHBvcnRNZXNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS5fZ2V0VGV4dHVyZURhdGEgPSBmdW5jdGlvbiAodGV4dHVyZUF0bGFzTmFtZSwgdGV4dHVyZU5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHRleHR1cmVBdGxhc05hbWUgaW4gdGhpcy5fdGV4dHVyZUF0bGFzRGF0YU1hcCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuX3RleHR1cmVBdGxhc0RhdGFNYXBbdGV4dHVyZUF0bGFzTmFtZV07IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHR1cmVBdGxhc0RhdGEgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHR1cmVEYXRhID0gdGV4dHVyZUF0bGFzRGF0YS5nZXRUZXh0dXJlKHRleHR1cmVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5hdXRvU2VhcmNoKSB7IC8vIFdpbGwgYmUgc2VhcmNoIGFsbCBkYXRhLCBpZiB0aGUgYXV0b1NlYXJjaCBpcyB0cnVlLlxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl90ZXh0dXJlQXRsYXNEYXRhTWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHRoaXMuX3RleHR1cmVBdGxhc0RhdGFNYXBba107IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0dXJlQXRsYXNEYXRhID0gX2NbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZUF0bGFzRGF0YS5hdXRvU2VhcmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZURhdGEgPSB0ZXh0dXJlQXRsYXNEYXRhLmdldFRleHR1cmUodGV4dHVyZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLl9maWxsQnVpbGRBcm1hdHVyZVBhY2thZ2UgPSBmdW5jdGlvbiAoZGF0YVBhY2thZ2UsIGRyYWdvbkJvbmVzTmFtZSwgYXJtYXR1cmVOYW1lLCBza2luTmFtZSwgdGV4dHVyZUF0bGFzTmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgZHJhZ29uQm9uZXNEYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIGFybWF0dXJlRGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lc05hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzTmFtZSBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcclxuICAgICAgICAgICAgICAgICAgICBkcmFnb25Cb25lc0RhdGEgPSB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbZHJhZ29uQm9uZXNOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZURhdGEgPSBkcmFnb25Cb25lc0RhdGEuZ2V0QXJtYXR1cmUoYXJtYXR1cmVOYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYXJtYXR1cmVEYXRhID09PSBudWxsICYmIChkcmFnb25Cb25lc05hbWUubGVuZ3RoID09PSAwIHx8IHRoaXMuYXV0b1NlYXJjaCkpIHsgLy8gV2lsbCBiZSBzZWFyY2ggYWxsIGRhdGEsIGlmIGRvIG5vdCBnaXZlIGEgZGF0YSBuYW1lIG9yIHRoZSBhdXRvU2VhcmNoIGlzIHRydWUuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdvbkJvbmVzRGF0YSA9IHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcFtrXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXNOYW1lLmxlbmd0aCA9PT0gMCB8fCBkcmFnb25Cb25lc0RhdGEuYXV0b1NlYXJjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZURhdGEgPSBkcmFnb25Cb25lc0RhdGEuZ2V0QXJtYXR1cmUoYXJtYXR1cmVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFybWF0dXJlRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ29uQm9uZXNOYW1lID0gaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhcm1hdHVyZURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGRhdGFQYWNrYWdlLmRhdGFOYW1lID0gZHJhZ29uQm9uZXNOYW1lO1xyXG4gICAgICAgICAgICAgICAgZGF0YVBhY2thZ2UudGV4dHVyZUF0bGFzTmFtZSA9IHRleHR1cmVBdGxhc05hbWU7XHJcbiAgICAgICAgICAgICAgICBkYXRhUGFja2FnZS5kYXRhID0gZHJhZ29uQm9uZXNEYXRhO1xyXG4gICAgICAgICAgICAgICAgZGF0YVBhY2thZ2UuYXJtYXR1cmUgPSBhcm1hdHVyZURhdGE7XHJcbiAgICAgICAgICAgICAgICBkYXRhUGFja2FnZS5za2luID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChza2luTmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVBhY2thZ2Uuc2tpbiA9IGFybWF0dXJlRGF0YS5nZXRTa2luKHNraW5OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVBhY2thZ2Uuc2tpbiA9PT0gbnVsbCAmJiB0aGlzLmF1dG9TZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBza2luRHJhZ29uQm9uZXNEYXRhID0gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNraW5Bcm1hdHVyZURhdGEgPSBza2luRHJhZ29uQm9uZXNEYXRhLmdldEFybWF0dXJlKHNraW5OYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2luQXJtYXR1cmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVBhY2thZ2Uuc2tpbiA9IHNraW5Bcm1hdHVyZURhdGEuZGVmYXVsdFNraW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVBhY2thZ2Uuc2tpbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFQYWNrYWdlLnNraW4gPSBhcm1hdHVyZURhdGEuZGVmYXVsdFNraW47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUuX2J1aWxkQm9uZXMgPSBmdW5jdGlvbiAoZGF0YVBhY2thZ2UsIGFybWF0dXJlKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkYXRhUGFja2FnZS5hcm1hdHVyZS5zb3J0ZWRCb25lczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBib25lRGF0YSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIHZhciBib25lID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoYm9uZURhdGEudHlwZSA9PT0gMCAvKiBCb25lICovID8gZHJhZ29uQm9uZXMuQm9uZSA6IGRyYWdvbkJvbmVzLlN1cmZhY2UpO1xyXG4gICAgICAgICAgICAgICAgYm9uZS5pbml0KGJvbmVEYXRhLCBhcm1hdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLl9idWlsZFNsb3RzID0gZnVuY3Rpb24gKGRhdGFQYWNrYWdlLCBhcm1hdHVyZSkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFNraW4gPSBkYXRhUGFja2FnZS5za2luO1xyXG4gICAgICAgICAgICB2YXIgZGVmYXVsdFNraW4gPSBkYXRhUGFja2FnZS5hcm1hdHVyZS5kZWZhdWx0U2tpbjtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTa2luID09PSBudWxsIHx8IGRlZmF1bHRTa2luID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHNraW5TbG90cyA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGRlZmF1bHRTa2luLmRpc3BsYXlzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheXMgPSBkZWZhdWx0U2tpbi5nZXREaXNwbGF5cyhrKTtcclxuICAgICAgICAgICAgICAgIHNraW5TbG90c1trXSA9IGRpc3BsYXlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50U2tpbiAhPT0gZGVmYXVsdFNraW4pIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gY3VycmVudFNraW4uZGlzcGxheXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheXMgPSBjdXJyZW50U2tpbi5nZXREaXNwbGF5cyhrKTtcclxuICAgICAgICAgICAgICAgICAgICBza2luU2xvdHNba10gPSBkaXNwbGF5cztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZGF0YVBhY2thZ2UuYXJtYXR1cmUuc29ydGVkU2xvdHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2xvdERhdGEgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheURhdGFzID0gc2xvdERhdGEubmFtZSBpbiBza2luU2xvdHMgPyBza2luU2xvdHNbc2xvdERhdGEubmFtZV0gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsb3QgPSB0aGlzLl9idWlsZFNsb3QoZGF0YVBhY2thZ2UsIHNsb3REYXRhLCBhcm1hdHVyZSk7XHJcbiAgICAgICAgICAgICAgICBzbG90LnJhd0Rpc3BsYXlEYXRhcyA9IGRpc3BsYXlEYXRhcztcclxuICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5RGF0YXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheUxpc3QgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgKGNvbnN0IGRpc3BsYXlEYXRhIG9mIGRpc3BsYXlzKSBcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5ID8gZGlzcGxheURhdGFzLnNpemUoKSA6IGRpc3BsYXlEYXRhcy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlEYXRhID0gZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkgPyBkaXNwbGF5RGF0YXMuZ2V0KGkpIDogZGlzcGxheURhdGFzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcGxheURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlMaXN0LnB1c2godGhpcy5fZ2V0U2xvdERpc3BsYXkoZGF0YVBhY2thZ2UsIGRpc3BsYXlEYXRhLCBudWxsLCBzbG90KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TGlzdC5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNsb3QuX3NldERpc3BsYXlMaXN0KGRpc3BsYXlMaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNsb3QuX3NldERpc3BsYXlJbmRleChzbG90RGF0YS5kaXNwbGF5SW5kZXgsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUuX2J1aWxkQ29uc3RyYWludHMgPSBmdW5jdGlvbiAoZGF0YVBhY2thZ2UsIGFybWF0dXJlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb25zdHJhaW50cyA9IGRhdGFQYWNrYWdlLmFybWF0dXJlLmNvbnN0cmFpbnRzO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGNvbnN0cmFpbnRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludERhdGEgPSBjb25zdHJhaW50c1trXTtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gbW9yZSBjb25zdHJhaW50IHR5cGUuXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvbnN0cmFpbnREYXRhLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDAgLyogSUsgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpa0NvbnN0cmFpbnQgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5JS0NvbnN0cmFpbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpa0NvbnN0cmFpbnQuaW5pdChjb25zdHJhaW50RGF0YSwgYXJtYXR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZS5fYWRkQ29uc3RyYWludChpa0NvbnN0cmFpbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEgLyogUGF0aCAqLzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGhDb25zdHJhaW50ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuUGF0aENvbnN0cmFpbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoQ29uc3RyYWludC5pbml0KGNvbnN0cmFpbnREYXRhLCBhcm1hdHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFybWF0dXJlLl9hZGRDb25zdHJhaW50KHBhdGhDb25zdHJhaW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnN0cmFpbnQgPSBkcmFnb25Cb25lcy5CYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5JS0NvbnN0cmFpbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50LmluaXQoY29uc3RyYWludERhdGEsIGFybWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJtYXR1cmUuX2FkZENvbnN0cmFpbnQoY29uc3RyYWludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUuX2J1aWxkQ2hpbGRBcm1hdHVyZSA9IGZ1bmN0aW9uIChkYXRhUGFja2FnZSwgc2xvdCwgZGlzcGxheURhdGEpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXVudXNlZC1leHByZXNzaW9uXHJcbiAgICAgICAgICAgIHNsb3Q7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkQXJtYXR1cmUoZGlzcGxheURhdGEucGF0aCwgZGF0YVBhY2thZ2UgIT09IG51bGwgPyBkYXRhUGFja2FnZS5kYXRhTmFtZSA6IFwiXCIsIFwiXCIsIGRhdGFQYWNrYWdlICE9PSBudWxsID8gZGF0YVBhY2thZ2UudGV4dHVyZUF0bGFzTmFtZSA6IFwiXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLl9nZXRTbG90RGlzcGxheSA9IGZ1bmN0aW9uIChkYXRhUGFja2FnZSwgZGlzcGxheURhdGEsIHJhd0Rpc3BsYXlEYXRhLCBzbG90KSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhTmFtZSA9IGRhdGFQYWNrYWdlICE9PSBudWxsID8gZGF0YVBhY2thZ2UuZGF0YU5hbWUgOiBkaXNwbGF5RGF0YS5wYXJlbnQucGFyZW50LnBhcmVudC5uYW1lO1xyXG4gICAgICAgICAgICB2YXIgZGlzcGxheSA9IG51bGw7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZGlzcGxheURhdGEudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIEltYWdlICovOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlRGlzcGxheURhdGEgPSBkaXNwbGF5RGF0YTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFQYWNrYWdlICE9PSBudWxsICYmIGRhdGFQYWNrYWdlLnRleHR1cmVBdGxhc05hbWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZURpc3BsYXlEYXRhLnRleHR1cmUgPSB0aGlzLl9nZXRUZXh0dXJlRGF0YShkYXRhUGFja2FnZS50ZXh0dXJlQXRsYXNOYW1lLCBkaXNwbGF5RGF0YS5wYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZURpc3BsYXlEYXRhLnRleHR1cmUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VEaXNwbGF5RGF0YS50ZXh0dXJlID0gdGhpcy5fZ2V0VGV4dHVyZURhdGEoZGF0YU5hbWUsIGRpc3BsYXlEYXRhLnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd0Rpc3BsYXlEYXRhICE9PSBudWxsICYmIHJhd0Rpc3BsYXlEYXRhLnR5cGUgPT09IDIgLyogTWVzaCAqLyAmJiB0aGlzLl9pc1N1cHBvcnRNZXNoKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheSA9IHNsb3QubWVzaERpc3BsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ID0gc2xvdC5yYXdEaXNwbGF5O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgMiAvKiBNZXNoICovOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc2hEaXNwbGF5RGF0YSA9IGRpc3BsYXlEYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhUGFja2FnZSAhPT0gbnVsbCAmJiBkYXRhUGFja2FnZS50ZXh0dXJlQXRsYXNOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzaERpc3BsYXlEYXRhLnRleHR1cmUgPSB0aGlzLl9nZXRUZXh0dXJlRGF0YShkYXRhUGFja2FnZS50ZXh0dXJlQXRsYXNOYW1lLCBtZXNoRGlzcGxheURhdGEucGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzaERpc3BsYXlEYXRhLnRleHR1cmUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzaERpc3BsYXlEYXRhLnRleHR1cmUgPSB0aGlzLl9nZXRUZXh0dXJlRGF0YShkYXRhTmFtZSwgbWVzaERpc3BsYXlEYXRhLnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzU3VwcG9ydE1lc2goKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ID0gc2xvdC5tZXNoRGlzcGxheTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSBzbG90LnJhd0Rpc3BsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIEFybWF0dXJlICovOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFybWF0dXJlRGlzcGxheURhdGEgPSBkaXNwbGF5RGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRBcm1hdHVyZSA9IHRoaXMuX2J1aWxkQ2hpbGRBcm1hdHVyZShkYXRhUGFja2FnZSwgc2xvdCwgZGlzcGxheURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZEFybWF0dXJlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkQXJtYXR1cmUuaW5oZXJpdEFuaW1hdGlvbiA9IGFybWF0dXJlRGlzcGxheURhdGEuaW5oZXJpdEFuaW1hdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGlsZEFybWF0dXJlLmluaGVyaXRBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY3Rpb25zID0gYXJtYXR1cmVEaXNwbGF5RGF0YS5hY3Rpb25zLmxlbmd0aCA+IDAgPyBhcm1hdHVyZURpc3BsYXlEYXRhLmFjdGlvbnMgOiBjaGlsZEFybWF0dXJlLmFybWF0dXJlRGF0YS5kZWZhdWx0QWN0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGFjdGlvbnNfNiA9IGFjdGlvbnM7IF9pIDwgYWN0aW9uc182Lmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9uc182W19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50T2JqZWN0ID0gZHJhZ29uQm9uZXMuQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuRXZlbnRPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnb25Cb25lcy5FdmVudE9iamVjdC5hY3Rpb25EYXRhVG9JbnN0YW5jZShhY3Rpb24sIGV2ZW50T2JqZWN0LCBzbG90LmFybWF0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRPYmplY3Quc2xvdCA9IHNsb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QuYXJtYXR1cmUuX2J1ZmZlckFjdGlvbihldmVudE9iamVjdCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkQXJtYXR1cmUuYW5pbWF0aW9uLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcm1hdHVyZURpc3BsYXlEYXRhLmFybWF0dXJlID0gY2hpbGRBcm1hdHVyZS5hcm1hdHVyZURhdGE7IC8vIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ID0gY2hpbGRBcm1hdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgMyAvKiBCb3VuZGluZ0JveCAqLzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BsYXk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFBhcnNlIHRoZSByYXcgZGF0YSB0byBhIERyYWdvbkJvbmVzRGF0YSBpbnN0YW5jZSBhbmQgY2FjaGUgaXQgdG8gdGhlIGZhY3RvcnkuXHJcbiAgICAgICAgICogQHBhcmFtIHJhd0RhdGEgLSBUaGUgcmF3IGRhdGEuXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBTcGVjaWZ5IGEgY2FjaGUgbmFtZSBmb3IgdGhlIGluc3RhbmNlIHNvIHRoYXQgdGhlIGluc3RhbmNlIGNhbiBiZSBvYnRhaW5lZCB0aHJvdWdoIHRoaXMgbmFtZS4gKElmIG5vdCBzZXQsIHVzZSB0aGUgaW5zdGFuY2UgbmFtZSBpbnN0ZWFkKVxyXG4gICAgICAgICAqIEBwYXJhbSBzY2FsZSAtIFNwZWNpZnkgYSBzY2FsaW5nIHZhbHVlIGZvciBhbGwgYXJtYXR1cmVzLiAoRGVmYXVsdDogMS4wKVxyXG4gICAgICAgICAqIEByZXR1cm5zIERyYWdvbkJvbmVzRGF0YSBpbnN0YW5jZVxyXG4gICAgICAgICAqIEBzZWUgI2dldERyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjYWRkRHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNyZW1vdmVEcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXNEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlsIbljp/lp4vmlbDmja7op6PmnpDkuLogRHJhZ29uQm9uZXNEYXRhIOWunuS+i++8jOW5tue8k+WtmOWIsOW3peWOguS4reOAglxyXG4gICAgICAgICAqIEBwYXJhbSByYXdEYXRhIC0g5Y6f5aeL5pWw5o2u44CCXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSDkuLror6Xlrp7kvovmjIflrprkuIDkuKrnvJPlrZjlkI3np7DvvIzku6Xkvr/lj6/ku6XpgJrov4fmraTlkI3np7Dojrflj5bor6Xlrp7kvovjgIIg77yI5aaC5p6c5pyq6K6+572u77yM5YiZ5L2/55So6K+l5a6e5L6L5Lit55qE5ZCN56ew77yJXHJcbiAgICAgICAgICogQHBhcmFtIHNjYWxlIC0g5Li65omA5pyJ55qE6aqo5p625oyH5a6a5LiA5Liq57yp5pS+5YC844CCIO+8iOm7mOiupDogMS4w77yJXHJcbiAgICAgICAgICogQHJldHVybnMgRHJhZ29uQm9uZXNEYXRhIOWunuS+i1xyXG4gICAgICAgICAqIEBzZWUgI2dldERyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjYWRkRHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNyZW1vdmVEcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXNEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLnBhcnNlRHJhZ29uQm9uZXNEYXRhID0gZnVuY3Rpb24gKHJhd0RhdGEsIG5hbWUsIHNjYWxlKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IG51bGw7IH1cclxuICAgICAgICAgICAgaWYgKHNjYWxlID09PSB2b2lkIDApIHsgc2NhbGUgPSAxLjA7IH1cclxuICAgICAgICAgICAgdmFyIGRhdGFQYXJzZXIgPSByYXdEYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBCYXNlRmFjdG9yeS5fYmluYXJ5UGFyc2VyIDogdGhpcy5fZGF0YVBhcnNlcjtcclxuICAgICAgICAgICAgdmFyIGRyYWdvbkJvbmVzRGF0YSA9IGRhdGFQYXJzZXIucGFyc2VEcmFnb25Cb25lc0RhdGEocmF3RGF0YSwgc2NhbGUpO1xyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRleHR1cmVBdGxhc0RhdGEgPSB0aGlzLl9idWlsZFRleHR1cmVBdGxhc0RhdGEobnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVBhcnNlci5wYXJzZVRleHR1cmVBdGxhc0RhdGEobnVsbCwgdGV4dHVyZUF0bGFzRGF0YSwgc2NhbGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRUZXh0dXJlQXRsYXNEYXRhKHRleHR1cmVBdGxhc0RhdGEsIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZUF0bGFzRGF0YS5yZXR1cm5Ub1Bvb2woKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZHJhZ29uQm9uZXNEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZERyYWdvbkJvbmVzRGF0YShkcmFnb25Cb25lc0RhdGEsIG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkcmFnb25Cb25lc0RhdGE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFBhcnNlIHRoZSByYXcgdGV4dHVyZSBhdGxhcyBkYXRhIGFuZCB0aGUgdGV4dHVyZSBhdGxhcyBvYmplY3QgdG8gYSBUZXh0dXJlQXRsYXNEYXRhIGluc3RhbmNlIGFuZCBjYWNoZSBpdCB0byB0aGUgZmFjdG9yeS5cclxuICAgICAgICAgKiBAcGFyYW0gcmF3RGF0YSAtIFRoZSByYXcgdGV4dHVyZSBhdGxhcyBkYXRhLlxyXG4gICAgICAgICAqIEBwYXJhbSB0ZXh0dXJlQXRsYXMgLSBUaGUgdGV4dHVyZSBhdGxhcyBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBTcGVjaWZ5IGEgY2FjaGUgbmFtZSBmb3IgdGhlIGluc3RhbmNlIHNvIHRoYXQgdGhlIGluc3RhbmNlIGNhbiBiZSBvYnRhaW5lZCB0aHJvdWdoIHRoaXMgbmFtZS4gKElmIG5vdCBzZXQsIHVzZSB0aGUgaW5zdGFuY2UgbmFtZSBpbnN0ZWFkKVxyXG4gICAgICAgICAqIEBwYXJhbSBzY2FsZSAtIFNwZWNpZnkgYSBzY2FsaW5nIHZhbHVlIGZvciB0aGUgbWFwIHNldC4gKERlZmF1bHQ6IDEuMClcclxuICAgICAgICAgKiBAcmV0dXJucyBUZXh0dXJlQXRsYXNEYXRhIGluc3RhbmNlXHJcbiAgICAgICAgICogQHNlZSAjZ2V0VGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjYWRkVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjcmVtb3ZlVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5UZXh0dXJlQXRsYXNEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNC41XHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlsIbljp/lp4votLTlm77pm4bmlbDmja7lkozotLTlm77pm4blr7nosaHop6PmnpDkuLogVGV4dHVyZUF0bGFzRGF0YSDlrp7kvovvvIzlubbnvJPlrZjliLDlt6XljoLkuK3jgIJcclxuICAgICAgICAgKiBAcGFyYW0gcmF3RGF0YSAtIOWOn+Wni+i0tOWbvumbhuaVsOaNruOAglxyXG4gICAgICAgICAqIEBwYXJhbSB0ZXh0dXJlQXRsYXMgLSDotLTlm77pm4blr7nosaHjgIJcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIOS4uuivpeWunuS+i+aMh+WumuS4gOS4que8k+WtmOWQjeensO+8jOS7peS+v+WPr+S7pemAmui/h+atpOWQjeensOiOt+WPluivpeWunuS+i+OAgiDvvIjlpoLmnpzmnKrorr7nva7vvIzliJnkvb/nlKjor6Xlrp7kvovkuK3nmoTlkI3np7DvvIlcclxuICAgICAgICAgKiBAcGFyYW0gc2NhbGUgLSDkuLrotLTlm77pm4bmjIflrprkuIDkuKrnvKnmlL7lgLzjgIIg77yI6buY6K6kOiAxLjDvvIlcclxuICAgICAgICAgKiBAcmV0dXJucyBUZXh0dXJlQXRsYXNEYXRhIOWunuS+i1xyXG4gICAgICAgICAqIEBzZWUgI2dldFRleHR1cmVBdGxhc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI2FkZFRleHR1cmVBdGxhc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI3JlbW92ZVRleHR1cmVBdGxhc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuVGV4dHVyZUF0bGFzRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS5wYXJzZVRleHR1cmVBdGxhc0RhdGEgPSBmdW5jdGlvbiAocmF3RGF0YSwgdGV4dHVyZUF0bGFzLCBuYW1lLCBzY2FsZSkge1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7IG5hbWUgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIGlmIChzY2FsZSA9PT0gdm9pZCAwKSB7IHNjYWxlID0gMS4wOyB9XHJcbiAgICAgICAgICAgIHZhciB0ZXh0dXJlQXRsYXNEYXRhID0gdGhpcy5fYnVpbGRUZXh0dXJlQXRsYXNEYXRhKG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhUGFyc2VyLnBhcnNlVGV4dHVyZUF0bGFzRGF0YShyYXdEYXRhLCB0ZXh0dXJlQXRsYXNEYXRhLCBzY2FsZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkVGV4dHVyZUF0bGFzRGF0YSh0ZXh0dXJlQXRsYXNEYXRhLCB0ZXh0dXJlQXRsYXMgfHwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkVGV4dHVyZUF0bGFzRGF0YSh0ZXh0dXJlQXRsYXNEYXRhLCBuYW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVBdGxhc0RhdGE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS51cGRhdGVUZXh0dXJlQXRsYXNEYXRhID0gZnVuY3Rpb24gKG5hbWUsIHRleHR1cmVBdGxhc2VzKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0dXJlQXRsYXNEYXRhcyA9IHRoaXMuZ2V0VGV4dHVyZUF0bGFzRGF0YShuYW1lKTtcclxuICAgICAgICAgICAgaWYgKHRleHR1cmVBdGxhc0RhdGFzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRleHR1cmVBdGxhc0RhdGFzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgdGV4dHVyZUF0bGFzZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkVGV4dHVyZUF0bGFzRGF0YSh0ZXh0dXJlQXRsYXNEYXRhc1tpXSwgdGV4dHVyZUF0bGFzZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBzcGVjaWZpYyBEcmFnb25Cb25lc0RhdGEgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBUaGUgRHJhZ29uQm9uZXNEYXRhIGluc3RhbmNlIGNhY2hlIG5hbWUuXHJcbiAgICAgICAgICogQHJldHVybnMgRHJhZ29uQm9uZXNEYXRhIGluc3RhbmNlXHJcbiAgICAgICAgICogQHNlZSAjcGFyc2VEcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI2FkZERyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjcmVtb3ZlRHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g6I635Y+W54m55a6a55qEIERyYWdvbkJvbmVzRGF0YSDlrp7kvovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIERyYWdvbkJvbmVzRGF0YSDlrp7kvovnmoTnvJPlrZjlkI3np7DjgIJcclxuICAgICAgICAgKiBAcmV0dXJucyBEcmFnb25Cb25lc0RhdGEg5a6e5L6LXHJcbiAgICAgICAgICogQHNlZSAjcGFyc2VEcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI2FkZERyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjcmVtb3ZlRHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS5nZXREcmFnb25Cb25lc0RhdGEgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKG5hbWUgaW4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwKSA/IHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcFtuYW1lXSA6IG51bGw7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIENhY2hlIGEgRHJhZ29uQm9uZXNEYXRhIGluc3RhbmNlIHRvIHRoZSBmYWN0b3J5LlxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIERyYWdvbkJvbmVzRGF0YSBpbnN0YW5jZS5cclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIFNwZWNpZnkgYSBjYWNoZSBuYW1lIGZvciB0aGUgaW5zdGFuY2Ugc28gdGhhdCB0aGUgaW5zdGFuY2UgY2FuIGJlIG9idGFpbmVkIHRocm91Z2ggdGhpcyBuYW1lLiAoaWYgbm90IHNldCwgdXNlIHRoZSBpbnN0YW5jZSBuYW1lIGluc3RlYWQpXHJcbiAgICAgICAgICogQHNlZSAjcGFyc2VEcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI2dldERyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjcmVtb3ZlRHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5bCGIERyYWdvbkJvbmVzRGF0YSDlrp7kvovnvJPlrZjliLDlt6XljoLkuK3jgIJcclxuICAgICAgICAgKiBAcGFyYW0gZGF0YSAtIERyYWdvbkJvbmVzRGF0YSDlrp7kvovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIOS4uuivpeWunuS+i+aMh+WumuS4gOS4que8k+WtmOWQjeensO+8jOS7peS+v+WPr+S7pemAmui/h+atpOWQjeensOiOt+WPluivpeWunuS+i+OAgiDvvIjlpoLmnpzmnKrorr7nva7vvIzliJnkvb/nlKjor6Xlrp7kvovkuK3nmoTlkI3np7DvvIlcclxuICAgICAgICAgKiBAc2VlICNwYXJzZURyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjZ2V0RHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNyZW1vdmVEcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXNEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLmFkZERyYWdvbkJvbmVzRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IG51bGw7IH1cclxuICAgICAgICAgICAgbmFtZSA9IG5hbWUgIT09IG51bGwgPyBuYW1lIDogZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV0gPT09IGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDYW4gbm90IGFkZCBzYW1lIG5hbWUgZGF0YTogXCIgKyBuYW1lKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV0gPSBkYXRhO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBSZW1vdmUgYSBEcmFnb25Cb25lc0RhdGEgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBUaGUgRHJhZ29uQm9uZXNEYXRhIGluc3RhbmNlIGNhY2hlIG5hbWUuXHJcbiAgICAgICAgICogQHBhcmFtIGRpc3Bvc2VEYXRhIC0gV2hldGhlciB0byBkaXNwb3NlIGRhdGEuIChEZWZhdWx0OiB0cnVlKVxyXG4gICAgICAgICAqIEBzZWUgI3BhcnNlRHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNnZXREcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI2FkZERyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5EcmFnb25Cb25lc0RhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOenu+mZpCBEcmFnb25Cb25lc0RhdGEg5a6e5L6L44CCXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBEcmFnb25Cb25lc0RhdGEg5a6e5L6L57yT5a2Y5ZCN56ew44CCXHJcbiAgICAgICAgICogQHBhcmFtIGRpc3Bvc2VEYXRhIC0g5piv5ZCm6YeK5pS+5pWw5o2u44CCIO+8iOm7mOiupDogdHJ1Ze+8iVxyXG4gICAgICAgICAqIEBzZWUgI3BhcnNlRHJhZ29uQm9uZXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNnZXREcmFnb25Cb25lc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI2FkZERyYWdvbkJvbmVzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5EcmFnb25Cb25lc0RhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUucmVtb3ZlRHJhZ29uQm9uZXNEYXRhID0gZnVuY3Rpb24gKG5hbWUsIGRpc3Bvc2VEYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXNwb3NlRGF0YSA9PT0gdm9pZCAwKSB7IGRpc3Bvc2VEYXRhID0gdHJ1ZTsgfVxyXG4gICAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcclxuICAgICAgICAgICAgICAgIGlmIChkaXNwb3NlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzLmJ1ZmZlck9iamVjdCh0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBsaXN0IG9mIHNwZWNpZmljIFRleHR1cmVBdGxhc0RhdGEgaW5zdGFuY2VzLlxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIFRleHR1cmVBdGxhc0RhdGEgY2FoY2UgbmFtZS5cclxuICAgICAgICAgKiBAc2VlICNwYXJzZVRleHR1cmVBdGxhc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI2FkZFRleHR1cmVBdGxhc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgI3JlbW92ZVRleHR1cmVBdGxhc0RhdGEoKVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuVGV4dHVyZUF0bGFzRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDMuMFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g6I635Y+W54m55a6a55qEIFRleHR1cmVBdGxhc0RhdGEg5a6e5L6L5YiX6KGo44CCXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBUZXh0dXJlQXRsYXNEYXRhIOWunuS+i+e8k+WtmOWQjeensOOAglxyXG4gICAgICAgICAqIEBzZWUgI3BhcnNlVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjYWRkVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjcmVtb3ZlVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5UZXh0dXJlQXRsYXNEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLmdldFRleHR1cmVBdGxhc0RhdGEgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKG5hbWUgaW4gdGhpcy5fdGV4dHVyZUF0bGFzRGF0YU1hcCkgPyB0aGlzLl90ZXh0dXJlQXRsYXNEYXRhTWFwW25hbWVdIDogbnVsbDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gQ2FjaGUgYSBUZXh0dXJlQXRsYXNEYXRhIGluc3RhbmNlIHRvIHRoZSBmYWN0b3J5LlxyXG4gICAgICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIFRleHR1cmVBdGxhc0RhdGEgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBTcGVjaWZ5IGEgY2FjaGUgbmFtZSBmb3IgdGhlIGluc3RhbmNlIHNvIHRoYXQgdGhlIGluc3RhbmNlIGNhbiBiZSBvYnRhaW5lZCB0aHJvdWdoIHRoaXMgbmFtZS4gKGlmIG5vdCBzZXQsIHVzZSB0aGUgaW5zdGFuY2UgbmFtZSBpbnN0ZWFkKVxyXG4gICAgICAgICAqIEBzZWUgI3BhcnNlVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjZ2V0VGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjcmVtb3ZlVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5UZXh0dXJlQXRsYXNEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDlsIYgVGV4dHVyZUF0bGFzRGF0YSDlrp7kvovnvJPlrZjliLDlt6XljoLkuK3jgIJcclxuICAgICAgICAgKiBAcGFyYW0gZGF0YSAtIFRleHR1cmVBdGxhc0RhdGEg5a6e5L6L44CCXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSDkuLror6Xlrp7kvovmjIflrprkuIDkuKrnvJPlrZjlkI3np7DvvIzku6Xkvr/lj6/ku6XpgJrov4fmraTlkI3np7Dojrflj5bor6Xlrp7kvovjgIIg77yI5aaC5p6c5pyq6K6+572u77yM5YiZ5L2/55So6K+l5a6e5L6L5Lit55qE5ZCN56ew77yJXHJcbiAgICAgICAgICogQHNlZSAjcGFyc2VUZXh0dXJlQXRsYXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNnZXRUZXh0dXJlQXRsYXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNyZW1vdmVUZXh0dXJlQXRsYXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlRleHR1cmVBdGxhc0RhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUuYWRkVGV4dHVyZUF0bGFzRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBuYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSB2b2lkIDApIHsgbmFtZSA9IG51bGw7IH1cclxuICAgICAgICAgICAgbmFtZSA9IG5hbWUgIT09IG51bGwgPyBuYW1lIDogZGF0YS5uYW1lO1xyXG4gICAgICAgICAgICB2YXIgdGV4dHVyZUF0bGFzTGlzdCA9IChuYW1lIGluIHRoaXMuX3RleHR1cmVBdGxhc0RhdGFNYXApID8gdGhpcy5fdGV4dHVyZUF0bGFzRGF0YU1hcFtuYW1lXSA6ICh0aGlzLl90ZXh0dXJlQXRsYXNEYXRhTWFwW25hbWVdID0gW10pO1xyXG4gICAgICAgICAgICBpZiAodGV4dHVyZUF0bGFzTGlzdC5pbmRleE9mKGRhdGEpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGV4dHVyZUF0bGFzTGlzdC5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFJlbW92ZSBhIFRleHR1cmVBdGxhc0RhdGEgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQHBhcmFtIG5hbWUgLSBUaGUgVGV4dHVyZUF0bGFzRGF0YSBpbnN0YW5jZSBjYWNoZSBuYW1lLlxyXG4gICAgICAgICAqIEBwYXJhbSBkaXNwb3NlRGF0YSAtIFdoZXRoZXIgdG8gZGlzcG9zZSBkYXRhLlxyXG4gICAgICAgICAqIEBzZWUgI3BhcnNlVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjZ2V0VGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSAjYWRkVGV4dHVyZUF0bGFzRGF0YSgpXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5UZXh0dXJlQXRsYXNEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIGVuX1VTXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSDnp7vpmaQgVGV4dHVyZUF0bGFzRGF0YSDlrp7kvovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gbmFtZSAtIFRleHR1cmVBdGxhc0RhdGEg5a6e5L6L55qE57yT5a2Y5ZCN56ew44CCXHJcbiAgICAgICAgICogQHBhcmFtIGRpc3Bvc2VEYXRhIC0g5piv5ZCm6YeK5pS+5pWw5o2u44CCXHJcbiAgICAgICAgICogQHNlZSAjcGFyc2VUZXh0dXJlQXRsYXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNnZXRUZXh0dXJlQXRsYXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlICNhZGRUZXh0dXJlQXRsYXNEYXRhKClcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLlRleHR1cmVBdGxhc0RhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUucmVtb3ZlVGV4dHVyZUF0bGFzRGF0YSA9IGZ1bmN0aW9uIChuYW1lLCBkaXNwb3NlRGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGlzcG9zZURhdGEgPT09IHZvaWQgMCkgeyBkaXNwb3NlRGF0YSA9IHRydWU7IH1cclxuICAgICAgICAgICAgaWYgKG5hbWUgaW4gdGhpcy5fdGV4dHVyZUF0bGFzRGF0YU1hcCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRleHR1cmVBdGxhc0RhdGFMaXN0ID0gdGhpcy5fdGV4dHVyZUF0bGFzRGF0YU1hcFtuYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmIChkaXNwb3NlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdGV4dHVyZUF0bGFzRGF0YUxpc3RfMSA9IHRleHR1cmVBdGxhc0RhdGFMaXN0OyBfaSA8IHRleHR1cmVBdGxhc0RhdGFMaXN0XzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0dXJlQXRsYXNEYXRhID0gdGV4dHVyZUF0bGFzRGF0YUxpc3RfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzLmJ1ZmZlck9iamVjdCh0ZXh0dXJlQXRsYXNEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fdGV4dHVyZUF0bGFzRGF0YU1hcFtuYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBHZXQgYSBzcGVjaWZpYyBhcm1hdHVyZSBkYXRhLlxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIGFybWF0dXJlIGRhdGEgbmFtZS5cclxuICAgICAgICAgKiBAcGFyYW0gZHJhZ29uQm9uZXNOYW1lIC0gVGhlIGNhY2hlZCBuYW1lIGZvciBEcmFnb25ib25lc0RhdGEgaW5zdGFuY2UuXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjFcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOiOt+WPlueJueWumueahOmqqOaetuaVsOaNruOAglxyXG4gICAgICAgICAqIEBwYXJhbSBuYW1lIC0g6aqo5p625pWw5o2u5ZCN56ew44CCXHJcbiAgICAgICAgICogQHBhcmFtIGRyYWdvbkJvbmVzTmFtZSAtIERyYWdvbkJvbmVzRGF0YSDlrp7kvovnmoTnvJPlrZjlkI3np7DjgIJcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuMVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS5nZXRBcm1hdHVyZURhdGEgPSBmdW5jdGlvbiAobmFtZSwgZHJhZ29uQm9uZXNOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lc05hbWUgPT09IHZvaWQgMCkgeyBkcmFnb25Cb25lc05hbWUgPSBcIlwiOyB9XHJcbiAgICAgICAgICAgIHZhciBkYXRhUGFja2FnZSA9IG5ldyBCdWlsZEFybWF0dXJlUGFja2FnZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ZpbGxCdWlsZEFybWF0dXJlUGFja2FnZShkYXRhUGFja2FnZSwgZHJhZ29uQm9uZXNOYW1lLCBuYW1lLCBcIlwiLCBcIlwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRhdGFQYWNrYWdlLmFybWF0dXJlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBDbGVhciBhbGwgY2FjaGVkIERyYWdvbkJvbmVzRGF0YSBpbnN0YW5jZXMgYW5kIFRleHR1cmVBdGxhc0RhdGEgaW5zdGFuY2VzLlxyXG4gICAgICAgICAqIEBwYXJhbSBkaXNwb3NlRGF0YSAtIFdoZXRoZXIgdG8gZGlzcG9zZSBkYXRhLlxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDQuNVxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5riF6Zmk57yT5a2Y55qE5omA5pyJIERyYWdvbkJvbmVzRGF0YSDlrp7kvovlkowgVGV4dHVyZUF0bGFzRGF0YSDlrp7kvovjgIJcclxuICAgICAgICAgKiBAcGFyYW0gZGlzcG9zZURhdGEgLSDmmK/lkKbph4rmlL7mlbDmja7jgIJcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoZGlzcG9zZURhdGEpIHtcclxuICAgICAgICAgICAgaWYgKGRpc3Bvc2VEYXRhID09PSB2b2lkIDApIHsgZGlzcG9zZURhdGEgPSB0cnVlOyB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzcG9zZURhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kcmFnb25Cb25lcy5idWZmZXJPYmplY3QodGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW2tdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBba107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl90ZXh0dXJlQXRsYXNEYXRhTWFwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzcG9zZURhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZUF0bGFzRGF0YUxpc3QgPSB0aGlzLl90ZXh0dXJlQXRsYXNEYXRhTWFwW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdGV4dHVyZUF0bGFzRGF0YUxpc3RfMiA9IHRleHR1cmVBdGxhc0RhdGFMaXN0OyBfaSA8IHRleHR1cmVBdGxhc0RhdGFMaXN0XzIubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0dXJlQXRsYXNEYXRhID0gdGV4dHVyZUF0bGFzRGF0YUxpc3RfMltfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzLmJ1ZmZlck9iamVjdCh0ZXh0dXJlQXRsYXNEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fdGV4dHVyZUF0bGFzRGF0YU1hcFtrXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBDcmVhdGUgYSBhcm1hdHVyZSBmcm9tIGNhY2hlZCBEcmFnb25Cb25lc0RhdGEgaW5zdGFuY2VzIGFuZCBUZXh0dXJlQXRsYXNEYXRhIGluc3RhbmNlcy5cclxuICAgICAgICAgKiBOb3RlIHRoYXQgd2hlbiB0aGUgY3JlYXRlZCBhcm1hdHVyZSB0aGF0IGlzIG5vIGxvbmdlciBpbiB1c2UsIHlvdSBuZWVkIHRvIGV4cGxpY2l0bHkgZGlzcG9zZSB7QGxpbmsgI2RyYWdvbkJvbmVzLkFybWF0dXJlI2Rpc3Bvc2UoKX0uXHJcbiAgICAgICAgICogQHBhcmFtIGFybWF0dXJlTmFtZSAtIFRoZSBhcm1hdHVyZSBkYXRhIG5hbWUuXHJcbiAgICAgICAgICogQHBhcmFtIGRyYWdvbkJvbmVzTmFtZSAtIFRoZSBjYWNoZWQgbmFtZSBvZiB0aGUgRHJhZ29uQm9uZXNEYXRhIGluc3RhbmNlLiAoSWYgbm90IHNldCwgYWxsIERyYWdvbkJvbmVzRGF0YSBpbnN0YW5jZXMgYXJlIHJldHJpZXZlZCwgYW5kIHdoZW4gbXVsdGlwbGUgRHJhZ29uQm9uZXNEYXRhIGluc3RhbmNlcyBjb250YWluIGEgdGhlIHNhbWUgbmFtZSBhcm1hdHVyZSBkYXRhLCBpdCBtYXkgbm90IGJlIHBvc3NpYmxlIHRvIGFjY3VyYXRlbHkgY3JlYXRlIGEgc3BlY2lmaWMgYXJtYXR1cmUpXHJcbiAgICAgICAgICogQHBhcmFtIHNraW5OYW1lIC0gVGhlIHNraW4gbmFtZSwgeW91IGNhbiBzZXQgYSBkaWZmZXJlbnQgQXJtYXR1cmVEYXRhIG5hbWUgdG8gc2hhcmUgaXQncyBza2luIGRhdGEuIChJZiBub3Qgc2V0LCB1c2UgdGhlIGRlZmF1bHQgc2tpbiBkYXRhKVxyXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBhcm1hdHVyZS5cclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqIDxwcmU+XHJcbiAgICAgICAgICogICAgIGxldCBhcm1hdHVyZSA9IGZhY3RvcnkuYnVpbGRBcm1hdHVyZShcImFybWF0dXJlTmFtZVwiLCBcImRyYWdvbkJvbmVzTmFtZVwiKTtcclxuICAgICAgICAgKiAgICAgYXJtYXR1cmUuY2xvY2sgPSBmYWN0b3J5LmNsb2NrO1xyXG4gICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXNEYXRhXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyAzLjBcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOmAmui/h+e8k+WtmOeahCBEcmFnb25Cb25lc0RhdGEg5a6e5L6L5ZKMIFRleHR1cmVBdGxhc0RhdGEg5a6e5L6L5Yib5bu65LiA5Liq6aqo5p6244CCXHJcbiAgICAgICAgICog5rOo5oSP77yM5Yib5bu655qE6aqo5p625LiN5YaN5L2/55So5pe277yM6ZyA6KaB5pi+5byP6YeK5pS+IHtAbGluayAjZHJhZ29uQm9uZXMuQXJtYXR1cmUjZGlzcG9zZSgpfeOAglxyXG4gICAgICAgICAqIEBwYXJhbSBhcm1hdHVyZU5hbWUgLSDpqqjmnrbmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gZHJhZ29uQm9uZXNOYW1lIC0gRHJhZ29uQm9uZXNEYXRhIOWunuS+i+eahOe8k+WtmOWQjeensOOAgiDvvIjlpoLmnpzmnKrorr7nva7vvIzlsIbmo4DntKLmiYDmnInnmoQgRHJhZ29uQm9uZXNEYXRhIOWunuS+i++8jOW9k+WkmuS4qiBEcmFnb25Cb25lc0RhdGEg5a6e5L6L5Lit5YyF5ZCr5ZCM5ZCN55qE6aqo5p625pWw5o2u5pe277yM5Y+v6IO95peg5rOV5YeG56Gu55qE5Yib5bu65Ye654m55a6a55qE6aqo5p6277yJXHJcbiAgICAgICAgICogQHBhcmFtIHNraW5OYW1lIC0g55qu6IKk5ZCN56ew77yM5Y+v5Lul6K6+572u5LiA5Liq5YW25LuW6aqo5p625pWw5o2u5ZCN56ew5p2l5YWx5Lqr5YW255qu6IKk5pWw5o2u44CC77yI5aaC5p6c5pyq6K6+572u77yM5YiZ5L2/55So6buY6K6k55qE55qu6IKk5pWw5o2u77yJXHJcbiAgICAgICAgICogQHJldHVybnMg6aqo5p6244CCXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBsZXQgYXJtYXR1cmUgPSBmYWN0b3J5LmJ1aWxkQXJtYXR1cmUoXCJhcm1hdHVyZU5hbWVcIiwgXCJkcmFnb25Cb25lc05hbWVcIik7XHJcbiAgICAgICAgICogICAgIGFybWF0dXJlLmNsb2NrID0gZmFjdG9yeS5jbG9jaztcclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzRGF0YVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQXJtYXR1cmVEYXRhXHJcbiAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgMy4wXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLmJ1aWxkQXJtYXR1cmUgPSBmdW5jdGlvbiAoYXJtYXR1cmVOYW1lLCBkcmFnb25Cb25lc05hbWUsIHNraW5OYW1lLCB0ZXh0dXJlQXRsYXNOYW1lKSB7XHJcbiAgICAgICAgICAgIGlmIChkcmFnb25Cb25lc05hbWUgPT09IHZvaWQgMCkgeyBkcmFnb25Cb25lc05hbWUgPSBcIlwiOyB9XHJcbiAgICAgICAgICAgIGlmIChza2luTmFtZSA9PT0gdm9pZCAwKSB7IHNraW5OYW1lID0gXCJcIjsgfVxyXG4gICAgICAgICAgICBpZiAodGV4dHVyZUF0bGFzTmFtZSA9PT0gdm9pZCAwKSB7IHRleHR1cmVBdGxhc05hbWUgPSBcIlwiOyB9XHJcbiAgICAgICAgICAgIHZhciBkYXRhUGFja2FnZSA9IG5ldyBCdWlsZEFybWF0dXJlUGFja2FnZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ZpbGxCdWlsZEFybWF0dXJlUGFja2FnZShkYXRhUGFja2FnZSwgZHJhZ29uQm9uZXNOYW1lIHx8IFwiXCIsIGFybWF0dXJlTmFtZSwgc2tpbk5hbWUgfHwgXCJcIiwgdGV4dHVyZUF0bGFzTmFtZSB8fCBcIlwiKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gYXJtYXR1cmUgZGF0YTogXCIgKyBhcm1hdHVyZU5hbWUgKyBcIiwgXCIgKyAoZHJhZ29uQm9uZXNOYW1lICE9PSBudWxsID8gZHJhZ29uQm9uZXNOYW1lIDogXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGFybWF0dXJlID0gdGhpcy5fYnVpbGRBcm1hdHVyZShkYXRhUGFja2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQm9uZXMoZGF0YVBhY2thZ2UsIGFybWF0dXJlKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRTbG90cyhkYXRhUGFja2FnZSwgYXJtYXR1cmUpO1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZENvbnN0cmFpbnRzKGRhdGFQYWNrYWdlLCBhcm1hdHVyZSk7XHJcbiAgICAgICAgICAgIGFybWF0dXJlLmludmFsaWRVcGRhdGUobnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGFybWF0dXJlLmFkdmFuY2VUaW1lKDAuMCk7IC8vIFVwZGF0ZSBhcm1hdHVyZSBwb3NlLlxyXG4gICAgICAgICAgICByZXR1cm4gYXJtYXR1cmU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS5yZXBsYWNlRGlzcGxheSA9IGZ1bmN0aW9uIChzbG90LCBkaXNwbGF5RGF0YSwgZGlzcGxheUluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChkaXNwbGF5SW5kZXggPT09IHZvaWQgMCkgeyBkaXNwbGF5SW5kZXggPSAtMTsgfVxyXG4gICAgICAgICAgICBpZiAoZGlzcGxheUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheUluZGV4ID0gc2xvdC5kaXNwbGF5SW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpc3BsYXlJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2xvdC5yZXBsYWNlRGlzcGxheURhdGEoZGlzcGxheURhdGEsIGRpc3BsYXlJbmRleCk7XHJcbiAgICAgICAgICAgIHZhciBkaXNwbGF5TGlzdCA9IHNsb3QuZGlzcGxheUxpc3Q7IC8vIENvcHkuXHJcbiAgICAgICAgICAgIGlmIChkaXNwbGF5TGlzdC5sZW5ndGggPD0gZGlzcGxheUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TGlzdC5sZW5ndGggPSBkaXNwbGF5SW5kZXggKyAxO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkaXNwbGF5TGlzdC5sZW5ndGg7IGkgPCBsOyArK2kpIHsgLy8gQ2xlYW4gdW5kZWZpbmVkLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzcGxheUxpc3RbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheUxpc3RbaV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlzcGxheURhdGEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdEaXNwbGF5RGF0YXMgPSBzbG90LnJhd0Rpc3BsYXlEYXRhcztcclxuICAgICAgICAgICAgICAgIHZhciByYXdEaXNwbGF5RGF0YSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAocmF3RGlzcGxheURhdGFzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRyYWdvbkJvbmVzLkRyYWdvbkJvbmVzLndlYkFzc2VtYmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5SW5kZXggPCByYXdEaXNwbGF5RGF0YXMuc2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdEaXNwbGF5RGF0YSA9IHJhd0Rpc3BsYXlEYXRhcy5nZXQoZGlzcGxheUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3BsYXlJbmRleCA8IHJhd0Rpc3BsYXlEYXRhcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd0Rpc3BsYXlEYXRhID0gcmF3RGlzcGxheURhdGFzW2Rpc3BsYXlJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TGlzdFtkaXNwbGF5SW5kZXhdID0gdGhpcy5fZ2V0U2xvdERpc3BsYXkobnVsbCwgZGlzcGxheURhdGEsIHJhd0Rpc3BsYXlEYXRhLCBzbG90KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlMaXN0W2Rpc3BsYXlJbmRleF0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNsb3QuZGlzcGxheUxpc3QgPSBkaXNwbGF5TGlzdDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gUmVwbGFjZXMgdGhlIGN1cnJlbnQgZGlzcGxheSBkYXRhIGZvciBhIHBhcnRpY3VsYXIgc2xvdCB3aXRoIGEgc3BlY2lmaWMgZGlzcGxheSBkYXRhLlxyXG4gICAgICAgICAqIFNwZWNpZnkgZGlzcGxheSBkYXRhIHdpdGggXCJkcmFnb25Cb25lc05hbWUvYXJtYXR1cmVOYW1lL3Nsb3ROYW1lL2Rpc3BsYXlOYW1lXCIuXHJcbiAgICAgICAgICogQHBhcmFtIGRyYWdvbkJvbmVzTmFtZSAtIFRoZSBEcmFnb25Cb25lc0RhdGEgaW5zdGFuY2UgY2FjaGUgbmFtZS5cclxuICAgICAgICAgKiBAcGFyYW0gYXJtYXR1cmVOYW1lIC0gVGhlIGFybWF0dXJlIGRhdGEgbmFtZS5cclxuICAgICAgICAgKiBAcGFyYW0gc2xvdE5hbWUgLSBUaGUgc2xvdCBkYXRhIG5hbWUuXHJcbiAgICAgICAgICogQHBhcmFtIGRpc3BsYXlOYW1lIC0gVGhlIGRpc3BsYXkgZGF0YSBuYW1lLlxyXG4gICAgICAgICAqIEBwYXJhbSBzbG90IC0gVGhlIHNsb3QuXHJcbiAgICAgICAgICogQHBhcmFtIGRpc3BsYXlJbmRleCAtIFRoZSBpbmRleCBvZiB0aGUgZGlzcGxheSBkYXRhIHRoYXQgaXMgcmVwbGFjZWQuIChJZiBpdCBpcyBub3Qgc2V0LCByZXBsYWNlcyB0aGUgY3VycmVudCBkaXNwbGF5IGRhdGEpXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBsZXQgc2xvdCA9IGFybWF0dXJlLmdldFNsb3QoXCJ3ZWFwb25cIik7XHJcbiAgICAgICAgICogICAgIGZhY3RvcnkucmVwbGFjZVNsb3REaXNwbGF5KFwiZHJhZ29uQm9uZXNOYW1lXCIsIFwiYXJtYXR1cmVOYW1lXCIsIFwic2xvdE5hbWVcIiwgXCJkaXNwbGF5TmFtZVwiLCBzbG90KTtcclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOeUqOeJueWumueahOaYvuekuuWvueixoeaVsOaNruabv+aNoueJueWumuaPkuanveW9k+WJjeeahOaYvuekuuWvueixoeaVsOaNruOAglxyXG4gICAgICAgICAqIOeUqCBcImRyYWdvbkJvbmVzTmFtZS9hcm1hdHVyZU5hbWUvc2xvdE5hbWUvZGlzcGxheU5hbWVcIiDmjIflrprmmL7npLrlr7nosaHmlbDmja7jgIJcclxuICAgICAgICAgKiBAcGFyYW0gZHJhZ29uQm9uZXNOYW1lIC0gRHJhZ29uQm9uZXNEYXRhIOWunuS+i+eahOe8k+WtmOWQjeensOOAglxyXG4gICAgICAgICAqIEBwYXJhbSBhcm1hdHVyZU5hbWUgLSDpqqjmnrbmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gc2xvdE5hbWUgLSDmj5Lmp73mlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gZGlzcGxheU5hbWUgLSDmmL7npLrlr7nosaHmlbDmja7lkI3np7DjgIJcclxuICAgICAgICAgKiBAcGFyYW0gc2xvdCAtIOaPkuanveOAglxyXG4gICAgICAgICAqIEBwYXJhbSBkaXNwbGF5SW5kZXggLSDooqvmm7/mjaLnmoTmmL7npLrlr7nosaHmlbDmja7nmoTntKLlvJXjgIIg77yI5aaC5p6c5pyq6K6+572u77yM5YiZ5pu/5o2i5b2T5YmN55qE5pi+56S65a+56LGh5pWw5o2u77yJXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBsZXQgc2xvdCA9IGFybWF0dXJlLmdldFNsb3QoXCJ3ZWFwb25cIik7XHJcbiAgICAgICAgICogICAgIGZhY3RvcnkucmVwbGFjZVNsb3REaXNwbGF5KFwiZHJhZ29uQm9uZXNOYW1lXCIsIFwiYXJtYXR1cmVOYW1lXCIsIFwic2xvdE5hbWVcIiwgXCJkaXNwbGF5TmFtZVwiLCBzbG90KTtcclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA0LjVcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUucmVwbGFjZVNsb3REaXNwbGF5ID0gZnVuY3Rpb24gKGRyYWdvbkJvbmVzTmFtZSwgYXJtYXR1cmVOYW1lLCBzbG90TmFtZSwgZGlzcGxheU5hbWUsIHNsb3QsIGRpc3BsYXlJbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoZGlzcGxheUluZGV4ID09PSB2b2lkIDApIHsgZGlzcGxheUluZGV4ID0gLTE7IH1cclxuICAgICAgICAgICAgdmFyIGFybWF0dXJlRGF0YSA9IHRoaXMuZ2V0QXJtYXR1cmVEYXRhKGFybWF0dXJlTmFtZSwgZHJhZ29uQm9uZXNOYW1lIHx8IFwiXCIpO1xyXG4gICAgICAgICAgICBpZiAoIWFybWF0dXJlRGF0YSB8fCAhYXJtYXR1cmVEYXRhLmRlZmF1bHRTa2luKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGRpc3BsYXlEYXRhID0gYXJtYXR1cmVEYXRhLmRlZmF1bHRTa2luLmdldERpc3BsYXkoc2xvdE5hbWUsIGRpc3BsYXlOYW1lKTtcclxuICAgICAgICAgICAgaWYgKCFkaXNwbGF5RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZURpc3BsYXkoc2xvdCwgZGlzcGxheURhdGEsIGRpc3BsYXlJbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUucmVwbGFjZVNsb3REaXNwbGF5TGlzdCA9IGZ1bmN0aW9uIChkcmFnb25Cb25lc05hbWUsIGFybWF0dXJlTmFtZSwgc2xvdE5hbWUsIHNsb3QpIHtcclxuICAgICAgICAgICAgdmFyIGFybWF0dXJlRGF0YSA9IHRoaXMuZ2V0QXJtYXR1cmVEYXRhKGFybWF0dXJlTmFtZSwgZHJhZ29uQm9uZXNOYW1lIHx8IFwiXCIpO1xyXG4gICAgICAgICAgICBpZiAoIWFybWF0dXJlRGF0YSB8fCAhYXJtYXR1cmVEYXRhLmRlZmF1bHRTa2luKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGRpc3BsYXlzID0gYXJtYXR1cmVEYXRhLmRlZmF1bHRTa2luLmdldERpc3BsYXlzKHNsb3ROYW1lKTtcclxuICAgICAgICAgICAgaWYgKCFkaXNwbGF5cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBkaXNwbGF5SW5kZXggPSAwO1xyXG4gICAgICAgICAgICAvLyBmb3IgKGNvbnN0IGRpc3BsYXlEYXRhIG9mIGRpc3BsYXlzKSBcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSA/IGRpc3BsYXlzLnNpemUoKSA6IGRpc3BsYXlzLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlEYXRhID0gZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkgPyBkaXNwbGF5cy5nZXQoaSkgOiBkaXNwbGF5c1tpXTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVwbGFjZURpc3BsYXkoc2xvdCwgZGlzcGxheURhdGEsIGRpc3BsYXlJbmRleCsrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0gU2hhcmUgc3BlY2lmaWMgc2tpbiBkYXRhIHdpdGggc3BlY2lmaWMgYXJtYXR1cmUuXHJcbiAgICAgICAgICogQHBhcmFtIGFybWF0dXJlIC0gVGhlIGFybWF0dXJlLlxyXG4gICAgICAgICAqIEBwYXJhbSBza2luIC0gVGhlIHNraW4gZGF0YS5cclxuICAgICAgICAgKiBAcGFyYW0gaXNPdmVycmlkZSAtIFdoZXRoZXIgaXQgY29tcGxldGVseSBvdmVycmlkZSB0aGUgb3JpZ2luYWwgc2tpbi4gKERlZmF1bHQ6IGZhbHNlKVxyXG4gICAgICAgICAqIEBwYXJhbSBleGNsdWRlIC0gQSBsaXN0IG9mIHNsb3QgbmFtZXMgdGhhdCBkbyBub3QgbmVlZCB0byBiZSByZXBsYWNlLlxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICogPHByZT5cclxuICAgICAgICAgKiAgICAgbGV0IGFybWF0dXJlQSA9IGZhY3RvcnkuYnVpbGRBcm1hdHVyZShcImFybWF0dXJlQVwiLCBcImRyYWdvbkJvbmVzQVwiKTtcclxuICAgICAgICAgKiAgICAgbGV0IGFybWF0dXJlRGF0YUIgPSBmYWN0b3J5LmdldEFybWF0dXJlRGF0YShcImFybWF0dXJlQlwiLCBcImRyYWdvbkJvbmVzQlwiKTtcclxuICAgICAgICAgKiAgICAgaWYgKGFybWF0dXJlRGF0YUIgJiYgYXJtYXR1cmVEYXRhQi5kZWZhdWx0U2tpbikge1xyXG4gICAgICAgICAqICAgICBmYWN0b3J5LnJlcGxhY2VTa2luKGFybWF0dXJlQSwgYXJtYXR1cmVEYXRhQi5kZWZhdWx0U2tpbiwgZmFsc2UsIFtcImFybV9sXCIsIFwid2VhcG9uX2xcIl0pO1xyXG4gICAgICAgICAqICAgICB9XHJcbiAgICAgICAgICogPC9wcmU+XHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZVxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuU2tpbkRhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjZcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOWwhueJueWumueahOearuiCpOaVsOaNruWFseS6q+e7meeJueWumueahOmqqOaetuS9v+eUqOOAglxyXG4gICAgICAgICAqIEBwYXJhbSBhcm1hdHVyZSAtIOmqqOaetuOAglxyXG4gICAgICAgICAqIEBwYXJhbSBza2luIC0g55qu6IKk5pWw5o2u44CCXHJcbiAgICAgICAgICogQHBhcmFtIGlzT3ZlcnJpZGUgLSDmmK/lkKblrozlhajopobnm5bljp/mnaXnmoTnmq7ogqTjgIIg77yI6buY6K6kOiBmYWxzZe+8iVxyXG4gICAgICAgICAqIEBwYXJhbSBleGNsdWRlIC0g5LiN6ZyA6KaB6KKr5pu/5o2i55qE5o+S5qe95ZCN56ew5YiX6KGo44CCXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBsZXQgYXJtYXR1cmVBID0gZmFjdG9yeS5idWlsZEFybWF0dXJlKFwiYXJtYXR1cmVBXCIsIFwiZHJhZ29uQm9uZXNBXCIpO1xyXG4gICAgICAgICAqICAgICBsZXQgYXJtYXR1cmVEYXRhQiA9IGZhY3RvcnkuZ2V0QXJtYXR1cmVEYXRhKFwiYXJtYXR1cmVCXCIsIFwiZHJhZ29uQm9uZXNCXCIpO1xyXG4gICAgICAgICAqICAgICBpZiAoYXJtYXR1cmVEYXRhQiAmJiBhcm1hdHVyZURhdGFCLmRlZmF1bHRTa2luKSB7XHJcbiAgICAgICAgICogICAgIGZhY3RvcnkucmVwbGFjZVNraW4oYXJtYXR1cmVBLCBhcm1hdHVyZURhdGFCLmRlZmF1bHRTa2luLCBmYWxzZSwgW1wiYXJtX2xcIiwgXCJ3ZWFwb25fbFwiXSk7XHJcbiAgICAgICAgICogICAgIH1cclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Ta2luRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuNlxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS5yZXBsYWNlU2tpbiA9IGZ1bmN0aW9uIChhcm1hdHVyZSwgc2tpbiwgaXNPdmVycmlkZSwgZXhjbHVkZSkge1xyXG4gICAgICAgICAgICBpZiAoaXNPdmVycmlkZSA9PT0gdm9pZCAwKSB7IGlzT3ZlcnJpZGUgPSBmYWxzZTsgfVxyXG4gICAgICAgICAgICBpZiAoZXhjbHVkZSA9PT0gdm9pZCAwKSB7IGV4Y2x1ZGUgPSBudWxsOyB9XHJcbiAgICAgICAgICAgIHZhciBzdWNjZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0U2tpbiA9IHNraW4ucGFyZW50LmRlZmF1bHRTa2luO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gYXJtYXR1cmUuZ2V0U2xvdHMoKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBzbG90ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4Y2x1ZGUgIT09IG51bGwgJiYgZXhjbHVkZS5pbmRleE9mKHNsb3QubmFtZSkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlzID0gc2tpbi5nZXREaXNwbGF5cyhzbG90Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0U2tpbiAhPT0gbnVsbCAmJiBza2luICE9PSBkZWZhdWx0U2tpbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5cyA9IGRlZmF1bHRTa2luLmdldERpc3BsYXlzKHNsb3QubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzcGxheXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzT3ZlcnJpZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QucmF3RGlzcGxheURhdGFzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3QuZGlzcGxheUxpc3QgPSBbXTsgLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheUNvdW50ID0gZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkgPyBkaXNwbGF5cy5zaXplKCkgOiBkaXNwbGF5cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheUxpc3QgPSBzbG90LmRpc3BsYXlMaXN0OyAvLyBDb3B5LlxyXG4gICAgICAgICAgICAgICAgZGlzcGxheUxpc3QubGVuZ3RoID0gZGlzcGxheUNvdW50OyAvLyBNb2RpZnkgZGlzcGxheUxpc3QgbGVuZ3RoLlxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkaXNwbGF5Q291bnQ7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheURhdGEgPSBkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSA/IGRpc3BsYXlzLmdldChpKSA6IGRpc3BsYXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXNwbGF5RGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TGlzdFtpXSA9IHRoaXMuX2dldFNsb3REaXNwbGF5KG51bGwsIGRpc3BsYXlEYXRhLCBudWxsLCBzbG90KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlMaXN0W2ldID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHNsb3QucmF3RGlzcGxheURhdGFzID0gZGlzcGxheXM7XHJcbiAgICAgICAgICAgICAgICBzbG90LmRpc3BsYXlMaXN0ID0gZGlzcGxheUxpc3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHN1Y2Nlc3M7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIFJlcGxhY2VzIHRoZSBleGlzdGluZyBhbmltYXRpb24gZGF0YSBmb3IgYSBzcGVjaWZpYyBhcm1hdHVyZSB3aXRoIHRoZSBhbmltYXRpb24gZGF0YSBmb3IgdGhlIHNwZWNpZmljIGFybWF0dXJlIGRhdGEuXHJcbiAgICAgICAgICogVGhpcyBlbmFibGVzIHlvdSB0byBtYWtlIGEgYXJtYXR1cmUgdGVtcGxhdGUgc28gdGhhdCBvdGhlciBhcm1hdHVyZSB3aXRob3V0IGFuaW1hdGlvbnMgY2FuIHNoYXJlIGl0J3MgYW5pbWF0aW9ucy5cclxuICAgICAgICAgKiBAcGFyYW0gYXJtYXR1cmUgLSBUaGUgYXJtdGF1cmUuXHJcbiAgICAgICAgICogQHBhcmFtIGFybWF0dXJlRGF0YSAtIFRoZSBhcm1hdHVyZSBkYXRhLlxyXG4gICAgICAgICAqIEBwYXJhbSBpc092ZXJyaWRlIC0gV2hldGhlciB0byBjb21wbGV0ZWx5IG92ZXJ3cml0ZSB0aGUgb3JpZ2luYWwgYW5pbWF0aW9uLiAoRGVmYXVsdDogZmFsc2UpXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKiA8cHJlPlxyXG4gICAgICAgICAqICAgICBsZXQgYXJtYXR1cmVBID0gZmFjdG9yeS5idWlsZEFybWF0dXJlKFwiYXJtYXR1cmVBXCIsIFwiZHJhZ29uQm9uZXNBXCIpO1xyXG4gICAgICAgICAqICAgICBsZXQgYXJtYXR1cmVEYXRhQiA9IGZhY3RvcnkuZ2V0QXJtYXR1cmVEYXRhKFwiYXJtYXR1cmVCXCIsIFwiZHJhZ29uQm9uZXNCXCIpO1xyXG4gICAgICAgICAqICAgICBpZiAoYXJtYXR1cmVEYXRhQikge1xyXG4gICAgICAgICAqICAgICBmYWN0b3J5LnJlcGxhY2VBbmltYXRpb24oYXJtYXR1cmVBLCBhcm1hdHVyZURhdGFCKTtcclxuICAgICAgICAgKiAgICAgfVxyXG4gICAgICAgICAqIDwvcHJlPlxyXG4gICAgICAgICAqIEBzZWUgZHJhZ29uQm9uZXMuQXJtYXR1cmVcclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlRGF0YVxyXG4gICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuNlxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g55So54m55a6a6aqo5p625pWw5o2u55qE5Yqo55S75pWw5o2u5pu/5o2i54m55a6a6aqo5p62546w5pyJ55qE5Yqo55S75pWw5o2u44CCXHJcbiAgICAgICAgICog6L+Z5qC35bCx6IO95a6e546w5Yi25L2c5LiA5Liq6aqo5p625Yqo55S75qih5p2/77yM6K6p5YW25LuW5rKh5pyJ5Yi25L2c5Yqo55S755qE6aqo5p625YWx5Lqr6K+l5Yqo55S744CCXHJcbiAgICAgICAgICogQHBhcmFtIGFybWF0dXJlIC0g6aqo5p6244CCXHJcbiAgICAgICAgICogQHBhcmFtIGFybWF0dXJlRGF0YSAtIOmqqOaetuaVsOaNruOAglxyXG4gICAgICAgICAqIEBwYXJhbSBpc092ZXJyaWRlIC0g5piv5ZCm5a6M5YWo6KaG55uW5Y6f5p2l55qE5Yqo55S744CC77yI6buY6K6kOiBmYWxzZe+8iVxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICogPHByZT5cclxuICAgICAgICAgKiAgICAgbGV0IGFybWF0dXJlQSA9IGZhY3RvcnkuYnVpbGRBcm1hdHVyZShcImFybWF0dXJlQVwiLCBcImRyYWdvbkJvbmVzQVwiKTtcclxuICAgICAgICAgKiAgICAgbGV0IGFybWF0dXJlRGF0YUIgPSBmYWN0b3J5LmdldEFybWF0dXJlRGF0YShcImFybWF0dXJlQlwiLCBcImRyYWdvbkJvbmVzQlwiKTtcclxuICAgICAgICAgKiAgICAgaWYgKGFybWF0dXJlRGF0YUIpIHtcclxuICAgICAgICAgKiAgICAgZmFjdG9yeS5yZXBsYWNlQW5pbWF0aW9uKGFybWF0dXJlQSwgYXJtYXR1cmVEYXRhQik7XHJcbiAgICAgICAgICogICAgIH1cclxuICAgICAgICAgKiA8L3ByZT5cclxuICAgICAgICAgKiBAc2VlIGRyYWdvbkJvbmVzLkFybWF0dXJlXHJcbiAgICAgICAgICogQHNlZSBkcmFnb25Cb25lcy5Bcm1hdHVyZURhdGFcclxuICAgICAgICAgKiBAdmVyc2lvbiBEcmFnb25Cb25lcyA1LjZcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUucmVwbGFjZUFuaW1hdGlvbiA9IGZ1bmN0aW9uIChhcm1hdHVyZSwgYXJtYXR1cmVEYXRhLCBpc092ZXJyaWRlKSB7XHJcbiAgICAgICAgICAgIGlmIChpc092ZXJyaWRlID09PSB2b2lkIDApIHsgaXNPdmVycmlkZSA9IHRydWU7IH1cclxuICAgICAgICAgICAgdmFyIHNraW5EYXRhID0gYXJtYXR1cmVEYXRhLmRlZmF1bHRTa2luO1xyXG4gICAgICAgICAgICBpZiAoc2tpbkRhdGEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNPdmVycmlkZSkge1xyXG4gICAgICAgICAgICAgICAgYXJtYXR1cmUuYW5pbWF0aW9uLmFuaW1hdGlvbnMgPSBhcm1hdHVyZURhdGEuYW5pbWF0aW9ucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciByYXdBbmltYXRpb25zID0gYXJtYXR1cmUuYW5pbWF0aW9uLmFuaW1hdGlvbnM7XHJcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiByYXdBbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uc1trXSA9IHJhd0FuaW1hdGlvbnNba107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIGFybWF0dXJlRGF0YS5hbmltYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uc1trXSA9IGFybWF0dXJlRGF0YS5hbmltYXRpb25zW2tdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYXJtYXR1cmUuYW5pbWF0aW9uLmFuaW1hdGlvbnMgPSBhbmltYXRpb25zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBhcm1hdHVyZS5nZXRTbG90cygpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNsb3QgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHNsb3QuZGlzcGxheUxpc3Q7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXkgPSBfY1tfYl07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3BsYXkgaW5zdGFuY2VvZiBkcmFnb25Cb25lcy5Bcm1hdHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlzcGxheURhdGFzID0gc2tpbkRhdGEuZ2V0RGlzcGxheXMoc2xvdC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc3BsYXlEYXRhcyAhPT0gbnVsbCAmJiBpbmRleCA8IChkcmFnb25Cb25lcy5EcmFnb25Cb25lcy53ZWJBc3NlbWJseSA/IGRpc3BsYXlEYXRhcy5zaXplKCkgOiBkaXNwbGF5RGF0YXMubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXlEYXRhID0gZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMud2ViQXNzZW1ibHkgPyBkaXNwbGF5RGF0YXMuZ2V0KGluZGV4KSA6IGRpc3BsYXlEYXRhc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlzcGxheURhdGEgIT09IG51bGwgJiYgZGlzcGxheURhdGEudHlwZSA9PT0gMSAvKiBBcm1hdHVyZSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZEFybWF0dXJlRGF0YSA9IHRoaXMuZ2V0QXJtYXR1cmVEYXRhKGRpc3BsYXlEYXRhLnBhdGgsIGRpc3BsYXlEYXRhLnBhcmVudC5wYXJlbnQucGFyZW50Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZEFybWF0dXJlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcGxhY2VBbmltYXRpb24oZGlzcGxheSwgY2hpbGRBcm1hdHVyZURhdGEsIGlzT3ZlcnJpZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUuZ2V0QWxsRHJhZ29uQm9uZXNEYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBCYXNlRmFjdG9yeS5wcm90b3R5cGUuZ2V0QWxsVGV4dHVyZUF0bGFzRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVBdGxhc0RhdGFNYXA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUZhY3RvcnkucHJvdG90eXBlLCBcImNsb2NrXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0gQW4gV29ybGRjbG9jayBpbnN0YW5jZSB1cGRhdGVkIGJ5IGVuZ2luZS5cclxuICAgICAgICAgICAgICogQHZlcnNpb24gRHJhZ29uQm9uZXMgNS43XHJcbiAgICAgICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIC0g55Sx5byV5pOO6amx5Yqo55qEIFdvcmxkQ2xvY2sg5a6e5L6L44CCXHJcbiAgICAgICAgICAgICAqIEB2ZXJzaW9uIERyYWdvbkJvbmVzIDUuN1xyXG4gICAgICAgICAgICAgKiBAbGFuZ3VhZ2UgemhfQ05cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RyYWdvbkJvbmVzLmNsb2NrO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzZUZhY3RvcnkucHJvdG90eXBlLCBcImRyYWdvbkJvbmVzXCIsIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcmFnb25Cb25lcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rICNyZXBsYWNlU2tpbn0uXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAgICAgKiBAbGFuZ3VhZ2UgZW5fVVNcclxuICAgICAgICAgKi9cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAtIOW3suW6n+W8g++8jOivt+WPguiAgyB7QGxpbmsgI3JlcGxhY2VTa2lufeOAglxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICogQGxhbmd1YWdlIHpoX0NOXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFzZUZhY3RvcnkucHJvdG90eXBlLmNoYW5nZVNraW4gPSBmdW5jdGlvbiAoYXJtYXR1cmUsIHNraW4sIGV4Y2x1ZGUpIHtcclxuICAgICAgICAgICAgaWYgKGV4Y2x1ZGUgPT09IHZvaWQgMCkgeyBleGNsdWRlID0gbnVsbDsgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlU2tpbihhcm1hdHVyZSwgc2tpbiwgZmFsc2UsIGV4Y2x1ZGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogLSBEZXByZWNhdGVkLCBwbGVhc2UgcmVmZXIgdG8ge0BsaW5rICNyZXBsYWNlQW5pbWF0aW9ufS5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSBlbl9VU1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIC0g5bey5bqf5byD77yM6K+35Y+C6ICDIHtAbGluayAjcmVwbGFjZUFuaW1hdGlvbn3jgIJcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqIEBsYW5ndWFnZSB6aF9DTlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEJhc2VGYWN0b3J5LnByb3RvdHlwZS5jb3B5QW5pbWF0aW9uc1RvQXJtYXR1cmUgPSBmdW5jdGlvbiAodG9Bcm1hdHVyZSwgZnJvbUFybWF0cmVOYW1lLCBmcm9tU2tpbk5hbWUsIGZyb21EcmFnb25Cb25lc0RhdGFOYW1lLCByZXBsYWNlT3JpZ2luYWxBbmltYXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKGZyb21Ta2luTmFtZSA9PT0gdm9pZCAwKSB7IGZyb21Ta2luTmFtZSA9IFwiXCI7IH1cclxuICAgICAgICAgICAgaWYgKGZyb21EcmFnb25Cb25lc0RhdGFOYW1lID09PSB2b2lkIDApIHsgZnJvbURyYWdvbkJvbmVzRGF0YU5hbWUgPSBcIlwiOyB9XHJcbiAgICAgICAgICAgIGlmIChyZXBsYWNlT3JpZ2luYWxBbmltYXRpb24gPT09IHZvaWQgMCkgeyByZXBsYWNlT3JpZ2luYWxBbmltYXRpb24gPSB0cnVlOyB9XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxyXG4gICAgICAgICAgICBmcm9tU2tpbk5hbWU7XHJcbiAgICAgICAgICAgIHZhciBhcm1hdHVyZURhdGEgPSB0aGlzLmdldEFybWF0dXJlRGF0YShmcm9tQXJtYXRyZU5hbWUsIGZyb21EcmFnb25Cb25lc0RhdGFOYW1lKTtcclxuICAgICAgICAgICAgaWYgKCFhcm1hdHVyZURhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlQW5pbWF0aW9uKHRvQXJtYXR1cmUsIGFybWF0dXJlRGF0YSwgcmVwbGFjZU9yaWdpbmFsQW5pbWF0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEJhc2VGYWN0b3J5Ll9vYmplY3RQYXJzZXIgPSBudWxsO1xyXG4gICAgICAgIEJhc2VGYWN0b3J5Ll9iaW5hcnlQYXJzZXIgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBCYXNlRmFjdG9yeTtcclxuICAgIH0oKSk7XHJcbiAgICBkcmFnb25Cb25lcy5CYXNlRmFjdG9yeSA9IEJhc2VGYWN0b3J5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdmFyIEJ1aWxkQXJtYXR1cmVQYWNrYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEJ1aWxkQXJtYXR1cmVQYWNrYWdlKCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFOYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy50ZXh0dXJlQXRsYXNOYW1lID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5za2luID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEJ1aWxkQXJtYXR1cmVQYWNrYWdlO1xyXG4gICAgfSgpKTtcclxuICAgIGRyYWdvbkJvbmVzLkJ1aWxkQXJtYXR1cmVQYWNrYWdlID0gQnVpbGRBcm1hdHVyZVBhY2thZ2U7XHJcbn0pKGRyYWdvbkJvbmVzIHx8IChkcmFnb25Cb25lcyA9IHt9KSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGRyYWdvbkJvbmVzO1xyXG4iXSwic291cmNlUm9vdCI6Ii8ifQ==